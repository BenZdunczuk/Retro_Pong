
pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800f380  0800f380  00010380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8dc  0800f8dc  000113f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f8dc  0800f8dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8e4  0800f8e4  000113f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8e4  0800f8e4  000108e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f8e8  0800f8e8  000108e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003f4  20000000  0800f8ec  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c50  200003f4  0800fce0  000113f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002044  0800fce0  00012044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002215b  00000000  00000000  00011424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c19  00000000  00000000  0003357f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b0  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018e3  00000000  00000000  0003b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008622  00000000  00000000  0003cb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029e85  00000000  00000000  0004514d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102acd  00000000  00000000  0006efd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00171a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c6c  00000000  00000000  00171ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0017b750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003f4 	.word	0x200003f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f364 	.word	0x0800f364

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003f8 	.word	0x200003f8
 80001cc:	0800f364 	.word	0x0800f364

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <AccInit>:
#define LPF_ALPHA 0.3f       // 0,1 usuwa szumy o częstotliwości wyższej od 0,88 Hz

#include "accelerometer.h"

uint8_t AccInit(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	uint8_t idAcc = LSM303C_AccReadID();
 8001026:	f001 f899 	bl	800215c <LSM303C_AccReadID>
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if(idAcc != LMS303C_ACC_ID){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b41      	cmp	r3, #65	@ 0x41
 8001032:	d006      	beq.n	8001042 <AccInit+0x22>
		printf("ERR, acc id: 0x%X\r\n",idAcc);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4619      	mov	r1, r3
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <AccInit+0x44>)
 800103a:	f00a fd95 	bl	800bb68 <iprintf>
		return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e00c      	b.n	800105c <AccInit+0x3c>
	}

	COMPASS_StatusTypeDef stanAcc = BSP_COMPASS_Init();
 8001042:	f001 fdb7 	bl	8002bb4 <BSP_COMPASS_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	71bb      	strb	r3, [r7, #6]
	if(stanAcc == COMPASS_ERROR){
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d104      	bne.n	800105a <AccInit+0x3a>
		printf("ERR acc init\r\n");
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <AccInit+0x48>)
 8001052:	f00a fdf1 	bl	800bc38 <puts>
		return 2;
 8001056:	2302      	movs	r3, #2
 8001058:	e000      	b.n	800105c <AccInit+0x3c>
	}
	return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800f380 	.word	0x0800f380
 8001068:	0800f394 	.word	0x0800f394

0800106c <AccGetData>:

void AccGetData(float accDataFiltered[3]){
 800106c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001070:	b08a      	sub	sp, #40	@ 0x28
 8001072:	af04      	add	r7, sp, #16
 8001074:	6078      	str	r0, [r7, #4]
	int16_t accDataRaw[3] = {0};
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	809a      	strh	r2, [r3, #4]
	LSM303C_AccReadXYZ(accDataRaw);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4618      	mov	r0, r3
 8001086:	f001 f8ac 	bl	80021e2 <LSM303C_AccReadXYZ>
	for (int i = 0; i < 3; ++i) {
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e022      	b.n	80010d6 <AccGetData+0x6a>
		accDataFiltered[i] = LPF_ALPHA * accDataRaw[i] + (1.0f - LPF_ALPHA) * accDataFiltered[i];
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	3318      	adds	r3, #24
 8001096:	443b      	add	r3, r7
 8001098:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001128 <AccGetData+0xbc>
 80010a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800112c <AccGetData+0xc0>
 80010bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; ++i) {
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	ddd9      	ble.n	8001090 <AccGetData+0x24>
	}
	printf("A;%7.1f;%7.1f;%7.1f\n",accDataFiltered[0],accDataFiltered[1],accDataFiltered[2]);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa31 	bl	8000548 <__aeabi_f2d>
 80010e6:	4680      	mov	r8, r0
 80010e8:	4689      	mov	r9, r1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	4604      	mov	r4, r0
 80010f8:	460d      	mov	r5, r1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3308      	adds	r3, #8
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800110e:	e9cd 4500 	strd	r4, r5, [sp]
 8001112:	4642      	mov	r2, r8
 8001114:	464b      	mov	r3, r9
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <AccGetData+0xc4>)
 8001118:	f00a fd26 	bl	800bb68 <iprintf>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001126:	bf00      	nop
 8001128:	3e99999a 	.word	0x3e99999a
 800112c:	3f333333 	.word	0x3f333333
 8001130:	0800f3a4 	.word	0x0800f3a4

08001134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b82      	ldr	r3, [pc, #520]	@ (8001354 <MX_GPIO_Init+0x220>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	4a81      	ldr	r2, [pc, #516]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001156:	4b7f      	ldr	r3, [pc, #508]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	4b7c      	ldr	r3, [pc, #496]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a7b      	ldr	r2, [pc, #492]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b79      	ldr	r3, [pc, #484]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <MX_GPIO_Init+0x220>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a75      	ldr	r2, [pc, #468]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b73      	ldr	r3, [pc, #460]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a6f      	ldr	r2, [pc, #444]	@ (8001354 <MX_GPIO_Init+0x220>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b6d      	ldr	r3, [pc, #436]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a69      	ldr	r2, [pc, #420]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b67      	ldr	r3, [pc, #412]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	4b64      	ldr	r3, [pc, #400]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a63      	ldr	r2, [pc, #396]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b61      	ldr	r3, [pc, #388]	@ (8001354 <MX_GPIO_Init+0x220>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f240 2101 	movw	r1, #513	@ 0x201
 80011e0:	485d      	ldr	r0, [pc, #372]	@ (8001358 <MX_GPIO_Init+0x224>)
 80011e2:	f002 f967 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	210c      	movs	r1, #12
 80011ea:	485c      	ldr	r0, [pc, #368]	@ (800135c <MX_GPIO_Init+0x228>)
 80011ec:	f002 f962 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f240 1101 	movw	r1, #257	@ 0x101
 80011f6:	485a      	ldr	r0, [pc, #360]	@ (8001360 <MX_GPIO_Init+0x22c>)
 80011f8:	f002 f95c 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	4858      	ldr	r0, [pc, #352]	@ (8001364 <MX_GPIO_Init+0x230>)
 8001202:	f002 f957 	bl	80034b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin;
 8001206:	f240 2301 	movw	r3, #513	@ 0x201
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 031c 	add.w	r3, r7, #28
 800121c:	4619      	mov	r1, r3
 800121e:	484e      	ldr	r0, [pc, #312]	@ (8001358 <MX_GPIO_Init+0x224>)
 8001220:	f001 ff9e 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8001224:	232f      	movs	r3, #47	@ 0x2f
 8001226:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800122c:	2302      	movs	r3, #2
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f001 ff91 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800123e:	2310      	movs	r3, #16
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001242:	4b49      	ldr	r3, [pc, #292]	@ (8001368 <MX_GPIO_Init+0x234>)
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001254:	f001 ff84 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8001258:	2304      	movs	r3, #4
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	483b      	ldr	r0, [pc, #236]	@ (800135c <MX_GPIO_Init+0x228>)
 8001270:	f001 ff76 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127e:	2301      	movs	r3, #1
 8001280:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	4834      	ldr	r0, [pc, #208]	@ (8001360 <MX_GPIO_Init+0x22c>)
 800128e:	f001 ff67 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001298:	4b33      	ldr	r3, [pc, #204]	@ (8001368 <MX_GPIO_Init+0x234>)
 800129a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	482c      	ldr	r0, [pc, #176]	@ (8001358 <MX_GPIO_Init+0x224>)
 80012a8:	f001 ff5a 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 80012ac:	2305      	movs	r3, #5
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001368 <MX_GPIO_Init+0x234>)
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4829      	ldr	r0, [pc, #164]	@ (8001364 <MX_GPIO_Init+0x230>)
 80012c0:	f001 ff4e 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4822      	ldr	r0, [pc, #136]	@ (8001364 <MX_GPIO_Init+0x230>)
 80012dc:	f001 ff40 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80012e0:	2308      	movs	r3, #8
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4819      	ldr	r0, [pc, #100]	@ (800135c <MX_GPIO_Init+0x228>)
 80012f8:	f001 ff32 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80012fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001302:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <MX_GPIO_Init+0x234>)
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4812      	ldr	r0, [pc, #72]	@ (800135c <MX_GPIO_Init+0x228>)
 8001312:	f001 ff25 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	@ (8001360 <MX_GPIO_Init+0x22c>)
 800132e:	f001 ff17 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8001332:	2302      	movs	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_GPIO_Init+0x234>)
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4806      	ldr	r0, [pc, #24]	@ (8001360 <MX_GPIO_Init+0x22c>)
 8001346:	f001 ff0b 	bl	8003160 <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	48000800 	.word	0x48000800
 800135c:	48000400 	.word	0x48000400
 8001360:	48001000 	.word	0x48001000
 8001364:	48000c00 	.word	0x48000c00
 8001368:	10120000 	.word	0x10120000

0800136c <GyroInit>:
#include "gyroscope.h"

#define LPF_ALPHA 0.1f

uint8_t GyroInit(){
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	uint8_t idGyro = L3GD20_ReadID();
 8001372:	f000 fd06 	bl	8001d82 <L3GD20_ReadID>
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
	if(idGyro != I_AM_L3GD20){
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2bd4      	cmp	r3, #212	@ 0xd4
 800137e:	d006      	beq.n	800138e <GyroInit+0x22>
		printf("ERR, gyro id: 0x%X\r\n",idGyro);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4619      	mov	r1, r3
 8001384:	480a      	ldr	r0, [pc, #40]	@ (80013b0 <GyroInit+0x44>)
 8001386:	f00a fbef 	bl	800bb68 <iprintf>
		return 1;
 800138a:	2301      	movs	r3, #1
 800138c:	e00c      	b.n	80013a8 <GyroInit+0x3c>
	}

	uint8_t stanGyro = BSP_GYRO_Init();
 800138e:	f001 fc8d 	bl	8002cac <BSP_GYRO_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	71bb      	strb	r3, [r7, #6]
//	uint16_t gyroInit = 0b0001000000001111;
//	L3GD20_Init(gyroInit);
	if(stanGyro == GYRO_ERROR){
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d104      	bne.n	80013a6 <GyroInit+0x3a>
		printf("ERR gyro init\r\n");
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <GyroInit+0x48>)
 800139e:	f00a fc4b 	bl	800bc38 <puts>
		return 2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	e000      	b.n	80013a8 <GyroInit+0x3c>
	}
	return 0;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	0800f3bc 	.word	0x0800f3bc
 80013b4:	0800f3d4 	.word	0x0800f3d4

080013b8 <GyroGetData>:

void GyroGetData(float gyroDataFiltered[3]){
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b08a      	sub	sp, #40	@ 0x28
 80013be:	af04      	add	r7, sp, #16
 80013c0:	6078      	str	r0, [r7, #4]
	float gyroDataRaw[3] = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
	L3GD20_ReadXYZAngRate(gyroDataRaw);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fdf6 	bl	8001fc4 <L3GD20_ReadXYZAngRate>
	for (int i = 0; i < 3; ++i) {
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e01f      	b.n	800141e <GyroGetData+0x66>
		gyroDataFiltered[i] = LPF_ALPHA * gyroDataRaw[i] + (1.0f - LPF_ALPHA) * gyroDataFiltered[i];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	3318      	adds	r3, #24
 80013e4:	443b      	add	r3, r7
 80013e6:	3b10      	subs	r3, #16
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001470 <GyroGetData+0xb8>
 80013f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001474 <GyroGetData+0xbc>
 8001404:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; ++i) {
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2b02      	cmp	r3, #2
 8001422:	dddc      	ble.n	80013de <GyroGetData+0x26>
	}
	printf("G;%7.1f;%7.1f;%7.1f\n",gyroDataFiltered[0],gyroDataFiltered[1],gyroDataFiltered[2]);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4680      	mov	r8, r0
 8001430:	4689      	mov	r9, r1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3304      	adds	r3, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f885 	bl	8000548 <__aeabi_f2d>
 800143e:	4604      	mov	r4, r0
 8001440:	460d      	mov	r5, r1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3308      	adds	r3, #8
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f87d 	bl	8000548 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001456:	e9cd 4500 	strd	r4, r5, [sp]
 800145a:	4642      	mov	r2, r8
 800145c:	464b      	mov	r3, r9
 800145e:	4806      	ldr	r0, [pc, #24]	@ (8001478 <GyroGetData+0xc0>)
 8001460:	f00a fb82 	bl	800bb68 <iprintf>
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800146e:	bf00      	nop
 8001470:	3dcccccd 	.word	0x3dcccccd
 8001474:	3f666666 	.word	0x3f666666
 8001478:	0800f3e4 	.word	0x0800f3e4

0800147c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <MX_I2C1_Init+0x74>)
 8001482:	4a1c      	ldr	r2, [pc, #112]	@ (80014f4 <MX_I2C1_Init+0x78>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_I2C1_Init+0x74>)
 8001488:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <MX_I2C1_Init+0x7c>)
 800148a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <MX_I2C1_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_I2C1_Init+0x74>)
 8001494:	2201      	movs	r2, #1
 8001496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b6:	480e      	ldr	r0, [pc, #56]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014b8:	f002 f82e 	bl	8003518 <HAL_I2C_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014c2:	f000 f947 	bl	8001754 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c6:	2100      	movs	r1, #0
 80014c8:	4809      	ldr	r0, [pc, #36]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014ca:	f002 f8b4 	bl	8003636 <HAL_I2CEx_ConfigAnalogFilter>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d4:	f000 f93e 	bl	8001754 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_I2C1_Init+0x74>)
 80014dc:	f002 f8f6 	bl	80036cc <HAL_I2CEx_ConfigDigitalFilter>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014e6:	f000 f935 	bl	8001754 <Error_Handler>
  }

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000410 	.word	0x20000410
 80014f4:	40005400 	.word	0x40005400
 80014f8:	10909cec 	.word	0x10909cec

080014fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a17      	ldr	r2, [pc, #92]	@ (8001578 <HAL_I2C_MspInit+0x7c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d127      	bne.n	800156e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_I2C_MspInit+0x80>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	4a16      	ldr	r2, [pc, #88]	@ (800157c <HAL_I2C_MspInit+0x80>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_I2C_MspInit+0x80>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001536:	23c0      	movs	r3, #192	@ 0xc0
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	@ (8001580 <HAL_I2C_MspInit+0x84>)
 8001552:	f001 fe05 	bl	8003160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_I2C_MspInit+0x80>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_I2C_MspInit+0x80>)
 800155c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001560:	6593      	str	r3, [r2, #88]	@ 0x58
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_I2C_MspInit+0x80>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	@ 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40005400 	.word	0x40005400
 800157c:	40021000 	.word	0x40021000
 8001580:	48000400 	.word	0x48000400

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001588:	f001 fbf8 	bl	8002d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158c:	f000 f830 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001590:	f7ff fdd0 	bl	8001134 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001594:	f7ff ff72 	bl	800147c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001598:	f000 f8f0 	bl	800177c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800159c:	f000 fb22 	bl	8001be4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80015a0:	f000 faca 	bl	8001b38 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80015a4:	f008 fd0a 	bl	8009fbc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  printf(" - - Start Programu - - ");
 80015a8:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <main+0x60>)
 80015aa:	f00a fadd 	bl	800bb68 <iprintf>

//  extern USBD_HandleTypeDef hUsbDeviceFS;
  if(GyroInit()){Error_Handler();}
 80015ae:	f7ff fedd 	bl	800136c <GyroInit>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <main+0x38>
 80015b8:	f000 f8cc 	bl	8001754 <Error_Handler>
  if(AccInit()){Error_Handler();}
 80015bc:	f7ff fd30 	bl	8001020 <AccInit>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <main+0x46>
 80015c6:	f000 f8c5 	bl	8001754 <Error_Handler>

    /* USER CODE BEGIN 3 */
//	uint8_t message[] = "Hello\r\n";
//	CDC_Transmit_FS(message, strlen((char*)message));

	GyroGetData(filteredGyro);
 80015ca:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <main+0x64>)
 80015cc:	f7ff fef4 	bl	80013b8 <GyroGetData>
	AccGetData(filteredAcc);
 80015d0:	4806      	ldr	r0, [pc, #24]	@ (80015ec <main+0x68>)
 80015d2:	f7ff fd4b 	bl	800106c <AccGetData>

	HAL_Delay(1000);
 80015d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015da:	f001 fc4b 	bl	8002e74 <HAL_Delay>
	GyroGetData(filteredGyro);
 80015de:	bf00      	nop
 80015e0:	e7f3      	b.n	80015ca <main+0x46>
 80015e2:	bf00      	nop
 80015e4:	0800f3fc 	.word	0x0800f3fc
 80015e8:	2000045c 	.word	0x2000045c
 80015ec:	20000468 	.word	0x20000468

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0b8      	sub	sp, #224	@ 0xe0
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015fa:	2244      	movs	r2, #68	@ 0x44
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00a fc1c 	bl	800be3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2288      	movs	r2, #136	@ 0x88
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00a fc0e 	bl	800be3c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001620:	f003 f940 	bl	80048a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001624:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <SystemClock_Config+0x138>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	4a3f      	ldr	r2, [pc, #252]	@ (8001728 <SystemClock_Config+0x138>)
 800162c:	f023 0318 	bic.w	r3, r3, #24
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001634:	2314      	movs	r3, #20
 8001636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001640:	2301      	movs	r3, #1
 8001642:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800164c:	2360      	movs	r3, #96	@ 0x60
 800164e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001652:	2302      	movs	r3, #2
 8001654:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001658:	2301      	movs	r3, #1
 800165a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001664:	2328      	movs	r3, #40	@ 0x28
 8001666:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800166a:	2307      	movs	r3, #7
 800166c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001680:	4618      	mov	r0, r3
 8001682:	f003 f993 	bl	80049ac <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800168c:	f000 f862 	bl	8001754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001690:	230f      	movs	r3, #15
 8001692:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2303      	movs	r3, #3
 8001698:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80016b2:	2104      	movs	r1, #4
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fd61 	bl	800517c <HAL_RCC_ClockConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016c0:	f000 f848 	bl	8001754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80016c4:	f242 0342 	movw	r3, #8258	@ 0x2042
 80016c8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80016d2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80016d8:	2301      	movs	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80016dc:	2301      	movs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80016e0:	2318      	movs	r3, #24
 80016e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80016e4:	2307      	movs	r3, #7
 80016e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 ff45 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001704:	f000 f826 	bl	8001754 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001708:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800170c:	f003 f8e8 	bl	80048e0 <HAL_PWREx_ControlVoltageScaling>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8001716:	f000 f81d 	bl	8001754 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800171a:	f004 fa1f 	bl	8005b5c <HAL_RCCEx_EnableMSIPLLMode>
}
 800171e:	bf00      	nop
 8001720:	37e0      	adds	r7, #224	@ 0xe0
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 100);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b29a      	uxth	r2, r3
 800173c:	2364      	movs	r3, #100	@ 0x64
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	4803      	ldr	r0, [pc, #12]	@ (8001750 <_write+0x24>)
 8001742:	f004 ff85 	bl	8006650 <HAL_UART_Transmit>
//	CDC_Transmit_FS((uint8_t*)ptr,len);
    return len;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000528 	.word	0x20000528

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001758:	2104      	movs	r1, #4
 800175a:	4806      	ldr	r0, [pc, #24]	@ (8001774 <Error_Handler+0x20>)
 800175c:	f001 fec2 	bl	80034e4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001764:	f001 fb86 	bl	8002e74 <HAL_Delay>
	printf("ERR\r\n");
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <Error_Handler+0x24>)
 800176a:	f00a fa65 	bl	800bc38 <puts>

  /* USER CODE END Error_Handler_Debug */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	48000400 	.word	0x48000400
 8001778:	0800f418 	.word	0x0800f418

0800177c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <MX_SPI2_Init+0x74>)
 8001782:	4a1c      	ldr	r2, [pc, #112]	@ (80017f4 <MX_SPI2_Init+0x78>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <MX_SPI2_Init+0x74>)
 8001788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800178c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <MX_SPI2_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <MX_SPI2_Init+0x74>)
 8001796:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800179a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <MX_SPI2_Init+0x74>)
 800179e:	2202      	movs	r2, #2
 80017a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017b2:	2220      	movs	r2, #32
 80017b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017ca:	2207      	movs	r2, #7
 80017cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <MX_SPI2_Init+0x74>)
 80017dc:	f004 fba0 	bl	8005f20 <HAL_SPI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80017e6:	f7ff ffb5 	bl	8001754 <Error_Handler>
  }

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000474 	.word	0x20000474
 80017f4:	40003800 	.word	0x40003800

080017f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	@ 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a1b      	ldr	r2, [pc, #108]	@ (8001884 <HAL_SPI_MspInit+0x8c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12f      	bne.n	800187a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800181a:	4b1b      	ldr	r3, [pc, #108]	@ (8001888 <HAL_SPI_MspInit+0x90>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	4a1a      	ldr	r2, [pc, #104]	@ (8001888 <HAL_SPI_MspInit+0x90>)
 8001820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001824:	6593      	str	r3, [r2, #88]	@ 0x58
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_SPI_MspInit+0x90>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_SPI_MspInit+0x90>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <HAL_SPI_MspInit+0x90>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <HAL_SPI_MspInit+0x90>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800184a:	231a      	movs	r3, #26
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800185a:	2305      	movs	r3, #5
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4809      	ldr	r0, [pc, #36]	@ (800188c <HAL_SPI_MspInit+0x94>)
 8001866:	f001 fc7b 	bl	8003160 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2024      	movs	r0, #36	@ 0x24
 8001870:	f001 fbff 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001874:	2024      	movs	r0, #36	@ 0x24
 8001876:	f001 fc18 	bl	80030aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40003800 	.word	0x40003800
 8001888:	40021000 	.word	0x40021000
 800188c:	48000c00 	.word	0x48000c00

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <HAL_MspInit+0x44>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <HAL_MspInit+0x44>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a2:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_MspInit+0x44>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_MspInit+0x44>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_MspInit+0x44>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <HardFault_Handler+0x4>

080018ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	bf00      	nop
 80018fc:	e7fd      	b.n	80018fa <BusFault_Handler+0x4>

080018fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001902:	bf00      	nop
 8001904:	e7fd      	b.n	8001902 <UsageFault_Handler+0x4>

08001906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001934:	f001 fa7e 	bl	8002e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <SPI2_IRQHandler+0x10>)
 8001942:	f004 fb91 	bl	8006068 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000474 	.word	0x20000474

08001950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <USART2_IRQHandler+0x10>)
 8001956:	f004 ff0d 	bl	8006774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000528 	.word	0x20000528

08001964 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <OTG_FS_IRQHandler+0x10>)
 800196a:	f002 f84e 	bl	8003a0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20001af0 	.word	0x20001af0

08001978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_kill>:

int _kill(int pid, int sig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001992:	f00a fab5 	bl	800bf00 <__errno>
 8001996:	4603      	mov	r3, r0
 8001998:	2216      	movs	r2, #22
 800199a:	601a      	str	r2, [r3, #0]
  return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ba:	bf00      	nop
 80019bc:	e7fd      	b.n	80019ba <_exit+0x12>

080019be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e00a      	b.n	80019e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d0:	f3af 8000 	nop.w
 80019d4:	4601      	mov	r1, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	60ba      	str	r2, [r7, #8]
 80019dc:	b2ca      	uxtb	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <_read+0x12>
  }

  return len;
 80019ee:	687b      	ldr	r3, [r7, #4]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a20:	605a      	str	r2, [r3, #4]
  return 0;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_isatty>:

int _isatty(int file)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a68:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <_sbrk+0x5c>)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <_sbrk+0x60>)
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <_sbrk+0x64>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <_sbrk+0x68>)
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <_sbrk+0x64>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d207      	bcs.n	8001aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a90:	f00a fa36 	bl	800bf00 <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	220c      	movs	r2, #12
 8001a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e009      	b.n	8001ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <_sbrk+0x64>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <_sbrk+0x64>)
 8001ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20018000 	.word	0x20018000
 8001ac0:	00000400 	.word	0x00000400
 8001ac4:	200004d8 	.word	0x200004d8
 8001ac8:	20002048 	.word	0x20002048

08001acc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <SystemInit+0x64>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ad6:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <SystemInit+0x64>)
 8001ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <SystemInit+0x68>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <SystemInit+0x68>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <SystemInit+0x68>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <SystemInit+0x68>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <SystemInit+0x68>)
 8001af8:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001afc:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <SystemInit+0x68>)
 8001b04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <SystemInit+0x68>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a09      	ldr	r2, [pc, #36]	@ (8001b34 <SystemInit+0x68>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <SystemInit+0x68>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <SystemInit+0x64>)
 8001b1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b22:	609a      	str	r2, [r3, #8]
#endif
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	40021000 	.word	0x40021000

08001b38 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <MX_TIM6_Init+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001b4e:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b6a:	f004 fbaa 	bl	80062c2 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b74:	f7ff fdee 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_TIM6_Init+0x64>)
 8001b86:	f004 fc8d 	bl	80064a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b90:	f7ff fde0 	bl	8001754 <Error_Handler>
  }

}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200004dc 	.word	0x200004dc
 8001ba0:	40001000 	.word	0x40001000

08001ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_TIM_Base_MspInit+0x38>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10b      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bbc:	f043 0310 	orr.w	r3, r3, #16
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40001000 	.word	0x40001000
 8001be0:	40021000 	.word	0x40021000

08001be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <MX_USART2_UART_Init+0x5c>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_USART2_UART_Init+0x58>)
 8001c28:	f004 fcc4 	bl	80065b4 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c32:	f7ff fd8f 	bl	8001754 <Error_Handler>
  }

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000528 	.word	0x20000528
 8001c40:	40004400 	.word	0x40004400

08001c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <HAL_UART_MspInit+0x8c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d12f      	bne.n	8001cc6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c66:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a14      	ldr	r2, [pc, #80]	@ (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8a:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c96:	2360      	movs	r3, #96	@ 0x60
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <HAL_UART_MspInit+0x94>)
 8001cb2:	f001 fa55 	bl	8003160 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2026      	movs	r0, #38	@ 0x26
 8001cbc:	f001 f9d9 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc0:	2026      	movs	r0, #38	@ 0x26
 8001cc2:	f001 f9f2 	bl	80030aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40004400 	.word	0x40004400
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	48000c00 	.word	0x48000c00

08001cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce0:	f7ff fef4 	bl	8001acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ce4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ce6:	e003      	b.n	8001cf0 <LoopCopyDataInit>

08001ce8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cee:	3104      	adds	r1, #4

08001cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cf0:	480a      	ldr	r0, [pc, #40]	@ (8001d1c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cf4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cf6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cf8:	d3f6      	bcc.n	8001ce8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cfc:	e002      	b.n	8001d04 <LoopFillZerobss>

08001cfe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cfe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d00:	f842 3b04 	str.w	r3, [r2], #4

08001d04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <LoopForever+0x16>)
	cmp	r2, r3
 8001d06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d08:	d3f9      	bcc.n	8001cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f00a f8ff 	bl	800bf0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0e:	f7ff fc39 	bl	8001584 <main>

08001d12 <LoopForever>:

LoopForever:
    b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d14:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d18:	0800f8ec 	.word	0x0800f8ec
	ldr	r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d20:	200003f4 	.word	0x200003f4
	ldr	r2, =_sbss
 8001d24:	200003f4 	.word	0x200003f4
	ldr	r3, = _ebss
 8001d28:	20002044 	.word	0x20002044

08001d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_2_IRQHandler>

08001d2e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d3c:	f000 fe1a 	bl	8002974 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d46:	f107 030f 	add.w	r3, r7, #15
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 feb0 	bl	8002ab4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001d5e:	f107 030f 	add.w	r3, r7, #15
 8001d62:	2201      	movs	r2, #1
 8001d64:	2123      	movs	r1, #35	@ 0x23
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 fea4 	bl	8002ab4 <GYRO_IO_Write>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d88:	f000 fdf4 	bl	8002974 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001d8c:	1dfb      	adds	r3, r7, #7
 8001d8e:	2201      	movs	r2, #1
 8001d90:	210f      	movs	r1, #15
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 feca 	bl	8002b2c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001d98:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	2201      	movs	r2, #1
 8001dac:	2124      	movs	r1, #36	@ 0x24
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 febc 	bl	8002b2c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dbe:	1dfb      	adds	r3, r7, #7
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2124      	movs	r1, #36	@ 0x24
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fe75 	bl	8002ab4 <GYRO_IO_Write>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001de6:	f107 030f 	add.w	r3, r7, #15
 8001dea:	2201      	movs	r2, #1
 8001dec:	2120      	movs	r1, #32
 8001dee:	4618      	mov	r0, r3
 8001df0:	f000 fe60 	bl	8002ab4 <GYRO_IO_Write>
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e0e:	f107 030f 	add.w	r3, r7, #15
 8001e12:	2201      	movs	r2, #1
 8001e14:	2130      	movs	r1, #48	@ 0x30
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fe88 	bl	8002b2c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e1c:	f107 030e 	add.w	r3, r7, #14
 8001e20:	2201      	movs	r2, #1
 8001e22:	2122      	movs	r1, #34	@ 0x22
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fe81 	bl	8002b2c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	121b      	asrs	r3, r3, #8
 8001e3a:	b25a      	sxtb	r2, r3
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	4313      	orrs	r3, r2
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	f023 0320 	bic.w	r3, r3, #32
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	7bbb      	ldrb	r3, [r7, #14]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e5e:	f107 030f 	add.w	r3, r7, #15
 8001e62:	2201      	movs	r2, #1
 8001e64:	2130      	movs	r1, #48	@ 0x30
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fe24 	bl	8002ab4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e6c:	f107 030e 	add.w	r3, r7, #14
 8001e70:	2201      	movs	r2, #1
 8001e72:	2122      	movs	r1, #34	@ 0x22
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fe1d 	bl	8002ab4 <GYRO_IO_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e8c:	f107 030f 	add.w	r3, r7, #15
 8001e90:	2201      	movs	r2, #1
 8001e92:	2122      	movs	r1, #34	@ 0x22
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fe49 	bl	8002b2c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	e00c      	b.n	8001ed0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d109      	bne.n	8001ed0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f023 0308 	bic.w	r3, r3, #8
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ed0:	f107 030f 	add.w	r3, r7, #15
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2122      	movs	r1, #34	@ 0x22
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fdeb 	bl	8002ab4 <GYRO_IO_Write>
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ef0:	f107 030f 	add.w	r3, r7, #15
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2122      	movs	r1, #34	@ 0x22
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fe17 	bl	8002b2c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e009      	b.n	8001f28 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d106      	bne.n	8001f28 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	f023 0308 	bic.w	r3, r3, #8
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f28:	f107 030f 	add.w	r3, r7, #15
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2122      	movs	r1, #34	@ 0x22
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fdbf 	bl	8002ab4 <GYRO_IO_Write>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f48:	f107 030f 	add.w	r3, r7, #15
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2121      	movs	r1, #33	@ 0x21
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fdeb 	bl	8002b2c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f6a:	f107 030f 	add.w	r3, r7, #15
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2121      	movs	r1, #33	@ 0x21
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fd9e 	bl	8002ab4 <GYRO_IO_Write>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f8a:	f107 030f 	add.w	r3, r7, #15
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2124      	movs	r1, #36	@ 0x24
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fdca 	bl	8002b2c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	f023 0310 	bic.w	r3, r3, #16
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001fac:	f107 030f 	add.w	r3, r7, #15
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2124      	movs	r1, #36	@ 0x24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fd7d 	bl	8002ab4 <GYRO_IO_Write>
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001fee:	f107 030f 	add.w	r3, r7, #15
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2123      	movs	r1, #35	@ 0x23
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd98 	bl	8002b2c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	2206      	movs	r2, #6
 8002002:	2128      	movs	r1, #40	@ 0x28
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fd91 	bl	8002b2c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d121      	bne.n	8002058 <L3GD20_ReadXYZAngRate+0x94>
  {
    for(i=0; i<3; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
 8002018:	e01a      	b.n	8002050 <L3GD20_ReadXYZAngRate+0x8c>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	3301      	adds	r3, #1
 8002020:	3328      	adds	r3, #40	@ 0x28
 8002022:	443b      	add	r3, r7
 8002024:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b29b      	uxth	r3, r3
 800202c:	6a3a      	ldr	r2, [r7, #32]
 800202e:	0052      	lsls	r2, r2, #1
 8002030:	3228      	adds	r2, #40	@ 0x28
 8002032:	443a      	add	r2, r7
 8002034:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002038:	4413      	add	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	b21a      	sxth	r2, r3
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	3328      	adds	r3, #40	@ 0x28
 8002044:	443b      	add	r3, r7
 8002046:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	3301      	adds	r3, #1
 800204e:	623b      	str	r3, [r7, #32]
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	2b02      	cmp	r3, #2
 8002054:	dde1      	ble.n	800201a <L3GD20_ReadXYZAngRate+0x56>
 8002056:	e020      	b.n	800209a <L3GD20_ReadXYZAngRate+0xd6>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	e01a      	b.n	8002094 <L3GD20_ReadXYZAngRate+0xd0>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	3328      	adds	r3, #40	@ 0x28
 8002064:	443b      	add	r3, r7
 8002066:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b29b      	uxth	r3, r3
 800206e:	6a3a      	ldr	r2, [r7, #32]
 8002070:	0052      	lsls	r2, r2, #1
 8002072:	3201      	adds	r2, #1
 8002074:	3228      	adds	r2, #40	@ 0x28
 8002076:	443a      	add	r2, r7
 8002078:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800207c:	4413      	add	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21a      	sxth	r2, r3
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	3328      	adds	r3, #40	@ 0x28
 8002088:	443b      	add	r3, r7
 800208a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	3301      	adds	r3, #1
 8002092:	623b      	str	r3, [r7, #32]
 8002094:	6a3b      	ldr	r3, [r7, #32]
 8002096:	2b02      	cmp	r3, #2
 8002098:	dde1      	ble.n	800205e <L3GD20_ReadXYZAngRate+0x9a>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d00c      	beq.n	80020be <L3GD20_ReadXYZAngRate+0xfa>
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	dc0d      	bgt.n	80020c4 <L3GD20_ReadXYZAngRate+0x100>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <L3GD20_ReadXYZAngRate+0xee>
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d003      	beq.n	80020b8 <L3GD20_ReadXYZAngRate+0xf4>
 80020b0:	e008      	b.n	80020c4 <L3GD20_ReadXYZAngRate+0x100>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <L3GD20_ReadXYZAngRate+0x144>)
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80020b6:	e005      	b.n	80020c4 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <L3GD20_ReadXYZAngRate+0x148>)
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80020bc:	e002      	b.n	80020c4 <L3GD20_ReadXYZAngRate+0x100>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <L3GD20_ReadXYZAngRate+0x14c>)
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80020c2:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	623b      	str	r3, [r7, #32]
 80020c8:	e016      	b.n	80020f8 <L3GD20_ReadXYZAngRate+0x134>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	3328      	adds	r3, #40	@ 0x28
 80020d0:	443b      	add	r3, r7
 80020d2:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	3301      	adds	r3, #1
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	dde5      	ble.n	80020ca <L3GD20_ReadXYZAngRate+0x106>
  }
}
 80020fe:	bf00      	nop
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	@ 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	410c0000 	.word	0x410c0000
 800210c:	418c0000 	.word	0x418c0000
 8002110:	428c0000 	.word	0x428c0000

08002114 <LSM303C_AccInit>:
  * @brief  Set LSM303C Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303C_AccInit(uint16_t InitStruct)
{  
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  ACCELERO_IO_Init();
 8002122:	f000 fae3 	bl	80026ec <ACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	4619      	mov	r1, r3
 800212e:	2020      	movs	r0, #32
 8002130:	f000 fb08 	bl	8002744 <ACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, ctrl);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	4619      	mov	r1, r3
 8002140:	2023      	movs	r0, #35	@ 0x23
 8002142:	f000 faff 	bl	8002744 <ACCELERO_IO_Write>
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <LSM303C_AccDeInit>:
  * @brief  LSM303C Accelerometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_AccDeInit(void)
{  
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LSM303C_AccReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_AccReadID(void)
{  
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  ACCELERO_IO_Init();
 8002166:	f000 fac1 	bl	80026ec <ACCELERO_IO_Init>
  
  /* Enabled SPI/I2C read communication */
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, 0x5);
 800216a:	2105      	movs	r1, #5
 800216c:	2023      	movs	r0, #35	@ 0x23
 800216e:	f000 fae9 	bl	8002744 <ACCELERO_IO_Write>
  
  /* Read value at Who am I register address */
  ctrl = ACCELERO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 8002172:	200f      	movs	r0, #15
 8002174:	f000 fb18 	bl	80027a8 <ACCELERO_IO_Read>
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 800217c:	79fb      	ldrb	r3, [r7, #7]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <LSM303C_AccLowPower>:
  * @param  Mode equal to LSM303C_ACC_ODR_OFF means enable Low Power Mode, otherwise Output data rate is set.
  *         This parameter can be a value of @ref Acc_OutPut_DataRate_Selection
  * @retval None 
  */
void LSM303C_AccLowPower(uint16_t Mode)
{  
 8002186:	b580      	push	{r7, lr}
 8002188:	b084      	sub	sp, #16
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = ACCELERO_IO_Read(LSM303C_CTRL_REG1_A);
 8002194:	2020      	movs	r0, #32
 8002196:	f000 fb07 	bl	80027a8 <ACCELERO_IO_Read>
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_ACC_ODR_BITPOSITION);
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a4:	73fb      	strb	r3, [r7, #15]

  /* Set Power down */
  ctrl |= (uint8_t)Mode;
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	4619      	mov	r1, r3
 80021b4:	2020      	movs	r0, #32
 80021b6:	f000 fac5 	bl	8002744 <ACCELERO_IO_Write>
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <LSM303C_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303C_AccFilterConfig(uint8_t FilterStruct) 
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  
//  /* Read CTRL_REG2 register */
//  tmpreg = ACCELERO_IO_Read(LSM303C_CTRL_REG2_A);
//  
//  tmpreg &= 0x0C;
  tmpreg = FilterStruct;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG2_A, tmpreg);
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	4619      	mov	r1, r3
 80021d4:	2021      	movs	r0, #33	@ 0x21
 80021d6:	f000 fab5 	bl	8002744 <ACCELERO_IO_Write>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <LSM303C_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_AccReadXYZ(int16_t* pData)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b088      	sub	sp, #32
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80021ea:	2300      	movs	r3, #0
 80021ec:	82bb      	strh	r3, [r7, #20]
  uint8_t buffer[6];
  uint8_t i = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 80021f2:	2301      	movs	r3, #1
 80021f4:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = ACCELERO_IO_Read(LSM303C_CTRL_REG4_A);
 80021f6:	2023      	movs	r0, #35	@ 0x23
 80021f8:	f000 fad6 	bl	80027a8 <ACCELERO_IO_Read>
 80021fc:	4603      	mov	r3, r0
 80021fe:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = ACCELERO_IO_Read(LSM303C_CTRL_REG5_A);
 8002200:	2024      	movs	r0, #36	@ 0x24
 8002202:	f000 fad1 	bl	80027a8 <ACCELERO_IO_Read>
 8002206:	4603      	mov	r3, r0
 8002208:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = ACCELERO_IO_Read(LSM303C_OUT_X_L_A); 
 800220a:	2028      	movs	r0, #40	@ 0x28
 800220c:	f000 facc 	bl	80027a8 <ACCELERO_IO_Read>
 8002210:	4603      	mov	r3, r0
 8002212:	733b      	strb	r3, [r7, #12]
  buffer[1] = ACCELERO_IO_Read(LSM303C_OUT_X_H_A);
 8002214:	2029      	movs	r0, #41	@ 0x29
 8002216:	f000 fac7 	bl	80027a8 <ACCELERO_IO_Read>
 800221a:	4603      	mov	r3, r0
 800221c:	737b      	strb	r3, [r7, #13]
  buffer[2] = ACCELERO_IO_Read(LSM303C_OUT_Y_L_A);
 800221e:	202a      	movs	r0, #42	@ 0x2a
 8002220:	f000 fac2 	bl	80027a8 <ACCELERO_IO_Read>
 8002224:	4603      	mov	r3, r0
 8002226:	73bb      	strb	r3, [r7, #14]
  buffer[3] = ACCELERO_IO_Read(LSM303C_OUT_Y_H_A);
 8002228:	202b      	movs	r0, #43	@ 0x2b
 800222a:	f000 fabd 	bl	80027a8 <ACCELERO_IO_Read>
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]
  buffer[4] = ACCELERO_IO_Read(LSM303C_OUT_Z_L_A);
 8002232:	202c      	movs	r0, #44	@ 0x2c
 8002234:	f000 fab8 	bl	80027a8 <ACCELERO_IO_Read>
 8002238:	4603      	mov	r3, r0
 800223a:	743b      	strb	r3, [r7, #16]
  buffer[5] = ACCELERO_IO_Read(LSM303C_OUT_Z_H_A);
 800223c:	202d      	movs	r0, #45	@ 0x2d
 800223e:	f000 fab3 	bl	80027a8 <ACCELERO_IO_Read>
 8002242:	4603      	mov	r3, r0
 8002244:	747b      	strb	r3, [r7, #17]
  
  for(i=0; i<3; i++)
 8002246:	2300      	movs	r3, #0
 8002248:	77fb      	strb	r3, [r7, #31]
 800224a:	e01a      	b.n	8002282 <LSM303C_AccReadXYZ+0xa0>
  {
    pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800224c:	7ffb      	ldrb	r3, [r7, #31]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	3301      	adds	r3, #1
 8002252:	3320      	adds	r3, #32
 8002254:	443b      	add	r3, r7
 8002256:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	7ffa      	ldrb	r2, [r7, #31]
 8002260:	0052      	lsls	r2, r2, #1
 8002262:	3220      	adds	r2, #32
 8002264:	443a      	add	r2, r7
 8002266:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800226a:	4413      	add	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	b212      	sxth	r2, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	3320      	adds	r3, #32
 8002276:	443b      	add	r3, r7
 8002278:	f823 2c08 	strh.w	r2, [r3, #-8]
  for(i=0; i<3; i++)
 800227c:	7ffb      	ldrb	r3, [r7, #31]
 800227e:	3301      	adds	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d9e1      	bls.n	800224c <LSM303C_AccReadXYZ+0x6a>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303C_ACC_FULLSCALE_8G)
 8002288:	7d3b      	ldrb	r3, [r7, #20]
 800228a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800228e:	2b30      	cmp	r3, #48	@ 0x30
 8002290:	d00c      	beq.n	80022ac <LSM303C_AccReadXYZ+0xca>
 8002292:	2b30      	cmp	r3, #48	@ 0x30
 8002294:	dc0d      	bgt.n	80022b2 <LSM303C_AccReadXYZ+0xd0>
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <LSM303C_AccReadXYZ+0xbe>
 800229a:	2b20      	cmp	r3, #32
 800229c:	d003      	beq.n	80022a6 <LSM303C_AccReadXYZ+0xc4>
 800229e:	e008      	b.n	80022b2 <LSM303C_AccReadXYZ+0xd0>
  {
  case LSM303C_ACC_FULLSCALE_2G:
    sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 80022a0:	2301      	movs	r3, #1
 80022a2:	77bb      	strb	r3, [r7, #30]
    break;
 80022a4:	e005      	b.n	80022b2 <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_4G:
    sensitivity = LSM303C_ACC_SENSITIVITY_4G;
 80022a6:	2302      	movs	r3, #2
 80022a8:	77bb      	strb	r3, [r7, #30]
    break;
 80022aa:	e002      	b.n	80022b2 <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_8G:
    sensitivity = LSM303C_ACC_SENSITIVITY_8G;
 80022ac:	2304      	movs	r3, #4
 80022ae:	77bb      	strb	r3, [r7, #30]
    break;
 80022b0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	77fb      	strb	r3, [r7, #31]
 80022b6:	e014      	b.n	80022e2 <LSM303C_AccReadXYZ+0x100>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80022b8:	7ffb      	ldrb	r3, [r7, #31]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	3320      	adds	r3, #32
 80022be:	443b      	add	r3, r7
 80022c0:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	7fbb      	ldrb	r3, [r7, #30]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	fb12 f303 	smulbb	r3, r2, r3
 80022ce:	b299      	uxth	r1, r3
 80022d0:	7ffb      	ldrb	r3, [r7, #31]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	b20a      	sxth	r2, r1
 80022da:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80022dc:	7ffb      	ldrb	r3, [r7, #31]
 80022de:	3301      	adds	r3, #1
 80022e0:	77fb      	strb	r3, [r7, #31]
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d9e7      	bls.n	80022b8 <LSM303C_AccReadXYZ+0xd6>
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <LSM303C_MagInit>:
  * @param  LSM303C_InitStruct: pointer to a LSM303C_MagInitTypeDef structure 
  *         that contains the configuration setting for the LSM303C.
  * @retval None
  */
void LSM303C_MagInit(MAGNETO_InitTypeDef LSM303C_InitStruct)
{  
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	463b      	mov	r3, r7
 80022fa:	e883 0003 	stmia.w	r3, {r0, r1}
  MAGNETO_IO_Write(LSM303C_CTRL_REG1_M, LSM303C_InitStruct.Register1);
 80022fe:	783b      	ldrb	r3, [r7, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	2020      	movs	r0, #32
 8002304:	f000 fac0 	bl	8002888 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG2_M, LSM303C_InitStruct.Register2);
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	4619      	mov	r1, r3
 800230c:	2021      	movs	r0, #33	@ 0x21
 800230e:	f000 fabb 	bl	8002888 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, LSM303C_InitStruct.Register3);
 8002312:	78bb      	ldrb	r3, [r7, #2]
 8002314:	4619      	mov	r1, r3
 8002316:	2022      	movs	r0, #34	@ 0x22
 8002318:	f000 fab6 	bl	8002888 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG4_M, LSM303C_InitStruct.Register4);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	4619      	mov	r1, r3
 8002320:	2023      	movs	r0, #35	@ 0x23
 8002322:	f000 fab1 	bl	8002888 <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG5_M, LSM303C_InitStruct.Register5);
 8002326:	793b      	ldrb	r3, [r7, #4]
 8002328:	4619      	mov	r1, r3
 800232a:	2024      	movs	r0, #36	@ 0x24
 800232c:	f000 faac 	bl	8002888 <MAGNETO_IO_Write>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <LSM303C_MagDeInit>:
  * @brief  LSM303C Magnetometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_MagDeInit(void)
{  
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LSM303C_MagReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_MagReadID(void)
{  
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* Low level init */
  MAGNETO_IO_Init();
 800234a:	f000 fa71 	bl	8002830 <MAGNETO_IO_Init>
  
  /* Enabled the SPI/I2C read operation */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, 0x84);
 800234e:	2184      	movs	r1, #132	@ 0x84
 8002350:	2022      	movs	r0, #34	@ 0x22
 8002352:	f000 fa99 	bl	8002888 <MAGNETO_IO_Write>
  
  /* Read value at Who am I register address */
  return MAGNETO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 8002356:	200f      	movs	r0, #15
 8002358:	f000 fac8 	bl	80028ec <MAGNETO_IO_Read>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}

08002362 <LSM303C_MagLowPower>:
  * @param  Mode equal to LSM303C_MAG_POWERDOWN2_MODE means enable deepest Low Power Mode, otherwise other mode is set.
  *         This parameter can be a value of @ref Mag_Operation_Mode
  * @retval None 
  */
void LSM303C_MagLowPower(uint16_t Mode)
{  
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = MAGNETO_IO_Read(LSM303C_CTRL_REG3_M);
 8002370:	2022      	movs	r0, #34	@ 0x22
 8002372:	f000 fabb 	bl	80028ec <MAGNETO_IO_Read>
 8002376:	4603      	mov	r3, r0
 8002378:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_MAG_SELECTION_MODE);
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	73fb      	strb	r3, [r7, #15]

  /* Set mode */
  ctrl |= (uint8_t)Mode;
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	4313      	orrs	r3, r2
 800238a:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, ctrl);
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	4619      	mov	r1, r3
 8002390:	2022      	movs	r0, #34	@ 0x22
 8002392:	f000 fa79 	bl	8002888 <MAGNETO_IO_Write>
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <LSM303C_MagReadXYZ>:
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_MagReadXYZ(int16_t* pData)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  uint8_t ctrlx;
  uint8_t buffer[6];
  uint8_t i=0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the magnetometer control register content */
  ctrlx = MAGNETO_IO_Read(LSM303C_CTRL_REG4_M);
 80023aa:	2023      	movs	r0, #35	@ 0x23
 80023ac:	f000 fa9e 	bl	80028ec <MAGNETO_IO_Read>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73bb      	strb	r3, [r7, #14]

  /* Read output register X, Y & Z magnetometer */
  buffer[0] = MAGNETO_IO_Read(LSM303C_OUT_X_L_M); 
 80023b4:	2028      	movs	r0, #40	@ 0x28
 80023b6:	f000 fa99 	bl	80028ec <MAGNETO_IO_Read>
 80023ba:	4603      	mov	r3, r0
 80023bc:	723b      	strb	r3, [r7, #8]
  buffer[1] = MAGNETO_IO_Read(LSM303C_OUT_X_H_M);
 80023be:	2029      	movs	r0, #41	@ 0x29
 80023c0:	f000 fa94 	bl	80028ec <MAGNETO_IO_Read>
 80023c4:	4603      	mov	r3, r0
 80023c6:	727b      	strb	r3, [r7, #9]
  buffer[2] = MAGNETO_IO_Read(LSM303C_OUT_Y_L_M);
 80023c8:	202a      	movs	r0, #42	@ 0x2a
 80023ca:	f000 fa8f 	bl	80028ec <MAGNETO_IO_Read>
 80023ce:	4603      	mov	r3, r0
 80023d0:	72bb      	strb	r3, [r7, #10]
  buffer[3] = MAGNETO_IO_Read(LSM303C_OUT_Y_H_M);
 80023d2:	202b      	movs	r0, #43	@ 0x2b
 80023d4:	f000 fa8a 	bl	80028ec <MAGNETO_IO_Read>
 80023d8:	4603      	mov	r3, r0
 80023da:	72fb      	strb	r3, [r7, #11]
  buffer[4] = MAGNETO_IO_Read(LSM303C_OUT_Z_L_M);
 80023dc:	202c      	movs	r0, #44	@ 0x2c
 80023de:	f000 fa85 	bl	80028ec <MAGNETO_IO_Read>
 80023e2:	4603      	mov	r3, r0
 80023e4:	733b      	strb	r3, [r7, #12]
  buffer[5] = MAGNETO_IO_Read(LSM303C_OUT_Z_H_M);
 80023e6:	202d      	movs	r0, #45	@ 0x2d
 80023e8:	f000 fa80 	bl	80028ec <MAGNETO_IO_Read>
 80023ec:	4603      	mov	r3, r0
 80023ee:	737b      	strb	r3, [r7, #13]
  
  /* Check in the control register4 the data alignment*/
  if((ctrlx & LSM303C_MAG_BLE_MSB)) 
 80023f0:	7bbb      	ldrb	r3, [r7, #14]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d020      	beq.n	800243c <LSM303C_MagReadXYZ+0x9e>
  {
    for(i=0; i<3; i++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e019      	b.n	8002434 <LSM303C_MagReadXYZ+0x96>
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	3310      	adds	r3, #16
 8002406:	443b      	add	r3, r7
 8002408:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	0052      	lsls	r2, r2, #1
 8002414:	3201      	adds	r2, #1
 8002416:	3210      	adds	r2, #16
 8002418:	443a      	add	r2, r7
 800241a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800241e:	4413      	add	r3, r2
 8002420:	b299      	uxth	r1, r3
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	b20a      	sxth	r2, r1
 800242c:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3301      	adds	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d9e2      	bls.n	8002400 <LSM303C_MagReadXYZ+0x62>
    for(i=0; i<3; i++)
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
    }
  }
}
 800243a:	e01f      	b.n	800247c <LSM303C_MagReadXYZ+0xde>
    for(i=0; i<3; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e019      	b.n	8002476 <LSM303C_MagReadXYZ+0xd8>
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	3301      	adds	r3, #1
 8002448:	3310      	adds	r3, #16
 800244a:	443b      	add	r3, r7
 800244c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	3210      	adds	r2, #16
 800245a:	443a      	add	r2, r7
 800245c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002460:	4413      	add	r3, r2
 8002462:	b299      	uxth	r1, r3
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	b20a      	sxth	r2, r1
 800246e:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	3301      	adds	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d9e2      	bls.n	8002442 <LSM303C_MagReadXYZ+0xa4>
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002488:	481a      	ldr	r0, [pc, #104]	@ (80024f4 <SPIx_Init+0x70>)
 800248a:	f003 fef7 	bl	800627c <HAL_SPI_GetState>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d12c      	bne.n	80024ee <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002494:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <SPIx_Init+0x70>)
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <SPIx_Init+0x74>)
 8002498:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <SPIx_Init+0x70>)
 800249c:	2210      	movs	r2, #16
 800249e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80024a0:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <SPIx_Init+0x70>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024a6:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <SPIx_Init+0x70>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <SPIx_Init+0x70>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <SPIx_Init+0x70>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80024b8:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <SPIx_Init+0x70>)
 80024ba:	2207      	movs	r2, #7
 80024bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <SPIx_Init+0x70>)
 80024c0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80024c4:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <SPIx_Init+0x70>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <SPIx_Init+0x70>)
 80024ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d2:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <SPIx_Init+0x70>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <SPIx_Init+0x70>)
 80024dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024e0:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80024e2:	4804      	ldr	r0, [pc, #16]	@ (80024f4 <SPIx_Init+0x70>)
 80024e4:	f000 f80a 	bl	80024fc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80024e8:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <SPIx_Init+0x70>)
 80024ea:	f003 fd19 	bl	8005f20 <HAL_SPI_Init>
  }
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200005a8 	.word	0x200005a8
 80024f8:	40003800 	.word	0x40003800

080024fc <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8002504:	4b15      	ldr	r3, [pc, #84]	@ (800255c <SPIx_MspInit+0x60>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <SPIx_MspInit+0x60>)
 800250a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <SPIx_MspInit+0x60>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <SPIx_MspInit+0x60>)
 800251e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002520:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <SPIx_MspInit+0x60>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <SPIx_MspInit+0x60>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002534:	231a      	movs	r3, #26
 8002536:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002540:	2302      	movs	r3, #2
 8002542:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002544:	2305      	movs	r3, #5
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4619      	mov	r1, r3
 800254e:	4804      	ldr	r0, [pc, #16]	@ (8002560 <SPIx_MspInit+0x64>)
 8002550:	f000 fe06 	bl	8003160 <HAL_GPIO_Init>
}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	@ 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	48000c00 	.word	0x48000c00

08002564 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval none.
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte;

  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 800256e:	4b20      	ldr	r3, [pc, #128]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800257c:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800257e:	bf00      	nop
 8002580:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d1f8      	bne.n	8002580 <SPIx_WriteRead+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 800258e:	4b18      	ldr	r3, [pc, #96]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	330c      	adds	r3, #12
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	701a      	strb	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8002598:	bf00      	nop
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d1f8      	bne.n	800259a <SPIx_WriteRead+0x36>
  receivedbyte = *((__IO uint8_t *)&SpiHandle.Instance->DR);
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	73fb      	strb	r3, [r7, #15]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_FTLVL) != SPI_FTLVL_EMPTY);
 80025b2:	bf00      	nop
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f8      	bne.n	80025b4 <SPIx_WriteRead+0x50>
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80025c2:	bf00      	nop
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ce:	2b80      	cmp	r3, #128	@ 0x80
 80025d0:	d0f8      	beq.n	80025c4 <SPIx_WriteRead+0x60>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 80025d2:	4b07      	ldr	r3, [pc, #28]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <SPIx_WriteRead+0x8c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025e0:	601a      	str	r2, [r3, #0]

  return receivedbyte;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	200005a8 	.word	0x200005a8

080025f4 <SPIx_Write>:
  * @brief  Sends a Byte through the SPI interface.
  * @param  Byte : Byte to send.
  * @retval none.
  */
static void SPIx_Write(uint8_t Byte)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 80025fe:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <SPIx_Write+0x60>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b13      	ldr	r3, [pc, #76]	@ (8002654 <SPIx_Write+0x60>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800260c:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800260e:	bf00      	nop
 8002610:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <SPIx_Write+0x60>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d1f8      	bne.n	8002610 <SPIx_Write+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <SPIx_Write+0x60>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	330c      	adds	r3, #12
 8002624:	79fa      	ldrb	r2, [r7, #7]
 8002626:	701a      	strb	r2, [r3, #0]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 8002628:	bf00      	nop
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <SPIx_Write+0x60>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002634:	2b80      	cmp	r3, #128	@ 0x80
 8002636:	d0f8      	beq.n	800262a <SPIx_Write+0x36>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <SPIx_Write+0x60>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b05      	ldr	r3, [pc, #20]	@ (8002654 <SPIx_Write+0x60>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002646:	601a      	str	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	200005a8 	.word	0x200005a8

08002658 <SPIx_Read>:
/**
  * @brief  Receives a Byte from the SPI bus.
  * @retval The received byte value
  */
static uint8_t SPIx_Read(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
  uint8_t receivedbyte;

  __HAL_SPI_ENABLE(&SpiHandle);
 800265e:	4b22      	ldr	r3, [pc, #136]	@ (80026e8 <SPIx_Read+0x90>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <SPIx_Read+0x90>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800266c:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800266e:	f3bf 8f4f 	dsb	sy
}
 8002672:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002674:	f3bf 8f4f 	dsb	sy
}
 8002678:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800267a:	f3bf 8f4f 	dsb	sy
}
 800267e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002680:	f3bf 8f4f 	dsb	sy
}
 8002684:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002686:	f3bf 8f4f 	dsb	sy
}
 800268a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800268c:	f3bf 8f4f 	dsb	sy
}
 8002690:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002692:	f3bf 8f4f 	dsb	sy
}
 8002696:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002698:	f3bf 8f4f 	dsb	sy
}
 800269c:	bf00      	nop
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(&SpiHandle);
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <SPIx_Read+0x90>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <SPIx_Read+0x90>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ac:	601a      	str	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 80026ae:	bf00      	nop
 80026b0:	4b0d      	ldr	r3, [pc, #52]	@ (80026e8 <SPIx_Read+0x90>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d1f8      	bne.n	80026b0 <SPIx_Read+0x58>
  /* read the received data */
  receivedbyte = *(__IO uint8_t *)&SpiHandle.Instance->DR;
 80026be:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <SPIx_Read+0x90>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]

  /* Wait for the BSY flag reset */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 80026c8:	bf00      	nop
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <SPIx_Read+0x90>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d4:	2b80      	cmp	r3, #128	@ 0x80
 80026d6:	d0f8      	beq.n	80026ca <SPIx_Read+0x72>


  return receivedbyte;
 80026d8:	79fb      	ldrb	r3, [r7, #7]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	200005a8 	.word	0x200005a8

080026ec <ACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS/ACCELEROMETER io interface.
  * @retval None
  */
void ACCELERO_IO_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 80026f2:	4b12      	ldr	r3, [pc, #72]	@ (800273c <ACCELERO_IO_Init+0x50>)
 80026f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f6:	4a11      	ldr	r2, [pc, #68]	@ (800273c <ACCELERO_IO_Init+0x50>)
 80026f8:	f043 0310 	orr.w	r3, r3, #16
 80026fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026fe:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <ACCELERO_IO_Init+0x50>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800270a:	2301      	movs	r3, #1
 800270c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800270e:	2301      	movs	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002716:	2303      	movs	r3, #3
 8002718:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	4619      	mov	r1, r3
 800271e:	4808      	ldr	r0, [pc, #32]	@ (8002740 <ACCELERO_IO_Init+0x54>)
 8002720:	f000 fd1e 	bl	8003160 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8002724:	2201      	movs	r2, #1
 8002726:	2101      	movs	r1, #1
 8002728:	4805      	ldr	r0, [pc, #20]	@ (8002740 <ACCELERO_IO_Init+0x54>)
 800272a:	f000 fec3 	bl	80034b4 <HAL_GPIO_WritePin>

  SPIx_Init();
 800272e:	f7ff fea9 	bl	8002484 <SPIx_Init>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	48001000 	.word	0x48001000

08002744 <ACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void ACCELERO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	460a      	mov	r2, r1
 800274e:	71fb      	strb	r3, [r7, #7]
 8002750:	4613      	mov	r3, r2
 8002752:	71bb      	strb	r3, [r7, #6]
  ACCELERO_CS_LOW();
 8002754:	2200      	movs	r2, #0
 8002756:	2101      	movs	r1, #1
 8002758:	4811      	ldr	r0, [pc, #68]	@ (80027a0 <ACCELERO_IO_Write+0x5c>)
 800275a:	f000 feab 	bl	80034b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <ACCELERO_IO_Write+0x60>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <ACCELERO_IO_Write+0x60>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	4b0d      	ldr	r3, [pc, #52]	@ (80027a4 <ACCELERO_IO_Write+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <ACCELERO_IO_Write+0x60>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800277c:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff37 	bl	80025f4 <SPIx_Write>
  SPIx_Write(Value);
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff33 	bl	80025f4 <SPIx_Write>
  ACCELERO_CS_HIGH();
 800278e:	2201      	movs	r2, #1
 8002790:	2101      	movs	r1, #1
 8002792:	4803      	ldr	r0, [pc, #12]	@ (80027a0 <ACCELERO_IO_Write+0x5c>)
 8002794:	f000 fe8e 	bl	80034b4 <HAL_GPIO_WritePin>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	48001000 	.word	0x48001000
 80027a4:	200005a8 	.word	0x200005a8

080027a8 <ACCELERO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS / ACCELEROMETER.
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t ACCELERO_IO_Read(uint8_t RegisterAddr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  RegisterAddr = RegisterAddr | ((uint8_t)0x80);
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027b8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_CS_LOW();
 80027ba:	2200      	movs	r2, #0
 80027bc:	2101      	movs	r1, #1
 80027be:	481a      	ldr	r0, [pc, #104]	@ (8002828 <ACCELERO_IO_Read+0x80>)
 80027c0:	f000 fe78 	bl	80034b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	4b15      	ldr	r3, [pc, #84]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	4b14      	ldr	r3, [pc, #80]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80027e2:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff04 	bl	80025f4 <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <ACCELERO_IO_Read+0x84>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <ACCELERO_IO_Read+0x84>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800280a:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 800280c:	f7ff ff24 	bl	8002658 <SPIx_Read>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
  ACCELERO_CS_HIGH();
 8002814:	2201      	movs	r2, #1
 8002816:	2101      	movs	r1, #1
 8002818:	4803      	ldr	r0, [pc, #12]	@ (8002828 <ACCELERO_IO_Read+0x80>)
 800281a:	f000 fe4b 	bl	80034b4 <HAL_GPIO_WritePin>
  return val;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	48001000 	.word	0x48001000
 800282c:	200005a8 	.word	0x200005a8

08002830 <MAGNETO_IO_Init>:
/**
  * @brief  Configures COMPASS/MAGNETO SPI interface.
  * @retval None
  */
void MAGNETO_IO_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 8002836:	4b12      	ldr	r3, [pc, #72]	@ (8002880 <MAGNETO_IO_Init+0x50>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283a:	4a11      	ldr	r2, [pc, #68]	@ (8002880 <MAGNETO_IO_Init+0x50>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002842:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <MAGNETO_IO_Init+0x50>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 800284e:	2301      	movs	r3, #1
 8002850:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002852:	2301      	movs	r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4808      	ldr	r0, [pc, #32]	@ (8002884 <MAGNETO_IO_Init+0x54>)
 8002864:	f000 fc7c 	bl	8003160 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 8002868:	2201      	movs	r2, #1
 800286a:	2101      	movs	r1, #1
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <MAGNETO_IO_Init+0x54>)
 800286e:	f000 fe21 	bl	80034b4 <HAL_GPIO_WritePin>

  SPIx_Init();
 8002872:	f7ff fe07 	bl	8002484 <SPIx_Init>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	48000800 	.word	0x48000800

08002888 <MAGNETO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS/MAGNETO register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void MAGNETO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	460a      	mov	r2, r1
 8002892:	71fb      	strb	r3, [r7, #7]
 8002894:	4613      	mov	r3, r2
 8002896:	71bb      	strb	r3, [r7, #6]
  MAGNETO_CS_LOW();
 8002898:	2200      	movs	r2, #0
 800289a:	2101      	movs	r1, #1
 800289c:	4811      	ldr	r0, [pc, #68]	@ (80028e4 <MAGNETO_IO_Write+0x5c>)
 800289e:	f000 fe09 	bl	80034b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 80028a2:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <MAGNETO_IO_Write+0x60>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <MAGNETO_IO_Write+0x60>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <MAGNETO_IO_Write+0x60>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <MAGNETO_IO_Write+0x60>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80028c0:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe95 	bl	80025f4 <SPIx_Write>
  SPIx_Write(Value);
 80028ca:	79bb      	ldrb	r3, [r7, #6]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fe91 	bl	80025f4 <SPIx_Write>
  MAGNETO_CS_HIGH();
 80028d2:	2201      	movs	r2, #1
 80028d4:	2101      	movs	r1, #1
 80028d6:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <MAGNETO_IO_Write+0x5c>)
 80028d8:	f000 fdec 	bl	80034b4 <HAL_GPIO_WritePin>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	48000800 	.word	0x48000800
 80028e8:	200005a8 	.word	0x200005a8

080028ec <MAGNETO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS/MAGNETO.
  * @param  RegisterAddr : specifies the COMPASS/MAGNETO internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t MAGNETO_IO_Read(uint8_t RegisterAddr)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_CS_LOW();
 80028f6:	2200      	movs	r2, #0
 80028f8:	2101      	movs	r1, #1
 80028fa:	481c      	ldr	r0, [pc, #112]	@ (800296c <MAGNETO_IO_Read+0x80>)
 80028fc:	f000 fdda 	bl	80034b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800291e:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr | 0x80);
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fe63 	bl	80025f4 <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 800292e:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <MAGNETO_IO_Read+0x84>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800294c:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 800294e:	f7ff fe83 	bl	8002658 <SPIx_Read>
 8002952:	4603      	mov	r3, r0
 8002954:	73fb      	strb	r3, [r7, #15]
  MAGNETO_CS_HIGH();
 8002956:	2201      	movs	r2, #1
 8002958:	2101      	movs	r1, #1
 800295a:	4804      	ldr	r0, [pc, #16]	@ (800296c <MAGNETO_IO_Read+0x80>)
 800295c:	f000 fdaa 	bl	80034b4 <HAL_GPIO_WritePin>
  return val;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	48000800 	.word	0x48000800
 8002970:	200005a8 	.word	0x200005a8

08002974 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYRO SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0

  /* Case GYRO not used in the demonstration software except being set in
     low power mode.
     To avoid access conflicts with accelerometer and magnetometer,
     initialize  XL_CS and MAG_CS pins then deselect these I/O */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 800297a:	4b49      	ldr	r3, [pc, #292]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297e:	4a48      	ldr	r2, [pc, #288]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002980:	f043 0310 	orr.w	r3, r3, #16
 8002984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002986:	4b46      	ldr	r3, [pc, #280]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 8002992:	2301      	movs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	483e      	ldr	r0, [pc, #248]	@ (8002aa4 <GYRO_IO_Init+0x130>)
 80029aa:	f000 fbd9 	bl	8003160 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 80029ae:	2201      	movs	r2, #1
 80029b0:	2101      	movs	r1, #1
 80029b2:	483c      	ldr	r0, [pc, #240]	@ (8002aa4 <GYRO_IO_Init+0x130>)
 80029b4:	f000 fd7e 	bl	80034b4 <HAL_GPIO_WritePin>

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 80029b8:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029bc:	4a38      	ldr	r2, [pc, #224]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029c4:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 80029d0:	2301      	movs	r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80029d4:	2301      	movs	r3, #1
 80029d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4830      	ldr	r0, [pc, #192]	@ (8002aa8 <GYRO_IO_Init+0x134>)
 80029e8:	f000 fbba 	bl	8003160 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 80029ec:	2201      	movs	r2, #1
 80029ee:	2101      	movs	r1, #1
 80029f0:	482d      	ldr	r0, [pc, #180]	@ (8002aa8 <GYRO_IO_Init+0x134>)
 80029f2:	f000 fd5f 	bl	80034b4 <HAL_GPIO_WritePin>


  /* Configure the Gyroscope Control pins ---------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 80029f6:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	4a29      	ldr	r2, [pc, #164]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 80029fc:	f043 0308 	orr.w	r3, r3, #8
 8002a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a02:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002a12:	2301      	movs	r3, #1
 8002a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4821      	ldr	r0, [pc, #132]	@ (8002aac <GYRO_IO_Init+0x138>)
 8002a26:	f000 fb9b 	bl	8003160 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2180      	movs	r1, #128	@ 0x80
 8002a2e:	481f      	ldr	r0, [pc, #124]	@ (8002aac <GYRO_IO_Init+0x138>)
 8002a30:	f000 fd40 	bl	80034b4 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT1_GPIO_CLK_ENABLE();
 8002a34:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a38:	4a19      	ldr	r2, [pc, #100]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a40:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN;
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT1_GPIO_PORT, &GPIO_InitStructure);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4812      	ldr	r0, [pc, #72]	@ (8002aac <GYRO_IO_Init+0x138>)
 8002a64:	f000 fb7c 	bl	8003160 <HAL_GPIO_Init>

  GYRO_INT2_GPIO_CLK_ENABLE();
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <GYRO_IO_Init+0x12c>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = GYRO_INT2_PIN;
 8002a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT2_GPIO_PORT, &GPIO_InitStructure);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4808      	ldr	r0, [pc, #32]	@ (8002ab0 <GYRO_IO_Init+0x13c>)
 8002a8e:	f000 fb67 	bl	8003160 <HAL_GPIO_Init>

  SPIx_Init();
 8002a92:	f7ff fcf7 	bl	8002484 <SPIx_Init>

}
 8002a96:	bf00      	nop
 8002a98:	3728      	adds	r7, #40	@ 0x28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	48001000 	.word	0x48001000
 8002aa8:	48000800 	.word	0x48000800
 8002aac:	48000c00 	.word	0x48000c00
 8002ab0:	48000400 	.word	0x48000400

08002ab4 <GYRO_IO_Write>:
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8002ac4:	883b      	ldrh	r3, [r7, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d903      	bls.n	8002ad2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2180      	movs	r1, #128	@ 0x80
 8002ad6:	4813      	ldr	r0, [pc, #76]	@ (8002b24 <GYRO_IO_Write+0x70>)
 8002ad8:	f000 fcec 	bl	80034b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8002adc:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <GYRO_IO_Write+0x74>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	@ (8002b28 <GYRO_IO_Write+0x74>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002aea:	601a      	str	r2, [r3, #0]

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fd38 	bl	8002564 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8002af4:	e00a      	b.n	8002b0c <GYRO_IO_Write+0x58>
  {
    SPIx_WriteRead(*pBuffer);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fd32 	bl	8002564 <SPIx_WriteRead>
    NumByteToWrite--;
 8002b00:	883b      	ldrh	r3, [r7, #0]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002b0c:	883b      	ldrh	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f1      	bne.n	8002af6 <GYRO_IO_Write+0x42>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002b12:	2201      	movs	r2, #1
 8002b14:	2180      	movs	r1, #128	@ 0x80
 8002b16:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <GYRO_IO_Write+0x70>)
 8002b18:	f000 fccc 	bl	80034b4 <HAL_GPIO_WritePin>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	48000c00 	.word	0x48000c00
 8002b28:	200005a8 	.word	0x200005a8

08002b2c <GYRO_IO_Read>:
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	70fb      	strb	r3, [r7, #3]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8002b3c:	883b      	ldrh	r3, [r7, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d904      	bls.n	8002b4c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002b48:	70fb      	strb	r3, [r7, #3]
 8002b4a:	e003      	b.n	8002b54 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b52:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002b54:	2200      	movs	r2, #0
 8002b56:	2180      	movs	r1, #128	@ 0x80
 8002b58:	4814      	ldr	r0, [pc, #80]	@ (8002bac <GYRO_IO_Read+0x80>)
 8002b5a:	f000 fcab 	bl	80034b4 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_2LINES(&SpiHandle);
 8002b5e:	4b14      	ldr	r3, [pc, #80]	@ (8002bb0 <GYRO_IO_Read+0x84>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <GYRO_IO_Read+0x84>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002b6c:	601a      	str	r2, [r3, #0]
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fcf7 	bl	8002564 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8002b76:	e00c      	b.n	8002b92 <GYRO_IO_Read+0x66>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff fcf3 	bl	8002564 <SPIx_WriteRead>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002b86:	883b      	ldrh	r3, [r7, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8002b92:	883b      	ldrh	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ef      	bne.n	8002b78 <GYRO_IO_Read+0x4c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2180      	movs	r1, #128	@ 0x80
 8002b9c:	4803      	ldr	r0, [pc, #12]	@ (8002bac <GYRO_IO_Read+0x80>)
 8002b9e:	f000 fc89 	bl	80034b4 <HAL_GPIO_WritePin>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	48000c00 	.word	0x48000c00
 8002bb0:	200005a8 	.word	0x200005a8

08002bb4 <BSP_COMPASS_Init>:
/**
  * @brief  Initialize the COMPASS.
  * @retval COMPASS_OK or COMPASS_ERROR
  */
COMPASS_StatusTypeDef BSP_COMPASS_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
  COMPASS_StatusTypeDef ret = COMPASS_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	77fb      	strb	r3, [r7, #31]
  uint16_t ctrl = 0x0000;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	83bb      	strh	r3, [r7, #28]
  ACCELERO_InitTypeDef LSM303C_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303C_FilterStructure;
  MAGNETO_InitTypeDef LSM303C_InitStructureMag;

  if (Lsm303cDrv_accelero.ReadID() != LMS303C_ACC_ID)
 8002bc2:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <BSP_COMPASS_Init+0xe8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4798      	blx	r3
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b41      	cmp	r3, #65	@ 0x41
 8002bcc:	d002      	beq.n	8002bd4 <BSP_COMPASS_Init+0x20>
  {
    ret = COMPASS_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	e040      	b.n	8002c56 <BSP_COMPASS_Init+0xa2>
  }
  else
  {
    /* Initialize the COMPASS accelerometer driver structure */
    AccelerometerDrv = &Lsm303cDrv_accelero;
 8002bd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ca0 <BSP_COMPASS_Init+0xec>)
 8002bd6:	4a31      	ldr	r2, [pc, #196]	@ (8002c9c <BSP_COMPASS_Init+0xe8>)
 8002bd8:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS accelerometer structure */
    LSM303C_InitStructure.AccOutput_DataRate = LSM303C_ACC_ODR_50_HZ;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	757b      	strb	r3, [r7, #21]
    LSM303C_InitStructure.Axes_Enable = LSM303C_ACC_AXES_ENABLE;
 8002bde:	2307      	movs	r3, #7
 8002be0:	75bb      	strb	r3, [r7, #22]
    LSM303C_InitStructure.AccFull_Scale = LSM303C_ACC_FULLSCALE_2G;
 8002be2:	2300      	movs	r3, #0
 8002be4:	76bb      	strb	r3, [r7, #26]
    LSM303C_InitStructure.BlockData_Update = LSM303C_ACC_BDU_CONTINUOUS;
 8002be6:	2300      	movs	r3, #0
 8002be8:	763b      	strb	r3, [r7, #24]
    LSM303C_InitStructure.High_Resolution = LSM303C_ACC_HR_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	75fb      	strb	r3, [r7, #23]
    LSM303C_InitStructure.Communication_Mode = LSM303C_ACC_SPI_MODE;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	76fb      	strb	r3, [r7, #27]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002bf2:	7dfa      	ldrb	r2, [r7, #23]
 8002bf4:	7d7b      	ldrb	r3, [r7, #21]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002bfa:	7dbb      	ldrb	r3, [r7, #22]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002c00:	7e3b      	ldrb	r3, [r7, #24]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	83bb      	strh	r3, [r7, #28]

    ctrl |= (LSM303C_InitStructure.AccFull_Scale | LSM303C_InitStructure.Communication_Mode) << 8;
 8002c08:	7eba      	ldrb	r2, [r7, #26]
 8002c0a:	7efb      	ldrb	r3, [r7, #27]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	b21b      	sxth	r3, r3
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	b21a      	sxth	r2, r3
 8002c16:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	b21b      	sxth	r3, r3
 8002c1e:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <BSP_COMPASS_Init+0xec>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	8bba      	ldrh	r2, [r7, #28]
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4798      	blx	r3

    /* Fill the COMPASS accelerometer HPF structure */
    LSM303C_FilterStructure.HighPassFilter_Mode_Selection = LSM303C_ACC_HPM_NORMAL_MODE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	733b      	strb	r3, [r7, #12]
    LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303C_ACC_DFC1_ODRDIV50;
 8002c30:	2300      	movs	r3, #0
 8002c32:	737b      	strb	r3, [r7, #13]
    LSM303C_FilterStructure.HighPassFilter_Stat = LSM303C_ACC_HPI2S_INT1_DISABLE | LSM303C_ACC_HPI2S_INT2_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	747b      	strb	r3, [r7, #17]

    /* Configure MEMS: mode, cutoff frequency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002c38:	7b3a      	ldrb	r2, [r7, #12]
                     LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency | \
 8002c3a:	7b7b      	ldrb	r3, [r7, #13]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	b2da      	uxtb	r2, r3
                     LSM303C_FilterStructure.HighPassFilter_Stat);
 8002c40:	7c7b      	ldrb	r3, [r7, #17]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002c48:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <BSP_COMPASS_Init+0xec>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4e:	8bba      	ldrh	r2, [r7, #28]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4610      	mov	r0, r2
 8002c54:	4798      	blx	r3
  }

  if (Lsm303cDrv_magneto.ReadID() != LMS303C_MAG_ID)
 8002c56:	4b13      	ldr	r3, [pc, #76]	@ (8002ca4 <BSP_COMPASS_Init+0xf0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	4798      	blx	r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b3d      	cmp	r3, #61	@ 0x3d
 8002c60:	d002      	beq.n	8002c68 <BSP_COMPASS_Init+0xb4>
  {
    ret = COMPASS_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e013      	b.n	8002c90 <BSP_COMPASS_Init+0xdc>
  }
  else
  {
    /* Initialize the COMPASS magnetometer driver structure */
    MagnetoDrv = &Lsm303cDrv_magneto;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <BSP_COMPASS_Init+0xf4>)
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <BSP_COMPASS_Init+0xf0>)
 8002c6c:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS magnetometer structure */
    LSM303C_InitStructureMag.Register1 = LSM303C_MAG_TEMPSENSOR_DISABLE | LSM303C_MAG_OM_XY_ULTRAHIGH | LSM303C_MAG_ODR_40_HZ;
 8002c6e:	2378      	movs	r3, #120	@ 0x78
 8002c70:	713b      	strb	r3, [r7, #4]
    LSM303C_InitStructureMag.Register2 = LSM303C_MAG_FS_16_GA | LSM303C_MAG_REBOOT_DEFAULT | LSM303C_MAG_SOFT_RESET_DEFAULT;
 8002c72:	2360      	movs	r3, #96	@ 0x60
 8002c74:	717b      	strb	r3, [r7, #5]
    LSM303C_InitStructureMag.Register3 = LSM303C_MAG_SPI_MODE | LSM303C_MAG_CONFIG_NORMAL_MODE | LSM303C_MAG_CONTINUOUS_MODE;
 8002c76:	2304      	movs	r3, #4
 8002c78:	71bb      	strb	r3, [r7, #6]
    LSM303C_InitStructureMag.Register4 = LSM303C_MAG_OM_Z_ULTRAHIGH | LSM303C_MAG_BLE_LSB;
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	71fb      	strb	r3, [r7, #7]
    LSM303C_InitStructureMag.Register5 = LSM303C_MAG_BDU_CONTINUOUS;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	723b      	strb	r3, [r7, #8]
    /* Configure the COMPASS magnetometer main parameters */
    MagnetoDrv->Init(LSM303C_InitStructureMag);
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <BSP_COMPASS_Init+0xf4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1d3a      	adds	r2, r7, #4
 8002c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c8e:	4798      	blx	r3
  }

  return ret;
 8002c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000038 	.word	0x20000038
 8002ca0:	2000060c 	.word	0x2000060c
 8002ca4:	2000006c 	.word	0x2000006c
 8002ca8:	20000610 	.word	0x20000610

08002cac <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure = {0, 0};
 8002cba:	2300      	movs	r3, #0
 8002cbc:	703b      	strb	r3, [r7, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d74 <BSP_GYRO_Init+0xc8>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4798      	blx	r3
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2bd4      	cmp	r3, #212	@ 0xd4
 8002ccc:	d005      	beq.n	8002cda <BSP_GYRO_Init+0x2e>
 8002cce:	4b29      	ldr	r3, [pc, #164]	@ (8002d74 <BSP_GYRO_Init+0xc8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	4798      	blx	r3
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2bd5      	cmp	r3, #213	@ 0xd5
 8002cd8:	d145      	bne.n	8002d66 <BSP_GYRO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <BSP_GYRO_Init+0xcc>)
 8002cdc:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <BSP_GYRO_Init+0xc8>)
 8002cde:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8002ce8:	2307      	movs	r3, #7
 8002cea:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8002cec:	2330      	movs	r3, #48	@ 0x30
 8002cee:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002cfc:	793a      	ldrb	r2, [r7, #4]
 8002cfe:	797b      	ldrb	r3, [r7, #5]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002d04:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002d12:	7a3a      	ldrb	r2, [r7, #8]
 8002d14:	7a7b      	ldrb	r3, [r7, #9]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8002d1a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	89bb      	ldrh	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002d2a:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <BSP_GYRO_Init+0xcc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	89ba      	ldrh	r2, [r7, #12]
 8002d32:	4610      	mov	r0, r2
 8002d34:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8002d36:	2300      	movs	r3, #0
 8002d38:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002d3e:	783a      	ldrb	r2, [r7, #0]
                      L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002d40:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((L3GD20_FilterStructure.HighPassFilter_Mode_Selection | \
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	81bb      	strh	r3, [r7, #12]

    /* Configure component filter */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <BSP_GYRO_Init+0xcc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	89ba      	ldrh	r2, [r7, #12]
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	4610      	mov	r0, r2
 8002d54:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <BSP_GYRO_Init+0xcc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	2010      	movs	r0, #16
 8002d5e:	4798      	blx	r3

    ret = GYRO_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e001      	b.n	8002d6a <BSP_GYRO_Init+0xbe>
  }
  else
  {
    ret = GYRO_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000004 	.word	0x20000004
 8002d78:	20000614 	.word	0x20000614

08002d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <HAL_Init+0x3c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <HAL_Init+0x3c>)
 8002d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f000 f962 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f000 f80f 	bl	8002dbc <HAL_InitTick>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	71fb      	strb	r3, [r7, #7]
 8002da8:	e001      	b.n	8002dae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002daa:	f7fe fd71 	bl	8001890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dae:	79fb      	ldrb	r3, [r7, #7]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40022000 	.word	0x40022000

08002dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002dc8:	4b17      	ldr	r3, [pc, #92]	@ (8002e28 <HAL_InitTick+0x6c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d023      	beq.n	8002e18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <HAL_InitTick+0x70>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <HAL_InitTick+0x6c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 f96d 	bl	80030c6 <HAL_SYSTICK_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d809      	bhi.n	8002e0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f000 f937 	bl	8003072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e04:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <HAL_InitTick+0x74>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	e007      	b.n	8002e1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
 8002e10:	e004      	b.n	8002e1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e001      	b.n	8002e1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	200000a4 	.word	0x200000a4
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	200000a0 	.word	0x200000a0

08002e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_IncTick+0x20>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x24>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <HAL_IncTick+0x24>)
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	200000a4 	.word	0x200000a4
 8002e58:	20000618 	.word	0x20000618

08002e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e60:	4b03      	ldr	r3, [pc, #12]	@ (8002e70 <HAL_GetTick+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000618 	.word	0x20000618

08002e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7ff ffee 	bl	8002e5c <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d005      	beq.n	8002e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_Delay+0x44>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4413      	add	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9a:	bf00      	nop
 8002e9c:	f7ff ffde 	bl	8002e5c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d8f7      	bhi.n	8002e9c <HAL_Delay+0x28>
  {
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200000a4 	.word	0x200000a4

08002ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	@ (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f08:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <__NVIC_GetPriorityGrouping+0x18>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 0307 	and.w	r3, r3, #7
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db0b      	blt.n	8002f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4907      	ldr	r1, [pc, #28]	@ (8002f58 <__NVIC_EnableIRQ+0x38>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2001      	movs	r0, #1
 8002f42:	fa00 f202 	lsl.w	r2, r0, r2
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	@ (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	@ (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	@ 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	@ (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f7ff ff8e 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff29 	bl	8002ebc <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff3e 	bl	8002f04 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff31 	bl	8002f20 <__NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffa2 	bl	8003018 <SysTick_Config>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d005      	beq.n	8003102 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
 8003100:	e029      	b.n	8003156 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 020e 	bic.w	r2, r2, #14
 8003110:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f003 021c 	and.w	r2, r3, #28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
    }
  }
  return status;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316e:	e17f      	b.n	8003470 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2101      	movs	r1, #1
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa01 f303 	lsl.w	r3, r1, r3
 800317c:	4013      	ands	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8171 	beq.w	800346a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d00b      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d007      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800319c:	2b11      	cmp	r3, #17
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b12      	cmp	r3, #18
 80031a6:	d130      	bne.n	800320a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031de:	2201      	movs	r2, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 0201 	and.w	r2, r3, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b03      	cmp	r3, #3
 8003214:	d118      	bne.n	8003248 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x128>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	6939      	ldr	r1, [r7, #16]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80ac 	beq.w	800346a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b5f      	ldr	r3, [pc, #380]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	4a5e      	ldr	r2, [pc, #376]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	6613      	str	r3, [r2, #96]	@ 0x60
 800331e:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_GPIO_Init+0x330>)
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800332a:	4a5a      	ldr	r2, [pc, #360]	@ (8003494 <HAL_GPIO_Init+0x334>)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003354:	d025      	beq.n	80033a2 <HAL_GPIO_Init+0x242>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4f      	ldr	r2, [pc, #316]	@ (8003498 <HAL_GPIO_Init+0x338>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01f      	beq.n	800339e <HAL_GPIO_Init+0x23e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4e      	ldr	r2, [pc, #312]	@ (800349c <HAL_GPIO_Init+0x33c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_GPIO_Init+0x23a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4d      	ldr	r2, [pc, #308]	@ (80034a0 <HAL_GPIO_Init+0x340>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x236>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4c      	ldr	r2, [pc, #304]	@ (80034a4 <HAL_GPIO_Init+0x344>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x232>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4b      	ldr	r2, [pc, #300]	@ (80034a8 <HAL_GPIO_Init+0x348>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4a      	ldr	r2, [pc, #296]	@ (80034ac <HAL_GPIO_Init+0x34c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x22a>
 8003386:	2306      	movs	r3, #6
 8003388:	e00c      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800338a:	2307      	movs	r3, #7
 800338c:	e00a      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800338e:	2305      	movs	r3, #5
 8003390:	e008      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 8003392:	2304      	movs	r3, #4
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 8003396:	2303      	movs	r3, #3
 8003398:	e004      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800339a:	2302      	movs	r3, #2
 800339c:	e002      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_GPIO_Init+0x244>
 80033a2:	2300      	movs	r3, #0
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	f002 0203 	and.w	r2, r2, #3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4093      	lsls	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033b4:	4937      	ldr	r1, [pc, #220]	@ (8003494 <HAL_GPIO_Init+0x334>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	3302      	adds	r3, #2
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033c2:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e6:	4a32      	ldr	r2, [pc, #200]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033ec:	4b30      	ldr	r3, [pc, #192]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003410:	4a27      	ldr	r2, [pc, #156]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003416:	4b26      	ldr	r3, [pc, #152]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800343a:	4a1d      	ldr	r2, [pc, #116]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003440:	4b1b      	ldr	r3, [pc, #108]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003464:	4a12      	ldr	r2, [pc, #72]	@ (80034b0 <HAL_GPIO_Init+0x350>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	f47f ae78 	bne.w	8003170 <HAL_GPIO_Init+0x10>
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40010000 	.word	0x40010000
 8003498:	48000400 	.word	0x48000400
 800349c:	48000800 	.word	0x48000800
 80034a0:	48000c00 	.word	0x48000c00
 80034a4:	48001000 	.word	0x48001000
 80034a8:	48001400 	.word	0x48001400
 80034ac:	48001800 	.word	0x48001800
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
 80034c0:	4613      	mov	r3, r2
 80034c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c4:	787b      	ldrb	r3, [r7, #1]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ca:	887a      	ldrh	r2, [r7, #2]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d0:	e002      	b.n	80034d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	041a      	lsls	r2, r3, #16
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43d9      	mvns	r1, r3
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	400b      	ands	r3, r1
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
}
 800350c:	bf00      	nop
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e081      	b.n	800362e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd ffdc 	bl	80014fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	@ 0x24
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f022 0201 	bic.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003568:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003578:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e006      	b.n	80035a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800359e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d104      	bne.n	80035b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	ea42 0103 	orr.w	r1, r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69d9      	ldr	r1, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	d138      	bne.n	80036be <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003656:	2302      	movs	r3, #2
 8003658:	e032      	b.n	80036c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2224      	movs	r2, #36	@ 0x24
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003688:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d139      	bne.n	8003756 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e033      	b.n	8003758 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	@ 0x24
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800371e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	b08f      	sub	sp, #60	@ 0x3c
 8003768:	af0a      	add	r7, sp, #40	@ 0x28
 800376a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e116      	b.n	80039a4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f006 fe05 	bl	800a3a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f003 feac 	bl	8007512 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	687e      	ldr	r6, [r7, #4]
 80037c2:	466d      	mov	r5, sp
 80037c4:	f106 0410 	add.w	r4, r6, #16
 80037c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80037d8:	1d33      	adds	r3, r6, #4
 80037da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f003 fd98 	bl	8007312 <USB_CoreInit>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0d7      	b.n	80039a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f003 fe9a 	bl	8007534 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	e04a      	b.n	800389c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	333d      	adds	r3, #61	@ 0x3d
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	333c      	adds	r3, #60	@ 0x3c
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	b298      	uxth	r0, r3
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3342      	adds	r3, #66	@ 0x42
 8003842:	4602      	mov	r2, r0
 8003844:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	333f      	adds	r3, #63	@ 0x3f
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3348      	adds	r3, #72	@ 0x48
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3350      	adds	r3, #80	@ 0x50
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	3301      	adds	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3af      	bcc.n	8003806 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	e044      	b.n	8003936 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	3301      	adds	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	429a      	cmp	r2, r3
 800393e:	d3b5      	bcc.n	80038ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	687e      	ldr	r6, [r7, #4]
 8003948:	466d      	mov	r5, sp
 800394a:	f106 0410 	add.w	r4, r6, #16
 800394e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800395a:	e885 0003 	stmia.w	r5, {r0, r1}
 800395e:	1d33      	adds	r3, r6, #4
 8003960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f003 fe10 	bl	8007588 <USB_DevInit>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e014      	b.n	80039a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	2b01      	cmp	r3, #1
 8003990:	d102      	bne.n	8003998 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 ff62 	bl	800485c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f004 fd92 	bl	80084c6 <USB_DevDisconnect>

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_PCD_Start+0x1c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e01c      	b.n	8003a02 <HAL_PCD_Start+0x56>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fd81 	bl	80074f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f004 fd46 	bl	8008484 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a0a:	b590      	push	{r4, r7, lr}
 8003a0c:	b08d      	sub	sp, #52	@ 0x34
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 fe04 	bl	800862e <USB_GetMode>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 838f 	bne.w	800414c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 fd68 	bl	8008508 <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8385 	beq.w	800414a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f004 fd5f 	bl	8008508 <USB_ReadInterrupts>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f002 0202 	and.w	r2, r2, #2
 8003a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f004 fd4d 	bl	8008508 <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d161      	bne.n	8003b3c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003aae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ab2:	d124      	bne.n	8003afe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d035      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6a38      	ldr	r0, [r7, #32]
 8003ad4:	f004 fbb3 	bl	800823e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ae4:	441a      	add	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af6:	441a      	add	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	619a      	str	r2, [r3, #24]
 8003afc:	e016      	b.n	8003b2c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b04:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b08:	d110      	bne.n	8003b2c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003b10:	2208      	movs	r2, #8
 8003b12:	4619      	mov	r1, r3
 8003b14:	6a38      	ldr	r0, [r7, #32]
 8003b16:	f004 fb92 	bl	800823e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b26:	441a      	add	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0210 	orr.w	r2, r2, #16
 8003b3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f004 fce1 	bl	8008508 <USB_ReadInterrupts>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b50:	d16e      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fce7 	bl	800852e <USB_ReadDevAllOutEpInterrupt>
 8003b60:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b62:	e062      	b.n	8003c2a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d057      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 fd0c 	bl	8008596 <USB_ReadDevOutEPInterrupt>
 8003b7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	2301      	movs	r3, #1
 8003b9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fd82 	bl	80046a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00c      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fdbe 	bl	8004744 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bde:	461a      	mov	r2, r3
 8003be0:	2310      	movs	r3, #16
 8003be2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d008      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	3301      	adds	r3, #1
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d199      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fc67 	bl	8008508 <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c44:	f040 8087 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f004 fc88 	bl	8008562 <USB_ReadDevAllInEpInterrupt>
 8003c52:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003c58:	e07a      	b.n	8003d50 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d06f      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 fcaf 	bl	80085d2 <USB_ReadDevInEPInterrupt>
 8003c74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f006 fc02 	bl	800a4c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d008      	beq.n	8003cde <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2308      	movs	r3, #8
 8003cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2310      	movs	r3, #16
 8003cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d10:	461a      	mov	r2, r3
 8003d12:	2340      	movs	r3, #64	@ 0x40
 8003d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2302      	movs	r3, #2
 8003d30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fc29 	bl	8004596 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	3301      	adds	r3, #1
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d181      	bne.n	8003c5a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fbd4 	bl	8008508 <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d6a:	d122      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d108      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f006 feaf 	bl	800aaf8 <HAL_PCDEx_LPM_Callback>
 8003d9a:	e002      	b.n	8003da2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f006 fbff 	bl	800a5a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 fba6 	bl	8008508 <USB_ReadInterrupts>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc6:	d112      	bne.n	8003dee <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f006 fbbb 	bl	800a554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695a      	ldr	r2, [r3, #20]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003dec:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 fb88 	bl	8008508 <USB_ReadInterrupts>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e02:	d121      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003e12:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d111      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	f003 020f 	and.w	r2, r3, #15
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e38:	2101      	movs	r1, #1
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f006 fe5c 	bl	800aaf8 <HAL_PCDEx_LPM_Callback>
 8003e40:	e002      	b.n	8003e48 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f006 fb86 	bl	800a554 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f004 fb5b 	bl	8008508 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5c:	f040 80c5 	bne.w	8003fea <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2110      	movs	r1, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f003 fcd0 	bl	8007820 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e84:	e056      	b.n	8003f34 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e92:	461a      	mov	r2, r3
 8003e94:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e98:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003eb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003eb8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eca:	0151      	lsls	r1, r2, #5
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	440a      	add	r2, r1
 8003ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ed4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ed8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003eec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f2c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	3301      	adds	r3, #1
 8003f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3a3      	bcc.n	8003e86 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f4c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003f50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f6a:	f043 030b 	orr.w	r3, r3, #11
 8003f6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f80:	f043 030b 	orr.w	r3, r3, #11
 8003f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f86:	e015      	b.n	8003fb4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f9a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003f9e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fae:	f043 030b 	orr.w	r3, r3, #11
 8003fb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003fc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f004 fb5b 	bl	8008690 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 fa8a 	bl	8008508 <USB_ReadInterrupts>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ffe:	d124      	bne.n	800404a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fb20 	bl	800864a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f003 fc67 	bl	80078e2 <USB_GetDevSpeed>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681c      	ldr	r4, [r3, #0]
 8004020:	f001 fa1a 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8004024:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	4620      	mov	r0, r4
 8004030:	f003 f9c2 	bl	80073b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f006 fa6e 	bl	800a516 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004048:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f004 fa5a 	bl	8008508 <USB_ReadInterrupts>
 8004054:	4603      	mov	r3, r0
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b08      	cmp	r3, #8
 800405c:	d10a      	bne.n	8004074 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f006 fa4b 	bl	800a4fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f002 0208 	and.w	r2, r2, #8
 8004072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f004 fa45 	bl	8008508 <USB_ReadInterrupts>
 800407e:	4603      	mov	r3, r0
 8004080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004088:	d10f      	bne.n	80040aa <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	b2db      	uxtb	r3, r3
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f006 fabd 	bl	800a614 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695a      	ldr	r2, [r3, #20]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80040a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 fa2a 	bl	8008508 <USB_ReadInterrupts>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040be:	d10f      	bne.n	80040e0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f006 fa90 	bl	800a5f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f004 fa0f 	bl	8008508 <USB_ReadInterrupts>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d10a      	bne.n	800410c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f006 fa9e 	bl	800a638 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800410a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4618      	mov	r0, r3
 8004112:	f004 f9f9 	bl	8008508 <USB_ReadInterrupts>
 8004116:	4603      	mov	r3, r0
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b04      	cmp	r3, #4
 800411e:	d115      	bne.n	800414c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f006 fa8e 	bl	800a654 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	e000      	b.n	800414c <HAL_PCD_IRQHandler+0x742>
      return;
 800414a:	bf00      	nop
    }
  }
}
 800414c:	3734      	adds	r7, #52	@ 0x34
 800414e:	46bd      	mov	sp, r7
 8004150:	bd90      	pop	{r4, r7, pc}

08004152 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_PCD_SetAddress+0x1a>
 8004168:	2302      	movs	r3, #2
 800416a:	e013      	b.n	8004194 <HAL_PCD_SetAddress+0x42>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f004 f957 	bl	8008438 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	70fb      	strb	r3, [r7, #3]
 80041ae:	460b      	mov	r3, r1
 80041b0:	803b      	strh	r3, [r7, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	da0f      	bge.n	80041e2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 020f 	and.w	r2, r3, #15
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3338      	adds	r3, #56	@ 0x38
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	3304      	adds	r3, #4
 80041d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	705a      	strb	r2, [r3, #1]
 80041e0:	e00f      	b.n	8004202 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4413      	add	r3, r2
 80041f8:	3304      	adds	r3, #4
 80041fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004202:	78fb      	ldrb	r3, [r7, #3]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800420e:	883a      	ldrh	r2, [r7, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	78ba      	ldrb	r2, [r7, #2]
 8004218:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	785b      	ldrb	r3, [r3, #1]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800422c:	78bb      	ldrb	r3, [r7, #2]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d102      	bne.n	8004238 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_PCD_EP_Open+0xaa>
 8004242:	2302      	movs	r3, #2
 8004244:	e00e      	b.n	8004264 <HAL_PCD_EP_Open+0xc8>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	4618      	mov	r0, r3
 8004256:	f003 fb63 	bl	8007920 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8004262:	7afb      	ldrb	r3, [r7, #11]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800427c:	2b00      	cmp	r3, #0
 800427e:	da0f      	bge.n	80042a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	3338      	adds	r3, #56	@ 0x38
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	3304      	adds	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2201      	movs	r2, #1
 800429c:	705a      	strb	r2, [r3, #1]
 800429e:	e00f      	b.n	80042c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	f003 020f 	and.w	r2, r3, #15
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_PCD_EP_Close+0x6e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e00e      	b.n	80042f8 <HAL_PCD_EP_Close+0x8c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 fba1 	bl	8007a30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	460b      	mov	r3, r1
 800430e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004342:	7afb      	ldrb	r3, [r7, #11]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	b2da      	uxtb	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800434e:	7afb      	ldrb	r3, [r7, #11]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	4618      	mov	r0, r3
 8004360:	f003 fe1e 	bl	8007fa0 <USB_EP0StartXfer>
 8004364:	e005      	b.n	8004372 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6979      	ldr	r1, [r7, #20]
 800436c:	4618      	mov	r0, r3
 800436e:	f003 fc3b 	bl	8007be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 020f 	and.w	r2, r3, #15
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	460b      	mov	r3, r1
 80043ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043bc:	7afb      	ldrb	r3, [r7, #11]
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	3338      	adds	r3, #56	@ 0x38
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	3304      	adds	r3, #4
 80043d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2201      	movs	r2, #1
 80043ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d106      	bne.n	8004410 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	4618      	mov	r0, r3
 800440a:	f003 fdc9 	bl	8007fa0 <USB_EP0StartXfer>
 800440e:	e005      	b.n	800441c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6979      	ldr	r1, [r7, #20]
 8004416:	4618      	mov	r0, r3
 8004418:	f003 fbe6 	bl	8007be8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d901      	bls.n	8004444 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e04e      	b.n	80044e2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004448:	2b00      	cmp	r3, #0
 800444a:	da0f      	bge.n	800446c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	3338      	adds	r3, #56	@ 0x38
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	705a      	strb	r2, [r3, #1]
 800446a:	e00d      	b.n	8004488 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_PCD_EP_SetStall+0x82>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e01c      	b.n	80044e2 <HAL_PCD_EP_SetStall+0xbc>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f003 feea 	bl	8008290 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d108      	bne.n	80044d8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f004 f8dc 	bl	8008690 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 020f 	and.w	r2, r3, #15
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d901      	bls.n	8004508 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e042      	b.n	800458e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800450c:	2b00      	cmp	r3, #0
 800450e:	da0f      	bge.n	8004530 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	3338      	adds	r3, #56	@ 0x38
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4413      	add	r3, r2
 8004524:	3304      	adds	r3, #4
 8004526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	705a      	strb	r2, [r3, #1]
 800452e:	e00f      	b.n	8004550 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 020f 	and.w	r2, r3, #15
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	3304      	adds	r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_PCD_EP_ClrStall+0x86>
 800456c:	2302      	movs	r3, #2
 800456e:	e00e      	b.n	800458e <HAL_PCD_EP_ClrStall+0xa4>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	4618      	mov	r0, r3
 8004580:	f003 fef4 	bl	800836c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	3338      	adds	r3, #56	@ 0x38
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	3304      	adds	r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699a      	ldr	r2, [r3, #24]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d901      	bls.n	80045ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e067      	b.n	800469e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	695a      	ldr	r2, [r3, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3303      	adds	r3, #3
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045f2:	e026      	b.n	8004642 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	429a      	cmp	r2, r3
 8004608:	d902      	bls.n	8004610 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3303      	adds	r3, #3
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68d9      	ldr	r1, [r3, #12]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	b29b      	uxth	r3, r3
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f003 fdd9 	bl	80081dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	441a      	add	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	429a      	cmp	r2, r3
 8004656:	d809      	bhi.n	800466c <PCD_WriteEmptyTxFifo+0xd6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004660:	429a      	cmp	r2, r3
 8004662:	d203      	bcs.n	800466c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1c3      	bne.n	80045f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d811      	bhi.n	800469c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	2201      	movs	r2, #1
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	43db      	mvns	r3, r3
 8004692:	6939      	ldr	r1, [r7, #16]
 8004694:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004698:	4013      	ands	r3, r2
 800469a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	333c      	adds	r3, #60	@ 0x3c
 80046c0:	3304      	adds	r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a19      	ldr	r2, [pc, #100]	@ (8004740 <PCD_EP_OutXfrComplete_int+0x98>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d124      	bne.n	8004728 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f4:	461a      	mov	r2, r3
 80046f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046fa:	6093      	str	r3, [r2, #8]
 80046fc:	e01a      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	2320      	movs	r3, #32
 8004718:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f005 feb5 	bl	800a490 <HAL_PCD_DataOutStageCallback>
 8004726:	e005      	b.n	8004734 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f005 feae 	bl	800a490 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	4f54310a 	.word	0x4f54310a

08004744 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	333c      	adds	r3, #60	@ 0x3c
 800475c:	3304      	adds	r3, #4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4a0c      	ldr	r2, [pc, #48]	@ (80047a8 <PCD_EP_OutSetupPacket_int+0x64>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d90e      	bls.n	8004798 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004790:	461a      	mov	r2, r3
 8004792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004796:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f005 fe67 	bl	800a46c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	4f54300a 	.word	0x4f54300a

080047ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	70fb      	strb	r3, [r7, #3]
 80047b8:	4613      	mov	r3, r2
 80047ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d107      	bne.n	80047da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047ca:	883b      	ldrh	r3, [r7, #0]
 80047cc:	0419      	lsls	r1, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047d8:	e028      	b.n	800482c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e00d      	b.n	800480a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	3340      	adds	r3, #64	@ 0x40
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	0c1b      	lsrs	r3, r3, #16
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4413      	add	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	3301      	adds	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	7bfa      	ldrb	r2, [r7, #15]
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	3b01      	subs	r3, #1
 8004810:	429a      	cmp	r2, r3
 8004812:	d3ec      	bcc.n	80047ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004814:	883b      	ldrh	r3, [r7, #0]
 8004816:	0418      	lsls	r0, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	3b01      	subs	r3, #1
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	4302      	orrs	r2, r0
 8004824:	3340      	adds	r3, #64	@ 0x40
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800488e:	f043 0303 	orr.w	r3, r3, #3
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a8:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a04      	ldr	r2, [pc, #16]	@ (80048c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b2:	6013      	str	r3, [r2, #0]
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40007000 	.word	0x40007000

080048c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048c8:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <HAL_PWREx_GetVoltageRange+0x18>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40007000 	.word	0x40007000

080048e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ee:	d130      	bne.n	8004952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048f0:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048fc:	d038      	beq.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004906:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004908:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800490c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2232      	movs	r2, #50	@ 0x32
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0c9b      	lsrs	r3, r3, #18
 8004920:	3301      	adds	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004924:	e002      	b.n	800492c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3b01      	subs	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800492c:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004938:	d102      	bne.n	8004940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f2      	bne.n	8004926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004940:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494c:	d110      	bne.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e00f      	b.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d007      	beq.n	8004970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004960:	4b07      	ldr	r3, [pc, #28]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004968:	4a05      	ldr	r2, [pc, #20]	@ (8004980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800496e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40007000 	.word	0x40007000
 8004984:	20000000 	.word	0x20000000
 8004988:	431bde83 	.word	0x431bde83

0800498c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a04      	ldr	r2, [pc, #16]	@ (80049a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004996:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800499a:	6053      	str	r3, [r2, #4]
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40007000 	.word	0x40007000

080049ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e3d8      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049be:	4b97      	ldr	r3, [pc, #604]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049c8:	4b94      	ldr	r3, [pc, #592]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0303 	and.w	r3, r3, #3
 80049d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0310 	and.w	r3, r3, #16
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80e4 	beq.w	8004ba8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_RCC_OscConfig+0x4a>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f040 808b 	bne.w	8004b04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	f040 8087 	bne.w	8004b04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049f6:	4b89      	ldr	r3, [pc, #548]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_RCC_OscConfig+0x62>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e3b0      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1a      	ldr	r2, [r3, #32]
 8004a12:	4b82      	ldr	r3, [pc, #520]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <HAL_RCC_OscConfig+0x7c>
 8004a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a26:	e005      	b.n	8004a34 <HAL_RCC_OscConfig+0x88>
 8004a28:	4b7c      	ldr	r3, [pc, #496]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d223      	bcs.n	8004a80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fd43 	bl	80054c8 <RCC_SetFlashLatencyFromMSIRange>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e391      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4c:	4b73      	ldr	r3, [pc, #460]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a72      	ldr	r2, [pc, #456]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b70      	ldr	r3, [pc, #448]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	496d      	ldr	r1, [pc, #436]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	4968      	ldr	r1, [pc, #416]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
 8004a7e:	e025      	b.n	8004acc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a80:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a65      	ldr	r2, [pc, #404]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a86:	f043 0308 	orr.w	r3, r3, #8
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b63      	ldr	r3, [pc, #396]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	4960      	ldr	r1, [pc, #384]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	021b      	lsls	r3, r3, #8
 8004aac:	495b      	ldr	r1, [pc, #364]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fd03 	bl	80054c8 <RCC_SetFlashLatencyFromMSIRange>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e351      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004acc:	f000 fc38 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b52      	ldr	r3, [pc, #328]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	091b      	lsrs	r3, r3, #4
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	4950      	ldr	r1, [pc, #320]	@ (8004c20 <HAL_RCC_OscConfig+0x274>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8004c24 <HAL_RCC_OscConfig+0x278>)
 8004aea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004aec:	4b4e      	ldr	r3, [pc, #312]	@ (8004c28 <HAL_RCC_OscConfig+0x27c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe f963 	bl	8002dbc <HAL_InitTick>
 8004af6:	4603      	mov	r3, r0
 8004af8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d052      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	e335      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d032      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b0c:	4b43      	ldr	r3, [pc, #268]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a42      	ldr	r2, [pc, #264]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b18:	f7fe f9a0 	bl	8002e5c <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b20:	f7fe f99c 	bl	8002e5c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e31e      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b32:	4b3a      	ldr	r3, [pc, #232]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b3e:	4b37      	ldr	r3, [pc, #220]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a36      	ldr	r2, [pc, #216]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b44:	f043 0308 	orr.w	r3, r3, #8
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b34      	ldr	r3, [pc, #208]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	4931      	ldr	r1, [pc, #196]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	021b      	lsls	r3, r3, #8
 8004b6a:	492c      	ldr	r1, [pc, #176]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
 8004b70:	e01a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b72:	4b2a      	ldr	r3, [pc, #168]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a29      	ldr	r2, [pc, #164]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b7e:	f7fe f96d 	bl	8002e5c <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b84:	e008      	b.n	8004b98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b86:	f7fe f969 	bl	8002e5c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e2eb      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <HAL_RCC_OscConfig+0x1da>
 8004ba4:	e000      	b.n	8004ba8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d074      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x21a>
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d10e      	bne.n	8004bde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d10b      	bne.n	8004bde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d064      	beq.n	8004c9c <HAL_RCC_OscConfig+0x2f0>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d160      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e2c8      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x24a>
 8004be8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a0b      	ldr	r2, [pc, #44]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	e026      	b.n	8004c44 <HAL_RCC_OscConfig+0x298>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bfe:	d115      	bne.n	8004c2c <HAL_RCC_OscConfig+0x280>
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a05      	ldr	r2, [pc, #20]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b03      	ldr	r3, [pc, #12]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a02      	ldr	r2, [pc, #8]	@ (8004c1c <HAL_RCC_OscConfig+0x270>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	e014      	b.n	8004c44 <HAL_RCC_OscConfig+0x298>
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	0800f468 	.word	0x0800f468
 8004c24:	20000000 	.word	0x20000000
 8004c28:	200000a0 	.word	0x200000a0
 8004c2c:	4ba0      	ldr	r3, [pc, #640]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a9f      	ldr	r2, [pc, #636]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b9d      	ldr	r3, [pc, #628]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a9c      	ldr	r2, [pc, #624]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fe f906 	bl	8002e5c <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe f902 	bl	8002e5c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	@ 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e284      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c66:	4b92      	ldr	r3, [pc, #584]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0x2a8>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe f8f2 	bl	8002e5c <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f8ee 	bl	8002e5c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	@ 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e270      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c8e:	4b88      	ldr	r3, [pc, #544]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2d0>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d060      	beq.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x310>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d116      	bne.n	8004cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cbc:	4b7c      	ldr	r3, [pc, #496]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x328>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e24d      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd4:	4b76      	ldr	r3, [pc, #472]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	4973      	ldr	r1, [pc, #460]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ce8:	e040      	b.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d023      	beq.n	8004d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fe f8ad 	bl	8002e5c <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe f8a9 	bl	8002e5c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e22b      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d18:	4b65      	ldr	r3, [pc, #404]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b62      	ldr	r3, [pc, #392]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	495f      	ldr	r1, [pc, #380]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	604b      	str	r3, [r1, #4]
 8004d38:	e018      	b.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fe f889 	bl	8002e5c <HAL_GetTick>
 8004d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d4c:	e008      	b.n	8004d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4e:	f7fe f885 	bl	8002e5c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e207      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d60:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1f0      	bne.n	8004d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d03c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01c      	beq.n	8004dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d80:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d86:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fe f864 	bl	8002e5c <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fe f860 	bl	8002e5c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e1e2      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ef      	beq.n	8004d98 <HAL_RCC_OscConfig+0x3ec>
 8004db8:	e01b      	b.n	8004df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dba:	4b3d      	ldr	r3, [pc, #244]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fe f847 	bl	8002e5c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd2:	f7fe f843 	bl	8002e5c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1c5      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de4:	4b32      	ldr	r3, [pc, #200]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1ef      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80a6 	beq.w	8004f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e00:	2300      	movs	r3, #0
 8004e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e04:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	4b27      	ldr	r3, [pc, #156]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	4a26      	ldr	r2, [pc, #152]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e1c:	4b24      	ldr	r3, [pc, #144]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2c:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d118      	bne.n	8004e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e38:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e44:	f7fe f80a 	bl	8002e5c <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4c:	f7fe f806 	bl	8002e5c <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e188      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5e:	4b15      	ldr	r3, [pc, #84]	@ (8004eb4 <HAL_RCC_OscConfig+0x508>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d108      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4d8>
 8004e72:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e78:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e82:	e029      	b.n	8004ed8 <HAL_RCC_OscConfig+0x52c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d115      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x50c>
 8004e8c:	4b08      	ldr	r3, [pc, #32]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	4a07      	ldr	r2, [pc, #28]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e9c:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	4a03      	ldr	r2, [pc, #12]	@ (8004eb0 <HAL_RCC_OscConfig+0x504>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eac:	e014      	b.n	8004ed8 <HAL_RCC_OscConfig+0x52c>
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	4b91      	ldr	r3, [pc, #580]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	4a90      	ldr	r2, [pc, #576]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	4a8c      	ldr	r2, [pc, #560]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d016      	beq.n	8004f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fd ffbc 	bl	8002e5c <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fd ffb8 	bl	8002e5c <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e138      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efe:	4b80      	ldr	r3, [pc, #512]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ed      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x53c>
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fd ffa5 	bl	8002e5c <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fd ffa1 	bl	8002e5c <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e121      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f2c:	4b74      	ldr	r3, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1ed      	bne.n	8004f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3a:	7ffb      	ldrb	r3, [r7, #31]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d105      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f40:	4b6f      	ldr	r3, [pc, #444]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f44:	4a6e      	ldr	r2, [pc, #440]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 810c 	beq.w	800516e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	f040 80d4 	bne.w	8005108 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f60:	4b67      	ldr	r3, [pc, #412]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f003 0203 	and.w	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d130      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d127      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d11f      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fa0:	2a07      	cmp	r2, #7
 8004fa2:	bf14      	ite	ne
 8004fa4:	2201      	movne	r2, #1
 8004fa6:	2200      	moveq	r2, #0
 8004fa8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d113      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d109      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d06e      	beq.n	80050b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b0c      	cmp	r3, #12
 8004fda:	d069      	beq.n	80050b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fdc:	4b48      	ldr	r3, [pc, #288]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fe8:	4b45      	ldr	r3, [pc, #276]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0bb      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ff8:	4b41      	ldr	r3, [pc, #260]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a40      	ldr	r2, [pc, #256]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8004ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005004:	f7fd ff2a 	bl	8002e5c <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500c:	f7fd ff26 	bl	8002e5c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0a8      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501e:	4b38      	ldr	r3, [pc, #224]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502a:	4b35      	ldr	r3, [pc, #212]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <HAL_RCC_OscConfig+0x758>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800503a:	3a01      	subs	r2, #1
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	4311      	orrs	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005044:	0212      	lsls	r2, r2, #8
 8005046:	4311      	orrs	r1, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800504c:	0852      	lsrs	r2, r2, #1
 800504e:	3a01      	subs	r2, #1
 8005050:	0552      	lsls	r2, r2, #21
 8005052:	4311      	orrs	r1, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005058:	0852      	lsrs	r2, r2, #1
 800505a:	3a01      	subs	r2, #1
 800505c:	0652      	lsls	r2, r2, #25
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005064:	0912      	lsrs	r2, r2, #4
 8005066:	0452      	lsls	r2, r2, #17
 8005068:	430a      	orrs	r2, r1
 800506a:	4925      	ldr	r1, [pc, #148]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 800506c:	4313      	orrs	r3, r2
 800506e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005070:	4b23      	ldr	r3, [pc, #140]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a22      	ldr	r2, [pc, #136]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8005076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800507c:	4b20      	ldr	r3, [pc, #128]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4a1f      	ldr	r2, [pc, #124]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 8005082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005088:	f7fd fee8 	bl	8002e5c <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fd fee4 	bl	8002e5c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e066      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a2:	4b17      	ldr	r3, [pc, #92]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050ae:	e05e      	b.n	800516e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e05d      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b4:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d156      	bne.n	800516e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a0b      	ldr	r2, [pc, #44]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050d8:	f7fd fec0 	bl	8002e5c <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fd febc 	bl	8002e5c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e03e      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f2:	4b03      	ldr	r3, [pc, #12]	@ (8005100 <HAL_RCC_OscConfig+0x754>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x734>
 80050fe:	e036      	b.n	800516e <HAL_RCC_OscConfig+0x7c2>
 8005100:	40021000 	.word	0x40021000
 8005104:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b0c      	cmp	r3, #12
 800510c:	d02d      	beq.n	800516a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 8005114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005118:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800511a:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d105      	bne.n	8005132 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005126:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 800512c:	f023 0303 	bic.w	r3, r3, #3
 8005130:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005132:	4b11      	ldr	r3, [pc, #68]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	4a10      	ldr	r2, [pc, #64]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 8005138:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800513c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005140:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd fe8b 	bl	8002e5c <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800514a:	f7fd fe87 	bl	8002e5c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e009      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <HAL_RCC_OscConfig+0x7cc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f0      	bne.n	800514a <HAL_RCC_OscConfig+0x79e>
 8005168:	e001      	b.n	800516e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3720      	adds	r7, #32
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0c8      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b66      	ldr	r3, [pc, #408]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d910      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b63      	ldr	r3, [pc, #396]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 0207 	bic.w	r2, r3, #7
 80051a6:	4961      	ldr	r1, [pc, #388]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b5f      	ldr	r3, [pc, #380]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0b0      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d04c      	beq.n	8005266 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d4:	4b56      	ldr	r3, [pc, #344]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d121      	bne.n	8005224 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e09e      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d107      	bne.n	80051fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ec:	4b50      	ldr	r3, [pc, #320]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d115      	bne.n	8005224 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e092      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d107      	bne.n	8005214 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005204:	4b4a      	ldr	r3, [pc, #296]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e086      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005214:	4b46      	ldr	r3, [pc, #280]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e07e      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005224:	4b42      	ldr	r3, [pc, #264]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f023 0203 	bic.w	r2, r3, #3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	493f      	ldr	r1, [pc, #252]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005236:	f7fd fe11 	bl	8002e5c <HAL_GetTick>
 800523a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523c:	e00a      	b.n	8005254 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800523e:	f7fd fe0d 	bl	8002e5c <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524c:	4293      	cmp	r3, r2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e066      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005254:	4b36      	ldr	r3, [pc, #216]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 020c 	and.w	r2, r3, #12
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	429a      	cmp	r2, r3
 8005264:	d1eb      	bne.n	800523e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005272:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	492c      	ldr	r1, [pc, #176]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005284:	4b29      	ldr	r3, [pc, #164]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d210      	bcs.n	80052b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005292:	4b26      	ldr	r3, [pc, #152]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f023 0207 	bic.w	r2, r3, #7
 800529a:	4924      	ldr	r1, [pc, #144]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	4313      	orrs	r3, r2
 80052a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a2:	4b22      	ldr	r3, [pc, #136]	@ (800532c <HAL_RCC_ClockConfig+0x1b0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e036      	b.n	8005322 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4918      	ldr	r1, [pc, #96]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052de:	4b14      	ldr	r3, [pc, #80]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4910      	ldr	r1, [pc, #64]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052f2:	f000 f825 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 80052f6:	4602      	mov	r2, r0
 80052f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005330 <HAL_RCC_ClockConfig+0x1b4>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	490c      	ldr	r1, [pc, #48]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	5ccb      	ldrb	r3, [r1, r3]
 8005306:	f003 031f 	and.w	r3, r3, #31
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	4a0a      	ldr	r2, [pc, #40]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005312:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fd fd50 	bl	8002dbc <HAL_InitTick>
 800531c:	4603      	mov	r3, r0
 800531e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005320:	7afb      	ldrb	r3, [r7, #11]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40022000 	.word	0x40022000
 8005330:	40021000 	.word	0x40021000
 8005334:	0800f468 	.word	0x0800f468
 8005338:	20000000 	.word	0x20000000
 800533c:	200000a0 	.word	0x200000a0

08005340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	@ 0x24
 8005344:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800534e:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005358:	4b3b      	ldr	r3, [pc, #236]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0303 	and.w	r3, r3, #3
 8005360:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0x34>
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	d121      	bne.n	80053b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d11e      	bne.n	80053b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005374:	4b34      	ldr	r3, [pc, #208]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b00      	cmp	r3, #0
 800537e:	d107      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005380:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 8005382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	e005      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005390:	4b2d      	ldr	r3, [pc, #180]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800539c:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <HAL_RCC_GetSysClockFreq+0x10c>)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10d      	bne.n	80053c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d102      	bne.n	80053be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053b8:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x110>)
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e004      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053c4:	4b23      	ldr	r3, [pc, #140]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x114>)
 80053c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b0c      	cmp	r3, #12
 80053cc:	d134      	bne.n	8005438 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d003      	beq.n	80053e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d003      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0xac>
 80053e4:	e005      	b.n	80053f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005450 <HAL_RCC_GetSysClockFreq+0x110>)
 80053e8:	617b      	str	r3, [r7, #20]
      break;
 80053ea:	e005      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053ec:	4b19      	ldr	r3, [pc, #100]	@ (8005454 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ee:	617b      	str	r3, [r7, #20]
      break;
 80053f0:	e002      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	617b      	str	r3, [r7, #20]
      break;
 80053f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f8:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	3301      	adds	r3, #1
 8005404:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005406:	4b10      	ldr	r3, [pc, #64]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	0a1b      	lsrs	r3, r3, #8
 800540c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	fb03 f202 	mul.w	r2, r3, r2
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800541e:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x108>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	0e5b      	lsrs	r3, r3, #25
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	3301      	adds	r3, #1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005438:	69bb      	ldr	r3, [r7, #24]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3724      	adds	r7, #36	@ 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40021000 	.word	0x40021000
 800544c:	0800f480 	.word	0x0800f480
 8005450:	00f42400 	.word	0x00f42400
 8005454:	007a1200 	.word	0x007a1200

08005458 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800545c:	4b03      	ldr	r3, [pc, #12]	@ (800546c <HAL_RCC_GetHCLKFreq+0x14>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000000 	.word	0x20000000

08005470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005474:	f7ff fff0 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 8005478:	4602      	mov	r2, r0
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_GetPCLK1Freq+0x24>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	0a1b      	lsrs	r3, r3, #8
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	4904      	ldr	r1, [pc, #16]	@ (8005498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	0800f478 	.word	0x0800f478

0800549c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054a0:	f7ff ffda 	bl	8005458 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0adb      	lsrs	r3, r3, #11
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4904      	ldr	r1, [pc, #16]	@ (80054c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	0800f478 	.word	0x0800f478

080054c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054e0:	f7ff f9f0 	bl	80048c4 <HAL_PWREx_GetVoltageRange>
 80054e4:	6178      	str	r0, [r7, #20]
 80054e6:	e014      	b.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054e8:	4b25      	ldr	r3, [pc, #148]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ec:	4a24      	ldr	r2, [pc, #144]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f4:	4b22      	ldr	r3, [pc, #136]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005500:	f7ff f9e0 	bl	80048c4 <HAL_PWREx_GetVoltageRange>
 8005504:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005506:	4b1e      	ldr	r3, [pc, #120]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005510:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005518:	d10b      	bne.n	8005532 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b80      	cmp	r3, #128	@ 0x80
 800551e:	d919      	bls.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2ba0      	cmp	r3, #160	@ 0xa0
 8005524:	d902      	bls.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005526:	2302      	movs	r3, #2
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e013      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800552c:	2301      	movs	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e010      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b80      	cmp	r3, #128	@ 0x80
 8005536:	d902      	bls.n	800553e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005538:	2303      	movs	r3, #3
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e00a      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b80      	cmp	r3, #128	@ 0x80
 8005542:	d102      	bne.n	800554a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005544:	2302      	movs	r3, #2
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e004      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b70      	cmp	r3, #112	@ 0x70
 800554e:	d101      	bne.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005550:	2301      	movs	r3, #1
 8005552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 0207 	bic.w	r2, r3, #7
 800555c:	4909      	ldr	r1, [pc, #36]	@ (8005584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005564:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d001      	beq.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	40022000 	.word	0x40022000

08005588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005590:	2300      	movs	r3, #0
 8005592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005594:	2300      	movs	r3, #0
 8005596:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d041      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055ac:	d02a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055ae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055b2:	d824      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055b8:	d008      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055be:	d81e      	bhi.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c8:	d010      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ca:	e018      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055cc:	4b86      	ldr	r3, [pc, #536]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a85      	ldr	r2, [pc, #532]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055d8:	e015      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3304      	adds	r3, #4
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 facb 	bl	8005b7c <RCCEx_PLLSAI1_Config>
 80055e6:	4603      	mov	r3, r0
 80055e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055ea:	e00c      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3320      	adds	r3, #32
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fbb6 	bl	8005d64 <RCCEx_PLLSAI2_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055fc:	e003      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	74fb      	strb	r3, [r7, #19]
      break;
 8005602:	e000      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800560c:	4b76      	ldr	r3, [pc, #472]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005612:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800561a:	4973      	ldr	r1, [pc, #460]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005622:	e001      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d041      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005638:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800563c:	d02a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800563e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005642:	d824      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005644:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005648:	d008      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800564a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800564e:	d81e      	bhi.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005658:	d010      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800565a:	e018      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800565c:	4b62      	ldr	r3, [pc, #392]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4a61      	ldr	r2, [pc, #388]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005666:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005668:	e015      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fa83 	bl	8005b7c <RCCEx_PLLSAI1_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800567a:	e00c      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3320      	adds	r3, #32
 8005680:	2100      	movs	r1, #0
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb6e 	bl	8005d64 <RCCEx_PLLSAI2_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800568c:	e003      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	74fb      	strb	r3, [r7, #19]
      break;
 8005692:	e000      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800569c:	4b52      	ldr	r3, [pc, #328]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056aa:	494f      	ldr	r1, [pc, #316]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056b2:	e001      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 80a0 	beq.w	8005806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056ca:	4b47      	ldr	r3, [pc, #284]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00d      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056e0:	4b41      	ldr	r3, [pc, #260]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e4:	4a40      	ldr	r2, [pc, #256]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ec:	4b3e      	ldr	r3, [pc, #248]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f8:	2301      	movs	r3, #1
 80056fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056fc:	4b3b      	ldr	r3, [pc, #236]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a3a      	ldr	r2, [pc, #232]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005708:	f7fd fba8 	bl	8002e5c <HAL_GetTick>
 800570c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800570e:	e009      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005710:	f7fd fba4 	bl	8002e5c <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d902      	bls.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	74fb      	strb	r3, [r7, #19]
        break;
 8005722:	e005      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005724:	4b31      	ldr	r3, [pc, #196]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0ef      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005730:	7cfb      	ldrb	r3, [r7, #19]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d15c      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005736:	4b2c      	ldr	r3, [pc, #176]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01f      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	429a      	cmp	r2, r3
 8005752:	d019      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005754:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800575e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005760:	4b21      	ldr	r3, [pc, #132]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005766:	4a20      	ldr	r2, [pc, #128]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800576c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005770:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005776:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005780:	4a19      	ldr	r2, [pc, #100]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d016      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005792:	f7fd fb63 	bl	8002e5c <HAL_GetTick>
 8005796:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005798:	e00b      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800579a:	f7fd fb5f 	bl	8002e5c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d902      	bls.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	74fb      	strb	r3, [r7, #19]
            break;
 80057b0:	e006      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ec      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057c0:	7cfb      	ldrb	r3, [r7, #19]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10c      	bne.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c6:	4b08      	ldr	r3, [pc, #32]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d6:	4904      	ldr	r1, [pc, #16]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80057de:	e009      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057e0:	7cfb      	ldrb	r3, [r7, #19]
 80057e2:	74bb      	strb	r3, [r7, #18]
 80057e4:	e006      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80057e6:	bf00      	nop
 80057e8:	40021000 	.word	0x40021000
 80057ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057f4:	7c7b      	ldrb	r3, [r7, #17]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d105      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057fa:	4b9e      	ldr	r3, [pc, #632]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fe:	4a9d      	ldr	r2, [pc, #628]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005804:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005812:	4b98      	ldr	r3, [pc, #608]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005818:	f023 0203 	bic.w	r2, r3, #3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	4994      	ldr	r1, [pc, #592]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005834:	4b8f      	ldr	r3, [pc, #572]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583a:	f023 020c 	bic.w	r2, r3, #12
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005842:	498c      	ldr	r1, [pc, #560]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005856:	4b87      	ldr	r3, [pc, #540]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005864:	4983      	ldr	r1, [pc, #524]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005878:	4b7e      	ldr	r3, [pc, #504]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	497b      	ldr	r1, [pc, #492]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800589a:	4b76      	ldr	r3, [pc, #472]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a8:	4972      	ldr	r1, [pc, #456]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ca:	496a      	ldr	r1, [pc, #424]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058de:	4b65      	ldr	r3, [pc, #404]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ec:	4961      	ldr	r1, [pc, #388]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005900:	4b5c      	ldr	r3, [pc, #368]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800590e:	4959      	ldr	r1, [pc, #356]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005922:	4b54      	ldr	r3, [pc, #336]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005928:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	4950      	ldr	r1, [pc, #320]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005944:	4b4b      	ldr	r3, [pc, #300]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005952:	4948      	ldr	r1, [pc, #288]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005966:	4b43      	ldr	r3, [pc, #268]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800596c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005974:	493f      	ldr	r1, [pc, #252]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d028      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005988:	4b3a      	ldr	r3, [pc, #232]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005996:	4937      	ldr	r1, [pc, #220]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059a6:	d106      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059a8:	4b32      	ldr	r3, [pc, #200]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4a31      	ldr	r2, [pc, #196]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059b2:	60d3      	str	r3, [r2, #12]
 80059b4:	e011      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059be:	d10c      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f8d8 	bl	8005b7c <RCCEx_PLLSAI1_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d028      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059e6:	4b23      	ldr	r3, [pc, #140]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f4:	491f      	ldr	r1, [pc, #124]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a04:	d106      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a06:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a10:	60d3      	str	r3, [r2, #12]
 8005a12:	e011      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3304      	adds	r3, #4
 8005a22:	2101      	movs	r1, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f8a9 	bl	8005b7c <RCCEx_PLLSAI1_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a2e:	7cfb      	ldrb	r3, [r7, #19]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a34:	7cfb      	ldrb	r3, [r7, #19]
 8005a36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d02b      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a44:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a52:	4908      	ldr	r1, [pc, #32]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a62:	d109      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a64:	4b03      	ldr	r3, [pc, #12]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4a02      	ldr	r2, [pc, #8]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a6e:	60d3      	str	r3, [r2, #12]
 8005a70:	e014      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a72:	bf00      	nop
 8005a74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3304      	adds	r3, #4
 8005a86:	2101      	movs	r1, #1
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f877 	bl	8005b7c <RCCEx_PLLSAI1_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d02f      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ab6:	4928      	ldr	r1, [pc, #160]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	2102      	movs	r1, #2
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 f854 	bl	8005b7c <RCCEx_PLLSAI1_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ad8:	7cfb      	ldrb	r3, [r7, #19]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d014      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ade:	7cfb      	ldrb	r3, [r7, #19]
 8005ae0:	74bb      	strb	r3, [r7, #18]
 8005ae2:	e011      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3320      	adds	r3, #32
 8005af2:	2102      	movs	r1, #2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 f935 	bl	8005d64 <RCCEx_PLLSAI2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005afe:	7cfb      	ldrb	r3, [r7, #19]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b14:	4b10      	ldr	r3, [pc, #64]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b1a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b22:	490d      	ldr	r1, [pc, #52]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b36:	4b08      	ldr	r3, [pc, #32]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b46:	4904      	ldr	r1, [pc, #16]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40021000 	.word	0x40021000

08005b5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a04      	ldr	r2, [pc, #16]	@ (8005b78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40021000 	.word	0x40021000

08005b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b8a:	4b75      	ldr	r3, [pc, #468]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b96:	4b72      	ldr	r3, [pc, #456]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0203 	and.w	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d10d      	bne.n	8005bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bae:	4b6c      	ldr	r3, [pc, #432]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d047      	beq.n	8005c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
 8005bc6:	e044      	b.n	8005c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d018      	beq.n	8005c02 <RCCEx_PLLSAI1_Config+0x86>
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d825      	bhi.n	8005c20 <RCCEx_PLLSAI1_Config+0xa4>
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d002      	beq.n	8005bde <RCCEx_PLLSAI1_Config+0x62>
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d009      	beq.n	8005bf0 <RCCEx_PLLSAI1_Config+0x74>
 8005bdc:	e020      	b.n	8005c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bde:	4b60      	ldr	r3, [pc, #384]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d11d      	bne.n	8005c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bee:	e01a      	b.n	8005c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d116      	bne.n	8005c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c00:	e013      	b.n	8005c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c02:	4b57      	ldr	r3, [pc, #348]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10f      	bne.n	8005c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c0e:	4b54      	ldr	r3, [pc, #336]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c1e:	e006      	b.n	8005c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e004      	b.n	8005c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c26:	bf00      	nop
 8005c28:	e002      	b.n	8005c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c36:	4b4a      	ldr	r3, [pc, #296]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6819      	ldr	r1, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	4944      	ldr	r1, [pc, #272]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d17d      	bne.n	8005d54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c58:	4b41      	ldr	r3, [pc, #260]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a40      	ldr	r2, [pc, #256]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c64:	f7fd f8fa 	bl	8002e5c <HAL_GetTick>
 8005c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c6a:	e009      	b.n	8005c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c6c:	f7fd f8f6 	bl	8002e5c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d902      	bls.n	8005c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c7e:	e005      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c80:	4b37      	ldr	r3, [pc, #220]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1ef      	bne.n	8005c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d160      	bne.n	8005d54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d111      	bne.n	8005cbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c98:	4b31      	ldr	r3, [pc, #196]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6892      	ldr	r2, [r2, #8]
 8005ca8:	0211      	lsls	r1, r2, #8
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68d2      	ldr	r2, [r2, #12]
 8005cae:	0912      	lsrs	r2, r2, #4
 8005cb0:	0452      	lsls	r2, r2, #17
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	492a      	ldr	r1, [pc, #168]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	610b      	str	r3, [r1, #16]
 8005cba:	e027      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d112      	bne.n	8005ce8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cc2:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005cca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6892      	ldr	r2, [r2, #8]
 8005cd2:	0211      	lsls	r1, r2, #8
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6912      	ldr	r2, [r2, #16]
 8005cd8:	0852      	lsrs	r2, r2, #1
 8005cda:	3a01      	subs	r2, #1
 8005cdc:	0552      	lsls	r2, r2, #21
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	491f      	ldr	r1, [pc, #124]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	610b      	str	r3, [r1, #16]
 8005ce6:	e011      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005cf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6892      	ldr	r2, [r2, #8]
 8005cf8:	0211      	lsls	r1, r2, #8
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6952      	ldr	r2, [r2, #20]
 8005cfe:	0852      	lsrs	r2, r2, #1
 8005d00:	3a01      	subs	r2, #1
 8005d02:	0652      	lsls	r2, r2, #25
 8005d04:	430a      	orrs	r2, r1
 8005d06:	4916      	ldr	r1, [pc, #88]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d0c:	4b14      	ldr	r3, [pc, #80]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a13      	ldr	r2, [pc, #76]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fd f8a0 	bl	8002e5c <HAL_GetTick>
 8005d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d1e:	e009      	b.n	8005d34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d20:	f7fd f89c 	bl	8002e5c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d902      	bls.n	8005d34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	73fb      	strb	r3, [r7, #15]
          break;
 8005d32:	e005      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d34:	4b0a      	ldr	r3, [pc, #40]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d0ef      	beq.n	8005d20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	4904      	ldr	r1, [pc, #16]	@ (8005d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40021000 	.word	0x40021000

08005d64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d72:	4b6a      	ldr	r3, [pc, #424]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d018      	beq.n	8005db0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d7e:	4b67      	ldr	r3, [pc, #412]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0203 	and.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d10d      	bne.n	8005daa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
       ||
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d96:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	091b      	lsrs	r3, r3, #4
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
       ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d047      	beq.n	8005e3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
 8005dae:	e044      	b.n	8005e3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d018      	beq.n	8005dea <RCCEx_PLLSAI2_Config+0x86>
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d825      	bhi.n	8005e08 <RCCEx_PLLSAI2_Config+0xa4>
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d002      	beq.n	8005dc6 <RCCEx_PLLSAI2_Config+0x62>
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d009      	beq.n	8005dd8 <RCCEx_PLLSAI2_Config+0x74>
 8005dc4:	e020      	b.n	8005e08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dc6:	4b55      	ldr	r3, [pc, #340]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11d      	bne.n	8005e0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dd6:	e01a      	b.n	8005e0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005dd8:	4b50      	ldr	r3, [pc, #320]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d116      	bne.n	8005e12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de8:	e013      	b.n	8005e12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dea:	4b4c      	ldr	r3, [pc, #304]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10f      	bne.n	8005e16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005df6:	4b49      	ldr	r3, [pc, #292]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e06:	e006      	b.n	8005e16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e0c:	e004      	b.n	8005e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e0e:	bf00      	nop
 8005e10:	e002      	b.n	8005e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e12:	bf00      	nop
 8005e14:	e000      	b.n	8005e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10d      	bne.n	8005e3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	430b      	orrs	r3, r1
 8005e34:	4939      	ldr	r1, [pc, #228]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d167      	bne.n	8005f10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e40:	4b36      	ldr	r3, [pc, #216]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a35      	ldr	r2, [pc, #212]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fd f806 	bl	8002e5c <HAL_GetTick>
 8005e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e52:	e009      	b.n	8005e68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e54:	f7fd f802 	bl	8002e5c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	73fb      	strb	r3, [r7, #15]
        break;
 8005e66:	e005      	b.n	8005e74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e68:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1ef      	bne.n	8005e54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e74:	7bfb      	ldrb	r3, [r7, #15]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d14a      	bne.n	8005f10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d111      	bne.n	8005ea4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e80:	4b26      	ldr	r3, [pc, #152]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6892      	ldr	r2, [r2, #8]
 8005e90:	0211      	lsls	r1, r2, #8
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68d2      	ldr	r2, [r2, #12]
 8005e96:	0912      	lsrs	r2, r2, #4
 8005e98:	0452      	lsls	r2, r2, #17
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	491f      	ldr	r1, [pc, #124]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	614b      	str	r3, [r1, #20]
 8005ea2:	e011      	b.n	8005ec8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005eac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6892      	ldr	r2, [r2, #8]
 8005eb4:	0211      	lsls	r1, r2, #8
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6912      	ldr	r2, [r2, #16]
 8005eba:	0852      	lsrs	r2, r2, #1
 8005ebc:	3a01      	subs	r2, #1
 8005ebe:	0652      	lsls	r2, r2, #25
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	4916      	ldr	r1, [pc, #88]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ec8:	4b14      	ldr	r3, [pc, #80]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed4:	f7fc ffc2 	bl	8002e5c <HAL_GetTick>
 8005ed8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eda:	e009      	b.n	8005ef0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005edc:	f7fc ffbe 	bl	8002e5c <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d902      	bls.n	8005ef0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	73fb      	strb	r3, [r7, #15]
          break;
 8005eee:	e005      	b.n	8005efc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0ef      	beq.n	8005edc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f02:	4b06      	ldr	r3, [pc, #24]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4904      	ldr	r1, [pc, #16]	@ (8005f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40021000 	.word	0x40021000

08005f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e095      	b.n	800605e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f42:	d009      	beq.n	8005f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	61da      	str	r2, [r3, #28]
 8005f4a:	e005      	b.n	8005f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fc40 	bl	80017f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f98:	d902      	bls.n	8005fa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e002      	b.n	8005fa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005fa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_Init+0xa0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005fb8:	d002      	beq.n	8005fc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006002:	ea42 0103 	orr.w	r1, r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	0c1b      	lsrs	r3, r3, #16
 800601c:	f003 0204 	and.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800603c:	ea42 0103 	orr.w	r1, r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	099b      	lsrs	r3, r3, #6
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10f      	bne.n	80060ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	099b      	lsrs	r3, r3, #6
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	4798      	blx	r3
    return;
 80060aa:	e0d7      	b.n	800625c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	085b      	lsrs	r3, r3, #1
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <HAL_SPI_IRQHandler+0x66>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	09db      	lsrs	r3, r3, #7
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
    return;
 80060cc:	e0c6      	b.n	800625c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_SPI_IRQHandler+0x8c>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80b4 	beq.w	800625c <HAL_SPI_IRQHandler+0x1f4>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80ad 	beq.w	800625c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	099b      	lsrs	r3, r3, #6
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d023      	beq.n	8006156 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b03      	cmp	r3, #3
 8006118:	d011      	beq.n	800613e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800611e:	f043 0204 	orr.w	r2, r3, #4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	e00b      	b.n	8006156 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	693b      	ldr	r3, [r7, #16]
        return;
 8006154:	e082      	b.n	800625c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d014      	beq.n	800618c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	0a1b      	lsrs	r3, r3, #8
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00c      	beq.n	80061b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619c:	f043 0208 	orr.w	r2, r3, #8
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d04f      	beq.n	800625a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d104      	bne.n	80061e6 <HAL_SPI_IRQHandler+0x17e>
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d034      	beq.n	8006250 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0203 	bic.w	r2, r2, #3
 80061f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d011      	beq.n	8006222 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006202:	4a18      	ldr	r2, [pc, #96]	@ (8006264 <HAL_SPI_IRQHandler+0x1fc>)
 8006204:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	4618      	mov	r0, r3
 800620c:	f7fc ff67 	bl	80030de <HAL_DMA_Abort_IT>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800621a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	2b00      	cmp	r3, #0
 8006228:	d016      	beq.n	8006258 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622e:	4a0d      	ldr	r2, [pc, #52]	@ (8006264 <HAL_SPI_IRQHandler+0x1fc>)
 8006230:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006236:	4618      	mov	r0, r3
 8006238:	f7fc ff51 	bl	80030de <HAL_DMA_Abort_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006246:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800624e:	e003      	b.n	8006258 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f809 	bl	8006268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006256:	e000      	b.n	800625a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006258:	bf00      	nop
    return;
 800625a:	bf00      	nop
  }
}
 800625c:	3720      	adds	r7, #32
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	08006299 	.word	0x08006299

08006268 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800628a:	b2db      	uxtb	r3, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff ffd7 	bl	8006268 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e049      	b.n	8006368 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb fc5b 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4619      	mov	r1, r3
 8006300:	4610      	mov	r0, r2
 8006302:	f000 f835 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a40      	ldr	r2, [pc, #256]	@ (8006484 <TIM_Base_SetConfig+0x114>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3d      	ldr	r2, [pc, #244]	@ (8006488 <TIM_Base_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3c      	ldr	r2, [pc, #240]	@ (800648c <TIM_Base_SetConfig+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006490 <TIM_Base_SetConfig+0x120>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	@ (8006494 <TIM_Base_SetConfig+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d108      	bne.n	80063c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006484 <TIM_Base_SetConfig+0x114>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d01f      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d0:	d01b      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006488 <TIM_Base_SetConfig+0x118>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d017      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2b      	ldr	r2, [pc, #172]	@ (800648c <TIM_Base_SetConfig+0x11c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d013      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006490 <TIM_Base_SetConfig+0x120>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00f      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a29      	ldr	r2, [pc, #164]	@ (8006494 <TIM_Base_SetConfig+0x124>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d00b      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a28      	ldr	r2, [pc, #160]	@ (8006498 <TIM_Base_SetConfig+0x128>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d007      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a27      	ldr	r2, [pc, #156]	@ (800649c <TIM_Base_SetConfig+0x12c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d003      	beq.n	800640a <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <TIM_Base_SetConfig+0x130>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d108      	bne.n	800641c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	4313      	orrs	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a10      	ldr	r2, [pc, #64]	@ (8006484 <TIM_Base_SetConfig+0x114>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00f      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a12      	ldr	r2, [pc, #72]	@ (8006494 <TIM_Base_SetConfig+0x124>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00b      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a11      	ldr	r2, [pc, #68]	@ (8006498 <TIM_Base_SetConfig+0x128>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d007      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a10      	ldr	r2, [pc, #64]	@ (800649c <TIM_Base_SetConfig+0x12c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a0f      	ldr	r2, [pc, #60]	@ (80064a0 <TIM_Base_SetConfig+0x130>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40013400 	.word	0x40013400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800

080064a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d101      	bne.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064b8:	2302      	movs	r3, #2
 80064ba:	e068      	b.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2202      	movs	r2, #2
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2e      	ldr	r2, [pc, #184]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2d      	ldr	r2, [pc, #180]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d108      	bne.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006508:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1e      	ldr	r2, [pc, #120]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01d      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800652e:	d018      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1b      	ldr	r2, [pc, #108]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1a      	ldr	r2, [pc, #104]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a18      	ldr	r2, [pc, #96]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a14      	ldr	r2, [pc, #80]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10c      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4313      	orrs	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40013400 	.word	0x40013400
 80065a4:	40000400 	.word	0x40000400
 80065a8:	40000800 	.word	0x40000800
 80065ac:	40000c00 	.word	0x40000c00
 80065b0:	40014000 	.word	0x40014000

080065b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e040      	b.n	8006648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fb34 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2224      	movs	r2, #36	@ 0x24
 80065e0:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fa18 	bl	8006a28 <UART_SetConfig>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e022      	b.n	8006648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fcc6 	bl	8006f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800661e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800662e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fd4d 	bl	80070e0 <UART_CheckIdleState>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006664:	2b20      	cmp	r3, #32
 8006666:	d17f      	bne.n	8006768 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_UART_Transmit+0x24>
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e078      	b.n	800676a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_UART_Transmit+0x36>
 8006682:	2302      	movs	r3, #2
 8006684:	e071      	b.n	800676a <HAL_UART_Transmit+0x11a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2221      	movs	r2, #33	@ 0x21
 8006698:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800669a:	f7fc fbdf 	bl	8002e5c <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b8:	d108      	bne.n	80066cc <HAL_UART_Transmit+0x7c>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d104      	bne.n	80066cc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	e003      	b.n	80066d4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    while (huart->TxXferCount > 0U)
 80066dc:	e02c      	b.n	8006738 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	2180      	movs	r1, #128	@ 0x80
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 fd3e 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e038      	b.n	800676a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	881a      	ldrh	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800670a:	b292      	uxth	r2, r2
 800670c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	3302      	adds	r3, #2
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	e007      	b.n	8006726 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1cc      	bne.n	80066de <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	2140      	movs	r1, #64	@ 0x40
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 fd0b 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e005      	b.n	800676a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	675a      	str	r2, [r3, #116]	@ 0x74

    return HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	e000      	b.n	800676a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006768:	2302      	movs	r3, #2
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3720      	adds	r7, #32
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	f640 030f 	movw	r3, #2063	@ 0x80f
 800679a:	4013      	ands	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d113      	bne.n	80067cc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	f003 0320 	and.w	r3, r3, #32
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d009      	beq.n	80067cc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8113 	beq.w	80069e8 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	4798      	blx	r3
      }
      return;
 80067ca:	e10d      	b.n	80069e8 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 80d6 	beq.w	8006980 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4b85      	ldr	r3, [pc, #532]	@ (80069f8 <HAL_UART_IRQHandler+0x284>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80cb 	beq.w	8006980 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00e      	beq.n	8006812 <HAL_UART_IRQHandler+0x9e>
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2201      	movs	r2, #1
 8006804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <HAL_UART_IRQHandler+0xc6>
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d009      	beq.n	800683a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2202      	movs	r2, #2
 800682c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006832:	f043 0204 	orr.w	r2, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00e      	beq.n	8006862 <HAL_UART_IRQHandler+0xee>
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2204      	movs	r2, #4
 8006854:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800685a:	f043 0202 	orr.w	r2, r3, #2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	67da      	str	r2, [r3, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800687c:	2b00      	cmp	r3, #0
 800687e:	d009      	beq.n	8006894 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800688c:	f043 0208 	orr.w	r2, r3, #8
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00f      	beq.n	80068be <HAL_UART_IRQHandler+0x14a>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068b6:	f043 0220 	orr.w	r2, r3, #32
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 8092 	beq.w	80069ec <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	f003 0320 	and.w	r3, r3, #32
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00c      	beq.n	80068ec <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068f0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fc:	2b40      	cmp	r3, #64	@ 0x40
 80068fe:	d004      	beq.n	800690a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006906:	2b00      	cmp	r3, #0
 8006908:	d031      	beq.n	800696e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fca8 	bl	8007260 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800691a:	2b40      	cmp	r3, #64	@ 0x40
 800691c:	d123      	bne.n	8006966 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800692c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d013      	beq.n	800695e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800693a:	4a30      	ldr	r2, [pc, #192]	@ (80069fc <HAL_UART_IRQHandler+0x288>)
 800693c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006942:	4618      	mov	r0, r3
 8006944:	f7fc fbcb 	bl	80030de <HAL_DMA_Abort_IT>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695c:	e00e      	b.n	800697c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f858 	bl	8006a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	e00a      	b.n	800697c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f854 	bl	8006a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696c:	e006      	b.n	800697c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f850 	bl	8006a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 800697a:	e037      	b.n	80069ec <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	bf00      	nop
    return;
 800697e:	e035      	b.n	80069ec <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00d      	beq.n	80069a6 <HAL_UART_IRQHandler+0x232>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800699c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fcad 	bl	80072fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069a4:	e025      	b.n	80069f2 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00d      	beq.n	80069cc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	4798      	blx	r3
    }
    return;
 80069ca:	e011      	b.n	80069f0 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <HAL_UART_IRQHandler+0x27e>
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fc73 	bl	80072cc <UART_EndTransmit_IT>
    return;
 80069e6:	e004      	b.n	80069f2 <HAL_UART_IRQHandler+0x27e>
      return;
 80069e8:	bf00      	nop
 80069ea:	e002      	b.n	80069f2 <HAL_UART_IRQHandler+0x27e>
    return;
 80069ec:	bf00      	nop
 80069ee:	e000      	b.n	80069f2 <HAL_UART_IRQHandler+0x27e>
    return;
 80069f0:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	04000120 	.word	0x04000120
 80069fc:	080072a1 	.word	0x080072a1

08006a00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a2c:	b08a      	sub	sp, #40	@ 0x28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4ba4      	ldr	r3, [pc, #656]	@ (8006ce8 <UART_SetConfig+0x2c0>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	6812      	ldr	r2, [r2, #0]
 8006a5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a60:	430b      	orrs	r3, r1
 8006a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a99      	ldr	r2, [pc, #612]	@ (8006cec <UART_SetConfig+0x2c4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a90:	4313      	orrs	r3, r2
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a90      	ldr	r2, [pc, #576]	@ (8006cf0 <UART_SetConfig+0x2c8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d126      	bne.n	8006b00 <UART_SetConfig+0xd8>
 8006ab2:	4b90      	ldr	r3, [pc, #576]	@ (8006cf4 <UART_SetConfig+0x2cc>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d81b      	bhi.n	8006af8 <UART_SetConfig+0xd0>
 8006ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ac8 <UART_SetConfig+0xa0>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006ad9 	.word	0x08006ad9
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006af1 	.word	0x08006af1
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ade:	e116      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae6:	e112      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aee:	e10e      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af6:	e10a      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afe:	e106      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a7c      	ldr	r2, [pc, #496]	@ (8006cf8 <UART_SetConfig+0x2d0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d138      	bne.n	8006b7c <UART_SetConfig+0x154>
 8006b0a:	4b7a      	ldr	r3, [pc, #488]	@ (8006cf4 <UART_SetConfig+0x2cc>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b10:	f003 030c 	and.w	r3, r3, #12
 8006b14:	2b0c      	cmp	r3, #12
 8006b16:	d82d      	bhi.n	8006b74 <UART_SetConfig+0x14c>
 8006b18:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <UART_SetConfig+0xf8>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b55 	.word	0x08006b55
 8006b24:	08006b75 	.word	0x08006b75
 8006b28:	08006b75 	.word	0x08006b75
 8006b2c:	08006b75 	.word	0x08006b75
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006b75 	.word	0x08006b75
 8006b38:	08006b75 	.word	0x08006b75
 8006b3c:	08006b75 	.word	0x08006b75
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	08006b75 	.word	0x08006b75
 8006b48:	08006b75 	.word	0x08006b75
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b6d 	.word	0x08006b6d
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5a:	e0d8      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b62:	e0d4      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006b64:	2304      	movs	r3, #4
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6a:	e0d0      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b72:	e0cc      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006b74:	2310      	movs	r3, #16
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b7a:	e0c8      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a5e      	ldr	r2, [pc, #376]	@ (8006cfc <UART_SetConfig+0x2d4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d125      	bne.n	8006bd2 <UART_SetConfig+0x1aa>
 8006b86:	4b5b      	ldr	r3, [pc, #364]	@ (8006cf4 <UART_SetConfig+0x2cc>)
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b90:	2b30      	cmp	r3, #48	@ 0x30
 8006b92:	d016      	beq.n	8006bc2 <UART_SetConfig+0x19a>
 8006b94:	2b30      	cmp	r3, #48	@ 0x30
 8006b96:	d818      	bhi.n	8006bca <UART_SetConfig+0x1a2>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d00a      	beq.n	8006bb2 <UART_SetConfig+0x18a>
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d814      	bhi.n	8006bca <UART_SetConfig+0x1a2>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <UART_SetConfig+0x182>
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d008      	beq.n	8006bba <UART_SetConfig+0x192>
 8006ba8:	e00f      	b.n	8006bca <UART_SetConfig+0x1a2>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb0:	e0ad      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb8:	e0a9      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006bba:	2304      	movs	r3, #4
 8006bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc0:	e0a5      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc8:	e0a1      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006bca:	2310      	movs	r3, #16
 8006bcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bd0:	e09d      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8006d00 <UART_SetConfig+0x2d8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d125      	bne.n	8006c28 <UART_SetConfig+0x200>
 8006bdc:	4b45      	ldr	r3, [pc, #276]	@ (8006cf4 <UART_SetConfig+0x2cc>)
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006be6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006be8:	d016      	beq.n	8006c18 <UART_SetConfig+0x1f0>
 8006bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bec:	d818      	bhi.n	8006c20 <UART_SetConfig+0x1f8>
 8006bee:	2b80      	cmp	r3, #128	@ 0x80
 8006bf0:	d00a      	beq.n	8006c08 <UART_SetConfig+0x1e0>
 8006bf2:	2b80      	cmp	r3, #128	@ 0x80
 8006bf4:	d814      	bhi.n	8006c20 <UART_SetConfig+0x1f8>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <UART_SetConfig+0x1d8>
 8006bfa:	2b40      	cmp	r3, #64	@ 0x40
 8006bfc:	d008      	beq.n	8006c10 <UART_SetConfig+0x1e8>
 8006bfe:	e00f      	b.n	8006c20 <UART_SetConfig+0x1f8>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c06:	e082      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c0e:	e07e      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c16:	e07a      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c1e:	e076      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c26:	e072      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a35      	ldr	r2, [pc, #212]	@ (8006d04 <UART_SetConfig+0x2dc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d12a      	bne.n	8006c88 <UART_SetConfig+0x260>
 8006c32:	4b30      	ldr	r3, [pc, #192]	@ (8006cf4 <UART_SetConfig+0x2cc>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c40:	d01a      	beq.n	8006c78 <UART_SetConfig+0x250>
 8006c42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c46:	d81b      	bhi.n	8006c80 <UART_SetConfig+0x258>
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4c:	d00c      	beq.n	8006c68 <UART_SetConfig+0x240>
 8006c4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c52:	d815      	bhi.n	8006c80 <UART_SetConfig+0x258>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <UART_SetConfig+0x238>
 8006c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5c:	d008      	beq.n	8006c70 <UART_SetConfig+0x248>
 8006c5e:	e00f      	b.n	8006c80 <UART_SetConfig+0x258>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c66:	e052      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e04e      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c76:	e04a      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	e046      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c86:	e042      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a17      	ldr	r2, [pc, #92]	@ (8006cec <UART_SetConfig+0x2c4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d13a      	bne.n	8006d08 <UART_SetConfig+0x2e0>
 8006c92:	4b18      	ldr	r3, [pc, #96]	@ (8006cf4 <UART_SetConfig+0x2cc>)
 8006c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca0:	d01a      	beq.n	8006cd8 <UART_SetConfig+0x2b0>
 8006ca2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca6:	d81b      	bhi.n	8006ce0 <UART_SetConfig+0x2b8>
 8006ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cac:	d00c      	beq.n	8006cc8 <UART_SetConfig+0x2a0>
 8006cae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb2:	d815      	bhi.n	8006ce0 <UART_SetConfig+0x2b8>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <UART_SetConfig+0x298>
 8006cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cbc:	d008      	beq.n	8006cd0 <UART_SetConfig+0x2a8>
 8006cbe:	e00f      	b.n	8006ce0 <UART_SetConfig+0x2b8>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc6:	e022      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cce:	e01e      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd6:	e01a      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cde:	e016      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ce6:	e012      	b.n	8006d0e <UART_SetConfig+0x2e6>
 8006ce8:	efff69f3 	.word	0xefff69f3
 8006cec:	40008000 	.word	0x40008000
 8006cf0:	40013800 	.word	0x40013800
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	40004400 	.word	0x40004400
 8006cfc:	40004800 	.word	0x40004800
 8006d00:	40004c00 	.word	0x40004c00
 8006d04:	40005000 	.word	0x40005000
 8006d08:	2310      	movs	r3, #16
 8006d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4aa0      	ldr	r2, [pc, #640]	@ (8006f94 <UART_SetConfig+0x56c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d17a      	bne.n	8006e0e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d824      	bhi.n	8006d6a <UART_SetConfig+0x342>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <UART_SetConfig+0x300>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d6b 	.word	0x08006d6b
 8006d30:	08006d55 	.word	0x08006d55
 8006d34:	08006d6b 	.word	0x08006d6b
 8006d38:	08006d5b 	.word	0x08006d5b
 8006d3c:	08006d6b 	.word	0x08006d6b
 8006d40:	08006d6b 	.word	0x08006d6b
 8006d44:	08006d6b 	.word	0x08006d6b
 8006d48:	08006d63 	.word	0x08006d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4c:	f7fe fb90 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8006d50:	61f8      	str	r0, [r7, #28]
        break;
 8006d52:	e010      	b.n	8006d76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d54:	4b90      	ldr	r3, [pc, #576]	@ (8006f98 <UART_SetConfig+0x570>)
 8006d56:	61fb      	str	r3, [r7, #28]
        break;
 8006d58:	e00d      	b.n	8006d76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5a:	f7fe faf1 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006d5e:	61f8      	str	r0, [r7, #28]
        break;
 8006d60:	e009      	b.n	8006d76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d66:	61fb      	str	r3, [r7, #28]
        break;
 8006d68:	e005      	b.n	8006d76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80fd 	beq.w	8006f78 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d305      	bcc.n	8006d9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d903      	bls.n	8006da2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006da0:	e0ea      	b.n	8006f78 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2200      	movs	r2, #0
 8006da6:	461c      	mov	r4, r3
 8006da8:	4615      	mov	r5, r2
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	022b      	lsls	r3, r5, #8
 8006db4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006db8:	0222      	lsls	r2, r4, #8
 8006dba:	68f9      	ldr	r1, [r7, #12]
 8006dbc:	6849      	ldr	r1, [r1, #4]
 8006dbe:	0849      	lsrs	r1, r1, #1
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	4688      	mov	r8, r1
 8006dc4:	4681      	mov	r9, r0
 8006dc6:	eb12 0a08 	adds.w	sl, r2, r8
 8006dca:	eb43 0b09 	adc.w	fp, r3, r9
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ddc:	4650      	mov	r0, sl
 8006dde:	4659      	mov	r1, fp
 8006de0:	f7f9 ff52 	bl	8000c88 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4613      	mov	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006df2:	d308      	bcc.n	8006e06 <UART_SetConfig+0x3de>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dfa:	d204      	bcs.n	8006e06 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	60da      	str	r2, [r3, #12]
 8006e04:	e0b8      	b.n	8006f78 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e0c:	e0b4      	b.n	8006f78 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e16:	d15f      	bne.n	8006ed8 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8006e18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d828      	bhi.n	8006e72 <UART_SetConfig+0x44a>
 8006e20:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <UART_SetConfig+0x400>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006e73 	.word	0x08006e73
 8006e38:	08006e63 	.word	0x08006e63
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fe fb10 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
        break;
 8006e52:	e014      	b.n	8006e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7fe fb22 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8006e58:	61f8      	str	r0, [r7, #28]
        break;
 8006e5a:	e010      	b.n	8006e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8006f98 <UART_SetConfig+0x570>)
 8006e5e:	61fb      	str	r3, [r7, #28]
        break;
 8006e60:	e00d      	b.n	8006e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e62:	f7fe fa6d 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006e66:	61f8      	str	r0, [r7, #28]
        break;
 8006e68:	e009      	b.n	8006e7e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6e:	61fb      	str	r3, [r7, #28]
        break;
 8006e70:	e005      	b.n	8006e7e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d079      	beq.n	8006f78 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	005a      	lsls	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d916      	bls.n	8006ed0 <UART_SetConfig+0x4a8>
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea8:	d212      	bcs.n	8006ed0 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	f023 030f 	bic.w	r3, r3, #15
 8006eb2:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	8afb      	ldrh	r3, [r7, #22]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	8afa      	ldrh	r2, [r7, #22]
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	e053      	b.n	8006f78 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ed6:	e04f      	b.n	8006f78 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d828      	bhi.n	8006f32 <UART_SetConfig+0x50a>
 8006ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee8 <UART_SetConfig+0x4c0>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f0d 	.word	0x08006f0d
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f1d 	.word	0x08006f1d
 8006ef4:	08006f33 	.word	0x08006f33
 8006ef8:	08006f23 	.word	0x08006f23
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f33 	.word	0x08006f33
 8006f08:	08006f2b 	.word	0x08006f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f0c:	f7fe fab0 	bl	8005470 <HAL_RCC_GetPCLK1Freq>
 8006f10:	61f8      	str	r0, [r7, #28]
        break;
 8006f12:	e014      	b.n	8006f3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f14:	f7fe fac2 	bl	800549c <HAL_RCC_GetPCLK2Freq>
 8006f18:	61f8      	str	r0, [r7, #28]
        break;
 8006f1a:	e010      	b.n	8006f3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8006f98 <UART_SetConfig+0x570>)
 8006f1e:	61fb      	str	r3, [r7, #28]
        break;
 8006f20:	e00d      	b.n	8006f3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f22:	f7fe fa0d 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8006f26:	61f8      	str	r0, [r7, #28]
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	61fb      	str	r3, [r7, #28]
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f3c:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d019      	beq.n	8006f78 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	085a      	lsrs	r2, r3, #1
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b0f      	cmp	r3, #15
 8006f5e:	d908      	bls.n	8006f72 <UART_SetConfig+0x54a>
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f66:	d204      	bcs.n	8006f72 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	60da      	str	r2, [r3, #12]
 8006f70:	e002      	b.n	8006f78 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8006f84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3728      	adds	r7, #40	@ 0x28
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f92:	bf00      	nop
 8006f94:	40008000 	.word	0x40008000
 8006f98:	00f42400 	.word	0x00f42400

08006f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01a      	beq.n	80070b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800709a:	d10a      	bne.n	80070b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]
  }
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af02      	add	r7, sp, #8
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80070ee:	f7fb feb5 	bl	8002e5c <HAL_GetTick>
 80070f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d10e      	bne.n	8007120 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007102:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f82a 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e020      	b.n	8007162 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b04      	cmp	r3, #4
 800712c:	d10e      	bne.n	800714c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800712e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f814 	bl	800716a <UART_WaitOnFlagUntilTimeout>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e00a      	b.n	8007162 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2220      	movs	r2, #32
 8007156:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4613      	mov	r3, r2
 8007178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717a:	e05d      	b.n	8007238 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d059      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007184:	f7fb fe6a 	bl	8002e5c <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	429a      	cmp	r2, r3
 8007192:	d302      	bcc.n	800719a <UART_WaitOnFlagUntilTimeout+0x30>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d11b      	bne.n	80071d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80071a8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2220      	movs	r2, #32
 80071be:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e042      	b.n	8007258 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02b      	beq.n	8007238 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071ee:	d123      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8007208:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0201 	bic.w	r2, r2, #1
 8007218:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e00f      	b.n	8007258 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69da      	ldr	r2, [r3, #28]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	429a      	cmp	r2, r3
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	429a      	cmp	r2, r3
 8007254:	d092      	beq.n	800717c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8007276:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff fba8 	bl	8006a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072c4:	bf00      	nop
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7ff fb85 	bl	8006a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007312:	b084      	sub	sp, #16
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	f107 001c 	add.w	r0, r7, #28
 8007320:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	2b01      	cmp	r3, #1
 8007328:	d122      	bne.n	8007370 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800733e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007354:	2b01      	cmp	r3, #1
 8007356:	d105      	bne.n	8007364 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f9db 	bl	8008720 <USB_CoreReset>
 800736a:	4603      	mov	r3, r0
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	e01a      	b.n	80073a6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f9cf 	bl	8008720 <USB_CoreReset>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d106      	bne.n	800739a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	639a      	str	r2, [r3, #56]	@ 0x38
 8007398:	e005      	b.n	80073a6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073b2:	b004      	add	sp, #16
 80073b4:	4770      	bx	lr
	...

080073b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d165      	bne.n	8007498 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4a3e      	ldr	r2, [pc, #248]	@ (80074c8 <USB_SetTurnaroundTime+0x110>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d906      	bls.n	80073e2 <USB_SetTurnaroundTime+0x2a>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4a3d      	ldr	r2, [pc, #244]	@ (80074cc <USB_SetTurnaroundTime+0x114>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d202      	bcs.n	80073e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80073dc:	230f      	movs	r3, #15
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e05c      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	4a39      	ldr	r2, [pc, #228]	@ (80074cc <USB_SetTurnaroundTime+0x114>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d306      	bcc.n	80073f8 <USB_SetTurnaroundTime+0x40>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4a38      	ldr	r2, [pc, #224]	@ (80074d0 <USB_SetTurnaroundTime+0x118>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d202      	bcs.n	80073f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80073f2:	230e      	movs	r3, #14
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	e051      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4a35      	ldr	r2, [pc, #212]	@ (80074d0 <USB_SetTurnaroundTime+0x118>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d306      	bcc.n	800740e <USB_SetTurnaroundTime+0x56>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4a34      	ldr	r2, [pc, #208]	@ (80074d4 <USB_SetTurnaroundTime+0x11c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d202      	bcs.n	800740e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007408:	230d      	movs	r3, #13
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e046      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4a30      	ldr	r2, [pc, #192]	@ (80074d4 <USB_SetTurnaroundTime+0x11c>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d306      	bcc.n	8007424 <USB_SetTurnaroundTime+0x6c>
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	4a2f      	ldr	r2, [pc, #188]	@ (80074d8 <USB_SetTurnaroundTime+0x120>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d802      	bhi.n	8007424 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800741e:	230c      	movs	r3, #12
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e03b      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	4a2c      	ldr	r2, [pc, #176]	@ (80074d8 <USB_SetTurnaroundTime+0x120>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d906      	bls.n	800743a <USB_SetTurnaroundTime+0x82>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4a2b      	ldr	r2, [pc, #172]	@ (80074dc <USB_SetTurnaroundTime+0x124>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d802      	bhi.n	800743a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007434:	230b      	movs	r3, #11
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e030      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	4a27      	ldr	r2, [pc, #156]	@ (80074dc <USB_SetTurnaroundTime+0x124>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d906      	bls.n	8007450 <USB_SetTurnaroundTime+0x98>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	4a26      	ldr	r2, [pc, #152]	@ (80074e0 <USB_SetTurnaroundTime+0x128>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d802      	bhi.n	8007450 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800744a:	230a      	movs	r3, #10
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	e025      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4a23      	ldr	r2, [pc, #140]	@ (80074e0 <USB_SetTurnaroundTime+0x128>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d906      	bls.n	8007466 <USB_SetTurnaroundTime+0xae>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4a22      	ldr	r2, [pc, #136]	@ (80074e4 <USB_SetTurnaroundTime+0x12c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d202      	bcs.n	8007466 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007460:	2309      	movs	r3, #9
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e01a      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	4a1e      	ldr	r2, [pc, #120]	@ (80074e4 <USB_SetTurnaroundTime+0x12c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d306      	bcc.n	800747c <USB_SetTurnaroundTime+0xc4>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4a1d      	ldr	r2, [pc, #116]	@ (80074e8 <USB_SetTurnaroundTime+0x130>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d802      	bhi.n	800747c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007476:	2308      	movs	r3, #8
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e00f      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4a1a      	ldr	r2, [pc, #104]	@ (80074e8 <USB_SetTurnaroundTime+0x130>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d906      	bls.n	8007492 <USB_SetTurnaroundTime+0xda>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4a19      	ldr	r2, [pc, #100]	@ (80074ec <USB_SetTurnaroundTime+0x134>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d202      	bcs.n	8007492 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800748c:	2307      	movs	r3, #7
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e004      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007492:	2306      	movs	r3, #6
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e001      	b.n	800749c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007498:	2309      	movs	r3, #9
 800749a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	029b      	lsls	r3, r3, #10
 80074b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	00d8acbf 	.word	0x00d8acbf
 80074cc:	00e4e1c0 	.word	0x00e4e1c0
 80074d0:	00f42400 	.word	0x00f42400
 80074d4:	01067380 	.word	0x01067380
 80074d8:	011a499f 	.word	0x011a499f
 80074dc:	01312cff 	.word	0x01312cff
 80074e0:	014ca43f 	.word	0x014ca43f
 80074e4:	016e3600 	.word	0x016e3600
 80074e8:	01a6ab1f 	.word	0x01a6ab1f
 80074ec:	01e84800 	.word	0x01e84800

080074f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f043 0201 	orr.w	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f023 0201 	bic.w	r2, r3, #1
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d106      	bne.n	8007560 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	e00b      	b.n	8007578 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	e001      	b.n	8007578 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e003      	b.n	8007580 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007578:	2032      	movs	r0, #50	@ 0x32
 800757a:	f7fb fc7b 	bl	8002e74 <HAL_Delay>

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007588:	b084      	sub	sp, #16
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	e009      	b.n	80075bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	3340      	adds	r3, #64	@ 0x40
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b0e      	cmp	r3, #14
 80075c0:	d9f2      	bls.n	80075a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80075c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11c      	bne.n	8007602 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d6:	f043 0302 	orr.w	r3, r3, #2
 80075da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e005      	b.n	800760e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007606:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007614:	461a      	mov	r2, r3
 8007616:	2300      	movs	r3, #0
 8007618:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007620:	4619      	mov	r1, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007628:	461a      	mov	r2, r3
 800762a:	680b      	ldr	r3, [r1, #0]
 800762c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800762e:	2103      	movs	r1, #3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f93d 	bl	80078b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007636:	2110      	movs	r1, #16
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f8f1 	bl	8007820 <USB_FlushTxFifo>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f90f 	bl	800786c <USB_FlushRxFifo>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800765e:	461a      	mov	r2, r3
 8007660:	2300      	movs	r3, #0
 8007662:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800766a:	461a      	mov	r2, r3
 800766c:	2300      	movs	r3, #0
 800766e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007676:	461a      	mov	r2, r3
 8007678:	2300      	movs	r3, #0
 800767a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800767c:	2300      	movs	r3, #0
 800767e:	613b      	str	r3, [r7, #16]
 8007680:	e043      	b.n	800770a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007698:	d118      	bne.n	80076cc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ac:	461a      	mov	r2, r3
 80076ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	e013      	b.n	80076de <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	e008      	b.n	80076de <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	2300      	movs	r3, #0
 80076dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ea:	461a      	mov	r2, r3
 80076ec:	2300      	movs	r3, #0
 80076ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076fc:	461a      	mov	r2, r3
 80076fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007702:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	3301      	adds	r3, #1
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	d3b7      	bcc.n	8007682 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007712:	2300      	movs	r3, #0
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	e043      	b.n	80077a0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800772a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772e:	d118      	bne.n	8007762 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007742:	461a      	mov	r2, r3
 8007744:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e013      	b.n	8007774 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007758:	461a      	mov	r2, r3
 800775a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	e008      	b.n	8007774 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776e:	461a      	mov	r2, r3
 8007770:	2300      	movs	r3, #0
 8007772:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007780:	461a      	mov	r2, r3
 8007782:	2300      	movs	r3, #0
 8007784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007792:	461a      	mov	r2, r3
 8007794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3301      	adds	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d3b7      	bcc.n	8007718 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80077c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f043 0210 	orr.w	r2, r3, #16
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	4b10      	ldr	r3, [pc, #64]	@ (800781c <USB_DevInit+0x294>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d005      	beq.n	80077f4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f043 0208 	orr.w	r2, r3, #8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d107      	bne.n	800780a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007802:	f043 0304 	orr.w	r3, r3, #4
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800780a:	7dfb      	ldrb	r3, [r7, #23]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007816:	b004      	add	sp, #16
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	803c3800 	.word	0x803c3800

08007820 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	019b      	lsls	r3, r3, #6
 8007832:	f043 0220 	orr.w	r2, r3, #32
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4a09      	ldr	r2, [pc, #36]	@ (8007868 <USB_FlushTxFifo+0x48>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d901      	bls.n	800784c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e006      	b.n	800785a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b20      	cmp	r3, #32
 8007856:	d0f0      	beq.n	800783a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	00030d40 	.word	0x00030d40

0800786c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2210      	movs	r2, #16
 800787c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4a09      	ldr	r2, [pc, #36]	@ (80078ac <USB_FlushRxFifo+0x40>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d901      	bls.n	8007890 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e006      	b.n	800789e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b10      	cmp	r3, #16
 800789a:	d0f0      	beq.n	800787e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	00030d40 	.word	0x00030d40

080078b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	68f9      	ldr	r1, [r7, #12]
 80078cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078d0:	4313      	orrs	r3, r2
 80078d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 0306 	and.w	r3, r3, #6
 80078fa:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d002      	beq.n	8007908 <USB_GetDevSpeed+0x26>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b06      	cmp	r3, #6
 8007906:	d102      	bne.n	800790e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007908:	2302      	movs	r3, #2
 800790a:	75fb      	strb	r3, [r7, #23]
 800790c:	e001      	b.n	8007912 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800790e:	230f      	movs	r3, #15
 8007910:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
}
 8007914:	4618      	mov	r0, r3
 8007916:	371c      	adds	r7, #28
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	785b      	ldrb	r3, [r3, #1]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d13a      	bne.n	80079b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	2101      	movs	r1, #1
 800794e:	fa01 f303 	lsl.w	r3, r1, r3
 8007952:	b29b      	uxth	r3, r3
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800795a:	4313      	orrs	r3, r2
 800795c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4413      	add	r3, r2
 8007966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d155      	bne.n	8007a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007990:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	059b      	lsls	r3, r3, #22
 8007996:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007998:	4313      	orrs	r3, r2
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	0151      	lsls	r1, r2, #5
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	440a      	add	r2, r1
 80079a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	e036      	b.n	8007a20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b8:	69da      	ldr	r2, [r3, #28]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	2101      	movs	r1, #1
 80079c4:	fa01 f303 	lsl.w	r3, r1, r3
 80079c8:	041b      	lsls	r3, r3, #16
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d11a      	bne.n	8007a20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	78db      	ldrb	r3, [r3, #3]
 8007a04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a06:	430b      	orrs	r3, r1
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
	...

08007a30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d161      	bne.n	8007b10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a62:	d11f      	bne.n	8007aa4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f003 030f 	and.w	r3, r3, #15
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	2101      	movs	r1, #1
 8007ada:	fa01 f303 	lsl.w	r3, r1, r3
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	43db      	mvns	r3, r3
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ae8:	4013      	ands	r3, r2
 8007aea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0159      	lsls	r1, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b06:	4619      	mov	r1, r3
 8007b08:	4b35      	ldr	r3, [pc, #212]	@ (8007be0 <USB_DeactivateEndpoint+0x1b0>)
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	600b      	str	r3, [r1, #0]
 8007b0e:	e060      	b.n	8007bd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b26:	d11f      	bne.n	8007b68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	0151      	lsls	r1, r2, #5
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	440a      	add	r2, r1
 8007b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	2101      	movs	r1, #1
 8007b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7e:	041b      	lsls	r3, r3, #16
 8007b80:	43db      	mvns	r3, r3
 8007b82:	68f9      	ldr	r1, [r7, #12]
 8007b84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b88:	4013      	ands	r3, r2
 8007b8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	f003 030f 	and.w	r3, r3, #15
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	43db      	mvns	r3, r3
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bac:	4013      	ands	r3, r2
 8007bae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	0159      	lsls	r1, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <USB_DeactivateEndpoint+0x1b4>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	ec337800 	.word	0xec337800
 8007be4:	eff37800 	.word	0xeff37800

08007be8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	785b      	ldrb	r3, [r3, #1]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	f040 810a 	bne.w	8007e1a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d132      	bne.n	8007c74 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c28:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007c2c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007c30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c6c:	0cdb      	lsrs	r3, r3, #19
 8007c6e:	04db      	lsls	r3, r3, #19
 8007c70:	6113      	str	r3, [r2, #16]
 8007c72:	e074      	b.n	8007d5e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c8e:	0cdb      	lsrs	r3, r3, #19
 8007c90:	04db      	lsls	r3, r3, #19
 8007c92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	0151      	lsls	r1, r2, #5
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	440a      	add	r2, r1
 8007caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007cb2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007cb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	6959      	ldr	r1, [r3, #20]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	440b      	add	r3, r1
 8007cd0:	1e59      	subs	r1, r3, #1
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cda:	04d9      	lsls	r1, r3, #19
 8007cdc:	4baf      	ldr	r3, [pc, #700]	@ (8007f9c <USB_EPStartXfer+0x3b4>)
 8007cde:	400b      	ands	r3, r1
 8007ce0:	6939      	ldr	r1, [r7, #16]
 8007ce2:	0148      	lsls	r0, r1, #5
 8007ce4:	6979      	ldr	r1, [r7, #20]
 8007ce6:	4401      	add	r1, r0
 8007ce8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007cec:	4313      	orrs	r3, r2
 8007cee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d06:	6939      	ldr	r1, [r7, #16]
 8007d08:	0148      	lsls	r0, r1, #5
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	4401      	add	r1, r0
 8007d0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007d12:	4313      	orrs	r3, r2
 8007d14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	78db      	ldrb	r3, [r3, #3]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d11f      	bne.n	8007d5e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d38:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007d3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d5c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	0151      	lsls	r1, r2, #5
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	440a      	add	r2, r1
 8007d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d7c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	78db      	ldrb	r3, [r3, #3]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d015      	beq.n	8007db2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 8100 	beq.w	8007f90 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	2101      	movs	r1, #1
 8007da2:	fa01 f303 	lsl.w	r3, r1, r3
 8007da6:	6979      	ldr	r1, [r7, #20]
 8007da8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dac:	4313      	orrs	r3, r2
 8007dae:	634b      	str	r3, [r1, #52]	@ 0x34
 8007db0:	e0ee      	b.n	8007f90 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d110      	bne.n	8007de4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	0151      	lsls	r1, r2, #5
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	440a      	add	r2, r1
 8007dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ddc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007de0:	6013      	str	r3, [r2, #0]
 8007de2:	e00f      	b.n	8007e04 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e02:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68d9      	ldr	r1, [r3, #12]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9e2 	bl	80081dc <USB_WritePacket>
 8007e18:	e0ba      	b.n	8007f90 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	0151      	lsls	r1, r2, #5
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	440a      	add	r2, r1
 8007e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e34:	0cdb      	lsrs	r3, r3, #19
 8007e36:	04db      	lsls	r3, r3, #19
 8007e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	0151      	lsls	r1, r2, #5
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	440a      	add	r2, r1
 8007e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e54:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e58:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e5c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d123      	bne.n	8007eae <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e7c:	6939      	ldr	r1, [r7, #16]
 8007e7e:	0148      	lsls	r0, r1, #5
 8007e80:	6979      	ldr	r1, [r7, #20]
 8007e82:	4401      	add	r1, r0
 8007e84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	0151      	lsls	r1, r2, #5
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	440a      	add	r2, r1
 8007ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ea6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007eaa:	6113      	str	r3, [r2, #16]
 8007eac:	e033      	b.n	8007f16 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	1e5a      	subs	r2, r3, #1
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	89fb      	ldrh	r3, [r7, #14]
 8007ed4:	04d9      	lsls	r1, r3, #19
 8007ed6:	4b31      	ldr	r3, [pc, #196]	@ (8007f9c <USB_EPStartXfer+0x3b4>)
 8007ed8:	400b      	ands	r3, r1
 8007eda:	6939      	ldr	r1, [r7, #16]
 8007edc:	0148      	lsls	r0, r1, #5
 8007ede:	6979      	ldr	r1, [r7, #20]
 8007ee0:	4401      	add	r1, r0
 8007ee2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	89f9      	ldrh	r1, [r7, #14]
 8007efe:	fb01 f303 	mul.w	r3, r1, r3
 8007f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f06:	6939      	ldr	r1, [r7, #16]
 8007f08:	0148      	lsls	r0, r1, #5
 8007f0a:	6979      	ldr	r1, [r7, #20]
 8007f0c:	4401      	add	r1, r0
 8007f0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f12:	4313      	orrs	r3, r2
 8007f14:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	78db      	ldrb	r3, [r3, #3]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d128      	bne.n	8007f70 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d110      	bne.n	8007f50 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e00f      	b.n	8007f70 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f6e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f8a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007f8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	1ff80000 	.word	0x1ff80000

08007fa0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	785b      	ldrb	r3, [r3, #1]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	f040 80ab 	bne.w	8008114 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d132      	bne.n	800802c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fe0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007fe4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008004:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	0151      	lsls	r1, r2, #5
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	440a      	add	r2, r1
 8008020:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008024:	0cdb      	lsrs	r3, r3, #19
 8008026:	04db      	lsls	r3, r3, #19
 8008028:	6113      	str	r3, [r2, #16]
 800802a:	e04e      	b.n	80080ca <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	440a      	add	r2, r1
 8008042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008046:	0cdb      	lsrs	r3, r3, #19
 8008048:	04db      	lsls	r3, r3, #19
 800804a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	440a      	add	r2, r1
 8008062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008066:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800806a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800806e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	429a      	cmp	r2, r3
 800807a:	d903      	bls.n	8008084 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	015a      	lsls	r2, r3, #5
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	0151      	lsls	r1, r2, #5
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	440a      	add	r2, r1
 800809a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80080a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	0148      	lsls	r0, r1, #5
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	4401      	add	r1, r0
 80080c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080c6:	4313      	orrs	r3, r2
 80080c8:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	0151      	lsls	r1, r2, #5
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	440a      	add	r2, r1
 80080e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80080e8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d06d      	beq.n	80081ce <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	2101      	movs	r1, #1
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800810e:	4313      	orrs	r3, r2
 8008110:	634b      	str	r3, [r1, #52]	@ 0x34
 8008112:	e05c      	b.n	80081ce <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	0151      	lsls	r1, r2, #5
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	440a      	add	r2, r1
 800812a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800812e:	0cdb      	lsrs	r3, r3, #19
 8008130:	04db      	lsls	r3, r3, #19
 8008132:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	0151      	lsls	r1, r2, #5
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	440a      	add	r2, r1
 800814a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800814e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008152:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008156:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008182:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	0148      	lsls	r0, r1, #5
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	4401      	add	r1, r0
 80081a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80081dc:	b480      	push	{r7}
 80081de:	b089      	sub	sp, #36	@ 0x24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4611      	mov	r1, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	460b      	mov	r3, r1
 80081ec:	71fb      	strb	r3, [r7, #7]
 80081ee:	4613      	mov	r3, r2
 80081f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80081fa:	88bb      	ldrh	r3, [r7, #4]
 80081fc:	3303      	adds	r3, #3
 80081fe:	089b      	lsrs	r3, r3, #2
 8008200:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008202:	2300      	movs	r3, #0
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	e00f      	b.n	8008228 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008208:	79fb      	ldrb	r3, [r7, #7]
 800820a:	031a      	lsls	r2, r3, #12
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	4413      	add	r3, r2
 8008210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008214:	461a      	mov	r2, r3
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	3304      	adds	r3, #4
 8008220:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	3301      	adds	r3, #1
 8008226:	61bb      	str	r3, [r7, #24]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	d3eb      	bcc.n	8008208 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3724      	adds	r7, #36	@ 0x24
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800823e:	b480      	push	{r7}
 8008240:	b089      	sub	sp, #36	@ 0x24
 8008242:	af00      	add	r7, sp, #0
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	4613      	mov	r3, r2
 800824a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	3303      	adds	r3, #3
 8008258:	089b      	lsrs	r3, r3, #2
 800825a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800825c:	2300      	movs	r3, #0
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	e00b      	b.n	800827a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	601a      	str	r2, [r3, #0]
    pDest++;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	3304      	adds	r3, #4
 8008272:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	3301      	adds	r3, #1
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	d3ef      	bcc.n	8008262 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008282:	69fb      	ldr	r3, [r7, #28]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3724      	adds	r7, #36	@ 0x24
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d12c      	bne.n	8008306 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	015a      	lsls	r2, r3, #5
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	db12      	blt.n	80082e4 <USB_EPSetStall+0x54>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00f      	beq.n	80082e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	e02b      	b.n	800835e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	db12      	blt.n	800833e <USB_EPSetStall+0xae>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00f      	beq.n	800833e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	440a      	add	r2, r1
 8008334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008338:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800833c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4413      	add	r3, r2
 8008346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	0151      	lsls	r1, r2, #5
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	440a      	add	r2, r1
 8008354:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008358:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800835c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	785b      	ldrb	r3, [r3, #1]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d128      	bne.n	80083da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	78db      	ldrb	r3, [r3, #3]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d003      	beq.n	80083b8 <USB_EPClearStall+0x4c>
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	78db      	ldrb	r3, [r3, #3]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d138      	bne.n	800842a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	e027      	b.n	800842a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	0151      	lsls	r1, r2, #5
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	440a      	add	r2, r1
 80083f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	78db      	ldrb	r3, [r3, #3]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d003      	beq.n	800840a <USB_EPClearStall+0x9e>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	78db      	ldrb	r3, [r3, #3]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d10f      	bne.n	800842a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	0151      	lsls	r1, r2, #5
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	440a      	add	r2, r1
 8008420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008428:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3714      	adds	r7, #20
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008456:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800845a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800846c:	68f9      	ldr	r1, [r7, #12]
 800846e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008472:	4313      	orrs	r3, r2
 8008474:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084b2:	f023 0302 	bic.w	r3, r3, #2
 80084b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084e0:	f023 0303 	bic.w	r3, r3, #3
 80084e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084f4:	f043 0302 	orr.w	r3, r3, #2
 80084f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	4013      	ands	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008520:	68fb      	ldr	r3, [r7, #12]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	4013      	ands	r3, r2
 8008550:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	0c1b      	lsrs	r3, r3, #16
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	4013      	ands	r3, r2
 8008584:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	b29b      	uxth	r3, r3
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	460b      	mov	r3, r1
 80085a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	4013      	ands	r3, r2
 80085c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085c4:	68bb      	ldr	r3, [r7, #8]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b087      	sub	sp, #28
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	f003 030f 	and.w	r3, r3, #15
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008602:	01db      	lsls	r3, r3, #7
 8008604:	b2db      	uxtb	r3, r3
 8008606:	693a      	ldr	r2, [r7, #16]
 8008608:	4313      	orrs	r3, r2
 800860a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800860c:	78fb      	ldrb	r3, [r7, #3]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	4013      	ands	r3, r2
 800861e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008620:	68bb      	ldr	r3, [r7, #8]
}
 8008622:	4618      	mov	r0, r3
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800862e:	b480      	push	{r7}
 8008630:	b083      	sub	sp, #12
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f003 0301 	and.w	r3, r3, #1
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800864a:	b480      	push	{r7}
 800864c:	b085      	sub	sp, #20
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008664:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008668:	f023 0307 	bic.w	r3, r3, #7
 800866c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800867c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	333c      	adds	r3, #60	@ 0x3c
 80086a2:	3304      	adds	r3, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4a1c      	ldr	r2, [pc, #112]	@ (800871c <USB_EP0_OutStart+0x8c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d90a      	bls.n	80086c6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086c0:	d101      	bne.n	80086c6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	e024      	b.n	8008710 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086cc:	461a      	mov	r2, r3
 80086ce:	2300      	movs	r3, #0
 80086d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086f4:	f043 0318 	orr.w	r3, r3, #24
 80086f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008708:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800870c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	4f54300a 	.word	0x4f54300a

08008720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3301      	adds	r3, #1
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4a13      	ldr	r2, [pc, #76]	@ (8008784 <USB_CoreReset+0x64>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d901      	bls.n	800873e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e01b      	b.n	8008776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	daf2      	bge.n	800872c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f043 0201 	orr.w	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4a09      	ldr	r2, [pc, #36]	@ (8008784 <USB_CoreReset+0x64>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d901      	bls.n	8008768 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e006      	b.n	8008776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b01      	cmp	r3, #1
 8008772:	d0f0      	beq.n	8008756 <USB_CoreReset+0x36>

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	00030d40 	.word	0x00030d40

08008788 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008794:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008798:	f002 fa02 	bl	800aba0 <malloc>
 800879c:	4603      	mov	r3, r0
 800879e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d105      	bne.n	80087b2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 80087ae:	2302      	movs	r3, #2
 80087b0:	e066      	b.n	8008880 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	7c1b      	ldrb	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d119      	bne.n	80087f6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087c6:	2202      	movs	r2, #2
 80087c8:	2181      	movs	r1, #129	@ 0x81
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 ffce 	bl	800a76c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80087d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80087da:	2202      	movs	r2, #2
 80087dc:	2101      	movs	r1, #1
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 ffc4 	bl	800a76c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2210      	movs	r2, #16
 80087f0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 80087f4:	e016      	b.n	8008824 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80087f6:	2340      	movs	r3, #64	@ 0x40
 80087f8:	2202      	movs	r2, #2
 80087fa:	2181      	movs	r1, #129	@ 0x81
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 ffb5 	bl	800a76c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008808:	2340      	movs	r3, #64	@ 0x40
 800880a:	2202      	movs	r2, #2
 800880c:	2101      	movs	r1, #1
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 ffac 	bl	800a76c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2210      	movs	r2, #16
 8008820:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008824:	2308      	movs	r3, #8
 8008826:	2203      	movs	r2, #3
 8008828:	2182      	movs	r1, #130	@ 0x82
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 ff9e 	bl	800a76c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7c1b      	ldrb	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008864:	2101      	movs	r1, #1
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f002 f8fa 	bl	800aa60 <USBD_LL_PrepareReceive>
 800886c:	e007      	b.n	800887e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008874:	2340      	movs	r3, #64	@ 0x40
 8008876:	2101      	movs	r1, #1
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f002 f8f1 	bl	800aa60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008894:	2181      	movs	r1, #129	@ 0x81
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f001 ffa6 	bl	800a7e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80088a2:	2101      	movs	r1, #1
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 ff9f 	bl	800a7e8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80088b2:	2182      	movs	r1, #130	@ 0x82
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 ff97 	bl	800a7e8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80088e4:	4618      	mov	r0, r3
 80088e6:	f002 f963 	bl	800abb0 <free>
    pdev->pClassData = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800890c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03a      	beq.n	800899c <USBD_CDC_Setup+0xa0>
 8008926:	2b20      	cmp	r3, #32
 8008928:	f040 8097 	bne.w	8008a5a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	88db      	ldrh	r3, [r3, #6]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d029      	beq.n	8008988 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	b25b      	sxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	da11      	bge.n	8008962 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800894a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	88d2      	ldrh	r2, [r2, #6]
 8008950:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008952:	6939      	ldr	r1, [r7, #16]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	88db      	ldrh	r3, [r3, #6]
 8008958:	461a      	mov	r2, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 faae 	bl	8009ebc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008960:	e082      	b.n	8008a68 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	785a      	ldrb	r2, [r3, #1]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	88db      	ldrh	r3, [r3, #6]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008978:	6939      	ldr	r1, [r7, #16]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	88db      	ldrh	r3, [r3, #6]
 800897e:	461a      	mov	r2, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f001 fac7 	bl	8009f14 <USBD_CtlPrepareRx>
      break;
 8008986:	e06f      	b.n	8008a68 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	7850      	ldrb	r0, [r2, #1]
 8008994:	2200      	movs	r2, #0
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	4798      	blx	r3
      break;
 800899a:	e065      	b.n	8008a68 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b0b      	cmp	r3, #11
 80089a2:	d84f      	bhi.n	8008a44 <USBD_CDC_Setup+0x148>
 80089a4:	a201      	add	r2, pc, #4	@ (adr r2, 80089ac <USBD_CDC_Setup+0xb0>)
 80089a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089aa:	bf00      	nop
 80089ac:	080089dd 	.word	0x080089dd
 80089b0:	08008a53 	.word	0x08008a53
 80089b4:	08008a45 	.word	0x08008a45
 80089b8:	08008a45 	.word	0x08008a45
 80089bc:	08008a45 	.word	0x08008a45
 80089c0:	08008a45 	.word	0x08008a45
 80089c4:	08008a45 	.word	0x08008a45
 80089c8:	08008a45 	.word	0x08008a45
 80089cc:	08008a45 	.word	0x08008a45
 80089d0:	08008a45 	.word	0x08008a45
 80089d4:	08008a05 	.word	0x08008a05
 80089d8:	08008a2d 	.word	0x08008a2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d107      	bne.n	80089f6 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80089e6:	f107 030c 	add.w	r3, r7, #12
 80089ea:	2202      	movs	r2, #2
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f001 fa64 	bl	8009ebc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80089f4:	e030      	b.n	8008a58 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f001 f9ee 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 80089fe:	2303      	movs	r3, #3
 8008a00:	75fb      	strb	r3, [r7, #23]
          break;
 8008a02:	e029      	b.n	8008a58 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d107      	bne.n	8008a1e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a0e:	f107 030f 	add.w	r3, r7, #15
 8008a12:	2201      	movs	r2, #1
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fa50 	bl	8009ebc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a1c:	e01c      	b.n	8008a58 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 f9da 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 8008a26:	2303      	movs	r3, #3
 8008a28:	75fb      	strb	r3, [r7, #23]
          break;
 8008a2a:	e015      	b.n	8008a58 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d00f      	beq.n	8008a56 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f001 f9ce 	bl	8009dda <USBD_CtlError>
            ret = USBD_FAIL;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008a42:	e008      	b.n	8008a56 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 f9c7 	bl	8009dda <USBD_CtlError>
          ret = USBD_FAIL;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8008a50:	e002      	b.n	8008a58 <USBD_CDC_Setup+0x15c>
          break;
 8008a52:	bf00      	nop
 8008a54:	e008      	b.n	8008a68 <USBD_CDC_Setup+0x16c>
          break;
 8008a56:	bf00      	nop
      }
      break;
 8008a58:	e006      	b.n	8008a68 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 f9bc 	bl	8009dda <USBD_CtlError>
      ret = USBD_FAIL;
 8008a62:	2303      	movs	r3, #3
 8008a64:	75fb      	strb	r3, [r7, #23]
      break;
 8008a66:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop

08008a74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008a86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e04f      	b.n	8008b36 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008a9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008a9e:	78fa      	ldrb	r2, [r7, #3]
 8008aa0:	6879      	ldr	r1, [r7, #4]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	440b      	add	r3, r1
 8008aac:	3318      	adds	r3, #24
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d029      	beq.n	8008b08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	3318      	adds	r3, #24
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	78f9      	ldrb	r1, [r7, #3]
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	460b      	mov	r3, r1
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	1a5b      	subs	r3, r3, r1
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4403      	add	r3, r0
 8008ad4:	3344      	adds	r3, #68	@ 0x44
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d110      	bne.n	8008b08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008ae6:	78fa      	ldrb	r2, [r7, #3]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	3318      	adds	r3, #24
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008afa:	78f9      	ldrb	r1, [r7, #3]
 8008afc:	2300      	movs	r3, #0
 8008afe:	2200      	movs	r2, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 ff75 	bl	800a9f0 <USBD_LL_Transmit>
 8008b06:	e015      	b.n	8008b34 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00b      	beq.n	8008b34 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d101      	bne.n	8008b60 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e015      	b.n	8008b8c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f001 ffb3 	bl	800aad0 <USBD_LL_GetRxDataSize>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008b86:	4611      	mov	r1, r2
 8008b88:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ba2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d014      	beq.n	8008bd8 <USBD_CDC_EP0_RxReady+0x44>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008bb4:	2bff      	cmp	r3, #255	@ 0xff
 8008bb6:	d00f      	beq.n	8008bd8 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008bc6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008bce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	22ff      	movs	r2, #255	@ 0xff
 8008bd4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2243      	movs	r2, #67	@ 0x43
 8008bf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	@ (8008c00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20000130 	.word	0x20000130

08008c04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2243      	movs	r2, #67	@ 0x43
 8008c10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008c12:	4b03      	ldr	r3, [pc, #12]	@ (8008c20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	200000ec 	.word	0x200000ec

08008c24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2243      	movs	r2, #67	@ 0x43
 8008c30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008c32:	4b03      	ldr	r3, [pc, #12]	@ (8008c40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000174 	.word	0x20000174

08008c44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	220a      	movs	r2, #10
 8008c50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c52:	4b03      	ldr	r3, [pc, #12]	@ (8008c60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	200000a8 	.word	0x200000a8

08008c64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e004      	b.n	8008c82 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b087      	sub	sp, #28
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ca0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cd0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d101      	bne.n	8008d06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e016      	b.n	8008d34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	7c1b      	ldrb	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d109      	bne.n	8008d22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d18:	2101      	movs	r1, #1
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fea0 	bl	800aa60 <USBD_LL_PrepareReceive>
 8008d20:	e007      	b.n	8008d32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d28:	2340      	movs	r3, #64	@ 0x40
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fe97 	bl	800aa60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e01f      	b.n	8008d94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	79fa      	ldrb	r2, [r7, #7]
 8008d86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f001 fc71 	bl	800a670 <USBD_LL_Init>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e016      	b.n	8008de2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	683a      	ldr	r2, [r7, #0]
 8008db8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	f107 020e 	add.w	r2, r7, #14
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	4602      	mov	r2, r0
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 fc88 	bl	800a708 <USBD_LL_Start>
 8008df8:	4603      	mov	r3, r0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008e24:	2303      	movs	r3, #3
 8008e26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d009      	beq.n	8008e46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	78fa      	ldrb	r2, [r7, #3]
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4798      	blx	r3
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	4611      	mov	r1, r2
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
  }

  return USBD_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 ff67 	bl	8009d66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d01a      	beq.n	8008ef2 <USBD_LL_SetupStage+0x72>
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d822      	bhi.n	8008f06 <USBD_LL_SetupStage+0x86>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <USBD_LL_SetupStage+0x4a>
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d00a      	beq.n	8008ede <USBD_LL_SetupStage+0x5e>
 8008ec8:	e01d      	b.n	8008f06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa18 	bl	8009308 <USBD_StdDevReq>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
      break;
 8008edc:	e020      	b.n	8008f20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ee4:	4619      	mov	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa7c 	bl	80093e4 <USBD_StdItfReq>
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef0:	e016      	b.n	8008f20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 faba 	bl	8009474 <USBD_StdEPReq>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
      break;
 8008f04:	e00c      	b.n	8008f20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 fc9d 	bl	800a854 <USBD_LL_StallEP>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1e:	bf00      	nop
  }

  return ret;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b086      	sub	sp, #24
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	60f8      	str	r0, [r7, #12]
 8008f32:	460b      	mov	r3, r1
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008f38:	7afb      	ldrb	r3, [r7, #11]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d137      	bne.n	8008fae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008f44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d14a      	bne.n	8008fe6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d913      	bls.n	8008f84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	1ad2      	subs	r2, r2, r3
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	4293      	cmp	r3, r2
 8008f74:	bf28      	it	cs
 8008f76:	4613      	movcs	r3, r2
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 ffe6 	bl	8009f4e <USBD_CtlContinueRx>
 8008f82:	e030      	b.n	8008fe6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00a      	beq.n	8008fa6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d105      	bne.n	8008fa6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 ffe2 	bl	8009f70 <USBD_CtlSendStatus>
 8008fac:	e01b      	b.n	8008fe6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d013      	beq.n	8008fe2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d10e      	bne.n	8008fe2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	7afa      	ldrb	r2, [r7, #11]
 8008fce:	4611      	mov	r1, r2
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	4798      	blx	r3
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008fde:	7dfb      	ldrb	r3, [r7, #23]
 8008fe0:	e002      	b.n	8008fe8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e000      	b.n	8008fe8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d16a      	bne.n	80090da <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3314      	adds	r3, #20
 8009008:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009010:	2b02      	cmp	r3, #2
 8009012:	d155      	bne.n	80090c0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	429a      	cmp	r2, r3
 800901e:	d914      	bls.n	800904a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	689a      	ldr	r2, [r3, #8]
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	1ad2      	subs	r2, r2, r3
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	461a      	mov	r2, r3
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 ff5b 	bl	8009ef2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800903c:	2300      	movs	r3, #0
 800903e:	2200      	movs	r2, #0
 8009040:	2100      	movs	r1, #0
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f001 fd0c 	bl	800aa60 <USBD_LL_PrepareReceive>
 8009048:	e03a      	b.n	80090c0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	68da      	ldr	r2, [r3, #12]
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	429a      	cmp	r2, r3
 8009054:	d11c      	bne.n	8009090 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800905e:	429a      	cmp	r2, r3
 8009060:	d316      	bcc.n	8009090 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800906c:	429a      	cmp	r2, r3
 800906e:	d20f      	bcs.n	8009090 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009070:	2200      	movs	r2, #0
 8009072:	2100      	movs	r1, #0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 ff3c 	bl	8009ef2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009082:	2300      	movs	r3, #0
 8009084:	2200      	movs	r2, #0
 8009086:	2100      	movs	r1, #0
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f001 fce9 	bl	800aa60 <USBD_LL_PrepareReceive>
 800908e:	e017      	b.n	80090c0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d105      	bne.n	80090b2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b2:	2180      	movs	r1, #128	@ 0x80
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f001 fbcd 	bl	800a854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 ff6b 	bl	8009f96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d123      	bne.n	8009112 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7ff fe99 	bl	8008e02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80090d8:	e01b      	b.n	8009112 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d013      	beq.n	800910e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d10e      	bne.n	800910e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	7afa      	ldrb	r2, [r7, #11]
 80090fa:	4611      	mov	r1, r2
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	4798      	blx	r3
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d003      	beq.n	8009112 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	e002      	b.n	8009114 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800910e:	2303      	movs	r3, #3
 8009110:	e000      	b.n	8009114 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009148:	2b00      	cmp	r3, #0
 800914a:	d009      	beq.n	8009160 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	6852      	ldr	r2, [r2, #4]
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	4611      	mov	r1, r2
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009160:	2340      	movs	r3, #64	@ 0x40
 8009162:	2200      	movs	r2, #0
 8009164:	2100      	movs	r1, #0
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fb00 	bl	800a76c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2240      	movs	r2, #64	@ 0x40
 8009178:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800917c:	2340      	movs	r3, #64	@ 0x40
 800917e:	2200      	movs	r2, #0
 8009180:	2180      	movs	r1, #128	@ 0x80
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 faf2 	bl	800a76c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2240      	movs	r2, #64	@ 0x40
 8009192:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	78fa      	ldrb	r2, [r7, #3]
 80091ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2204      	movs	r2, #4
 80091d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d105      	bne.n	8009206 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009222:	2b03      	cmp	r3, #3
 8009224:	d10b      	bne.n	800923e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	6852      	ldr	r2, [r2, #4]
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	4611      	mov	r1, r2
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
  }

  return USBD_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b087      	sub	sp, #28
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	3301      	adds	r3, #1
 80092e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	b21a      	sxth	r2, r3
 80092f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	b21b      	sxth	r3, r3
 80092f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092fa:	89fb      	ldrh	r3, [r7, #14]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	371c      	adds	r7, #28
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800931e:	2b40      	cmp	r3, #64	@ 0x40
 8009320:	d005      	beq.n	800932e <USBD_StdDevReq+0x26>
 8009322:	2b40      	cmp	r3, #64	@ 0x40
 8009324:	d853      	bhi.n	80093ce <USBD_StdDevReq+0xc6>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00b      	beq.n	8009342 <USBD_StdDevReq+0x3a>
 800932a:	2b20      	cmp	r3, #32
 800932c:	d14f      	bne.n	80093ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	4798      	blx	r3
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]
    break;
 8009340:	e04a      	b.n	80093d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	785b      	ldrb	r3, [r3, #1]
 8009346:	2b09      	cmp	r3, #9
 8009348:	d83b      	bhi.n	80093c2 <USBD_StdDevReq+0xba>
 800934a:	a201      	add	r2, pc, #4	@ (adr r2, 8009350 <USBD_StdDevReq+0x48>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	080093a5 	.word	0x080093a5
 8009354:	080093b9 	.word	0x080093b9
 8009358:	080093c3 	.word	0x080093c3
 800935c:	080093af 	.word	0x080093af
 8009360:	080093c3 	.word	0x080093c3
 8009364:	08009383 	.word	0x08009383
 8009368:	08009379 	.word	0x08009379
 800936c:	080093c3 	.word	0x080093c3
 8009370:	0800939b 	.word	0x0800939b
 8009374:	0800938d 	.word	0x0800938d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f9da 	bl	8009734 <USBD_GetDescriptor>
      break;
 8009380:	e024      	b.n	80093cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb69 	bl	8009a5c <USBD_SetAddress>
      break;
 800938a:	e01f      	b.n	80093cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fba8 	bl	8009ae4 <USBD_SetConfig>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]
      break;
 8009398:	e018      	b.n	80093cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fc45 	bl	8009c2c <USBD_GetConfig>
      break;
 80093a2:	e013      	b.n	80093cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fc75 	bl	8009c96 <USBD_GetStatus>
      break;
 80093ac:	e00e      	b.n	80093cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fca3 	bl	8009cfc <USBD_SetFeature>
      break;
 80093b6:	e009      	b.n	80093cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fcb2 	bl	8009d24 <USBD_ClrFeature>
      break;
 80093c0:	e004      	b.n	80093cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fd08 	bl	8009dda <USBD_CtlError>
      break;
 80093ca:	bf00      	nop
    }
    break;
 80093cc:	e004      	b.n	80093d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fd02 	bl	8009dda <USBD_CtlError>
    break;
 80093d6:	bf00      	nop
  }

  return ret;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop

080093e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093ee:	2300      	movs	r3, #0
 80093f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093fa:	2b40      	cmp	r3, #64	@ 0x40
 80093fc:	d005      	beq.n	800940a <USBD_StdItfReq+0x26>
 80093fe:	2b40      	cmp	r3, #64	@ 0x40
 8009400:	d82e      	bhi.n	8009460 <USBD_StdItfReq+0x7c>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <USBD_StdItfReq+0x26>
 8009406:	2b20      	cmp	r3, #32
 8009408:	d12a      	bne.n	8009460 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009410:	3b01      	subs	r3, #1
 8009412:	2b02      	cmp	r3, #2
 8009414:	d81d      	bhi.n	8009452 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	889b      	ldrh	r3, [r3, #4]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b01      	cmp	r3, #1
 800941e:	d813      	bhi.n	8009448 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
 800942e:	4603      	mov	r3, r0
 8009430:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	88db      	ldrh	r3, [r3, #6]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d110      	bne.n	800945c <USBD_StdItfReq+0x78>
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10d      	bne.n	800945c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fd95 	bl	8009f70 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009446:	e009      	b.n	800945c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fcc5 	bl	8009dda <USBD_CtlError>
      break;
 8009450:	e004      	b.n	800945c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fcc0 	bl	8009dda <USBD_CtlError>
      break;
 800945a:	e000      	b.n	800945e <USBD_StdItfReq+0x7a>
      break;
 800945c:	bf00      	nop
    }
    break;
 800945e:	e004      	b.n	800946a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fcb9 	bl	8009dda <USBD_CtlError>
    break;
 8009468:	bf00      	nop
  }

  return ret;
 800946a:	7bfb      	ldrb	r3, [r7, #15]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	889b      	ldrh	r3, [r3, #4]
 8009486:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009490:	2b40      	cmp	r3, #64	@ 0x40
 8009492:	d007      	beq.n	80094a4 <USBD_StdEPReq+0x30>
 8009494:	2b40      	cmp	r3, #64	@ 0x40
 8009496:	f200 8142 	bhi.w	800971e <USBD_StdEPReq+0x2aa>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00c      	beq.n	80094b8 <USBD_StdEPReq+0x44>
 800949e:	2b20      	cmp	r3, #32
 80094a0:	f040 813d 	bne.w	800971e <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	4798      	blx	r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]
    break;
 80094b6:	e137      	b.n	8009728 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d007      	beq.n	80094d0 <USBD_StdEPReq+0x5c>
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	f300 8126 	bgt.w	8009712 <USBD_StdEPReq+0x29e>
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d07d      	beq.n	80095c6 <USBD_StdEPReq+0x152>
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d03b      	beq.n	8009546 <USBD_StdEPReq+0xd2>
 80094ce:	e120      	b.n	8009712 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d002      	beq.n	80094e0 <USBD_StdEPReq+0x6c>
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d016      	beq.n	800950c <USBD_StdEPReq+0x98>
 80094de:	e02c      	b.n	800953a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00d      	beq.n	8009502 <USBD_StdEPReq+0x8e>
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b80      	cmp	r3, #128	@ 0x80
 80094ea:	d00a      	beq.n	8009502 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f001 f9af 	bl	800a854 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f6:	2180      	movs	r1, #128	@ 0x80
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f001 f9ab 	bl	800a854 <USBD_LL_StallEP>
 80094fe:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009500:	e020      	b.n	8009544 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc68 	bl	8009dda <USBD_CtlError>
        break;
 800950a:	e01b      	b.n	8009544 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	885b      	ldrh	r3, [r3, #2]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10e      	bne.n	8009532 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00b      	beq.n	8009532 <USBD_StdEPReq+0xbe>
 800951a:	7bbb      	ldrb	r3, [r7, #14]
 800951c:	2b80      	cmp	r3, #128	@ 0x80
 800951e:	d008      	beq.n	8009532 <USBD_StdEPReq+0xbe>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	88db      	ldrh	r3, [r3, #6]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009528:	7bbb      	ldrb	r3, [r7, #14]
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 f991 	bl	800a854 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fd1c 	bl	8009f70 <USBD_CtlSendStatus>

        break;
 8009538:	e004      	b.n	8009544 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fc4c 	bl	8009dda <USBD_CtlError>
        break;
 8009542:	bf00      	nop
      }
      break;
 8009544:	e0ea      	b.n	800971c <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800954c:	2b02      	cmp	r3, #2
 800954e:	d002      	beq.n	8009556 <USBD_StdEPReq+0xe2>
 8009550:	2b03      	cmp	r3, #3
 8009552:	d016      	beq.n	8009582 <USBD_StdEPReq+0x10e>
 8009554:	e030      	b.n	80095b8 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00d      	beq.n	8009578 <USBD_StdEPReq+0x104>
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b80      	cmp	r3, #128	@ 0x80
 8009560:	d00a      	beq.n	8009578 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f001 f974 	bl	800a854 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800956c:	2180      	movs	r1, #128	@ 0x80
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 f970 	bl	800a854 <USBD_LL_StallEP>
 8009574:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009576:	e025      	b.n	80095c4 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fc2d 	bl	8009dda <USBD_CtlError>
        break;
 8009580:	e020      	b.n	80095c4 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	885b      	ldrh	r3, [r3, #2]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d11b      	bne.n	80095c2 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009590:	2b00      	cmp	r3, #0
 8009592:	d004      	beq.n	800959e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f991 	bl	800a8c0 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fce6 	bl	8009f70 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
 80095b2:	4603      	mov	r3, r0
 80095b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80095b6:	e004      	b.n	80095c2 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fc0d 	bl	8009dda <USBD_CtlError>
        break;
 80095c0:	e000      	b.n	80095c4 <USBD_StdEPReq+0x150>
        break;
 80095c2:	bf00      	nop
      }
      break;
 80095c4:	e0aa      	b.n	800971c <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d002      	beq.n	80095d6 <USBD_StdEPReq+0x162>
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d032      	beq.n	800963a <USBD_StdEPReq+0x1c6>
 80095d4:	e097      	b.n	8009706 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <USBD_StdEPReq+0x178>
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b80      	cmp	r3, #128	@ 0x80
 80095e0:	d004      	beq.n	80095ec <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fbf8 	bl	8009dda <USBD_CtlError>
          break;
 80095ea:	e091      	b.n	8009710 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	da0b      	bge.n	800960c <USBD_StdEPReq+0x198>
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	3310      	adds	r3, #16
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	4413      	add	r3, r2
 8009608:	3304      	adds	r3, #4
 800960a:	e00b      	b.n	8009624 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009612:	4613      	mov	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	4413      	add	r3, r2
 8009622:	3304      	adds	r3, #4
 8009624:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2202      	movs	r2, #2
 8009630:	4619      	mov	r1, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fc42 	bl	8009ebc <USBD_CtlSendData>
        break;
 8009638:	e06a      	b.n	8009710 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800963a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800963e:	2b00      	cmp	r3, #0
 8009640:	da11      	bge.n	8009666 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	f003 020f 	and.w	r2, r3, #15
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	3324      	adds	r3, #36	@ 0x24
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d117      	bne.n	800968c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800965c:	6839      	ldr	r1, [r7, #0]
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fbbb 	bl	8009dda <USBD_CtlError>
            break;
 8009664:	e054      	b.n	8009710 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	f003 020f 	and.w	r2, r3, #15
 800966c:	6879      	ldr	r1, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d104      	bne.n	800968c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8009682:	6839      	ldr	r1, [r7, #0]
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fba8 	bl	8009dda <USBD_CtlError>
            break;
 800968a:	e041      	b.n	8009710 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800968c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009690:	2b00      	cmp	r3, #0
 8009692:	da0b      	bge.n	80096ac <USBD_StdEPReq+0x238>
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	3310      	adds	r3, #16
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	4413      	add	r3, r2
 80096a8:	3304      	adds	r3, #4
 80096aa:	e00b      	b.n	80096c4 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	4413      	add	r3, r2
 80096c2:	3304      	adds	r3, #4
 80096c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <USBD_StdEPReq+0x25e>
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	2b80      	cmp	r3, #128	@ 0x80
 80096d0:	d103      	bne.n	80096da <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	e00e      	b.n	80096f8 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	4619      	mov	r1, r3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 f924 	bl	800a92c <USBD_LL_IsStallEP>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2201      	movs	r2, #1
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	e002      	b.n	80096f8 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2202      	movs	r2, #2
 80096fc:	4619      	mov	r1, r3
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fbdc 	bl	8009ebc <USBD_CtlSendData>
          break;
 8009704:	e004      	b.n	8009710 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fb66 	bl	8009dda <USBD_CtlError>
        break;
 800970e:	bf00      	nop
      }
      break;
 8009710:	e004      	b.n	800971c <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fb60 	bl	8009dda <USBD_CtlError>
      break;
 800971a:	bf00      	nop
    }
    break;
 800971c:	e004      	b.n	8009728 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fb5a 	bl	8009dda <USBD_CtlError>
    break;
 8009726:	bf00      	nop
  }

  return ret;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800973e:	2300      	movs	r3, #0
 8009740:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	885b      	ldrh	r3, [r3, #2]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b29b      	uxth	r3, r3
 8009752:	3b01      	subs	r3, #1
 8009754:	2b0e      	cmp	r3, #14
 8009756:	f200 8152 	bhi.w	80099fe <USBD_GetDescriptor+0x2ca>
 800975a:	a201      	add	r2, pc, #4	@ (adr r2, 8009760 <USBD_GetDescriptor+0x2c>)
 800975c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009760:	080097d1 	.word	0x080097d1
 8009764:	080097e9 	.word	0x080097e9
 8009768:	08009829 	.word	0x08009829
 800976c:	080099ff 	.word	0x080099ff
 8009770:	080099ff 	.word	0x080099ff
 8009774:	0800999f 	.word	0x0800999f
 8009778:	080099cb 	.word	0x080099cb
 800977c:	080099ff 	.word	0x080099ff
 8009780:	080099ff 	.word	0x080099ff
 8009784:	080099ff 	.word	0x080099ff
 8009788:	080099ff 	.word	0x080099ff
 800978c:	080099ff 	.word	0x080099ff
 8009790:	080099ff 	.word	0x080099ff
 8009794:	080099ff 	.word	0x080099ff
 8009798:	0800979d 	.word	0x0800979d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	7c12      	ldrb	r2, [r2, #16]
 80097b4:	f107 0108 	add.w	r1, r7, #8
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
 80097bc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80097be:	e126      	b.n	8009a0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fb09 	bl	8009dda <USBD_CtlError>
      err++;
 80097c8:	7afb      	ldrb	r3, [r7, #11]
 80097ca:	3301      	adds	r3, #1
 80097cc:	72fb      	strb	r3, [r7, #11]
    break;
 80097ce:	e11e      	b.n	8009a0e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	7c12      	ldrb	r2, [r2, #16]
 80097dc:	f107 0108 	add.w	r1, r7, #8
 80097e0:	4610      	mov	r0, r2
 80097e2:	4798      	blx	r3
 80097e4:	60f8      	str	r0, [r7, #12]
    break;
 80097e6:	e112      	b.n	8009a0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	7c1b      	ldrb	r3, [r3, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10d      	bne.n	800980c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f8:	f107 0208 	add.w	r2, r7, #8
 80097fc:	4610      	mov	r0, r2
 80097fe:	4798      	blx	r3
 8009800:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3301      	adds	r3, #1
 8009806:	2202      	movs	r2, #2
 8009808:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800980a:	e100      	b.n	8009a0e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009814:	f107 0208 	add.w	r2, r7, #8
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3301      	adds	r3, #1
 8009822:	2202      	movs	r2, #2
 8009824:	701a      	strb	r2, [r3, #0]
    break;
 8009826:	e0f2      	b.n	8009a0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	885b      	ldrh	r3, [r3, #2]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b05      	cmp	r3, #5
 8009830:	f200 80ac 	bhi.w	800998c <USBD_GetDescriptor+0x258>
 8009834:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <USBD_GetDescriptor+0x108>)
 8009836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983a:	bf00      	nop
 800983c:	08009855 	.word	0x08009855
 8009840:	08009889 	.word	0x08009889
 8009844:	080098bd 	.word	0x080098bd
 8009848:	080098f1 	.word	0x080098f1
 800984c:	08009925 	.word	0x08009925
 8009850:	08009959 	.word	0x08009959
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009876:	e091      	b.n	800999c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 faad 	bl	8009dda <USBD_CtlError>
        err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
      break;
 8009886:	e089      	b.n	800999c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098aa:	e077      	b.n	800999c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa93 	bl	8009dda <USBD_CtlError>
        err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
      break;
 80098ba:	e06f      	b.n	800999c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098de:	e05d      	b.n	800999c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa79 	bl	8009dda <USBD_CtlError>
        err++;
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	3301      	adds	r3, #1
 80098ec:	72fb      	strb	r3, [r7, #11]
      break;
 80098ee:	e055      	b.n	800999c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7c12      	ldrb	r2, [r2, #16]
 8009908:	f107 0108 	add.w	r1, r7, #8
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009912:	e043      	b.n	800999c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa5f 	bl	8009dda <USBD_CtlError>
        err++;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	3301      	adds	r3, #1
 8009920:	72fb      	strb	r3, [r7, #11]
      break;
 8009922:	e03b      	b.n	800999c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00b      	beq.n	8009948 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	7c12      	ldrb	r2, [r2, #16]
 800993c:	f107 0108 	add.w	r1, r7, #8
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009946:	e029      	b.n	800999c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa45 	bl	8009dda <USBD_CtlError>
        err++;
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	3301      	adds	r3, #1
 8009954:	72fb      	strb	r3, [r7, #11]
      break;
 8009956:	e021      	b.n	800999c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	7c12      	ldrb	r2, [r2, #16]
 8009970:	f107 0108 	add.w	r1, r7, #8
 8009974:	4610      	mov	r0, r2
 8009976:	4798      	blx	r3
 8009978:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800997a:	e00f      	b.n	800999c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fa2b 	bl	8009dda <USBD_CtlError>
        err++;
 8009984:	7afb      	ldrb	r3, [r7, #11]
 8009986:	3301      	adds	r3, #1
 8009988:	72fb      	strb	r3, [r7, #11]
      break;
 800998a:	e007      	b.n	800999c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 fa23 	bl	8009dda <USBD_CtlError>
      err++;
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	3301      	adds	r3, #1
 8009998:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800999a:	bf00      	nop
    }
    break;
 800999c:	e037      	b.n	8009a0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	7c1b      	ldrb	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ae:	f107 0208 	add.w	r2, r7, #8
 80099b2:	4610      	mov	r0, r2
 80099b4:	4798      	blx	r3
 80099b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80099b8:	e029      	b.n	8009a0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa0c 	bl	8009dda <USBD_CtlError>
      err++;
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	3301      	adds	r3, #1
 80099c6:	72fb      	strb	r3, [r7, #11]
    break;
 80099c8:	e021      	b.n	8009a0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7c1b      	ldrb	r3, [r3, #16]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099da:	f107 0208 	add.w	r2, r7, #8
 80099de:	4610      	mov	r0, r2
 80099e0:	4798      	blx	r3
 80099e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3301      	adds	r3, #1
 80099e8:	2207      	movs	r2, #7
 80099ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80099ec:	e00f      	b.n	8009a0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f9f2 	bl	8009dda <USBD_CtlError>
      err++;
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	3301      	adds	r3, #1
 80099fa:	72fb      	strb	r3, [r7, #11]
    break;
 80099fc:	e007      	b.n	8009a0e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9ea 	bl	8009dda <USBD_CtlError>
    err++;
 8009a06:	7afb      	ldrb	r3, [r7, #11]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	72fb      	strb	r3, [r7, #11]
    break;
 8009a0c:	bf00      	nop
  }

  if (err != 0U)
 8009a0e:	7afb      	ldrb	r3, [r7, #11]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11e      	bne.n	8009a52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	88db      	ldrh	r3, [r3, #6]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d016      	beq.n	8009a4a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009a1c:	893b      	ldrh	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00e      	beq.n	8009a40 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	88da      	ldrh	r2, [r3, #6]
 8009a26:	893b      	ldrh	r3, [r7, #8]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	bf28      	it	cs
 8009a2c:	4613      	movcs	r3, r2
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	461a      	mov	r2, r3
 8009a36:	68f9      	ldr	r1, [r7, #12]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fa3f 	bl	8009ebc <USBD_CtlSendData>
 8009a3e:	e009      	b.n	8009a54 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9c9 	bl	8009dda <USBD_CtlError>
 8009a48:	e004      	b.n	8009a54 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa90 	bl	8009f70 <USBD_CtlSendStatus>
 8009a50:	e000      	b.n	8009a54 <USBD_GetDescriptor+0x320>
    return;
 8009a52:	bf00      	nop
    }
  }
}
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop

08009a5c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	889b      	ldrh	r3, [r3, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d130      	bne.n	8009ad0 <USBD_SetAddress+0x74>
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	88db      	ldrh	r3, [r3, #6]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d12c      	bne.n	8009ad0 <USBD_SetAddress+0x74>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	885b      	ldrh	r3, [r3, #2]
 8009a7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a7c:	d828      	bhi.n	8009ad0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	885b      	ldrh	r3, [r3, #2]
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d104      	bne.n	8009a9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f99f 	bl	8009dda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9c:	e01d      	b.n	8009ada <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	7bfa      	ldrb	r2, [r7, #15]
 8009aa2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 ff6a 	bl	800a984 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fa5d 	bl	8009f70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac4:	e009      	b.n	8009ada <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ace:	e004      	b.n	8009ada <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f981 	bl	8009dda <USBD_CtlError>
  }
}
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	885b      	ldrh	r3, [r3, #2]
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	4b4b      	ldr	r3, [pc, #300]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009afa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009afc:	4b4a      	ldr	r3, [pc, #296]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d905      	bls.n	8009b10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 f967 	bl	8009dda <USBD_CtlError>
    return USBD_FAIL;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e087      	b.n	8009c20 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d002      	beq.n	8009b20 <USBD_SetConfig+0x3c>
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d025      	beq.n	8009b6a <USBD_SetConfig+0x86>
 8009b1e:	e071      	b.n	8009c04 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009b20:	4b41      	ldr	r3, [pc, #260]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01c      	beq.n	8009b62 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009b28:	4b3f      	ldr	r3, [pc, #252]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b32:	4b3d      	ldr	r3, [pc, #244]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff f96d 	bl	8008e18 <USBD_SetClassConfig>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d004      	beq.n	8009b52 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f945 	bl	8009dda <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009b50:	e065      	b.n	8009c1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa0c 	bl	8009f70 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2203      	movs	r2, #3
 8009b5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 8009b60:	e05d      	b.n	8009c1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa04 	bl	8009f70 <USBD_CtlSendStatus>
    break;
 8009b68:	e059      	b.n	8009c1e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d112      	bne.n	8009b98 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 8009b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b84:	4b28      	ldr	r3, [pc, #160]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff f960 	bl	8008e50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f9ed 	bl	8009f70 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009b96:	e042      	b.n	8009c1e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009b98:	4b23      	ldr	r3, [pc, #140]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d02a      	beq.n	8009bfc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7ff f94e 	bl	8008e50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff f927 	bl	8008e18 <USBD_SetClassConfig>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00f      	beq.n	8009bf4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f8ff 	bl	8009dda <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff f933 	bl	8008e50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2202      	movs	r2, #2
 8009bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 8009bf2:	e014      	b.n	8009c1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f9bb 	bl	8009f70 <USBD_CtlSendStatus>
    break;
 8009bfa:	e010      	b.n	8009c1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f9b7 	bl	8009f70 <USBD_CtlSendStatus>
    break;
 8009c02:	e00c      	b.n	8009c1e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f8e7 	bl	8009dda <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c0c:	4b06      	ldr	r3, [pc, #24]	@ (8009c28 <USBD_SetConfig+0x144>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff f91c 	bl	8008e50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1c:	bf00      	nop
  }

  return ret;
 8009c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	2000061c 	.word	0x2000061c

08009c2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	88db      	ldrh	r3, [r3, #6]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d004      	beq.n	8009c48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f8ca 	bl	8009dda <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009c46:	e022      	b.n	8009c8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	dc02      	bgt.n	8009c58 <USBD_GetConfig+0x2c>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dc03      	bgt.n	8009c5e <USBD_GetConfig+0x32>
 8009c56:	e015      	b.n	8009c84 <USBD_GetConfig+0x58>
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetConfig+0x48>
 8009c5c:	e012      	b.n	8009c84 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3308      	adds	r3, #8
 8009c68:	2201      	movs	r2, #1
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f925 	bl	8009ebc <USBD_CtlSendData>
      break;
 8009c72:	e00c      	b.n	8009c8e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3304      	adds	r3, #4
 8009c78:	2201      	movs	r2, #1
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f91d 	bl	8009ebc <USBD_CtlSendData>
      break;
 8009c82:	e004      	b.n	8009c8e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f8a7 	bl	8009dda <USBD_CtlError>
      break;
 8009c8c:	bf00      	nop
}
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d81e      	bhi.n	8009cea <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	88db      	ldrh	r3, [r3, #6]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d004      	beq.n	8009cbe <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f88f 	bl	8009dda <USBD_CtlError>
      break;
 8009cbc:	e01a      	b.n	8009cf4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	f043 0202 	orr.w	r2, r3, #2
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	2202      	movs	r2, #2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8ea 	bl	8009ebc <USBD_CtlSendData>
    break;
 8009ce8:	e004      	b.n	8009cf4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009cea:	6839      	ldr	r1, [r7, #0]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f874 	bl	8009dda <USBD_CtlError>
    break;
 8009cf2:	bf00      	nop
  }
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	885b      	ldrh	r3, [r3, #2]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d106      	bne.n	8009d1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f92a 	bl	8009f70 <USBD_CtlSendStatus>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d34:	3b01      	subs	r3, #1
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d80b      	bhi.n	8009d52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	885b      	ldrh	r3, [r3, #2]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d10c      	bne.n	8009d5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f910 	bl	8009f70 <USBD_CtlSendStatus>
      }
      break;
 8009d50:	e004      	b.n	8009d5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f840 	bl	8009dda <USBD_CtlError>
      break;
 8009d5a:	e000      	b.n	8009d5e <USBD_ClrFeature+0x3a>
      break;
 8009d5c:	bf00      	nop
  }
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f7ff fa9a 	bl	80092ca <SWAPBYTE>
 8009d96:	4603      	mov	r3, r0
 8009d98:	461a      	mov	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	3301      	adds	r3, #1
 8009da8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f7ff fa8d 	bl	80092ca <SWAPBYTE>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fa80 	bl	80092ca <SWAPBYTE>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	461a      	mov	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	80da      	strh	r2, [r3, #6]
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009de4:	2180      	movs	r1, #128	@ 0x80
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fd34 	bl	800a854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009dec:	2100      	movs	r1, #0
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fd30 	bl	800a854 <USBD_LL_StallEP>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d036      	beq.n	8009e80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e16:	6938      	ldr	r0, [r7, #16]
 8009e18:	f000 f836 	bl	8009e88 <USBD_GetLen>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	3301      	adds	r3, #1
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	4413      	add	r3, r2
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7812      	ldrb	r2, [r2, #0]
 8009e34:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	2203      	movs	r2, #3
 8009e44:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e4c:	e013      	b.n	8009e76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	4413      	add	r3, r2
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	7812      	ldrb	r2, [r2, #0]
 8009e58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	613b      	str	r3, [r7, #16]
    idx++;
 8009e60:	7dfb      	ldrb	r3, [r7, #23]
 8009e62:	3301      	adds	r3, #1
 8009e64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	3301      	adds	r3, #1
 8009e74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e7      	bne.n	8009e4e <USBD_GetString+0x52>
 8009e7e:	e000      	b.n	8009e82 <USBD_GetString+0x86>
    return;
 8009e80:	bf00      	nop
  }
}
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e98:	e005      	b.n	8009ea6 <USBD_GetLen+0x1e>
  {
    len++;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1f5      	bne.n	8009e9a <USBD_GetLen+0x12>
  }

  return len;
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f000 fd84 	bl	800a9f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 fd73 	bl	800a9f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2203      	movs	r2, #3
 8009f24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 fd8e 	bl	800aa60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	2100      	movs	r1, #0
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 fd7d 	bl	800aa60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2204      	movs	r2, #4
 8009f7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f80:	2300      	movs	r3, #0
 8009f82:	2200      	movs	r2, #0
 8009f84:	2100      	movs	r1, #0
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fd32 	bl	800a9f0 <USBD_LL_Transmit>

  return USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3708      	adds	r7, #8
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2205      	movs	r2, #5
 8009fa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	2100      	movs	r1, #0
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fd57 	bl	800aa60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4912      	ldr	r1, [pc, #72]	@ (800a00c <MX_USB_DEVICE_Init+0x50>)
 8009fc4:	4812      	ldr	r0, [pc, #72]	@ (800a010 <MX_USB_DEVICE_Init+0x54>)
 8009fc6:	f7fe feb9 	bl	8008d3c <USBD_Init>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fd0:	f7f7 fbc0 	bl	8001754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fd4:	490f      	ldr	r1, [pc, #60]	@ (800a014 <MX_USB_DEVICE_Init+0x58>)
 8009fd6:	480e      	ldr	r0, [pc, #56]	@ (800a010 <MX_USB_DEVICE_Init+0x54>)
 8009fd8:	f7fe fee0 	bl	8008d9c <USBD_RegisterClass>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fe2:	f7f7 fbb7 	bl	8001754 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fe6:	490c      	ldr	r1, [pc, #48]	@ (800a018 <MX_USB_DEVICE_Init+0x5c>)
 8009fe8:	4809      	ldr	r0, [pc, #36]	@ (800a010 <MX_USB_DEVICE_Init+0x54>)
 8009fea:	f7fe fe3b 	bl	8008c64 <USBD_CDC_RegisterInterface>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ff4:	f7f7 fbae 	bl	8001754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ff8:	4805      	ldr	r0, [pc, #20]	@ (800a010 <MX_USB_DEVICE_Init+0x54>)
 8009ffa:	f7fe fef6 	bl	8008dea <USBD_Start>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a004:	f7f7 fba6 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a008:	bf00      	nop
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200001cc 	.word	0x200001cc
 800a010:	20000620 	.word	0x20000620
 800a014:	200000b4 	.word	0x200000b4
 800a018:	200001b8 	.word	0x200001b8

0800a01c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a020:	2200      	movs	r2, #0
 800a022:	4905      	ldr	r1, [pc, #20]	@ (800a038 <CDC_Init_FS+0x1c>)
 800a024:	4805      	ldr	r0, [pc, #20]	@ (800a03c <CDC_Init_FS+0x20>)
 800a026:	f7fe fe32 	bl	8008c8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a02a:	4905      	ldr	r1, [pc, #20]	@ (800a040 <CDC_Init_FS+0x24>)
 800a02c:	4803      	ldr	r0, [pc, #12]	@ (800a03c <CDC_Init_FS+0x20>)
 800a02e:	f7fe fe47 	bl	8008cc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a032:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a034:	4618      	mov	r0, r3
 800a036:	bd80      	pop	{r7, pc}
 800a038:	200010f0 	.word	0x200010f0
 800a03c:	20000620 	.word	0x20000620
 800a040:	200008f0 	.word	0x200008f0

0800a044 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a048:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	71fb      	strb	r3, [r7, #7]
 800a060:	4613      	mov	r3, r2
 800a062:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	2b23      	cmp	r3, #35	@ 0x23
 800a068:	d84a      	bhi.n	800a100 <CDC_Control_FS+0xac>
 800a06a:	a201      	add	r2, pc, #4	@ (adr r2, 800a070 <CDC_Control_FS+0x1c>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a101 	.word	0x0800a101
 800a074:	0800a101 	.word	0x0800a101
 800a078:	0800a101 	.word	0x0800a101
 800a07c:	0800a101 	.word	0x0800a101
 800a080:	0800a101 	.word	0x0800a101
 800a084:	0800a101 	.word	0x0800a101
 800a088:	0800a101 	.word	0x0800a101
 800a08c:	0800a101 	.word	0x0800a101
 800a090:	0800a101 	.word	0x0800a101
 800a094:	0800a101 	.word	0x0800a101
 800a098:	0800a101 	.word	0x0800a101
 800a09c:	0800a101 	.word	0x0800a101
 800a0a0:	0800a101 	.word	0x0800a101
 800a0a4:	0800a101 	.word	0x0800a101
 800a0a8:	0800a101 	.word	0x0800a101
 800a0ac:	0800a101 	.word	0x0800a101
 800a0b0:	0800a101 	.word	0x0800a101
 800a0b4:	0800a101 	.word	0x0800a101
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a101 	.word	0x0800a101
 800a0c0:	0800a101 	.word	0x0800a101
 800a0c4:	0800a101 	.word	0x0800a101
 800a0c8:	0800a101 	.word	0x0800a101
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a101 	.word	0x0800a101
 800a0d8:	0800a101 	.word	0x0800a101
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a101 	.word	0x0800a101
 800a0e4:	0800a101 	.word	0x0800a101
 800a0e8:	0800a101 	.word	0x0800a101
 800a0ec:	0800a101 	.word	0x0800a101
 800a0f0:	0800a101 	.word	0x0800a101
 800a0f4:	0800a101 	.word	0x0800a101
 800a0f8:	0800a101 	.word	0x0800a101
 800a0fc:	0800a101 	.word	0x0800a101
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a100:	bf00      	nop
  }

  return (USBD_OK);
 800a102:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	4805      	ldr	r0, [pc, #20]	@ (800a134 <CDC_Receive_FS+0x24>)
 800a11e:	f7fe fdcf 	bl	8008cc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a122:	4804      	ldr	r0, [pc, #16]	@ (800a134 <CDC_Receive_FS+0x24>)
 800a124:	f7fe fde0 	bl	8008ce8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a128:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000620 	.word	0x20000620

0800a138 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a138:	b480      	push	{r7}
 800a13a:	b087      	sub	sp, #28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	4613      	mov	r3, r2
 800a144:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a14a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
	...

0800a15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2212      	movs	r2, #18
 800a16c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a16e:	4b03      	ldr	r3, [pc, #12]	@ (800a17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	200001ec 	.word	0x200001ec

0800a180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	6039      	str	r1, [r7, #0]
 800a18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2204      	movs	r2, #4
 800a190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a192:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	2000020c 	.word	0x2000020c

0800a1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	4907      	ldr	r1, [pc, #28]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1ba:	4808      	ldr	r0, [pc, #32]	@ (800a1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800a1bc:	f7ff fe1e 	bl	8009dfc <USBD_GetString>
 800a1c0:	e004      	b.n	800a1cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4904      	ldr	r1, [pc, #16]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a1c6:	4805      	ldr	r0, [pc, #20]	@ (800a1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800a1c8:	f7ff fe18 	bl	8009dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1cc:	4b02      	ldr	r3, [pc, #8]	@ (800a1d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200018f0 	.word	0x200018f0
 800a1dc:	0800f420 	.word	0x0800f420

0800a1e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	4904      	ldr	r1, [pc, #16]	@ (800a200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a1f0:	4804      	ldr	r0, [pc, #16]	@ (800a204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a1f2:	f7ff fe03 	bl	8009dfc <USBD_GetString>
  return USBD_StrDesc;
 800a1f6:	4b02      	ldr	r3, [pc, #8]	@ (800a200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	200018f0 	.word	0x200018f0
 800a204:	0800f438 	.word	0x0800f438

0800a208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	6039      	str	r1, [r7, #0]
 800a212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	221a      	movs	r2, #26
 800a218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a21a:	f000 f855 	bl	800a2c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a21e:	4b02      	ldr	r3, [pc, #8]	@ (800a228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000210 	.word	0x20000210

0800a22c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	6039      	str	r1, [r7, #0]
 800a236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a238:	79fb      	ldrb	r3, [r7, #7]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	4907      	ldr	r1, [pc, #28]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a242:	4808      	ldr	r0, [pc, #32]	@ (800a264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a244:	f7ff fdda 	bl	8009dfc <USBD_GetString>
 800a248:	e004      	b.n	800a254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	4904      	ldr	r1, [pc, #16]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a24e:	4805      	ldr	r0, [pc, #20]	@ (800a264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a250:	f7ff fdd4 	bl	8009dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a254:	4b02      	ldr	r3, [pc, #8]	@ (800a260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a256:	4618      	mov	r0, r3
 800a258:	3708      	adds	r7, #8
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	200018f0 	.word	0x200018f0
 800a264:	0800f44c 	.word	0x0800f44c

0800a268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	4907      	ldr	r1, [pc, #28]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a27e:	4808      	ldr	r0, [pc, #32]	@ (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a280:	f7ff fdbc 	bl	8009dfc <USBD_GetString>
 800a284:	e004      	b.n	800a290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	4904      	ldr	r1, [pc, #16]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a28a:	4805      	ldr	r0, [pc, #20]	@ (800a2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a28c:	f7ff fdb6 	bl	8009dfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a290:	4b02      	ldr	r3, [pc, #8]	@ (800a29c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	200018f0 	.word	0x200018f0
 800a2a0:	0800f458 	.word	0x0800f458

0800a2a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	6039      	str	r1, [r7, #0]
 800a2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	220c      	movs	r2, #12
 800a2b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	@ (800a2c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	20000200 	.word	0x20000200

0800a2c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a2ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a30c <Get_SerialNum+0x44>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a2d4:	4b0e      	ldr	r3, [pc, #56]	@ (800a310 <Get_SerialNum+0x48>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a2da:	4b0e      	ldr	r3, [pc, #56]	@ (800a314 <Get_SerialNum+0x4c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a2ee:	2208      	movs	r2, #8
 800a2f0:	4909      	ldr	r1, [pc, #36]	@ (800a318 <Get_SerialNum+0x50>)
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 f814 	bl	800a320 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a2f8:	2204      	movs	r2, #4
 800a2fa:	4908      	ldr	r1, [pc, #32]	@ (800a31c <Get_SerialNum+0x54>)
 800a2fc:	68b8      	ldr	r0, [r7, #8]
 800a2fe:	f000 f80f 	bl	800a320 <IntToUnicode>
  }
}
 800a302:	bf00      	nop
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	1fff7590 	.word	0x1fff7590
 800a310:	1fff7594 	.word	0x1fff7594
 800a314:	1fff7598 	.word	0x1fff7598
 800a318:	20000212 	.word	0x20000212
 800a31c:	20000222 	.word	0x20000222

0800a320 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a332:	2300      	movs	r3, #0
 800a334:	75fb      	strb	r3, [r7, #23]
 800a336:	e027      	b.n	800a388 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	0f1b      	lsrs	r3, r3, #28
 800a33c:	2b09      	cmp	r3, #9
 800a33e:	d80b      	bhi.n	800a358 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	0f1b      	lsrs	r3, r3, #28
 800a344:	b2da      	uxtb	r2, r3
 800a346:	7dfb      	ldrb	r3, [r7, #23]
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	4619      	mov	r1, r3
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	440b      	add	r3, r1
 800a350:	3230      	adds	r2, #48	@ 0x30
 800a352:	b2d2      	uxtb	r2, r2
 800a354:	701a      	strb	r2, [r3, #0]
 800a356:	e00a      	b.n	800a36e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	0f1b      	lsrs	r3, r3, #28
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	7dfb      	ldrb	r3, [r7, #23]
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	4619      	mov	r1, r3
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	440b      	add	r3, r1
 800a368:	3237      	adds	r2, #55	@ 0x37
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	3301      	adds	r3, #1
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	4413      	add	r3, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	3301      	adds	r3, #1
 800a386:	75fb      	strb	r3, [r7, #23]
 800a388:	7dfa      	ldrb	r2, [r7, #23]
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d3d3      	bcc.n	800a338 <IntToUnicode+0x18>
  }
}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
	...

0800a3a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	@ 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3a8:	f107 0314 	add.w	r3, r7, #20
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	605a      	str	r2, [r3, #4]
 800a3b2:	609a      	str	r2, [r3, #8]
 800a3b4:	60da      	str	r2, [r3, #12]
 800a3b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3c0:	d14e      	bne.n	800a460 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3c2:	4b29      	ldr	r3, [pc, #164]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3c6:	4a28      	ldr	r2, [pc, #160]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a3c8:	f043 0301 	orr.w	r3, r3, #1
 800a3cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3ce:	4b26      	ldr	r3, [pc, #152]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a3d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	613b      	str	r3, [r7, #16]
 800a3d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a3da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a3de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3ec:	230a      	movs	r3, #10
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a3fa:	f7f8 feb1 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a402:	4a19      	ldr	r2, [pc, #100]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a404:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a40a:	4b17      	ldr	r3, [pc, #92]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a40e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a416:	4b14      	ldr	r3, [pc, #80]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d114      	bne.n	800a44c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a422:	4b11      	ldr	r3, [pc, #68]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a426:	4a10      	ldr	r2, [pc, #64]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a42c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a42e:	4b0e      	ldr	r3, [pc, #56]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a436:	60bb      	str	r3, [r7, #8]
 800a438:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a43a:	f7fa faa7 	bl	800498c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a43e:	4b0a      	ldr	r3, [pc, #40]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a442:	4a09      	ldr	r2, [pc, #36]	@ (800a468 <HAL_PCD_MspInit+0xc8>)
 800a444:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a448:	6593      	str	r3, [r2, #88]	@ 0x58
 800a44a:	e001      	b.n	800a450 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a44c:	f7fa fa9e 	bl	800498c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a450:	2200      	movs	r2, #0
 800a452:	2100      	movs	r1, #0
 800a454:	2043      	movs	r0, #67	@ 0x43
 800a456:	f7f8 fe0c 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a45a:	2043      	movs	r0, #67	@ 0x43
 800a45c:	f7f8 fe25 	bl	80030aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a460:	bf00      	nop
 800a462:	3728      	adds	r7, #40	@ 0x28
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40021000 	.word	0x40021000

0800a46c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f7fe fcfc 	bl	8008e80 <USBD_LL_SetupStage>
}
 800a488:	bf00      	nop
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	6879      	ldr	r1, [r7, #4]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	440b      	add	r3, r1
 800a4b0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	f7fe fd36 	bl	8008f2a <USBD_LL_DataOutStage>
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	1a9b      	subs	r3, r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	440b      	add	r3, r1
 800a4e6:	3348      	adds	r3, #72	@ 0x48
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	78fb      	ldrb	r3, [r7, #3]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	f7fe fd7f 	bl	8008ff0 <USBD_LL_DataInStage>
}
 800a4f2:	bf00      	nop
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fe83 	bl	8009214 <USBD_LL_SOF>
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b084      	sub	sp, #16
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a51e:	2301      	movs	r3, #1
 800a520:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d001      	beq.n	800a52e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a52a:	f7f7 f913 	bl	8001754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a534:	7bfa      	ldrb	r2, [r7, #15]
 800a536:	4611      	mov	r1, r2
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fe fe30 	bl	800919e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fde9 	bl	800911c <USBD_LL_Reset>
}
 800a54a:	bf00      	nop
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fe1f 	bl	80091be <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d005      	beq.n	800a594 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a588:	4b04      	ldr	r3, [pc, #16]	@ (800a59c <HAL_PCD_SuspendCallback+0x48>)
 800a58a:	691b      	ldr	r3, [r3, #16]
 800a58c:	4a03      	ldr	r2, [pc, #12]	@ (800a59c <HAL_PCD_SuspendCallback+0x48>)
 800a58e:	f043 0306 	orr.w	r3, r3, #6
 800a592:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	e000ed00 	.word	0xe000ed00

0800a5a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	6812      	ldr	r2, [r2, #0]
 800a5b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a5ba:	f023 0301 	bic.w	r3, r3, #1
 800a5be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d007      	beq.n	800a5d8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5c8:	4b08      	ldr	r3, [pc, #32]	@ (800a5ec <HAL_PCD_ResumeCallback+0x4c>)
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	4a07      	ldr	r2, [pc, #28]	@ (800a5ec <HAL_PCD_ResumeCallback+0x4c>)
 800a5ce:	f023 0306 	bic.w	r3, r3, #6
 800a5d2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a5d4:	f000 fade 	bl	800ab94 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7fe fe02 	bl	80091e8 <USBD_LL_Resume>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	e000ed00 	.word	0xe000ed00

0800a5f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fe2b 	bl	8009262 <USBD_LL_IsoOUTIncomplete>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fe0c 	bl	8009248 <USBD_LL_IsoINIncomplete>
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe fe18 	bl	800927c <USBD_LL_DevConnected>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fe15 	bl	8009292 <USBD_LL_DevDisconnected>
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d13c      	bne.n	800a6fa <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a680:	4a20      	ldr	r2, [pc, #128]	@ (800a704 <USBD_LL_Init+0x94>)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a1e      	ldr	r2, [pc, #120]	@ (800a704 <USBD_LL_Init+0x94>)
 800a68c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a690:	4b1c      	ldr	r3, [pc, #112]	@ (800a704 <USBD_LL_Init+0x94>)
 800a692:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a696:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a698:	4b1a      	ldr	r3, [pc, #104]	@ (800a704 <USBD_LL_Init+0x94>)
 800a69a:	2206      	movs	r2, #6
 800a69c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a69e:	4b19      	ldr	r3, [pc, #100]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6a4:	4b17      	ldr	r3, [pc, #92]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6aa:	4b16      	ldr	r3, [pc, #88]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6b0:	4b14      	ldr	r3, [pc, #80]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6b6:	4b13      	ldr	r3, [pc, #76]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a6bc:	4b11      	ldr	r3, [pc, #68]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6c2:	4b10      	ldr	r3, [pc, #64]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6ce:	480d      	ldr	r0, [pc, #52]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6d0:	f7f9 f848 	bl	8003764 <HAL_PCD_Init>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6da:	f7f7 f83b 	bl	8001754 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6de:	2180      	movs	r1, #128	@ 0x80
 800a6e0:	4808      	ldr	r0, [pc, #32]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6e2:	f7fa f8aa 	bl	800483a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6e6:	2240      	movs	r2, #64	@ 0x40
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4806      	ldr	r0, [pc, #24]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6ec:	f7fa f85e 	bl	80047ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6f0:	2280      	movs	r2, #128	@ 0x80
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4803      	ldr	r0, [pc, #12]	@ (800a704 <USBD_LL_Init+0x94>)
 800a6f6:	f7fa f859 	bl	80047ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20001af0 	.word	0x20001af0

0800a708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a71e:	4618      	mov	r0, r3
 800a720:	f7f9 f944 	bl	80039ac <HAL_PCD_Start>
 800a724:	4603      	mov	r3, r0
 800a726:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d816      	bhi.n	800a75c <USBD_LL_Start+0x54>
 800a72e:	a201      	add	r2, pc, #4	@ (adr r2, 800a734 <USBD_LL_Start+0x2c>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a745 	.word	0x0800a745
 800a738:	0800a74b 	.word	0x0800a74b
 800a73c:	0800a751 	.word	0x0800a751
 800a740:	0800a757 	.word	0x0800a757
    case HAL_OK :
      usb_status = USBD_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
    break;
 800a748:	e00b      	b.n	800a762 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a74a:	2303      	movs	r3, #3
 800a74c:	73fb      	strb	r3, [r7, #15]
    break;
 800a74e:	e008      	b.n	800a762 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a750:	2301      	movs	r3, #1
 800a752:	73fb      	strb	r3, [r7, #15]
    break;
 800a754:	e005      	b.n	800a762 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a756:	2303      	movs	r3, #3
 800a758:	73fb      	strb	r3, [r7, #15]
    break;
 800a75a:	e002      	b.n	800a762 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a75c:	2303      	movs	r3, #3
 800a75e:	73fb      	strb	r3, [r7, #15]
    break;
 800a760:	bf00      	nop
  }
  return usb_status;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	4603      	mov	r3, r0
 800a77c:	70fb      	strb	r3, [r7, #3]
 800a77e:	460b      	mov	r3, r1
 800a780:	70bb      	strb	r3, [r7, #2]
 800a782:	4613      	mov	r3, r2
 800a784:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a794:	78bb      	ldrb	r3, [r7, #2]
 800a796:	883a      	ldrh	r2, [r7, #0]
 800a798:	78f9      	ldrb	r1, [r7, #3]
 800a79a:	f7f9 fcff 	bl	800419c <HAL_PCD_EP_Open>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d817      	bhi.n	800a7d8 <USBD_LL_OpenEP+0x6c>
 800a7a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b0 <USBD_LL_OpenEP+0x44>)
 800a7aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ae:	bf00      	nop
 800a7b0:	0800a7c1 	.word	0x0800a7c1
 800a7b4:	0800a7c7 	.word	0x0800a7c7
 800a7b8:	0800a7cd 	.word	0x0800a7cd
 800a7bc:	0800a7d3 	.word	0x0800a7d3
    case HAL_OK :
      usb_status = USBD_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c4:	e00b      	b.n	800a7de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ca:	e008      	b.n	800a7de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d0:	e005      	b.n	800a7de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d6:	e002      	b.n	800a7de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	73fb      	strb	r3, [r7, #15]
    break;
 800a7dc:	bf00      	nop
  }
  return usb_status;
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7f9 fd30 	bl	800426c <HAL_PCD_EP_Close>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b03      	cmp	r3, #3
 800a814:	d816      	bhi.n	800a844 <USBD_LL_CloseEP+0x5c>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <USBD_LL_CloseEP+0x34>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a82d 	.word	0x0800a82d
 800a820:	0800a833 	.word	0x0800a833
 800a824:	0800a839 	.word	0x0800a839
 800a828:	0800a83f 	.word	0x0800a83f
    case HAL_OK :
      usb_status = USBD_OK;
 800a82c:	2300      	movs	r3, #0
 800a82e:	73fb      	strb	r3, [r7, #15]
    break;
 800a830:	e00b      	b.n	800a84a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a832:	2303      	movs	r3, #3
 800a834:	73fb      	strb	r3, [r7, #15]
    break;
 800a836:	e008      	b.n	800a84a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a838:	2301      	movs	r3, #1
 800a83a:	73fb      	strb	r3, [r7, #15]
    break;
 800a83c:	e005      	b.n	800a84a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a83e:	2303      	movs	r3, #3
 800a840:	73fb      	strb	r3, [r7, #15]
    break;
 800a842:	e002      	b.n	800a84a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a844:	2303      	movs	r3, #3
 800a846:	73fb      	strb	r3, [r7, #15]
    break;
 800a848:	bf00      	nop
  }
  return usb_status;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	460b      	mov	r3, r1
 800a85e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a86e:	78fa      	ldrb	r2, [r7, #3]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7f9 fdd7 	bl	8004426 <HAL_PCD_EP_SetStall>
 800a878:	4603      	mov	r3, r0
 800a87a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d816      	bhi.n	800a8b0 <USBD_LL_StallEP+0x5c>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <USBD_LL_StallEP+0x34>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a89f 	.word	0x0800a89f
 800a890:	0800a8a5 	.word	0x0800a8a5
 800a894:	0800a8ab 	.word	0x0800a8ab
    case HAL_OK :
      usb_status = USBD_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
    break;
 800a89c:	e00b      	b.n	800a8b6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a2:	e008      	b.n	800a8b6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a8:	e005      	b.n	800a8b6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ae:	e002      	b.n	800a8b6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b4:	bf00      	nop
  }
  return usb_status;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a8da:	78fa      	ldrb	r2, [r7, #3]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7f9 fe03 	bl	80044ea <HAL_PCD_EP_ClrStall>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a8e8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d816      	bhi.n	800a91c <USBD_LL_ClearStallEP+0x5c>
 800a8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <USBD_LL_ClearStallEP+0x34>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	0800a90b 	.word	0x0800a90b
 800a8fc:	0800a911 	.word	0x0800a911
 800a900:	0800a917 	.word	0x0800a917
    case HAL_OK :
      usb_status = USBD_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
    break;
 800a908:	e00b      	b.n	800a922 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a90a:	2303      	movs	r3, #3
 800a90c:	73fb      	strb	r3, [r7, #15]
    break;
 800a90e:	e008      	b.n	800a922 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a910:	2301      	movs	r3, #1
 800a912:	73fb      	strb	r3, [r7, #15]
    break;
 800a914:	e005      	b.n	800a922 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	73fb      	strb	r3, [r7, #15]
    break;
 800a91a:	e002      	b.n	800a922 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a91c:	2303      	movs	r3, #3
 800a91e:	73fb      	strb	r3, [r7, #15]
    break;
 800a920:	bf00      	nop
  }
  return usb_status;
 800a922:	7bfb      	ldrb	r3, [r7, #15]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3710      	adds	r7, #16
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a93e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a944:	2b00      	cmp	r3, #0
 800a946:	da0b      	bge.n	800a960 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a948:	78fb      	ldrb	r3, [r7, #3]
 800a94a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	4613      	mov	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	1a9b      	subs	r3, r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	333e      	adds	r3, #62	@ 0x3e
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	e00b      	b.n	800a978 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a966:	68f9      	ldr	r1, [r7, #12]
 800a968:	4613      	mov	r3, r2
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	1a9b      	subs	r3, r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	440b      	add	r3, r1
 800a972:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a976:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7f9 fbd5 	bl	8004152 <HAL_PCD_SetAddress>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a9ac:	7bbb      	ldrb	r3, [r7, #14]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d816      	bhi.n	800a9e0 <USBD_LL_SetUSBAddress+0x5c>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <USBD_LL_SetUSBAddress+0x34>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800a9c9 	.word	0x0800a9c9
 800a9bc:	0800a9cf 	.word	0x0800a9cf
 800a9c0:	0800a9d5 	.word	0x0800a9d5
 800a9c4:	0800a9db 	.word	0x0800a9db
    case HAL_OK :
      usb_status = USBD_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a9cc:	e00b      	b.n	800a9e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d2:	e008      	b.n	800a9e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d8:	e005      	b.n	800a9e6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9de:	e002      	b.n	800a9e6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e4:	bf00      	nop
  }
  return usb_status;
 800a9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	607a      	str	r2, [r7, #4]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aa0e:	7af9      	ldrb	r1, [r7, #11]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	f7f9 fcca 	bl	80043ac <HAL_PCD_EP_Transmit>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa1c:	7dbb      	ldrb	r3, [r7, #22]
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d816      	bhi.n	800aa50 <USBD_LL_Transmit+0x60>
 800aa22:	a201      	add	r2, pc, #4	@ (adr r2, 800aa28 <USBD_LL_Transmit+0x38>)
 800aa24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa28:	0800aa39 	.word	0x0800aa39
 800aa2c:	0800aa3f 	.word	0x0800aa3f
 800aa30:	0800aa45 	.word	0x0800aa45
 800aa34:	0800aa4b 	.word	0x0800aa4b
    case HAL_OK :
      usb_status = USBD_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	75fb      	strb	r3, [r7, #23]
    break;
 800aa3c:	e00b      	b.n	800aa56 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	75fb      	strb	r3, [r7, #23]
    break;
 800aa42:	e008      	b.n	800aa56 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa44:	2301      	movs	r3, #1
 800aa46:	75fb      	strb	r3, [r7, #23]
    break;
 800aa48:	e005      	b.n	800aa56 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	75fb      	strb	r3, [r7, #23]
    break;
 800aa4e:	e002      	b.n	800aa56 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aa50:	2303      	movs	r3, #3
 800aa52:	75fb      	strb	r3, [r7, #23]
    break;
 800aa54:	bf00      	nop
  }
  return usb_status;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3718      	adds	r7, #24
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	603b      	str	r3, [r7, #0]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aa7e:	7af9      	ldrb	r1, [r7, #11]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	f7f9 fc3c 	bl	8004300 <HAL_PCD_EP_Receive>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa8c:	7dbb      	ldrb	r3, [r7, #22]
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d816      	bhi.n	800aac0 <USBD_LL_PrepareReceive+0x60>
 800aa92:	a201      	add	r2, pc, #4	@ (adr r2, 800aa98 <USBD_LL_PrepareReceive+0x38>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800aaa9 	.word	0x0800aaa9
 800aa9c:	0800aaaf 	.word	0x0800aaaf
 800aaa0:	0800aab5 	.word	0x0800aab5
 800aaa4:	0800aabb 	.word	0x0800aabb
    case HAL_OK :
      usb_status = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75fb      	strb	r3, [r7, #23]
    break;
 800aaac:	e00b      	b.n	800aac6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aaae:	2303      	movs	r3, #3
 800aab0:	75fb      	strb	r3, [r7, #23]
    break;
 800aab2:	e008      	b.n	800aac6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
    break;
 800aab8:	e005      	b.n	800aac6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaba:	2303      	movs	r3, #3
 800aabc:	75fb      	strb	r3, [r7, #23]
    break;
 800aabe:	e002      	b.n	800aac6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800aac0:	2303      	movs	r3, #3
 800aac2:	75fb      	strb	r3, [r7, #23]
    break;
 800aac4:	bf00      	nop
  }
  return usb_status;
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800aae2:	78fa      	ldrb	r2, [r7, #3]
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7f9 fc48 	bl	800437c <HAL_PCD_EP_GetRxCount>
 800aaec:	4603      	mov	r3, r0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
	...

0800aaf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <HAL_PCDEx_LPM_Callback+0x18>
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d01f      	beq.n	800ab4e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ab0e:	e03b      	b.n	800ab88 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ab18:	f000 f83c 	bl	800ab94 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ab90 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	4a1b      	ldr	r2, [pc, #108]	@ (800ab90 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab22:	f023 0306 	bic.w	r3, r3, #6
 800ab26:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	6812      	ldr	r2, [r2, #0]
 800ab36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab3a:	f023 0301 	bic.w	r3, r3, #1
 800ab3e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fb4e 	bl	80091e8 <USBD_LL_Resume>
    break;
 800ab4c:	e01c      	b.n	800ab88 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6812      	ldr	r2, [r2, #0]
 800ab5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7fe fb26 	bl	80091be <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d005      	beq.n	800ab86 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab7a:	4b05      	ldr	r3, [pc, #20]	@ (800ab90 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	4a04      	ldr	r2, [pc, #16]	@ (800ab90 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab80:	f043 0306 	orr.w	r3, r3, #6
 800ab84:	6113      	str	r3, [r2, #16]
    break;
 800ab86:	bf00      	nop
}
 800ab88:	bf00      	nop
 800ab8a:	3708      	adds	r7, #8
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	e000ed00 	.word	0xe000ed00

0800ab94 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ab98:	f7f6 fd2a 	bl	80015f0 <SystemClock_Config>
}
 800ab9c:	bf00      	nop
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <malloc>:
 800aba0:	4b02      	ldr	r3, [pc, #8]	@ (800abac <malloc+0xc>)
 800aba2:	4601      	mov	r1, r0
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	f000 b82d 	b.w	800ac04 <_malloc_r>
 800abaa:	bf00      	nop
 800abac:	20000238 	.word	0x20000238

0800abb0 <free>:
 800abb0:	4b02      	ldr	r3, [pc, #8]	@ (800abbc <free+0xc>)
 800abb2:	4601      	mov	r1, r0
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	f002 b82f 	b.w	800cc18 <_free_r>
 800abba:	bf00      	nop
 800abbc:	20000238 	.word	0x20000238

0800abc0 <sbrk_aligned>:
 800abc0:	b570      	push	{r4, r5, r6, lr}
 800abc2:	4e0f      	ldr	r6, [pc, #60]	@ (800ac00 <sbrk_aligned+0x40>)
 800abc4:	460c      	mov	r4, r1
 800abc6:	6831      	ldr	r1, [r6, #0]
 800abc8:	4605      	mov	r5, r0
 800abca:	b911      	cbnz	r1, 800abd2 <sbrk_aligned+0x12>
 800abcc:	f001 f976 	bl	800bebc <_sbrk_r>
 800abd0:	6030      	str	r0, [r6, #0]
 800abd2:	4621      	mov	r1, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f001 f971 	bl	800bebc <_sbrk_r>
 800abda:	1c43      	adds	r3, r0, #1
 800abdc:	d103      	bne.n	800abe6 <sbrk_aligned+0x26>
 800abde:	f04f 34ff 	mov.w	r4, #4294967295
 800abe2:	4620      	mov	r0, r4
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
 800abe6:	1cc4      	adds	r4, r0, #3
 800abe8:	f024 0403 	bic.w	r4, r4, #3
 800abec:	42a0      	cmp	r0, r4
 800abee:	d0f8      	beq.n	800abe2 <sbrk_aligned+0x22>
 800abf0:	1a21      	subs	r1, r4, r0
 800abf2:	4628      	mov	r0, r5
 800abf4:	f001 f962 	bl	800bebc <_sbrk_r>
 800abf8:	3001      	adds	r0, #1
 800abfa:	d1f2      	bne.n	800abe2 <sbrk_aligned+0x22>
 800abfc:	e7ef      	b.n	800abde <sbrk_aligned+0x1e>
 800abfe:	bf00      	nop
 800ac00:	20001ef8 	.word	0x20001ef8

0800ac04 <_malloc_r>:
 800ac04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac08:	1ccd      	adds	r5, r1, #3
 800ac0a:	f025 0503 	bic.w	r5, r5, #3
 800ac0e:	3508      	adds	r5, #8
 800ac10:	2d0c      	cmp	r5, #12
 800ac12:	bf38      	it	cc
 800ac14:	250c      	movcc	r5, #12
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	4606      	mov	r6, r0
 800ac1a:	db01      	blt.n	800ac20 <_malloc_r+0x1c>
 800ac1c:	42a9      	cmp	r1, r5
 800ac1e:	d904      	bls.n	800ac2a <_malloc_r+0x26>
 800ac20:	230c      	movs	r3, #12
 800ac22:	6033      	str	r3, [r6, #0]
 800ac24:	2000      	movs	r0, #0
 800ac26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad00 <_malloc_r+0xfc>
 800ac2e:	f000 f869 	bl	800ad04 <__malloc_lock>
 800ac32:	f8d8 3000 	ldr.w	r3, [r8]
 800ac36:	461c      	mov	r4, r3
 800ac38:	bb44      	cbnz	r4, 800ac8c <_malloc_r+0x88>
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f7ff ffbf 	bl	800abc0 <sbrk_aligned>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	4604      	mov	r4, r0
 800ac46:	d158      	bne.n	800acfa <_malloc_r+0xf6>
 800ac48:	f8d8 4000 	ldr.w	r4, [r8]
 800ac4c:	4627      	mov	r7, r4
 800ac4e:	2f00      	cmp	r7, #0
 800ac50:	d143      	bne.n	800acda <_malloc_r+0xd6>
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	d04b      	beq.n	800acee <_malloc_r+0xea>
 800ac56:	6823      	ldr	r3, [r4, #0]
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	eb04 0903 	add.w	r9, r4, r3
 800ac60:	f001 f92c 	bl	800bebc <_sbrk_r>
 800ac64:	4581      	cmp	r9, r0
 800ac66:	d142      	bne.n	800acee <_malloc_r+0xea>
 800ac68:	6821      	ldr	r1, [r4, #0]
 800ac6a:	1a6d      	subs	r5, r5, r1
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4630      	mov	r0, r6
 800ac70:	f7ff ffa6 	bl	800abc0 <sbrk_aligned>
 800ac74:	3001      	adds	r0, #1
 800ac76:	d03a      	beq.n	800acee <_malloc_r+0xea>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	442b      	add	r3, r5
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac82:	685a      	ldr	r2, [r3, #4]
 800ac84:	bb62      	cbnz	r2, 800ace0 <_malloc_r+0xdc>
 800ac86:	f8c8 7000 	str.w	r7, [r8]
 800ac8a:	e00f      	b.n	800acac <_malloc_r+0xa8>
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	1b52      	subs	r2, r2, r5
 800ac90:	d420      	bmi.n	800acd4 <_malloc_r+0xd0>
 800ac92:	2a0b      	cmp	r2, #11
 800ac94:	d917      	bls.n	800acc6 <_malloc_r+0xc2>
 800ac96:	1961      	adds	r1, r4, r5
 800ac98:	42a3      	cmp	r3, r4
 800ac9a:	6025      	str	r5, [r4, #0]
 800ac9c:	bf18      	it	ne
 800ac9e:	6059      	strne	r1, [r3, #4]
 800aca0:	6863      	ldr	r3, [r4, #4]
 800aca2:	bf08      	it	eq
 800aca4:	f8c8 1000 	streq.w	r1, [r8]
 800aca8:	5162      	str	r2, [r4, r5]
 800acaa:	604b      	str	r3, [r1, #4]
 800acac:	4630      	mov	r0, r6
 800acae:	f000 f82f 	bl	800ad10 <__malloc_unlock>
 800acb2:	f104 000b 	add.w	r0, r4, #11
 800acb6:	1d23      	adds	r3, r4, #4
 800acb8:	f020 0007 	bic.w	r0, r0, #7
 800acbc:	1ac2      	subs	r2, r0, r3
 800acbe:	bf1c      	itt	ne
 800acc0:	1a1b      	subne	r3, r3, r0
 800acc2:	50a3      	strne	r3, [r4, r2]
 800acc4:	e7af      	b.n	800ac26 <_malloc_r+0x22>
 800acc6:	6862      	ldr	r2, [r4, #4]
 800acc8:	42a3      	cmp	r3, r4
 800acca:	bf0c      	ite	eq
 800accc:	f8c8 2000 	streq.w	r2, [r8]
 800acd0:	605a      	strne	r2, [r3, #4]
 800acd2:	e7eb      	b.n	800acac <_malloc_r+0xa8>
 800acd4:	4623      	mov	r3, r4
 800acd6:	6864      	ldr	r4, [r4, #4]
 800acd8:	e7ae      	b.n	800ac38 <_malloc_r+0x34>
 800acda:	463c      	mov	r4, r7
 800acdc:	687f      	ldr	r7, [r7, #4]
 800acde:	e7b6      	b.n	800ac4e <_malloc_r+0x4a>
 800ace0:	461a      	mov	r2, r3
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	d1fb      	bne.n	800ace0 <_malloc_r+0xdc>
 800ace8:	2300      	movs	r3, #0
 800acea:	6053      	str	r3, [r2, #4]
 800acec:	e7de      	b.n	800acac <_malloc_r+0xa8>
 800acee:	230c      	movs	r3, #12
 800acf0:	6033      	str	r3, [r6, #0]
 800acf2:	4630      	mov	r0, r6
 800acf4:	f000 f80c 	bl	800ad10 <__malloc_unlock>
 800acf8:	e794      	b.n	800ac24 <_malloc_r+0x20>
 800acfa:	6005      	str	r5, [r0, #0]
 800acfc:	e7d6      	b.n	800acac <_malloc_r+0xa8>
 800acfe:	bf00      	nop
 800ad00:	20001efc 	.word	0x20001efc

0800ad04 <__malloc_lock>:
 800ad04:	4801      	ldr	r0, [pc, #4]	@ (800ad0c <__malloc_lock+0x8>)
 800ad06:	f001 b926 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20002040 	.word	0x20002040

0800ad10 <__malloc_unlock>:
 800ad10:	4801      	ldr	r0, [pc, #4]	@ (800ad18 <__malloc_unlock+0x8>)
 800ad12:	f001 b921 	b.w	800bf58 <__retarget_lock_release_recursive>
 800ad16:	bf00      	nop
 800ad18:	20002040 	.word	0x20002040

0800ad1c <__cvt>:
 800ad1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	ec57 6b10 	vmov	r6, r7, d0
 800ad24:	2f00      	cmp	r7, #0
 800ad26:	460c      	mov	r4, r1
 800ad28:	4619      	mov	r1, r3
 800ad2a:	463b      	mov	r3, r7
 800ad2c:	bfbb      	ittet	lt
 800ad2e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad32:	461f      	movlt	r7, r3
 800ad34:	2300      	movge	r3, #0
 800ad36:	232d      	movlt	r3, #45	@ 0x2d
 800ad38:	700b      	strb	r3, [r1, #0]
 800ad3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad3c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad40:	4691      	mov	r9, r2
 800ad42:	f023 0820 	bic.w	r8, r3, #32
 800ad46:	bfbc      	itt	lt
 800ad48:	4632      	movlt	r2, r6
 800ad4a:	4616      	movlt	r6, r2
 800ad4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad50:	d005      	beq.n	800ad5e <__cvt+0x42>
 800ad52:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad56:	d100      	bne.n	800ad5a <__cvt+0x3e>
 800ad58:	3401      	adds	r4, #1
 800ad5a:	2102      	movs	r1, #2
 800ad5c:	e000      	b.n	800ad60 <__cvt+0x44>
 800ad5e:	2103      	movs	r1, #3
 800ad60:	ab03      	add	r3, sp, #12
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	ab02      	add	r3, sp, #8
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	ec47 6b10 	vmov	d0, r6, r7
 800ad6c:	4653      	mov	r3, sl
 800ad6e:	4622      	mov	r2, r4
 800ad70:	f001 f982 	bl	800c078 <_dtoa_r>
 800ad74:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad78:	4605      	mov	r5, r0
 800ad7a:	d119      	bne.n	800adb0 <__cvt+0x94>
 800ad7c:	f019 0f01 	tst.w	r9, #1
 800ad80:	d00e      	beq.n	800ada0 <__cvt+0x84>
 800ad82:	eb00 0904 	add.w	r9, r0, r4
 800ad86:	2200      	movs	r2, #0
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fe9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad92:	b108      	cbz	r0, 800ad98 <__cvt+0x7c>
 800ad94:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad98:	2230      	movs	r2, #48	@ 0x30
 800ad9a:	9b03      	ldr	r3, [sp, #12]
 800ad9c:	454b      	cmp	r3, r9
 800ad9e:	d31e      	bcc.n	800adde <__cvt+0xc2>
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ada4:	1b5b      	subs	r3, r3, r5
 800ada6:	4628      	mov	r0, r5
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	b004      	add	sp, #16
 800adac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800adb4:	eb00 0904 	add.w	r9, r0, r4
 800adb8:	d1e5      	bne.n	800ad86 <__cvt+0x6a>
 800adba:	7803      	ldrb	r3, [r0, #0]
 800adbc:	2b30      	cmp	r3, #48	@ 0x30
 800adbe:	d10a      	bne.n	800add6 <__cvt+0xba>
 800adc0:	2200      	movs	r2, #0
 800adc2:	2300      	movs	r3, #0
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fe7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800adcc:	b918      	cbnz	r0, 800add6 <__cvt+0xba>
 800adce:	f1c4 0401 	rsb	r4, r4, #1
 800add2:	f8ca 4000 	str.w	r4, [sl]
 800add6:	f8da 3000 	ldr.w	r3, [sl]
 800adda:	4499      	add	r9, r3
 800addc:	e7d3      	b.n	800ad86 <__cvt+0x6a>
 800adde:	1c59      	adds	r1, r3, #1
 800ade0:	9103      	str	r1, [sp, #12]
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	e7d9      	b.n	800ad9a <__cvt+0x7e>

0800ade6 <__exponent>:
 800ade6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ade8:	2900      	cmp	r1, #0
 800adea:	bfba      	itte	lt
 800adec:	4249      	neglt	r1, r1
 800adee:	232d      	movlt	r3, #45	@ 0x2d
 800adf0:	232b      	movge	r3, #43	@ 0x2b
 800adf2:	2909      	cmp	r1, #9
 800adf4:	7002      	strb	r2, [r0, #0]
 800adf6:	7043      	strb	r3, [r0, #1]
 800adf8:	dd29      	ble.n	800ae4e <__exponent+0x68>
 800adfa:	f10d 0307 	add.w	r3, sp, #7
 800adfe:	461d      	mov	r5, r3
 800ae00:	270a      	movs	r7, #10
 800ae02:	461a      	mov	r2, r3
 800ae04:	fbb1 f6f7 	udiv	r6, r1, r7
 800ae08:	fb07 1416 	mls	r4, r7, r6, r1
 800ae0c:	3430      	adds	r4, #48	@ 0x30
 800ae0e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ae12:	460c      	mov	r4, r1
 800ae14:	2c63      	cmp	r4, #99	@ 0x63
 800ae16:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae1a:	4631      	mov	r1, r6
 800ae1c:	dcf1      	bgt.n	800ae02 <__exponent+0x1c>
 800ae1e:	3130      	adds	r1, #48	@ 0x30
 800ae20:	1e94      	subs	r4, r2, #2
 800ae22:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae26:	1c41      	adds	r1, r0, #1
 800ae28:	4623      	mov	r3, r4
 800ae2a:	42ab      	cmp	r3, r5
 800ae2c:	d30a      	bcc.n	800ae44 <__exponent+0x5e>
 800ae2e:	f10d 0309 	add.w	r3, sp, #9
 800ae32:	1a9b      	subs	r3, r3, r2
 800ae34:	42ac      	cmp	r4, r5
 800ae36:	bf88      	it	hi
 800ae38:	2300      	movhi	r3, #0
 800ae3a:	3302      	adds	r3, #2
 800ae3c:	4403      	add	r3, r0
 800ae3e:	1a18      	subs	r0, r3, r0
 800ae40:	b003      	add	sp, #12
 800ae42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae44:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae48:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae4c:	e7ed      	b.n	800ae2a <__exponent+0x44>
 800ae4e:	2330      	movs	r3, #48	@ 0x30
 800ae50:	3130      	adds	r1, #48	@ 0x30
 800ae52:	7083      	strb	r3, [r0, #2]
 800ae54:	70c1      	strb	r1, [r0, #3]
 800ae56:	1d03      	adds	r3, r0, #4
 800ae58:	e7f1      	b.n	800ae3e <__exponent+0x58>
	...

0800ae5c <_printf_float>:
 800ae5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae60:	b08d      	sub	sp, #52	@ 0x34
 800ae62:	460c      	mov	r4, r1
 800ae64:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae68:	4616      	mov	r6, r2
 800ae6a:	461f      	mov	r7, r3
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	f000 ffed 	bl	800be4c <_localeconv_r>
 800ae72:	6803      	ldr	r3, [r0, #0]
 800ae74:	9304      	str	r3, [sp, #16]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7f5 f9fa 	bl	8000270 <strlen>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae80:	f8d8 3000 	ldr.w	r3, [r8]
 800ae84:	9005      	str	r0, [sp, #20]
 800ae86:	3307      	adds	r3, #7
 800ae88:	f023 0307 	bic.w	r3, r3, #7
 800ae8c:	f103 0208 	add.w	r2, r3, #8
 800ae90:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae94:	f8d4 b000 	ldr.w	fp, [r4]
 800ae98:	f8c8 2000 	str.w	r2, [r8]
 800ae9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aea0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	f8cd 8018 	str.w	r8, [sp, #24]
 800aeaa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aeae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aeb2:	4b9c      	ldr	r3, [pc, #624]	@ (800b124 <_printf_float+0x2c8>)
 800aeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb8:	f7f5 fe38 	bl	8000b2c <__aeabi_dcmpun>
 800aebc:	bb70      	cbnz	r0, 800af1c <_printf_float+0xc0>
 800aebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aec2:	4b98      	ldr	r3, [pc, #608]	@ (800b124 <_printf_float+0x2c8>)
 800aec4:	f04f 32ff 	mov.w	r2, #4294967295
 800aec8:	f7f5 fe12 	bl	8000af0 <__aeabi_dcmple>
 800aecc:	bb30      	cbnz	r0, 800af1c <_printf_float+0xc0>
 800aece:	2200      	movs	r2, #0
 800aed0:	2300      	movs	r3, #0
 800aed2:	4640      	mov	r0, r8
 800aed4:	4649      	mov	r1, r9
 800aed6:	f7f5 fe01 	bl	8000adc <__aeabi_dcmplt>
 800aeda:	b110      	cbz	r0, 800aee2 <_printf_float+0x86>
 800aedc:	232d      	movs	r3, #45	@ 0x2d
 800aede:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aee2:	4a91      	ldr	r2, [pc, #580]	@ (800b128 <_printf_float+0x2cc>)
 800aee4:	4b91      	ldr	r3, [pc, #580]	@ (800b12c <_printf_float+0x2d0>)
 800aee6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aeea:	bf8c      	ite	hi
 800aeec:	4690      	movhi	r8, r2
 800aeee:	4698      	movls	r8, r3
 800aef0:	2303      	movs	r3, #3
 800aef2:	6123      	str	r3, [r4, #16]
 800aef4:	f02b 0304 	bic.w	r3, fp, #4
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	f04f 0900 	mov.w	r9, #0
 800aefe:	9700      	str	r7, [sp, #0]
 800af00:	4633      	mov	r3, r6
 800af02:	aa0b      	add	r2, sp, #44	@ 0x2c
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f9d2 	bl	800b2b0 <_printf_common>
 800af0c:	3001      	adds	r0, #1
 800af0e:	f040 808d 	bne.w	800b02c <_printf_float+0x1d0>
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	b00d      	add	sp, #52	@ 0x34
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	4642      	mov	r2, r8
 800af1e:	464b      	mov	r3, r9
 800af20:	4640      	mov	r0, r8
 800af22:	4649      	mov	r1, r9
 800af24:	f7f5 fe02 	bl	8000b2c <__aeabi_dcmpun>
 800af28:	b140      	cbz	r0, 800af3c <_printf_float+0xe0>
 800af2a:	464b      	mov	r3, r9
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bfbc      	itt	lt
 800af30:	232d      	movlt	r3, #45	@ 0x2d
 800af32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af36:	4a7e      	ldr	r2, [pc, #504]	@ (800b130 <_printf_float+0x2d4>)
 800af38:	4b7e      	ldr	r3, [pc, #504]	@ (800b134 <_printf_float+0x2d8>)
 800af3a:	e7d4      	b.n	800aee6 <_printf_float+0x8a>
 800af3c:	6863      	ldr	r3, [r4, #4]
 800af3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af42:	9206      	str	r2, [sp, #24]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	d13b      	bne.n	800afc0 <_printf_float+0x164>
 800af48:	2306      	movs	r3, #6
 800af4a:	6063      	str	r3, [r4, #4]
 800af4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af50:	2300      	movs	r3, #0
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	9303      	str	r3, [sp, #12]
 800af56:	ab0a      	add	r3, sp, #40	@ 0x28
 800af58:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af5c:	ab09      	add	r3, sp, #36	@ 0x24
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	6861      	ldr	r1, [r4, #4]
 800af62:	ec49 8b10 	vmov	d0, r8, r9
 800af66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af6a:	4628      	mov	r0, r5
 800af6c:	f7ff fed6 	bl	800ad1c <__cvt>
 800af70:	9b06      	ldr	r3, [sp, #24]
 800af72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af74:	2b47      	cmp	r3, #71	@ 0x47
 800af76:	4680      	mov	r8, r0
 800af78:	d129      	bne.n	800afce <_printf_float+0x172>
 800af7a:	1cc8      	adds	r0, r1, #3
 800af7c:	db02      	blt.n	800af84 <_printf_float+0x128>
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	4299      	cmp	r1, r3
 800af82:	dd41      	ble.n	800b008 <_printf_float+0x1ac>
 800af84:	f1aa 0a02 	sub.w	sl, sl, #2
 800af88:	fa5f fa8a 	uxtb.w	sl, sl
 800af8c:	3901      	subs	r1, #1
 800af8e:	4652      	mov	r2, sl
 800af90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af94:	9109      	str	r1, [sp, #36]	@ 0x24
 800af96:	f7ff ff26 	bl	800ade6 <__exponent>
 800af9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af9c:	1813      	adds	r3, r2, r0
 800af9e:	2a01      	cmp	r2, #1
 800afa0:	4681      	mov	r9, r0
 800afa2:	6123      	str	r3, [r4, #16]
 800afa4:	dc02      	bgt.n	800afac <_printf_float+0x150>
 800afa6:	6822      	ldr	r2, [r4, #0]
 800afa8:	07d2      	lsls	r2, r2, #31
 800afaa:	d501      	bpl.n	800afb0 <_printf_float+0x154>
 800afac:	3301      	adds	r3, #1
 800afae:	6123      	str	r3, [r4, #16]
 800afb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d0a2      	beq.n	800aefe <_printf_float+0xa2>
 800afb8:	232d      	movs	r3, #45	@ 0x2d
 800afba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afbe:	e79e      	b.n	800aefe <_printf_float+0xa2>
 800afc0:	9a06      	ldr	r2, [sp, #24]
 800afc2:	2a47      	cmp	r2, #71	@ 0x47
 800afc4:	d1c2      	bne.n	800af4c <_printf_float+0xf0>
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1c0      	bne.n	800af4c <_printf_float+0xf0>
 800afca:	2301      	movs	r3, #1
 800afcc:	e7bd      	b.n	800af4a <_printf_float+0xee>
 800afce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afd2:	d9db      	bls.n	800af8c <_printf_float+0x130>
 800afd4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800afd8:	d118      	bne.n	800b00c <_printf_float+0x1b0>
 800afda:	2900      	cmp	r1, #0
 800afdc:	6863      	ldr	r3, [r4, #4]
 800afde:	dd0b      	ble.n	800aff8 <_printf_float+0x19c>
 800afe0:	6121      	str	r1, [r4, #16]
 800afe2:	b913      	cbnz	r3, 800afea <_printf_float+0x18e>
 800afe4:	6822      	ldr	r2, [r4, #0]
 800afe6:	07d0      	lsls	r0, r2, #31
 800afe8:	d502      	bpl.n	800aff0 <_printf_float+0x194>
 800afea:	3301      	adds	r3, #1
 800afec:	440b      	add	r3, r1
 800afee:	6123      	str	r3, [r4, #16]
 800aff0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aff2:	f04f 0900 	mov.w	r9, #0
 800aff6:	e7db      	b.n	800afb0 <_printf_float+0x154>
 800aff8:	b913      	cbnz	r3, 800b000 <_printf_float+0x1a4>
 800affa:	6822      	ldr	r2, [r4, #0]
 800affc:	07d2      	lsls	r2, r2, #31
 800affe:	d501      	bpl.n	800b004 <_printf_float+0x1a8>
 800b000:	3302      	adds	r3, #2
 800b002:	e7f4      	b.n	800afee <_printf_float+0x192>
 800b004:	2301      	movs	r3, #1
 800b006:	e7f2      	b.n	800afee <_printf_float+0x192>
 800b008:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b00e:	4299      	cmp	r1, r3
 800b010:	db05      	blt.n	800b01e <_printf_float+0x1c2>
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	6121      	str	r1, [r4, #16]
 800b016:	07d8      	lsls	r0, r3, #31
 800b018:	d5ea      	bpl.n	800aff0 <_printf_float+0x194>
 800b01a:	1c4b      	adds	r3, r1, #1
 800b01c:	e7e7      	b.n	800afee <_printf_float+0x192>
 800b01e:	2900      	cmp	r1, #0
 800b020:	bfd4      	ite	le
 800b022:	f1c1 0202 	rsble	r2, r1, #2
 800b026:	2201      	movgt	r2, #1
 800b028:	4413      	add	r3, r2
 800b02a:	e7e0      	b.n	800afee <_printf_float+0x192>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	055a      	lsls	r2, r3, #21
 800b030:	d407      	bmi.n	800b042 <_printf_float+0x1e6>
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	4642      	mov	r2, r8
 800b036:	4631      	mov	r1, r6
 800b038:	4628      	mov	r0, r5
 800b03a:	47b8      	blx	r7
 800b03c:	3001      	adds	r0, #1
 800b03e:	d12b      	bne.n	800b098 <_printf_float+0x23c>
 800b040:	e767      	b.n	800af12 <_printf_float+0xb6>
 800b042:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b046:	f240 80dd 	bls.w	800b204 <_printf_float+0x3a8>
 800b04a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	f7f5 fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 800b056:	2800      	cmp	r0, #0
 800b058:	d033      	beq.n	800b0c2 <_printf_float+0x266>
 800b05a:	4a37      	ldr	r2, [pc, #220]	@ (800b138 <_printf_float+0x2dc>)
 800b05c:	2301      	movs	r3, #1
 800b05e:	4631      	mov	r1, r6
 800b060:	4628      	mov	r0, r5
 800b062:	47b8      	blx	r7
 800b064:	3001      	adds	r0, #1
 800b066:	f43f af54 	beq.w	800af12 <_printf_float+0xb6>
 800b06a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b06e:	4543      	cmp	r3, r8
 800b070:	db02      	blt.n	800b078 <_printf_float+0x21c>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	07d8      	lsls	r0, r3, #31
 800b076:	d50f      	bpl.n	800b098 <_printf_float+0x23c>
 800b078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b07c:	4631      	mov	r1, r6
 800b07e:	4628      	mov	r0, r5
 800b080:	47b8      	blx	r7
 800b082:	3001      	adds	r0, #1
 800b084:	f43f af45 	beq.w	800af12 <_printf_float+0xb6>
 800b088:	f04f 0900 	mov.w	r9, #0
 800b08c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b090:	f104 0a1a 	add.w	sl, r4, #26
 800b094:	45c8      	cmp	r8, r9
 800b096:	dc09      	bgt.n	800b0ac <_printf_float+0x250>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	079b      	lsls	r3, r3, #30
 800b09c:	f100 8103 	bmi.w	800b2a6 <_printf_float+0x44a>
 800b0a0:	68e0      	ldr	r0, [r4, #12]
 800b0a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0a4:	4298      	cmp	r0, r3
 800b0a6:	bfb8      	it	lt
 800b0a8:	4618      	movlt	r0, r3
 800b0aa:	e734      	b.n	800af16 <_printf_float+0xba>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4652      	mov	r2, sl
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f af2b 	beq.w	800af12 <_printf_float+0xb6>
 800b0bc:	f109 0901 	add.w	r9, r9, #1
 800b0c0:	e7e8      	b.n	800b094 <_printf_float+0x238>
 800b0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dc39      	bgt.n	800b13c <_printf_float+0x2e0>
 800b0c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b138 <_printf_float+0x2dc>)
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	47b8      	blx	r7
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	f43f af1d 	beq.w	800af12 <_printf_float+0xb6>
 800b0d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0dc:	ea59 0303 	orrs.w	r3, r9, r3
 800b0e0:	d102      	bne.n	800b0e8 <_printf_float+0x28c>
 800b0e2:	6823      	ldr	r3, [r4, #0]
 800b0e4:	07d9      	lsls	r1, r3, #31
 800b0e6:	d5d7      	bpl.n	800b098 <_printf_float+0x23c>
 800b0e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f af0d 	beq.w	800af12 <_printf_float+0xb6>
 800b0f8:	f04f 0a00 	mov.w	sl, #0
 800b0fc:	f104 0b1a 	add.w	fp, r4, #26
 800b100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b102:	425b      	negs	r3, r3
 800b104:	4553      	cmp	r3, sl
 800b106:	dc01      	bgt.n	800b10c <_printf_float+0x2b0>
 800b108:	464b      	mov	r3, r9
 800b10a:	e793      	b.n	800b034 <_printf_float+0x1d8>
 800b10c:	2301      	movs	r3, #1
 800b10e:	465a      	mov	r2, fp
 800b110:	4631      	mov	r1, r6
 800b112:	4628      	mov	r0, r5
 800b114:	47b8      	blx	r7
 800b116:	3001      	adds	r0, #1
 800b118:	f43f aefb 	beq.w	800af12 <_printf_float+0xb6>
 800b11c:	f10a 0a01 	add.w	sl, sl, #1
 800b120:	e7ee      	b.n	800b100 <_printf_float+0x2a4>
 800b122:	bf00      	nop
 800b124:	7fefffff 	.word	0x7fefffff
 800b128:	0800f4b4 	.word	0x0800f4b4
 800b12c:	0800f4b0 	.word	0x0800f4b0
 800b130:	0800f4bc 	.word	0x0800f4bc
 800b134:	0800f4b8 	.word	0x0800f4b8
 800b138:	0800f4c0 	.word	0x0800f4c0
 800b13c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b13e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b142:	4553      	cmp	r3, sl
 800b144:	bfa8      	it	ge
 800b146:	4653      	movge	r3, sl
 800b148:	2b00      	cmp	r3, #0
 800b14a:	4699      	mov	r9, r3
 800b14c:	dc36      	bgt.n	800b1bc <_printf_float+0x360>
 800b14e:	f04f 0b00 	mov.w	fp, #0
 800b152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b156:	f104 021a 	add.w	r2, r4, #26
 800b15a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b15c:	9306      	str	r3, [sp, #24]
 800b15e:	eba3 0309 	sub.w	r3, r3, r9
 800b162:	455b      	cmp	r3, fp
 800b164:	dc31      	bgt.n	800b1ca <_printf_float+0x36e>
 800b166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b168:	459a      	cmp	sl, r3
 800b16a:	dc3a      	bgt.n	800b1e2 <_printf_float+0x386>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	07da      	lsls	r2, r3, #31
 800b170:	d437      	bmi.n	800b1e2 <_printf_float+0x386>
 800b172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b174:	ebaa 0903 	sub.w	r9, sl, r3
 800b178:	9b06      	ldr	r3, [sp, #24]
 800b17a:	ebaa 0303 	sub.w	r3, sl, r3
 800b17e:	4599      	cmp	r9, r3
 800b180:	bfa8      	it	ge
 800b182:	4699      	movge	r9, r3
 800b184:	f1b9 0f00 	cmp.w	r9, #0
 800b188:	dc33      	bgt.n	800b1f2 <_printf_float+0x396>
 800b18a:	f04f 0800 	mov.w	r8, #0
 800b18e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b192:	f104 0b1a 	add.w	fp, r4, #26
 800b196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b198:	ebaa 0303 	sub.w	r3, sl, r3
 800b19c:	eba3 0309 	sub.w	r3, r3, r9
 800b1a0:	4543      	cmp	r3, r8
 800b1a2:	f77f af79 	ble.w	800b098 <_printf_float+0x23c>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	465a      	mov	r2, fp
 800b1aa:	4631      	mov	r1, r6
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	47b8      	blx	r7
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	f43f aeae 	beq.w	800af12 <_printf_float+0xb6>
 800b1b6:	f108 0801 	add.w	r8, r8, #1
 800b1ba:	e7ec      	b.n	800b196 <_printf_float+0x33a>
 800b1bc:	4642      	mov	r2, r8
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	47b8      	blx	r7
 800b1c4:	3001      	adds	r0, #1
 800b1c6:	d1c2      	bne.n	800b14e <_printf_float+0x2f2>
 800b1c8:	e6a3      	b.n	800af12 <_printf_float+0xb6>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	9206      	str	r2, [sp, #24]
 800b1d2:	47b8      	blx	r7
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f43f ae9c 	beq.w	800af12 <_printf_float+0xb6>
 800b1da:	9a06      	ldr	r2, [sp, #24]
 800b1dc:	f10b 0b01 	add.w	fp, fp, #1
 800b1e0:	e7bb      	b.n	800b15a <_printf_float+0x2fe>
 800b1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d1c0      	bne.n	800b172 <_printf_float+0x316>
 800b1f0:	e68f      	b.n	800af12 <_printf_float+0xb6>
 800b1f2:	9a06      	ldr	r2, [sp, #24]
 800b1f4:	464b      	mov	r3, r9
 800b1f6:	4442      	add	r2, r8
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	d1c3      	bne.n	800b18a <_printf_float+0x32e>
 800b202:	e686      	b.n	800af12 <_printf_float+0xb6>
 800b204:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b208:	f1ba 0f01 	cmp.w	sl, #1
 800b20c:	dc01      	bgt.n	800b212 <_printf_float+0x3b6>
 800b20e:	07db      	lsls	r3, r3, #31
 800b210:	d536      	bpl.n	800b280 <_printf_float+0x424>
 800b212:	2301      	movs	r3, #1
 800b214:	4642      	mov	r2, r8
 800b216:	4631      	mov	r1, r6
 800b218:	4628      	mov	r0, r5
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	f43f ae78 	beq.w	800af12 <_printf_float+0xb6>
 800b222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b226:	4631      	mov	r1, r6
 800b228:	4628      	mov	r0, r5
 800b22a:	47b8      	blx	r7
 800b22c:	3001      	adds	r0, #1
 800b22e:	f43f ae70 	beq.w	800af12 <_printf_float+0xb6>
 800b232:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b236:	2200      	movs	r2, #0
 800b238:	2300      	movs	r3, #0
 800b23a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b23e:	f7f5 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800b242:	b9c0      	cbnz	r0, 800b276 <_printf_float+0x41a>
 800b244:	4653      	mov	r3, sl
 800b246:	f108 0201 	add.w	r2, r8, #1
 800b24a:	4631      	mov	r1, r6
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	d10c      	bne.n	800b26e <_printf_float+0x412>
 800b254:	e65d      	b.n	800af12 <_printf_float+0xb6>
 800b256:	2301      	movs	r3, #1
 800b258:	465a      	mov	r2, fp
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f ae56 	beq.w	800af12 <_printf_float+0xb6>
 800b266:	f108 0801 	add.w	r8, r8, #1
 800b26a:	45d0      	cmp	r8, sl
 800b26c:	dbf3      	blt.n	800b256 <_printf_float+0x3fa>
 800b26e:	464b      	mov	r3, r9
 800b270:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b274:	e6df      	b.n	800b036 <_printf_float+0x1da>
 800b276:	f04f 0800 	mov.w	r8, #0
 800b27a:	f104 0b1a 	add.w	fp, r4, #26
 800b27e:	e7f4      	b.n	800b26a <_printf_float+0x40e>
 800b280:	2301      	movs	r3, #1
 800b282:	4642      	mov	r2, r8
 800b284:	e7e1      	b.n	800b24a <_printf_float+0x3ee>
 800b286:	2301      	movs	r3, #1
 800b288:	464a      	mov	r2, r9
 800b28a:	4631      	mov	r1, r6
 800b28c:	4628      	mov	r0, r5
 800b28e:	47b8      	blx	r7
 800b290:	3001      	adds	r0, #1
 800b292:	f43f ae3e 	beq.w	800af12 <_printf_float+0xb6>
 800b296:	f108 0801 	add.w	r8, r8, #1
 800b29a:	68e3      	ldr	r3, [r4, #12]
 800b29c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b29e:	1a5b      	subs	r3, r3, r1
 800b2a0:	4543      	cmp	r3, r8
 800b2a2:	dcf0      	bgt.n	800b286 <_printf_float+0x42a>
 800b2a4:	e6fc      	b.n	800b0a0 <_printf_float+0x244>
 800b2a6:	f04f 0800 	mov.w	r8, #0
 800b2aa:	f104 0919 	add.w	r9, r4, #25
 800b2ae:	e7f4      	b.n	800b29a <_printf_float+0x43e>

0800b2b0 <_printf_common>:
 800b2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b4:	4616      	mov	r6, r2
 800b2b6:	4698      	mov	r8, r3
 800b2b8:	688a      	ldr	r2, [r1, #8]
 800b2ba:	690b      	ldr	r3, [r1, #16]
 800b2bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	bfb8      	it	lt
 800b2c4:	4613      	movlt	r3, r2
 800b2c6:	6033      	str	r3, [r6, #0]
 800b2c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2cc:	4607      	mov	r7, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	b10a      	cbz	r2, 800b2d6 <_printf_common+0x26>
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	6033      	str	r3, [r6, #0]
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	0699      	lsls	r1, r3, #26
 800b2da:	bf42      	ittt	mi
 800b2dc:	6833      	ldrmi	r3, [r6, #0]
 800b2de:	3302      	addmi	r3, #2
 800b2e0:	6033      	strmi	r3, [r6, #0]
 800b2e2:	6825      	ldr	r5, [r4, #0]
 800b2e4:	f015 0506 	ands.w	r5, r5, #6
 800b2e8:	d106      	bne.n	800b2f8 <_printf_common+0x48>
 800b2ea:	f104 0a19 	add.w	sl, r4, #25
 800b2ee:	68e3      	ldr	r3, [r4, #12]
 800b2f0:	6832      	ldr	r2, [r6, #0]
 800b2f2:	1a9b      	subs	r3, r3, r2
 800b2f4:	42ab      	cmp	r3, r5
 800b2f6:	dc26      	bgt.n	800b346 <_printf_common+0x96>
 800b2f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2fc:	6822      	ldr	r2, [r4, #0]
 800b2fe:	3b00      	subs	r3, #0
 800b300:	bf18      	it	ne
 800b302:	2301      	movne	r3, #1
 800b304:	0692      	lsls	r2, r2, #26
 800b306:	d42b      	bmi.n	800b360 <_printf_common+0xb0>
 800b308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b30c:	4641      	mov	r1, r8
 800b30e:	4638      	mov	r0, r7
 800b310:	47c8      	blx	r9
 800b312:	3001      	adds	r0, #1
 800b314:	d01e      	beq.n	800b354 <_printf_common+0xa4>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	6922      	ldr	r2, [r4, #16]
 800b31a:	f003 0306 	and.w	r3, r3, #6
 800b31e:	2b04      	cmp	r3, #4
 800b320:	bf02      	ittt	eq
 800b322:	68e5      	ldreq	r5, [r4, #12]
 800b324:	6833      	ldreq	r3, [r6, #0]
 800b326:	1aed      	subeq	r5, r5, r3
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	bf0c      	ite	eq
 800b32c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b330:	2500      	movne	r5, #0
 800b332:	4293      	cmp	r3, r2
 800b334:	bfc4      	itt	gt
 800b336:	1a9b      	subgt	r3, r3, r2
 800b338:	18ed      	addgt	r5, r5, r3
 800b33a:	2600      	movs	r6, #0
 800b33c:	341a      	adds	r4, #26
 800b33e:	42b5      	cmp	r5, r6
 800b340:	d11a      	bne.n	800b378 <_printf_common+0xc8>
 800b342:	2000      	movs	r0, #0
 800b344:	e008      	b.n	800b358 <_printf_common+0xa8>
 800b346:	2301      	movs	r3, #1
 800b348:	4652      	mov	r2, sl
 800b34a:	4641      	mov	r1, r8
 800b34c:	4638      	mov	r0, r7
 800b34e:	47c8      	blx	r9
 800b350:	3001      	adds	r0, #1
 800b352:	d103      	bne.n	800b35c <_printf_common+0xac>
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b35c:	3501      	adds	r5, #1
 800b35e:	e7c6      	b.n	800b2ee <_printf_common+0x3e>
 800b360:	18e1      	adds	r1, r4, r3
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	2030      	movs	r0, #48	@ 0x30
 800b366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b36a:	4422      	add	r2, r4
 800b36c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b374:	3302      	adds	r3, #2
 800b376:	e7c7      	b.n	800b308 <_printf_common+0x58>
 800b378:	2301      	movs	r3, #1
 800b37a:	4622      	mov	r2, r4
 800b37c:	4641      	mov	r1, r8
 800b37e:	4638      	mov	r0, r7
 800b380:	47c8      	blx	r9
 800b382:	3001      	adds	r0, #1
 800b384:	d0e6      	beq.n	800b354 <_printf_common+0xa4>
 800b386:	3601      	adds	r6, #1
 800b388:	e7d9      	b.n	800b33e <_printf_common+0x8e>
	...

0800b38c <_printf_i>:
 800b38c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b390:	7e0f      	ldrb	r7, [r1, #24]
 800b392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b394:	2f78      	cmp	r7, #120	@ 0x78
 800b396:	4691      	mov	r9, r2
 800b398:	4680      	mov	r8, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	469a      	mov	sl, r3
 800b39e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3a2:	d807      	bhi.n	800b3b4 <_printf_i+0x28>
 800b3a4:	2f62      	cmp	r7, #98	@ 0x62
 800b3a6:	d80a      	bhi.n	800b3be <_printf_i+0x32>
 800b3a8:	2f00      	cmp	r7, #0
 800b3aa:	f000 80d1 	beq.w	800b550 <_printf_i+0x1c4>
 800b3ae:	2f58      	cmp	r7, #88	@ 0x58
 800b3b0:	f000 80b8 	beq.w	800b524 <_printf_i+0x198>
 800b3b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3bc:	e03a      	b.n	800b434 <_printf_i+0xa8>
 800b3be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3c2:	2b15      	cmp	r3, #21
 800b3c4:	d8f6      	bhi.n	800b3b4 <_printf_i+0x28>
 800b3c6:	a101      	add	r1, pc, #4	@ (adr r1, 800b3cc <_printf_i+0x40>)
 800b3c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3cc:	0800b425 	.word	0x0800b425
 800b3d0:	0800b439 	.word	0x0800b439
 800b3d4:	0800b3b5 	.word	0x0800b3b5
 800b3d8:	0800b3b5 	.word	0x0800b3b5
 800b3dc:	0800b3b5 	.word	0x0800b3b5
 800b3e0:	0800b3b5 	.word	0x0800b3b5
 800b3e4:	0800b439 	.word	0x0800b439
 800b3e8:	0800b3b5 	.word	0x0800b3b5
 800b3ec:	0800b3b5 	.word	0x0800b3b5
 800b3f0:	0800b3b5 	.word	0x0800b3b5
 800b3f4:	0800b3b5 	.word	0x0800b3b5
 800b3f8:	0800b537 	.word	0x0800b537
 800b3fc:	0800b463 	.word	0x0800b463
 800b400:	0800b4f1 	.word	0x0800b4f1
 800b404:	0800b3b5 	.word	0x0800b3b5
 800b408:	0800b3b5 	.word	0x0800b3b5
 800b40c:	0800b559 	.word	0x0800b559
 800b410:	0800b3b5 	.word	0x0800b3b5
 800b414:	0800b463 	.word	0x0800b463
 800b418:	0800b3b5 	.word	0x0800b3b5
 800b41c:	0800b3b5 	.word	0x0800b3b5
 800b420:	0800b4f9 	.word	0x0800b4f9
 800b424:	6833      	ldr	r3, [r6, #0]
 800b426:	1d1a      	adds	r2, r3, #4
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6032      	str	r2, [r6, #0]
 800b42c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b434:	2301      	movs	r3, #1
 800b436:	e09c      	b.n	800b572 <_printf_i+0x1e6>
 800b438:	6833      	ldr	r3, [r6, #0]
 800b43a:	6820      	ldr	r0, [r4, #0]
 800b43c:	1d19      	adds	r1, r3, #4
 800b43e:	6031      	str	r1, [r6, #0]
 800b440:	0606      	lsls	r6, r0, #24
 800b442:	d501      	bpl.n	800b448 <_printf_i+0xbc>
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	e003      	b.n	800b450 <_printf_i+0xc4>
 800b448:	0645      	lsls	r5, r0, #25
 800b44a:	d5fb      	bpl.n	800b444 <_printf_i+0xb8>
 800b44c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b450:	2d00      	cmp	r5, #0
 800b452:	da03      	bge.n	800b45c <_printf_i+0xd0>
 800b454:	232d      	movs	r3, #45	@ 0x2d
 800b456:	426d      	negs	r5, r5
 800b458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b45c:	4858      	ldr	r0, [pc, #352]	@ (800b5c0 <_printf_i+0x234>)
 800b45e:	230a      	movs	r3, #10
 800b460:	e011      	b.n	800b486 <_printf_i+0xfa>
 800b462:	6821      	ldr	r1, [r4, #0]
 800b464:	6833      	ldr	r3, [r6, #0]
 800b466:	0608      	lsls	r0, r1, #24
 800b468:	f853 5b04 	ldr.w	r5, [r3], #4
 800b46c:	d402      	bmi.n	800b474 <_printf_i+0xe8>
 800b46e:	0649      	lsls	r1, r1, #25
 800b470:	bf48      	it	mi
 800b472:	b2ad      	uxthmi	r5, r5
 800b474:	2f6f      	cmp	r7, #111	@ 0x6f
 800b476:	4852      	ldr	r0, [pc, #328]	@ (800b5c0 <_printf_i+0x234>)
 800b478:	6033      	str	r3, [r6, #0]
 800b47a:	bf14      	ite	ne
 800b47c:	230a      	movne	r3, #10
 800b47e:	2308      	moveq	r3, #8
 800b480:	2100      	movs	r1, #0
 800b482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b486:	6866      	ldr	r6, [r4, #4]
 800b488:	60a6      	str	r6, [r4, #8]
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	db05      	blt.n	800b49a <_printf_i+0x10e>
 800b48e:	6821      	ldr	r1, [r4, #0]
 800b490:	432e      	orrs	r6, r5
 800b492:	f021 0104 	bic.w	r1, r1, #4
 800b496:	6021      	str	r1, [r4, #0]
 800b498:	d04b      	beq.n	800b532 <_printf_i+0x1a6>
 800b49a:	4616      	mov	r6, r2
 800b49c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4a0:	fb03 5711 	mls	r7, r3, r1, r5
 800b4a4:	5dc7      	ldrb	r7, [r0, r7]
 800b4a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4aa:	462f      	mov	r7, r5
 800b4ac:	42bb      	cmp	r3, r7
 800b4ae:	460d      	mov	r5, r1
 800b4b0:	d9f4      	bls.n	800b49c <_printf_i+0x110>
 800b4b2:	2b08      	cmp	r3, #8
 800b4b4:	d10b      	bne.n	800b4ce <_printf_i+0x142>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	07df      	lsls	r7, r3, #31
 800b4ba:	d508      	bpl.n	800b4ce <_printf_i+0x142>
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	6861      	ldr	r1, [r4, #4]
 800b4c0:	4299      	cmp	r1, r3
 800b4c2:	bfde      	ittt	le
 800b4c4:	2330      	movle	r3, #48	@ 0x30
 800b4c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4ce:	1b92      	subs	r2, r2, r6
 800b4d0:	6122      	str	r2, [r4, #16]
 800b4d2:	f8cd a000 	str.w	sl, [sp]
 800b4d6:	464b      	mov	r3, r9
 800b4d8:	aa03      	add	r2, sp, #12
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4640      	mov	r0, r8
 800b4de:	f7ff fee7 	bl	800b2b0 <_printf_common>
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	d14a      	bne.n	800b57c <_printf_i+0x1f0>
 800b4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ea:	b004      	add	sp, #16
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	f043 0320 	orr.w	r3, r3, #32
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	4832      	ldr	r0, [pc, #200]	@ (800b5c4 <_printf_i+0x238>)
 800b4fa:	2778      	movs	r7, #120	@ 0x78
 800b4fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	6831      	ldr	r1, [r6, #0]
 800b504:	061f      	lsls	r7, r3, #24
 800b506:	f851 5b04 	ldr.w	r5, [r1], #4
 800b50a:	d402      	bmi.n	800b512 <_printf_i+0x186>
 800b50c:	065f      	lsls	r7, r3, #25
 800b50e:	bf48      	it	mi
 800b510:	b2ad      	uxthmi	r5, r5
 800b512:	6031      	str	r1, [r6, #0]
 800b514:	07d9      	lsls	r1, r3, #31
 800b516:	bf44      	itt	mi
 800b518:	f043 0320 	orrmi.w	r3, r3, #32
 800b51c:	6023      	strmi	r3, [r4, #0]
 800b51e:	b11d      	cbz	r5, 800b528 <_printf_i+0x19c>
 800b520:	2310      	movs	r3, #16
 800b522:	e7ad      	b.n	800b480 <_printf_i+0xf4>
 800b524:	4826      	ldr	r0, [pc, #152]	@ (800b5c0 <_printf_i+0x234>)
 800b526:	e7e9      	b.n	800b4fc <_printf_i+0x170>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	f023 0320 	bic.w	r3, r3, #32
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	e7f6      	b.n	800b520 <_printf_i+0x194>
 800b532:	4616      	mov	r6, r2
 800b534:	e7bd      	b.n	800b4b2 <_printf_i+0x126>
 800b536:	6833      	ldr	r3, [r6, #0]
 800b538:	6825      	ldr	r5, [r4, #0]
 800b53a:	6961      	ldr	r1, [r4, #20]
 800b53c:	1d18      	adds	r0, r3, #4
 800b53e:	6030      	str	r0, [r6, #0]
 800b540:	062e      	lsls	r6, r5, #24
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	d501      	bpl.n	800b54a <_printf_i+0x1be>
 800b546:	6019      	str	r1, [r3, #0]
 800b548:	e002      	b.n	800b550 <_printf_i+0x1c4>
 800b54a:	0668      	lsls	r0, r5, #25
 800b54c:	d5fb      	bpl.n	800b546 <_printf_i+0x1ba>
 800b54e:	8019      	strh	r1, [r3, #0]
 800b550:	2300      	movs	r3, #0
 800b552:	6123      	str	r3, [r4, #16]
 800b554:	4616      	mov	r6, r2
 800b556:	e7bc      	b.n	800b4d2 <_printf_i+0x146>
 800b558:	6833      	ldr	r3, [r6, #0]
 800b55a:	1d1a      	adds	r2, r3, #4
 800b55c:	6032      	str	r2, [r6, #0]
 800b55e:	681e      	ldr	r6, [r3, #0]
 800b560:	6862      	ldr	r2, [r4, #4]
 800b562:	2100      	movs	r1, #0
 800b564:	4630      	mov	r0, r6
 800b566:	f7f4 fe33 	bl	80001d0 <memchr>
 800b56a:	b108      	cbz	r0, 800b570 <_printf_i+0x1e4>
 800b56c:	1b80      	subs	r0, r0, r6
 800b56e:	6060      	str	r0, [r4, #4]
 800b570:	6863      	ldr	r3, [r4, #4]
 800b572:	6123      	str	r3, [r4, #16]
 800b574:	2300      	movs	r3, #0
 800b576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b57a:	e7aa      	b.n	800b4d2 <_printf_i+0x146>
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	4632      	mov	r2, r6
 800b580:	4649      	mov	r1, r9
 800b582:	4640      	mov	r0, r8
 800b584:	47d0      	blx	sl
 800b586:	3001      	adds	r0, #1
 800b588:	d0ad      	beq.n	800b4e6 <_printf_i+0x15a>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	079b      	lsls	r3, r3, #30
 800b58e:	d413      	bmi.n	800b5b8 <_printf_i+0x22c>
 800b590:	68e0      	ldr	r0, [r4, #12]
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	4298      	cmp	r0, r3
 800b596:	bfb8      	it	lt
 800b598:	4618      	movlt	r0, r3
 800b59a:	e7a6      	b.n	800b4ea <_printf_i+0x15e>
 800b59c:	2301      	movs	r3, #1
 800b59e:	4632      	mov	r2, r6
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	47d0      	blx	sl
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	d09d      	beq.n	800b4e6 <_printf_i+0x15a>
 800b5aa:	3501      	adds	r5, #1
 800b5ac:	68e3      	ldr	r3, [r4, #12]
 800b5ae:	9903      	ldr	r1, [sp, #12]
 800b5b0:	1a5b      	subs	r3, r3, r1
 800b5b2:	42ab      	cmp	r3, r5
 800b5b4:	dcf2      	bgt.n	800b59c <_printf_i+0x210>
 800b5b6:	e7eb      	b.n	800b590 <_printf_i+0x204>
 800b5b8:	2500      	movs	r5, #0
 800b5ba:	f104 0619 	add.w	r6, r4, #25
 800b5be:	e7f5      	b.n	800b5ac <_printf_i+0x220>
 800b5c0:	0800f4c2 	.word	0x0800f4c2
 800b5c4:	0800f4d3 	.word	0x0800f4d3

0800b5c8 <_scanf_float>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	b087      	sub	sp, #28
 800b5ce:	4691      	mov	r9, r2
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	688b      	ldr	r3, [r1, #8]
 800b5d4:	1e5a      	subs	r2, r3, #1
 800b5d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b5da:	bf81      	itttt	hi
 800b5dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b5e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b5e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b5e8:	608b      	strhi	r3, [r1, #8]
 800b5ea:	680b      	ldr	r3, [r1, #0]
 800b5ec:	460a      	mov	r2, r1
 800b5ee:	f04f 0500 	mov.w	r5, #0
 800b5f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b5f6:	f842 3b1c 	str.w	r3, [r2], #28
 800b5fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5fe:	4680      	mov	r8, r0
 800b600:	460c      	mov	r4, r1
 800b602:	bf98      	it	ls
 800b604:	f04f 0b00 	movls.w	fp, #0
 800b608:	9201      	str	r2, [sp, #4]
 800b60a:	4616      	mov	r6, r2
 800b60c:	46aa      	mov	sl, r5
 800b60e:	462f      	mov	r7, r5
 800b610:	9502      	str	r5, [sp, #8]
 800b612:	68a2      	ldr	r2, [r4, #8]
 800b614:	b15a      	cbz	r2, 800b62e <_scanf_float+0x66>
 800b616:	f8d9 3000 	ldr.w	r3, [r9]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b4e      	cmp	r3, #78	@ 0x4e
 800b61e:	d863      	bhi.n	800b6e8 <_scanf_float+0x120>
 800b620:	2b40      	cmp	r3, #64	@ 0x40
 800b622:	d83b      	bhi.n	800b69c <_scanf_float+0xd4>
 800b624:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b628:	b2c8      	uxtb	r0, r1
 800b62a:	280e      	cmp	r0, #14
 800b62c:	d939      	bls.n	800b6a2 <_scanf_float+0xda>
 800b62e:	b11f      	cbz	r7, 800b638 <_scanf_float+0x70>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b63c:	f1ba 0f01 	cmp.w	sl, #1
 800b640:	f200 8114 	bhi.w	800b86c <_scanf_float+0x2a4>
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	429e      	cmp	r6, r3
 800b648:	f200 8105 	bhi.w	800b856 <_scanf_float+0x28e>
 800b64c:	2001      	movs	r0, #1
 800b64e:	b007      	add	sp, #28
 800b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b654:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b658:	2a0d      	cmp	r2, #13
 800b65a:	d8e8      	bhi.n	800b62e <_scanf_float+0x66>
 800b65c:	a101      	add	r1, pc, #4	@ (adr r1, 800b664 <_scanf_float+0x9c>)
 800b65e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b662:	bf00      	nop
 800b664:	0800b7ad 	.word	0x0800b7ad
 800b668:	0800b62f 	.word	0x0800b62f
 800b66c:	0800b62f 	.word	0x0800b62f
 800b670:	0800b62f 	.word	0x0800b62f
 800b674:	0800b809 	.word	0x0800b809
 800b678:	0800b7e3 	.word	0x0800b7e3
 800b67c:	0800b62f 	.word	0x0800b62f
 800b680:	0800b62f 	.word	0x0800b62f
 800b684:	0800b7bb 	.word	0x0800b7bb
 800b688:	0800b62f 	.word	0x0800b62f
 800b68c:	0800b62f 	.word	0x0800b62f
 800b690:	0800b62f 	.word	0x0800b62f
 800b694:	0800b62f 	.word	0x0800b62f
 800b698:	0800b777 	.word	0x0800b777
 800b69c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b6a0:	e7da      	b.n	800b658 <_scanf_float+0x90>
 800b6a2:	290e      	cmp	r1, #14
 800b6a4:	d8c3      	bhi.n	800b62e <_scanf_float+0x66>
 800b6a6:	a001      	add	r0, pc, #4	@ (adr r0, 800b6ac <_scanf_float+0xe4>)
 800b6a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b6ac:	0800b767 	.word	0x0800b767
 800b6b0:	0800b62f 	.word	0x0800b62f
 800b6b4:	0800b767 	.word	0x0800b767
 800b6b8:	0800b7f7 	.word	0x0800b7f7
 800b6bc:	0800b62f 	.word	0x0800b62f
 800b6c0:	0800b709 	.word	0x0800b709
 800b6c4:	0800b74d 	.word	0x0800b74d
 800b6c8:	0800b74d 	.word	0x0800b74d
 800b6cc:	0800b74d 	.word	0x0800b74d
 800b6d0:	0800b74d 	.word	0x0800b74d
 800b6d4:	0800b74d 	.word	0x0800b74d
 800b6d8:	0800b74d 	.word	0x0800b74d
 800b6dc:	0800b74d 	.word	0x0800b74d
 800b6e0:	0800b74d 	.word	0x0800b74d
 800b6e4:	0800b74d 	.word	0x0800b74d
 800b6e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b6ea:	d809      	bhi.n	800b700 <_scanf_float+0x138>
 800b6ec:	2b60      	cmp	r3, #96	@ 0x60
 800b6ee:	d8b1      	bhi.n	800b654 <_scanf_float+0x8c>
 800b6f0:	2b54      	cmp	r3, #84	@ 0x54
 800b6f2:	d07b      	beq.n	800b7ec <_scanf_float+0x224>
 800b6f4:	2b59      	cmp	r3, #89	@ 0x59
 800b6f6:	d19a      	bne.n	800b62e <_scanf_float+0x66>
 800b6f8:	2d07      	cmp	r5, #7
 800b6fa:	d198      	bne.n	800b62e <_scanf_float+0x66>
 800b6fc:	2508      	movs	r5, #8
 800b6fe:	e02f      	b.n	800b760 <_scanf_float+0x198>
 800b700:	2b74      	cmp	r3, #116	@ 0x74
 800b702:	d073      	beq.n	800b7ec <_scanf_float+0x224>
 800b704:	2b79      	cmp	r3, #121	@ 0x79
 800b706:	e7f6      	b.n	800b6f6 <_scanf_float+0x12e>
 800b708:	6821      	ldr	r1, [r4, #0]
 800b70a:	05c8      	lsls	r0, r1, #23
 800b70c:	d51e      	bpl.n	800b74c <_scanf_float+0x184>
 800b70e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b712:	6021      	str	r1, [r4, #0]
 800b714:	3701      	adds	r7, #1
 800b716:	f1bb 0f00 	cmp.w	fp, #0
 800b71a:	d003      	beq.n	800b724 <_scanf_float+0x15c>
 800b71c:	3201      	adds	r2, #1
 800b71e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b722:	60a2      	str	r2, [r4, #8]
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	3b01      	subs	r3, #1
 800b728:	60a3      	str	r3, [r4, #8]
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	3301      	adds	r3, #1
 800b72e:	6123      	str	r3, [r4, #16]
 800b730:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b734:	3b01      	subs	r3, #1
 800b736:	2b00      	cmp	r3, #0
 800b738:	f8c9 3004 	str.w	r3, [r9, #4]
 800b73c:	f340 8082 	ble.w	800b844 <_scanf_float+0x27c>
 800b740:	f8d9 3000 	ldr.w	r3, [r9]
 800b744:	3301      	adds	r3, #1
 800b746:	f8c9 3000 	str.w	r3, [r9]
 800b74a:	e762      	b.n	800b612 <_scanf_float+0x4a>
 800b74c:	eb1a 0105 	adds.w	r1, sl, r5
 800b750:	f47f af6d 	bne.w	800b62e <_scanf_float+0x66>
 800b754:	6822      	ldr	r2, [r4, #0]
 800b756:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b75a:	6022      	str	r2, [r4, #0]
 800b75c:	460d      	mov	r5, r1
 800b75e:	468a      	mov	sl, r1
 800b760:	f806 3b01 	strb.w	r3, [r6], #1
 800b764:	e7de      	b.n	800b724 <_scanf_float+0x15c>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	0610      	lsls	r0, r2, #24
 800b76a:	f57f af60 	bpl.w	800b62e <_scanf_float+0x66>
 800b76e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b772:	6022      	str	r2, [r4, #0]
 800b774:	e7f4      	b.n	800b760 <_scanf_float+0x198>
 800b776:	f1ba 0f00 	cmp.w	sl, #0
 800b77a:	d10c      	bne.n	800b796 <_scanf_float+0x1ce>
 800b77c:	b977      	cbnz	r7, 800b79c <_scanf_float+0x1d4>
 800b77e:	6822      	ldr	r2, [r4, #0]
 800b780:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b784:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b788:	d108      	bne.n	800b79c <_scanf_float+0x1d4>
 800b78a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b78e:	6022      	str	r2, [r4, #0]
 800b790:	f04f 0a01 	mov.w	sl, #1
 800b794:	e7e4      	b.n	800b760 <_scanf_float+0x198>
 800b796:	f1ba 0f02 	cmp.w	sl, #2
 800b79a:	d050      	beq.n	800b83e <_scanf_float+0x276>
 800b79c:	2d01      	cmp	r5, #1
 800b79e:	d002      	beq.n	800b7a6 <_scanf_float+0x1de>
 800b7a0:	2d04      	cmp	r5, #4
 800b7a2:	f47f af44 	bne.w	800b62e <_scanf_float+0x66>
 800b7a6:	3501      	adds	r5, #1
 800b7a8:	b2ed      	uxtb	r5, r5
 800b7aa:	e7d9      	b.n	800b760 <_scanf_float+0x198>
 800b7ac:	f1ba 0f01 	cmp.w	sl, #1
 800b7b0:	f47f af3d 	bne.w	800b62e <_scanf_float+0x66>
 800b7b4:	f04f 0a02 	mov.w	sl, #2
 800b7b8:	e7d2      	b.n	800b760 <_scanf_float+0x198>
 800b7ba:	b975      	cbnz	r5, 800b7da <_scanf_float+0x212>
 800b7bc:	2f00      	cmp	r7, #0
 800b7be:	f47f af37 	bne.w	800b630 <_scanf_float+0x68>
 800b7c2:	6822      	ldr	r2, [r4, #0]
 800b7c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b7c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b7cc:	f040 8103 	bne.w	800b9d6 <_scanf_float+0x40e>
 800b7d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b7d4:	6022      	str	r2, [r4, #0]
 800b7d6:	2501      	movs	r5, #1
 800b7d8:	e7c2      	b.n	800b760 <_scanf_float+0x198>
 800b7da:	2d03      	cmp	r5, #3
 800b7dc:	d0e3      	beq.n	800b7a6 <_scanf_float+0x1de>
 800b7de:	2d05      	cmp	r5, #5
 800b7e0:	e7df      	b.n	800b7a2 <_scanf_float+0x1da>
 800b7e2:	2d02      	cmp	r5, #2
 800b7e4:	f47f af23 	bne.w	800b62e <_scanf_float+0x66>
 800b7e8:	2503      	movs	r5, #3
 800b7ea:	e7b9      	b.n	800b760 <_scanf_float+0x198>
 800b7ec:	2d06      	cmp	r5, #6
 800b7ee:	f47f af1e 	bne.w	800b62e <_scanf_float+0x66>
 800b7f2:	2507      	movs	r5, #7
 800b7f4:	e7b4      	b.n	800b760 <_scanf_float+0x198>
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	0591      	lsls	r1, r2, #22
 800b7fa:	f57f af18 	bpl.w	800b62e <_scanf_float+0x66>
 800b7fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	9702      	str	r7, [sp, #8]
 800b806:	e7ab      	b.n	800b760 <_scanf_float+0x198>
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b80e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b812:	d005      	beq.n	800b820 <_scanf_float+0x258>
 800b814:	0550      	lsls	r0, r2, #21
 800b816:	f57f af0a 	bpl.w	800b62e <_scanf_float+0x66>
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	f000 80db 	beq.w	800b9d6 <_scanf_float+0x40e>
 800b820:	0591      	lsls	r1, r2, #22
 800b822:	bf58      	it	pl
 800b824:	9902      	ldrpl	r1, [sp, #8]
 800b826:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b82a:	bf58      	it	pl
 800b82c:	1a79      	subpl	r1, r7, r1
 800b82e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b832:	bf58      	it	pl
 800b834:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b838:	6022      	str	r2, [r4, #0]
 800b83a:	2700      	movs	r7, #0
 800b83c:	e790      	b.n	800b760 <_scanf_float+0x198>
 800b83e:	f04f 0a03 	mov.w	sl, #3
 800b842:	e78d      	b.n	800b760 <_scanf_float+0x198>
 800b844:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b848:	4649      	mov	r1, r9
 800b84a:	4640      	mov	r0, r8
 800b84c:	4798      	blx	r3
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f aedf 	beq.w	800b612 <_scanf_float+0x4a>
 800b854:	e6eb      	b.n	800b62e <_scanf_float+0x66>
 800b856:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b85a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b85e:	464a      	mov	r2, r9
 800b860:	4640      	mov	r0, r8
 800b862:	4798      	blx	r3
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	3b01      	subs	r3, #1
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	e6eb      	b.n	800b644 <_scanf_float+0x7c>
 800b86c:	1e6b      	subs	r3, r5, #1
 800b86e:	2b06      	cmp	r3, #6
 800b870:	d824      	bhi.n	800b8bc <_scanf_float+0x2f4>
 800b872:	2d02      	cmp	r5, #2
 800b874:	d836      	bhi.n	800b8e4 <_scanf_float+0x31c>
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	429e      	cmp	r6, r3
 800b87a:	f67f aee7 	bls.w	800b64c <_scanf_float+0x84>
 800b87e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b886:	464a      	mov	r2, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	4798      	blx	r3
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	3b01      	subs	r3, #1
 800b890:	6123      	str	r3, [r4, #16]
 800b892:	e7f0      	b.n	800b876 <_scanf_float+0x2ae>
 800b894:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b898:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b89c:	464a      	mov	r2, r9
 800b89e:	4640      	mov	r0, r8
 800b8a0:	4798      	blx	r3
 800b8a2:	6923      	ldr	r3, [r4, #16]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	6123      	str	r3, [r4, #16]
 800b8a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8ac:	fa5f fa8a 	uxtb.w	sl, sl
 800b8b0:	f1ba 0f02 	cmp.w	sl, #2
 800b8b4:	d1ee      	bne.n	800b894 <_scanf_float+0x2cc>
 800b8b6:	3d03      	subs	r5, #3
 800b8b8:	b2ed      	uxtb	r5, r5
 800b8ba:	1b76      	subs	r6, r6, r5
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	05da      	lsls	r2, r3, #23
 800b8c0:	d530      	bpl.n	800b924 <_scanf_float+0x35c>
 800b8c2:	055b      	lsls	r3, r3, #21
 800b8c4:	d511      	bpl.n	800b8ea <_scanf_float+0x322>
 800b8c6:	9b01      	ldr	r3, [sp, #4]
 800b8c8:	429e      	cmp	r6, r3
 800b8ca:	f67f aebf 	bls.w	800b64c <_scanf_float+0x84>
 800b8ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b8d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8d6:	464a      	mov	r2, r9
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4798      	blx	r3
 800b8dc:	6923      	ldr	r3, [r4, #16]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	6123      	str	r3, [r4, #16]
 800b8e2:	e7f0      	b.n	800b8c6 <_scanf_float+0x2fe>
 800b8e4:	46aa      	mov	sl, r5
 800b8e6:	46b3      	mov	fp, r6
 800b8e8:	e7de      	b.n	800b8a8 <_scanf_float+0x2e0>
 800b8ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8ee:	6923      	ldr	r3, [r4, #16]
 800b8f0:	2965      	cmp	r1, #101	@ 0x65
 800b8f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8f6:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	d00c      	beq.n	800b918 <_scanf_float+0x350>
 800b8fe:	2945      	cmp	r1, #69	@ 0x45
 800b900:	d00a      	beq.n	800b918 <_scanf_float+0x350>
 800b902:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b906:	464a      	mov	r2, r9
 800b908:	4640      	mov	r0, r8
 800b90a:	4798      	blx	r3
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b912:	3b01      	subs	r3, #1
 800b914:	1eb5      	subs	r5, r6, #2
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b91c:	464a      	mov	r2, r9
 800b91e:	4640      	mov	r0, r8
 800b920:	4798      	blx	r3
 800b922:	462e      	mov	r6, r5
 800b924:	6822      	ldr	r2, [r4, #0]
 800b926:	f012 0210 	ands.w	r2, r2, #16
 800b92a:	d001      	beq.n	800b930 <_scanf_float+0x368>
 800b92c:	2000      	movs	r0, #0
 800b92e:	e68e      	b.n	800b64e <_scanf_float+0x86>
 800b930:	7032      	strb	r2, [r6, #0]
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b93c:	d125      	bne.n	800b98a <_scanf_float+0x3c2>
 800b93e:	9b02      	ldr	r3, [sp, #8]
 800b940:	429f      	cmp	r7, r3
 800b942:	d00a      	beq.n	800b95a <_scanf_float+0x392>
 800b944:	1bda      	subs	r2, r3, r7
 800b946:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b94a:	429e      	cmp	r6, r3
 800b94c:	bf28      	it	cs
 800b94e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b952:	4922      	ldr	r1, [pc, #136]	@ (800b9dc <_scanf_float+0x414>)
 800b954:	4630      	mov	r0, r6
 800b956:	f000 f977 	bl	800bc48 <siprintf>
 800b95a:	9901      	ldr	r1, [sp, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	4640      	mov	r0, r8
 800b960:	f002 fc52 	bl	800e208 <_strtod_r>
 800b964:	9b03      	ldr	r3, [sp, #12]
 800b966:	6821      	ldr	r1, [r4, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f011 0f02 	tst.w	r1, #2
 800b96e:	ec57 6b10 	vmov	r6, r7, d0
 800b972:	f103 0204 	add.w	r2, r3, #4
 800b976:	d015      	beq.n	800b9a4 <_scanf_float+0x3dc>
 800b978:	9903      	ldr	r1, [sp, #12]
 800b97a:	600a      	str	r2, [r1, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	e9c3 6700 	strd	r6, r7, [r3]
 800b982:	68e3      	ldr	r3, [r4, #12]
 800b984:	3301      	adds	r3, #1
 800b986:	60e3      	str	r3, [r4, #12]
 800b988:	e7d0      	b.n	800b92c <_scanf_float+0x364>
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0e4      	beq.n	800b95a <_scanf_float+0x392>
 800b990:	9905      	ldr	r1, [sp, #20]
 800b992:	230a      	movs	r3, #10
 800b994:	3101      	adds	r1, #1
 800b996:	4640      	mov	r0, r8
 800b998:	f002 fcb6 	bl	800e308 <_strtol_r>
 800b99c:	9b04      	ldr	r3, [sp, #16]
 800b99e:	9e05      	ldr	r6, [sp, #20]
 800b9a0:	1ac2      	subs	r2, r0, r3
 800b9a2:	e7d0      	b.n	800b946 <_scanf_float+0x37e>
 800b9a4:	f011 0f04 	tst.w	r1, #4
 800b9a8:	9903      	ldr	r1, [sp, #12]
 800b9aa:	600a      	str	r2, [r1, #0]
 800b9ac:	d1e6      	bne.n	800b97c <_scanf_float+0x3b4>
 800b9ae:	681d      	ldr	r5, [r3, #0]
 800b9b0:	4632      	mov	r2, r6
 800b9b2:	463b      	mov	r3, r7
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	f7f5 f8b8 	bl	8000b2c <__aeabi_dcmpun>
 800b9bc:	b128      	cbz	r0, 800b9ca <_scanf_float+0x402>
 800b9be:	4808      	ldr	r0, [pc, #32]	@ (800b9e0 <_scanf_float+0x418>)
 800b9c0:	f000 facc 	bl	800bf5c <nanf>
 800b9c4:	ed85 0a00 	vstr	s0, [r5]
 800b9c8:	e7db      	b.n	800b982 <_scanf_float+0x3ba>
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	4639      	mov	r1, r7
 800b9ce:	f7f5 f90b 	bl	8000be8 <__aeabi_d2f>
 800b9d2:	6028      	str	r0, [r5, #0]
 800b9d4:	e7d5      	b.n	800b982 <_scanf_float+0x3ba>
 800b9d6:	2700      	movs	r7, #0
 800b9d8:	e62e      	b.n	800b638 <_scanf_float+0x70>
 800b9da:	bf00      	nop
 800b9dc:	0800f4e4 	.word	0x0800f4e4
 800b9e0:	0800f625 	.word	0x0800f625

0800b9e4 <std>:
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b9ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9f2:	6083      	str	r3, [r0, #8]
 800b9f4:	8181      	strh	r1, [r0, #12]
 800b9f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b9f8:	81c2      	strh	r2, [r0, #14]
 800b9fa:	6183      	str	r3, [r0, #24]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	2208      	movs	r2, #8
 800ba00:	305c      	adds	r0, #92	@ 0x5c
 800ba02:	f000 fa1b 	bl	800be3c <memset>
 800ba06:	4b0d      	ldr	r3, [pc, #52]	@ (800ba3c <std+0x58>)
 800ba08:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba40 <std+0x5c>)
 800ba0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba44 <std+0x60>)
 800ba10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba12:	4b0d      	ldr	r3, [pc, #52]	@ (800ba48 <std+0x64>)
 800ba14:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba16:	4b0d      	ldr	r3, [pc, #52]	@ (800ba4c <std+0x68>)
 800ba18:	6224      	str	r4, [r4, #32]
 800ba1a:	429c      	cmp	r4, r3
 800ba1c:	d006      	beq.n	800ba2c <std+0x48>
 800ba1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba22:	4294      	cmp	r4, r2
 800ba24:	d002      	beq.n	800ba2c <std+0x48>
 800ba26:	33d0      	adds	r3, #208	@ 0xd0
 800ba28:	429c      	cmp	r4, r3
 800ba2a:	d105      	bne.n	800ba38 <std+0x54>
 800ba2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ba30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba34:	f000 ba8e 	b.w	800bf54 <__retarget_lock_init_recursive>
 800ba38:	bd10      	pop	{r4, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0800bc8d 	.word	0x0800bc8d
 800ba40:	0800bcaf 	.word	0x0800bcaf
 800ba44:	0800bce7 	.word	0x0800bce7
 800ba48:	0800bd0b 	.word	0x0800bd0b
 800ba4c:	20001f00 	.word	0x20001f00

0800ba50 <stdio_exit_handler>:
 800ba50:	4a02      	ldr	r2, [pc, #8]	@ (800ba5c <stdio_exit_handler+0xc>)
 800ba52:	4903      	ldr	r1, [pc, #12]	@ (800ba60 <stdio_exit_handler+0x10>)
 800ba54:	4803      	ldr	r0, [pc, #12]	@ (800ba64 <stdio_exit_handler+0x14>)
 800ba56:	f000 b869 	b.w	800bb2c <_fwalk_sglue>
 800ba5a:	bf00      	nop
 800ba5c:	2000022c 	.word	0x2000022c
 800ba60:	0800e949 	.word	0x0800e949
 800ba64:	2000023c 	.word	0x2000023c

0800ba68 <cleanup_stdio>:
 800ba68:	6841      	ldr	r1, [r0, #4]
 800ba6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba9c <cleanup_stdio+0x34>)
 800ba6c:	4299      	cmp	r1, r3
 800ba6e:	b510      	push	{r4, lr}
 800ba70:	4604      	mov	r4, r0
 800ba72:	d001      	beq.n	800ba78 <cleanup_stdio+0x10>
 800ba74:	f002 ff68 	bl	800e948 <_fflush_r>
 800ba78:	68a1      	ldr	r1, [r4, #8]
 800ba7a:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <cleanup_stdio+0x38>)
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	d002      	beq.n	800ba86 <cleanup_stdio+0x1e>
 800ba80:	4620      	mov	r0, r4
 800ba82:	f002 ff61 	bl	800e948 <_fflush_r>
 800ba86:	68e1      	ldr	r1, [r4, #12]
 800ba88:	4b06      	ldr	r3, [pc, #24]	@ (800baa4 <cleanup_stdio+0x3c>)
 800ba8a:	4299      	cmp	r1, r3
 800ba8c:	d004      	beq.n	800ba98 <cleanup_stdio+0x30>
 800ba8e:	4620      	mov	r0, r4
 800ba90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba94:	f002 bf58 	b.w	800e948 <_fflush_r>
 800ba98:	bd10      	pop	{r4, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20001f00 	.word	0x20001f00
 800baa0:	20001f68 	.word	0x20001f68
 800baa4:	20001fd0 	.word	0x20001fd0

0800baa8 <global_stdio_init.part.0>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	4b0b      	ldr	r3, [pc, #44]	@ (800bad8 <global_stdio_init.part.0+0x30>)
 800baac:	4c0b      	ldr	r4, [pc, #44]	@ (800badc <global_stdio_init.part.0+0x34>)
 800baae:	4a0c      	ldr	r2, [pc, #48]	@ (800bae0 <global_stdio_init.part.0+0x38>)
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	4620      	mov	r0, r4
 800bab4:	2200      	movs	r2, #0
 800bab6:	2104      	movs	r1, #4
 800bab8:	f7ff ff94 	bl	800b9e4 <std>
 800babc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bac0:	2201      	movs	r2, #1
 800bac2:	2109      	movs	r1, #9
 800bac4:	f7ff ff8e 	bl	800b9e4 <std>
 800bac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bacc:	2202      	movs	r2, #2
 800bace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bad2:	2112      	movs	r1, #18
 800bad4:	f7ff bf86 	b.w	800b9e4 <std>
 800bad8:	20002038 	.word	0x20002038
 800badc:	20001f00 	.word	0x20001f00
 800bae0:	0800ba51 	.word	0x0800ba51

0800bae4 <__sfp_lock_acquire>:
 800bae4:	4801      	ldr	r0, [pc, #4]	@ (800baec <__sfp_lock_acquire+0x8>)
 800bae6:	f000 ba36 	b.w	800bf56 <__retarget_lock_acquire_recursive>
 800baea:	bf00      	nop
 800baec:	20002041 	.word	0x20002041

0800baf0 <__sfp_lock_release>:
 800baf0:	4801      	ldr	r0, [pc, #4]	@ (800baf8 <__sfp_lock_release+0x8>)
 800baf2:	f000 ba31 	b.w	800bf58 <__retarget_lock_release_recursive>
 800baf6:	bf00      	nop
 800baf8:	20002041 	.word	0x20002041

0800bafc <__sinit>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	4604      	mov	r4, r0
 800bb00:	f7ff fff0 	bl	800bae4 <__sfp_lock_acquire>
 800bb04:	6a23      	ldr	r3, [r4, #32]
 800bb06:	b11b      	cbz	r3, 800bb10 <__sinit+0x14>
 800bb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb0c:	f7ff bff0 	b.w	800baf0 <__sfp_lock_release>
 800bb10:	4b04      	ldr	r3, [pc, #16]	@ (800bb24 <__sinit+0x28>)
 800bb12:	6223      	str	r3, [r4, #32]
 800bb14:	4b04      	ldr	r3, [pc, #16]	@ (800bb28 <__sinit+0x2c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d1f5      	bne.n	800bb08 <__sinit+0xc>
 800bb1c:	f7ff ffc4 	bl	800baa8 <global_stdio_init.part.0>
 800bb20:	e7f2      	b.n	800bb08 <__sinit+0xc>
 800bb22:	bf00      	nop
 800bb24:	0800ba69 	.word	0x0800ba69
 800bb28:	20002038 	.word	0x20002038

0800bb2c <_fwalk_sglue>:
 800bb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb30:	4607      	mov	r7, r0
 800bb32:	4688      	mov	r8, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	2600      	movs	r6, #0
 800bb38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb3c:	f1b9 0901 	subs.w	r9, r9, #1
 800bb40:	d505      	bpl.n	800bb4e <_fwalk_sglue+0x22>
 800bb42:	6824      	ldr	r4, [r4, #0]
 800bb44:	2c00      	cmp	r4, #0
 800bb46:	d1f7      	bne.n	800bb38 <_fwalk_sglue+0xc>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4e:	89ab      	ldrh	r3, [r5, #12]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d907      	bls.n	800bb64 <_fwalk_sglue+0x38>
 800bb54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	d003      	beq.n	800bb64 <_fwalk_sglue+0x38>
 800bb5c:	4629      	mov	r1, r5
 800bb5e:	4638      	mov	r0, r7
 800bb60:	47c0      	blx	r8
 800bb62:	4306      	orrs	r6, r0
 800bb64:	3568      	adds	r5, #104	@ 0x68
 800bb66:	e7e9      	b.n	800bb3c <_fwalk_sglue+0x10>

0800bb68 <iprintf>:
 800bb68:	b40f      	push	{r0, r1, r2, r3}
 800bb6a:	b507      	push	{r0, r1, r2, lr}
 800bb6c:	4906      	ldr	r1, [pc, #24]	@ (800bb88 <iprintf+0x20>)
 800bb6e:	ab04      	add	r3, sp, #16
 800bb70:	6808      	ldr	r0, [r1, #0]
 800bb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb76:	6881      	ldr	r1, [r0, #8]
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f002 fd49 	bl	800e610 <_vfiprintf_r>
 800bb7e:	b003      	add	sp, #12
 800bb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb84:	b004      	add	sp, #16
 800bb86:	4770      	bx	lr
 800bb88:	20000238 	.word	0x20000238

0800bb8c <_puts_r>:
 800bb8c:	6a03      	ldr	r3, [r0, #32]
 800bb8e:	b570      	push	{r4, r5, r6, lr}
 800bb90:	6884      	ldr	r4, [r0, #8]
 800bb92:	4605      	mov	r5, r0
 800bb94:	460e      	mov	r6, r1
 800bb96:	b90b      	cbnz	r3, 800bb9c <_puts_r+0x10>
 800bb98:	f7ff ffb0 	bl	800bafc <__sinit>
 800bb9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb9e:	07db      	lsls	r3, r3, #31
 800bba0:	d405      	bmi.n	800bbae <_puts_r+0x22>
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	0598      	lsls	r0, r3, #22
 800bba6:	d402      	bmi.n	800bbae <_puts_r+0x22>
 800bba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbaa:	f000 f9d4 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	0719      	lsls	r1, r3, #28
 800bbb2:	d502      	bpl.n	800bbba <_puts_r+0x2e>
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d135      	bne.n	800bc26 <_puts_r+0x9a>
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f000 f8e7 	bl	800bd90 <__swsetup_r>
 800bbc2:	b380      	cbz	r0, 800bc26 <_puts_r+0x9a>
 800bbc4:	f04f 35ff 	mov.w	r5, #4294967295
 800bbc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbca:	07da      	lsls	r2, r3, #31
 800bbcc:	d405      	bmi.n	800bbda <_puts_r+0x4e>
 800bbce:	89a3      	ldrh	r3, [r4, #12]
 800bbd0:	059b      	lsls	r3, r3, #22
 800bbd2:	d402      	bmi.n	800bbda <_puts_r+0x4e>
 800bbd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbd6:	f000 f9bf 	bl	800bf58 <__retarget_lock_release_recursive>
 800bbda:	4628      	mov	r0, r5
 800bbdc:	bd70      	pop	{r4, r5, r6, pc}
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	da04      	bge.n	800bbec <_puts_r+0x60>
 800bbe2:	69a2      	ldr	r2, [r4, #24]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	dc17      	bgt.n	800bc18 <_puts_r+0x8c>
 800bbe8:	290a      	cmp	r1, #10
 800bbea:	d015      	beq.n	800bc18 <_puts_r+0x8c>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	1c5a      	adds	r2, r3, #1
 800bbf0:	6022      	str	r2, [r4, #0]
 800bbf2:	7019      	strb	r1, [r3, #0]
 800bbf4:	68a3      	ldr	r3, [r4, #8]
 800bbf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbfa:	3b01      	subs	r3, #1
 800bbfc:	60a3      	str	r3, [r4, #8]
 800bbfe:	2900      	cmp	r1, #0
 800bc00:	d1ed      	bne.n	800bbde <_puts_r+0x52>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da11      	bge.n	800bc2a <_puts_r+0x9e>
 800bc06:	4622      	mov	r2, r4
 800bc08:	210a      	movs	r1, #10
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	f000 f881 	bl	800bd12 <__swbuf_r>
 800bc10:	3001      	adds	r0, #1
 800bc12:	d0d7      	beq.n	800bbc4 <_puts_r+0x38>
 800bc14:	250a      	movs	r5, #10
 800bc16:	e7d7      	b.n	800bbc8 <_puts_r+0x3c>
 800bc18:	4622      	mov	r2, r4
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f000 f879 	bl	800bd12 <__swbuf_r>
 800bc20:	3001      	adds	r0, #1
 800bc22:	d1e7      	bne.n	800bbf4 <_puts_r+0x68>
 800bc24:	e7ce      	b.n	800bbc4 <_puts_r+0x38>
 800bc26:	3e01      	subs	r6, #1
 800bc28:	e7e4      	b.n	800bbf4 <_puts_r+0x68>
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	1c5a      	adds	r2, r3, #1
 800bc2e:	6022      	str	r2, [r4, #0]
 800bc30:	220a      	movs	r2, #10
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	e7ee      	b.n	800bc14 <_puts_r+0x88>
	...

0800bc38 <puts>:
 800bc38:	4b02      	ldr	r3, [pc, #8]	@ (800bc44 <puts+0xc>)
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	6818      	ldr	r0, [r3, #0]
 800bc3e:	f7ff bfa5 	b.w	800bb8c <_puts_r>
 800bc42:	bf00      	nop
 800bc44:	20000238 	.word	0x20000238

0800bc48 <siprintf>:
 800bc48:	b40e      	push	{r1, r2, r3}
 800bc4a:	b510      	push	{r4, lr}
 800bc4c:	b09d      	sub	sp, #116	@ 0x74
 800bc4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bc50:	9002      	str	r0, [sp, #8]
 800bc52:	9006      	str	r0, [sp, #24]
 800bc54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc58:	480a      	ldr	r0, [pc, #40]	@ (800bc84 <siprintf+0x3c>)
 800bc5a:	9107      	str	r1, [sp, #28]
 800bc5c:	9104      	str	r1, [sp, #16]
 800bc5e:	490a      	ldr	r1, [pc, #40]	@ (800bc88 <siprintf+0x40>)
 800bc60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc64:	9105      	str	r1, [sp, #20]
 800bc66:	2400      	movs	r4, #0
 800bc68:	a902      	add	r1, sp, #8
 800bc6a:	6800      	ldr	r0, [r0, #0]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bc70:	f002 fba8 	bl	800e3c4 <_svfiprintf_r>
 800bc74:	9b02      	ldr	r3, [sp, #8]
 800bc76:	701c      	strb	r4, [r3, #0]
 800bc78:	b01d      	add	sp, #116	@ 0x74
 800bc7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc7e:	b003      	add	sp, #12
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	20000238 	.word	0x20000238
 800bc88:	ffff0208 	.word	0xffff0208

0800bc8c <__sread>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	460c      	mov	r4, r1
 800bc90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc94:	f000 f900 	bl	800be98 <_read_r>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	bfab      	itete	ge
 800bc9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc9e:	89a3      	ldrhlt	r3, [r4, #12]
 800bca0:	181b      	addge	r3, r3, r0
 800bca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bca6:	bfac      	ite	ge
 800bca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcaa:	81a3      	strhlt	r3, [r4, #12]
 800bcac:	bd10      	pop	{r4, pc}

0800bcae <__swrite>:
 800bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	461f      	mov	r7, r3
 800bcb4:	898b      	ldrh	r3, [r1, #12]
 800bcb6:	05db      	lsls	r3, r3, #23
 800bcb8:	4605      	mov	r5, r0
 800bcba:	460c      	mov	r4, r1
 800bcbc:	4616      	mov	r6, r2
 800bcbe:	d505      	bpl.n	800bccc <__swrite+0x1e>
 800bcc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc4:	2302      	movs	r3, #2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f000 f8d4 	bl	800be74 <_lseek_r>
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bcd6:	81a3      	strh	r3, [r4, #12]
 800bcd8:	4632      	mov	r2, r6
 800bcda:	463b      	mov	r3, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce2:	f000 b8fb 	b.w	800bedc <_write_r>

0800bce6 <__sseek>:
 800bce6:	b510      	push	{r4, lr}
 800bce8:	460c      	mov	r4, r1
 800bcea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcee:	f000 f8c1 	bl	800be74 <_lseek_r>
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	bf15      	itete	ne
 800bcf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd02:	81a3      	strheq	r3, [r4, #12]
 800bd04:	bf18      	it	ne
 800bd06:	81a3      	strhne	r3, [r4, #12]
 800bd08:	bd10      	pop	{r4, pc}

0800bd0a <__sclose>:
 800bd0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd0e:	f000 b8a1 	b.w	800be54 <_close_r>

0800bd12 <__swbuf_r>:
 800bd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd14:	460e      	mov	r6, r1
 800bd16:	4614      	mov	r4, r2
 800bd18:	4605      	mov	r5, r0
 800bd1a:	b118      	cbz	r0, 800bd24 <__swbuf_r+0x12>
 800bd1c:	6a03      	ldr	r3, [r0, #32]
 800bd1e:	b90b      	cbnz	r3, 800bd24 <__swbuf_r+0x12>
 800bd20:	f7ff feec 	bl	800bafc <__sinit>
 800bd24:	69a3      	ldr	r3, [r4, #24]
 800bd26:	60a3      	str	r3, [r4, #8]
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	071a      	lsls	r2, r3, #28
 800bd2c:	d501      	bpl.n	800bd32 <__swbuf_r+0x20>
 800bd2e:	6923      	ldr	r3, [r4, #16]
 800bd30:	b943      	cbnz	r3, 800bd44 <__swbuf_r+0x32>
 800bd32:	4621      	mov	r1, r4
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 f82b 	bl	800bd90 <__swsetup_r>
 800bd3a:	b118      	cbz	r0, 800bd44 <__swbuf_r+0x32>
 800bd3c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd40:	4638      	mov	r0, r7
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	6922      	ldr	r2, [r4, #16]
 800bd48:	1a98      	subs	r0, r3, r2
 800bd4a:	6963      	ldr	r3, [r4, #20]
 800bd4c:	b2f6      	uxtb	r6, r6
 800bd4e:	4283      	cmp	r3, r0
 800bd50:	4637      	mov	r7, r6
 800bd52:	dc05      	bgt.n	800bd60 <__swbuf_r+0x4e>
 800bd54:	4621      	mov	r1, r4
 800bd56:	4628      	mov	r0, r5
 800bd58:	f002 fdf6 	bl	800e948 <_fflush_r>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d1ed      	bne.n	800bd3c <__swbuf_r+0x2a>
 800bd60:	68a3      	ldr	r3, [r4, #8]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	60a3      	str	r3, [r4, #8]
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	6022      	str	r2, [r4, #0]
 800bd6c:	701e      	strb	r6, [r3, #0]
 800bd6e:	6962      	ldr	r2, [r4, #20]
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d004      	beq.n	800bd80 <__swbuf_r+0x6e>
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	07db      	lsls	r3, r3, #31
 800bd7a:	d5e1      	bpl.n	800bd40 <__swbuf_r+0x2e>
 800bd7c:	2e0a      	cmp	r6, #10
 800bd7e:	d1df      	bne.n	800bd40 <__swbuf_r+0x2e>
 800bd80:	4621      	mov	r1, r4
 800bd82:	4628      	mov	r0, r5
 800bd84:	f002 fde0 	bl	800e948 <_fflush_r>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d0d9      	beq.n	800bd40 <__swbuf_r+0x2e>
 800bd8c:	e7d6      	b.n	800bd3c <__swbuf_r+0x2a>
	...

0800bd90 <__swsetup_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4b29      	ldr	r3, [pc, #164]	@ (800be38 <__swsetup_r+0xa8>)
 800bd94:	4605      	mov	r5, r0
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	460c      	mov	r4, r1
 800bd9a:	b118      	cbz	r0, 800bda4 <__swsetup_r+0x14>
 800bd9c:	6a03      	ldr	r3, [r0, #32]
 800bd9e:	b90b      	cbnz	r3, 800bda4 <__swsetup_r+0x14>
 800bda0:	f7ff feac 	bl	800bafc <__sinit>
 800bda4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda8:	0719      	lsls	r1, r3, #28
 800bdaa:	d422      	bmi.n	800bdf2 <__swsetup_r+0x62>
 800bdac:	06da      	lsls	r2, r3, #27
 800bdae:	d407      	bmi.n	800bdc0 <__swsetup_r+0x30>
 800bdb0:	2209      	movs	r2, #9
 800bdb2:	602a      	str	r2, [r5, #0]
 800bdb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	e033      	b.n	800be28 <__swsetup_r+0x98>
 800bdc0:	0758      	lsls	r0, r3, #29
 800bdc2:	d512      	bpl.n	800bdea <__swsetup_r+0x5a>
 800bdc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdc6:	b141      	cbz	r1, 800bdda <__swsetup_r+0x4a>
 800bdc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdcc:	4299      	cmp	r1, r3
 800bdce:	d002      	beq.n	800bdd6 <__swsetup_r+0x46>
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f000 ff21 	bl	800cc18 <_free_r>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	2300      	movs	r3, #0
 800bde4:	6063      	str	r3, [r4, #4]
 800bde6:	6923      	ldr	r3, [r4, #16]
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f043 0308 	orr.w	r3, r3, #8
 800bdf0:	81a3      	strh	r3, [r4, #12]
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	b94b      	cbnz	r3, 800be0a <__swsetup_r+0x7a>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be00:	d003      	beq.n	800be0a <__swsetup_r+0x7a>
 800be02:	4621      	mov	r1, r4
 800be04:	4628      	mov	r0, r5
 800be06:	f002 fded 	bl	800e9e4 <__smakebuf_r>
 800be0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0e:	f013 0201 	ands.w	r2, r3, #1
 800be12:	d00a      	beq.n	800be2a <__swsetup_r+0x9a>
 800be14:	2200      	movs	r2, #0
 800be16:	60a2      	str	r2, [r4, #8]
 800be18:	6962      	ldr	r2, [r4, #20]
 800be1a:	4252      	negs	r2, r2
 800be1c:	61a2      	str	r2, [r4, #24]
 800be1e:	6922      	ldr	r2, [r4, #16]
 800be20:	b942      	cbnz	r2, 800be34 <__swsetup_r+0xa4>
 800be22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be26:	d1c5      	bne.n	800bdb4 <__swsetup_r+0x24>
 800be28:	bd38      	pop	{r3, r4, r5, pc}
 800be2a:	0799      	lsls	r1, r3, #30
 800be2c:	bf58      	it	pl
 800be2e:	6962      	ldrpl	r2, [r4, #20]
 800be30:	60a2      	str	r2, [r4, #8]
 800be32:	e7f4      	b.n	800be1e <__swsetup_r+0x8e>
 800be34:	2000      	movs	r0, #0
 800be36:	e7f7      	b.n	800be28 <__swsetup_r+0x98>
 800be38:	20000238 	.word	0x20000238

0800be3c <memset>:
 800be3c:	4402      	add	r2, r0
 800be3e:	4603      	mov	r3, r0
 800be40:	4293      	cmp	r3, r2
 800be42:	d100      	bne.n	800be46 <memset+0xa>
 800be44:	4770      	bx	lr
 800be46:	f803 1b01 	strb.w	r1, [r3], #1
 800be4a:	e7f9      	b.n	800be40 <memset+0x4>

0800be4c <_localeconv_r>:
 800be4c:	4800      	ldr	r0, [pc, #0]	@ (800be50 <_localeconv_r+0x4>)
 800be4e:	4770      	bx	lr
 800be50:	20000378 	.word	0x20000378

0800be54 <_close_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4d06      	ldr	r5, [pc, #24]	@ (800be70 <_close_r+0x1c>)
 800be58:	2300      	movs	r3, #0
 800be5a:	4604      	mov	r4, r0
 800be5c:	4608      	mov	r0, r1
 800be5e:	602b      	str	r3, [r5, #0]
 800be60:	f7f5 fdca 	bl	80019f8 <_close>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_close_r+0x1a>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_close_r+0x1a>
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	2000203c 	.word	0x2000203c

0800be74 <_lseek_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4d07      	ldr	r5, [pc, #28]	@ (800be94 <_lseek_r+0x20>)
 800be78:	4604      	mov	r4, r0
 800be7a:	4608      	mov	r0, r1
 800be7c:	4611      	mov	r1, r2
 800be7e:	2200      	movs	r2, #0
 800be80:	602a      	str	r2, [r5, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	f7f5 fddf 	bl	8001a46 <_lseek>
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	d102      	bne.n	800be92 <_lseek_r+0x1e>
 800be8c:	682b      	ldr	r3, [r5, #0]
 800be8e:	b103      	cbz	r3, 800be92 <_lseek_r+0x1e>
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	bd38      	pop	{r3, r4, r5, pc}
 800be94:	2000203c 	.word	0x2000203c

0800be98 <_read_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	@ (800beb8 <_read_r+0x20>)
 800be9c:	4604      	mov	r4, r0
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	2200      	movs	r2, #0
 800bea4:	602a      	str	r2, [r5, #0]
 800bea6:	461a      	mov	r2, r3
 800bea8:	f7f5 fd89 	bl	80019be <_read>
 800beac:	1c43      	adds	r3, r0, #1
 800beae:	d102      	bne.n	800beb6 <_read_r+0x1e>
 800beb0:	682b      	ldr	r3, [r5, #0]
 800beb2:	b103      	cbz	r3, 800beb6 <_read_r+0x1e>
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	bd38      	pop	{r3, r4, r5, pc}
 800beb8:	2000203c 	.word	0x2000203c

0800bebc <_sbrk_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d06      	ldr	r5, [pc, #24]	@ (800bed8 <_sbrk_r+0x1c>)
 800bec0:	2300      	movs	r3, #0
 800bec2:	4604      	mov	r4, r0
 800bec4:	4608      	mov	r0, r1
 800bec6:	602b      	str	r3, [r5, #0]
 800bec8:	f7f5 fdca 	bl	8001a60 <_sbrk>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_sbrk_r+0x1a>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_sbrk_r+0x1a>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	2000203c 	.word	0x2000203c

0800bedc <_write_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	@ (800befc <_write_r+0x20>)
 800bee0:	4604      	mov	r4, r0
 800bee2:	4608      	mov	r0, r1
 800bee4:	4611      	mov	r1, r2
 800bee6:	2200      	movs	r2, #0
 800bee8:	602a      	str	r2, [r5, #0]
 800beea:	461a      	mov	r2, r3
 800beec:	f7f5 fc1e 	bl	800172c <_write>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_write_r+0x1e>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b103      	cbz	r3, 800befa <_write_r+0x1e>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	2000203c 	.word	0x2000203c

0800bf00 <__errno>:
 800bf00:	4b01      	ldr	r3, [pc, #4]	@ (800bf08 <__errno+0x8>)
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	20000238 	.word	0x20000238

0800bf0c <__libc_init_array>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	4d0d      	ldr	r5, [pc, #52]	@ (800bf44 <__libc_init_array+0x38>)
 800bf10:	4c0d      	ldr	r4, [pc, #52]	@ (800bf48 <__libc_init_array+0x3c>)
 800bf12:	1b64      	subs	r4, r4, r5
 800bf14:	10a4      	asrs	r4, r4, #2
 800bf16:	2600      	movs	r6, #0
 800bf18:	42a6      	cmp	r6, r4
 800bf1a:	d109      	bne.n	800bf30 <__libc_init_array+0x24>
 800bf1c:	4d0b      	ldr	r5, [pc, #44]	@ (800bf4c <__libc_init_array+0x40>)
 800bf1e:	4c0c      	ldr	r4, [pc, #48]	@ (800bf50 <__libc_init_array+0x44>)
 800bf20:	f003 fa20 	bl	800f364 <_init>
 800bf24:	1b64      	subs	r4, r4, r5
 800bf26:	10a4      	asrs	r4, r4, #2
 800bf28:	2600      	movs	r6, #0
 800bf2a:	42a6      	cmp	r6, r4
 800bf2c:	d105      	bne.n	800bf3a <__libc_init_array+0x2e>
 800bf2e:	bd70      	pop	{r4, r5, r6, pc}
 800bf30:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf34:	4798      	blx	r3
 800bf36:	3601      	adds	r6, #1
 800bf38:	e7ee      	b.n	800bf18 <__libc_init_array+0xc>
 800bf3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf3e:	4798      	blx	r3
 800bf40:	3601      	adds	r6, #1
 800bf42:	e7f2      	b.n	800bf2a <__libc_init_array+0x1e>
 800bf44:	0800f8e4 	.word	0x0800f8e4
 800bf48:	0800f8e4 	.word	0x0800f8e4
 800bf4c:	0800f8e4 	.word	0x0800f8e4
 800bf50:	0800f8e8 	.word	0x0800f8e8

0800bf54 <__retarget_lock_init_recursive>:
 800bf54:	4770      	bx	lr

0800bf56 <__retarget_lock_acquire_recursive>:
 800bf56:	4770      	bx	lr

0800bf58 <__retarget_lock_release_recursive>:
 800bf58:	4770      	bx	lr
	...

0800bf5c <nanf>:
 800bf5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf64 <nanf+0x8>
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	7fc00000 	.word	0x7fc00000

0800bf68 <quorem>:
 800bf68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	6903      	ldr	r3, [r0, #16]
 800bf6e:	690c      	ldr	r4, [r1, #16]
 800bf70:	42a3      	cmp	r3, r4
 800bf72:	4607      	mov	r7, r0
 800bf74:	db7e      	blt.n	800c074 <quorem+0x10c>
 800bf76:	3c01      	subs	r4, #1
 800bf78:	f101 0814 	add.w	r8, r1, #20
 800bf7c:	00a3      	lsls	r3, r4, #2
 800bf7e:	f100 0514 	add.w	r5, r0, #20
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf88:	9301      	str	r3, [sp, #4]
 800bf8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf92:	3301      	adds	r3, #1
 800bf94:	429a      	cmp	r2, r3
 800bf96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf9e:	d32e      	bcc.n	800bffe <quorem+0x96>
 800bfa0:	f04f 0a00 	mov.w	sl, #0
 800bfa4:	46c4      	mov	ip, r8
 800bfa6:	46ae      	mov	lr, r5
 800bfa8:	46d3      	mov	fp, sl
 800bfaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfae:	b298      	uxth	r0, r3
 800bfb0:	fb06 a000 	mla	r0, r6, r0, sl
 800bfb4:	0c02      	lsrs	r2, r0, #16
 800bfb6:	0c1b      	lsrs	r3, r3, #16
 800bfb8:	fb06 2303 	mla	r3, r6, r3, r2
 800bfbc:	f8de 2000 	ldr.w	r2, [lr]
 800bfc0:	b280      	uxth	r0, r0
 800bfc2:	b292      	uxth	r2, r2
 800bfc4:	1a12      	subs	r2, r2, r0
 800bfc6:	445a      	add	r2, fp
 800bfc8:	f8de 0000 	ldr.w	r0, [lr]
 800bfcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bfd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bfda:	b292      	uxth	r2, r2
 800bfdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bfe0:	45e1      	cmp	r9, ip
 800bfe2:	f84e 2b04 	str.w	r2, [lr], #4
 800bfe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bfea:	d2de      	bcs.n	800bfaa <quorem+0x42>
 800bfec:	9b00      	ldr	r3, [sp, #0]
 800bfee:	58eb      	ldr	r3, [r5, r3]
 800bff0:	b92b      	cbnz	r3, 800bffe <quorem+0x96>
 800bff2:	9b01      	ldr	r3, [sp, #4]
 800bff4:	3b04      	subs	r3, #4
 800bff6:	429d      	cmp	r5, r3
 800bff8:	461a      	mov	r2, r3
 800bffa:	d32f      	bcc.n	800c05c <quorem+0xf4>
 800bffc:	613c      	str	r4, [r7, #16]
 800bffe:	4638      	mov	r0, r7
 800c000:	f001 f910 	bl	800d224 <__mcmp>
 800c004:	2800      	cmp	r0, #0
 800c006:	db25      	blt.n	800c054 <quorem+0xec>
 800c008:	4629      	mov	r1, r5
 800c00a:	2000      	movs	r0, #0
 800c00c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c010:	f8d1 c000 	ldr.w	ip, [r1]
 800c014:	fa1f fe82 	uxth.w	lr, r2
 800c018:	fa1f f38c 	uxth.w	r3, ip
 800c01c:	eba3 030e 	sub.w	r3, r3, lr
 800c020:	4403      	add	r3, r0
 800c022:	0c12      	lsrs	r2, r2, #16
 800c024:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c028:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c032:	45c1      	cmp	r9, r8
 800c034:	f841 3b04 	str.w	r3, [r1], #4
 800c038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c03c:	d2e6      	bcs.n	800c00c <quorem+0xa4>
 800c03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c046:	b922      	cbnz	r2, 800c052 <quorem+0xea>
 800c048:	3b04      	subs	r3, #4
 800c04a:	429d      	cmp	r5, r3
 800c04c:	461a      	mov	r2, r3
 800c04e:	d30b      	bcc.n	800c068 <quorem+0x100>
 800c050:	613c      	str	r4, [r7, #16]
 800c052:	3601      	adds	r6, #1
 800c054:	4630      	mov	r0, r6
 800c056:	b003      	add	sp, #12
 800c058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05c:	6812      	ldr	r2, [r2, #0]
 800c05e:	3b04      	subs	r3, #4
 800c060:	2a00      	cmp	r2, #0
 800c062:	d1cb      	bne.n	800bffc <quorem+0x94>
 800c064:	3c01      	subs	r4, #1
 800c066:	e7c6      	b.n	800bff6 <quorem+0x8e>
 800c068:	6812      	ldr	r2, [r2, #0]
 800c06a:	3b04      	subs	r3, #4
 800c06c:	2a00      	cmp	r2, #0
 800c06e:	d1ef      	bne.n	800c050 <quorem+0xe8>
 800c070:	3c01      	subs	r4, #1
 800c072:	e7ea      	b.n	800c04a <quorem+0xe2>
 800c074:	2000      	movs	r0, #0
 800c076:	e7ee      	b.n	800c056 <quorem+0xee>

0800c078 <_dtoa_r>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	69c7      	ldr	r7, [r0, #28]
 800c07e:	b097      	sub	sp, #92	@ 0x5c
 800c080:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c084:	ec55 4b10 	vmov	r4, r5, d0
 800c088:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c08a:	9107      	str	r1, [sp, #28]
 800c08c:	4681      	mov	r9, r0
 800c08e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c090:	9311      	str	r3, [sp, #68]	@ 0x44
 800c092:	b97f      	cbnz	r7, 800c0b4 <_dtoa_r+0x3c>
 800c094:	2010      	movs	r0, #16
 800c096:	f7fe fd83 	bl	800aba0 <malloc>
 800c09a:	4602      	mov	r2, r0
 800c09c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c0a0:	b920      	cbnz	r0, 800c0ac <_dtoa_r+0x34>
 800c0a2:	4ba9      	ldr	r3, [pc, #676]	@ (800c348 <_dtoa_r+0x2d0>)
 800c0a4:	21ef      	movs	r1, #239	@ 0xef
 800c0a6:	48a9      	ldr	r0, [pc, #676]	@ (800c34c <_dtoa_r+0x2d4>)
 800c0a8:	f002 fd3e 	bl	800eb28 <__assert_func>
 800c0ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0b0:	6007      	str	r7, [r0, #0]
 800c0b2:	60c7      	str	r7, [r0, #12]
 800c0b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c0b8:	6819      	ldr	r1, [r3, #0]
 800c0ba:	b159      	cbz	r1, 800c0d4 <_dtoa_r+0x5c>
 800c0bc:	685a      	ldr	r2, [r3, #4]
 800c0be:	604a      	str	r2, [r1, #4]
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	4093      	lsls	r3, r2
 800c0c4:	608b      	str	r3, [r1, #8]
 800c0c6:	4648      	mov	r0, r9
 800c0c8:	f000 fe30 	bl	800cd2c <_Bfree>
 800c0cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	1e2b      	subs	r3, r5, #0
 800c0d6:	bfb9      	ittee	lt
 800c0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0dc:	9305      	strlt	r3, [sp, #20]
 800c0de:	2300      	movge	r3, #0
 800c0e0:	6033      	strge	r3, [r6, #0]
 800c0e2:	9f05      	ldr	r7, [sp, #20]
 800c0e4:	4b9a      	ldr	r3, [pc, #616]	@ (800c350 <_dtoa_r+0x2d8>)
 800c0e6:	bfbc      	itt	lt
 800c0e8:	2201      	movlt	r2, #1
 800c0ea:	6032      	strlt	r2, [r6, #0]
 800c0ec:	43bb      	bics	r3, r7
 800c0ee:	d112      	bne.n	800c116 <_dtoa_r+0x9e>
 800c0f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c0f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0fc:	4323      	orrs	r3, r4
 800c0fe:	f000 855a 	beq.w	800cbb6 <_dtoa_r+0xb3e>
 800c102:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c104:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c364 <_dtoa_r+0x2ec>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 855c 	beq.w	800cbc6 <_dtoa_r+0xb4e>
 800c10e:	f10a 0303 	add.w	r3, sl, #3
 800c112:	f000 bd56 	b.w	800cbc2 <_dtoa_r+0xb4a>
 800c116:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c11a:	2200      	movs	r2, #0
 800c11c:	ec51 0b17 	vmov	r0, r1, d7
 800c120:	2300      	movs	r3, #0
 800c122:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c126:	f7f4 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c12a:	4680      	mov	r8, r0
 800c12c:	b158      	cbz	r0, 800c146 <_dtoa_r+0xce>
 800c12e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c130:	2301      	movs	r3, #1
 800c132:	6013      	str	r3, [r2, #0]
 800c134:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c136:	b113      	cbz	r3, 800c13e <_dtoa_r+0xc6>
 800c138:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c13a:	4b86      	ldr	r3, [pc, #536]	@ (800c354 <_dtoa_r+0x2dc>)
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c368 <_dtoa_r+0x2f0>
 800c142:	f000 bd40 	b.w	800cbc6 <_dtoa_r+0xb4e>
 800c146:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c14a:	aa14      	add	r2, sp, #80	@ 0x50
 800c14c:	a915      	add	r1, sp, #84	@ 0x54
 800c14e:	4648      	mov	r0, r9
 800c150:	f001 f988 	bl	800d464 <__d2b>
 800c154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c158:	9002      	str	r0, [sp, #8]
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	d078      	beq.n	800c250 <_dtoa_r+0x1d8>
 800c15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c160:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c16c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c178:	4619      	mov	r1, r3
 800c17a:	2200      	movs	r2, #0
 800c17c:	4b76      	ldr	r3, [pc, #472]	@ (800c358 <_dtoa_r+0x2e0>)
 800c17e:	f7f4 f883 	bl	8000288 <__aeabi_dsub>
 800c182:	a36b      	add	r3, pc, #428	@ (adr r3, 800c330 <_dtoa_r+0x2b8>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	f7f4 fa36 	bl	80005f8 <__aeabi_dmul>
 800c18c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c338 <_dtoa_r+0x2c0>)
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f7f4 f87b 	bl	800028c <__adddf3>
 800c196:	4604      	mov	r4, r0
 800c198:	4630      	mov	r0, r6
 800c19a:	460d      	mov	r5, r1
 800c19c:	f7f4 f9c2 	bl	8000524 <__aeabi_i2d>
 800c1a0:	a367      	add	r3, pc, #412	@ (adr r3, 800c340 <_dtoa_r+0x2c8>)
 800c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a6:	f7f4 fa27 	bl	80005f8 <__aeabi_dmul>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7f4 f86b 	bl	800028c <__adddf3>
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	460d      	mov	r5, r1
 800c1ba:	f7f4 fccd 	bl	8000b58 <__aeabi_d2iz>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4607      	mov	r7, r0
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	f7f4 fc88 	bl	8000adc <__aeabi_dcmplt>
 800c1cc:	b140      	cbz	r0, 800c1e0 <_dtoa_r+0x168>
 800c1ce:	4638      	mov	r0, r7
 800c1d0:	f7f4 f9a8 	bl	8000524 <__aeabi_i2d>
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	462b      	mov	r3, r5
 800c1d8:	f7f4 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1dc:	b900      	cbnz	r0, 800c1e0 <_dtoa_r+0x168>
 800c1de:	3f01      	subs	r7, #1
 800c1e0:	2f16      	cmp	r7, #22
 800c1e2:	d852      	bhi.n	800c28a <_dtoa_r+0x212>
 800c1e4:	4b5d      	ldr	r3, [pc, #372]	@ (800c35c <_dtoa_r+0x2e4>)
 800c1e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c1f2:	f7f4 fc73 	bl	8000adc <__aeabi_dcmplt>
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d049      	beq.n	800c28e <_dtoa_r+0x216>
 800c1fa:	3f01      	subs	r7, #1
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800c200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c202:	1b9b      	subs	r3, r3, r6
 800c204:	1e5a      	subs	r2, r3, #1
 800c206:	bf45      	ittet	mi
 800c208:	f1c3 0301 	rsbmi	r3, r3, #1
 800c20c:	9300      	strmi	r3, [sp, #0]
 800c20e:	2300      	movpl	r3, #0
 800c210:	2300      	movmi	r3, #0
 800c212:	9206      	str	r2, [sp, #24]
 800c214:	bf54      	ite	pl
 800c216:	9300      	strpl	r3, [sp, #0]
 800c218:	9306      	strmi	r3, [sp, #24]
 800c21a:	2f00      	cmp	r7, #0
 800c21c:	db39      	blt.n	800c292 <_dtoa_r+0x21a>
 800c21e:	9b06      	ldr	r3, [sp, #24]
 800c220:	970d      	str	r7, [sp, #52]	@ 0x34
 800c222:	443b      	add	r3, r7
 800c224:	9306      	str	r3, [sp, #24]
 800c226:	2300      	movs	r3, #0
 800c228:	9308      	str	r3, [sp, #32]
 800c22a:	9b07      	ldr	r3, [sp, #28]
 800c22c:	2b09      	cmp	r3, #9
 800c22e:	d863      	bhi.n	800c2f8 <_dtoa_r+0x280>
 800c230:	2b05      	cmp	r3, #5
 800c232:	bfc4      	itt	gt
 800c234:	3b04      	subgt	r3, #4
 800c236:	9307      	strgt	r3, [sp, #28]
 800c238:	9b07      	ldr	r3, [sp, #28]
 800c23a:	f1a3 0302 	sub.w	r3, r3, #2
 800c23e:	bfcc      	ite	gt
 800c240:	2400      	movgt	r4, #0
 800c242:	2401      	movle	r4, #1
 800c244:	2b03      	cmp	r3, #3
 800c246:	d863      	bhi.n	800c310 <_dtoa_r+0x298>
 800c248:	e8df f003 	tbb	[pc, r3]
 800c24c:	2b375452 	.word	0x2b375452
 800c250:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c254:	441e      	add	r6, r3
 800c256:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c25a:	2b20      	cmp	r3, #32
 800c25c:	bfc1      	itttt	gt
 800c25e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c262:	409f      	lslgt	r7, r3
 800c264:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c268:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c26c:	bfd6      	itet	le
 800c26e:	f1c3 0320 	rsble	r3, r3, #32
 800c272:	ea47 0003 	orrgt.w	r0, r7, r3
 800c276:	fa04 f003 	lslle.w	r0, r4, r3
 800c27a:	f7f4 f943 	bl	8000504 <__aeabi_ui2d>
 800c27e:	2201      	movs	r2, #1
 800c280:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c284:	3e01      	subs	r6, #1
 800c286:	9212      	str	r2, [sp, #72]	@ 0x48
 800c288:	e776      	b.n	800c178 <_dtoa_r+0x100>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e7b7      	b.n	800c1fe <_dtoa_r+0x186>
 800c28e:	9010      	str	r0, [sp, #64]	@ 0x40
 800c290:	e7b6      	b.n	800c200 <_dtoa_r+0x188>
 800c292:	9b00      	ldr	r3, [sp, #0]
 800c294:	1bdb      	subs	r3, r3, r7
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	427b      	negs	r3, r7
 800c29a:	9308      	str	r3, [sp, #32]
 800c29c:	2300      	movs	r3, #0
 800c29e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c2a0:	e7c3      	b.n	800c22a <_dtoa_r+0x1b2>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2a8:	eb07 0b03 	add.w	fp, r7, r3
 800c2ac:	f10b 0301 	add.w	r3, fp, #1
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	9303      	str	r3, [sp, #12]
 800c2b4:	bfb8      	it	lt
 800c2b6:	2301      	movlt	r3, #1
 800c2b8:	e006      	b.n	800c2c8 <_dtoa_r+0x250>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dd28      	ble.n	800c316 <_dtoa_r+0x29e>
 800c2c4:	469b      	mov	fp, r3
 800c2c6:	9303      	str	r3, [sp, #12]
 800c2c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	f102 0514 	add.w	r5, r2, #20
 800c2d4:	429d      	cmp	r5, r3
 800c2d6:	d926      	bls.n	800c326 <_dtoa_r+0x2ae>
 800c2d8:	6041      	str	r1, [r0, #4]
 800c2da:	4648      	mov	r0, r9
 800c2dc:	f000 fce6 	bl	800ccac <_Balloc>
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d142      	bne.n	800c36c <_dtoa_r+0x2f4>
 800c2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800c360 <_dtoa_r+0x2e8>)
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800c2ee:	e6da      	b.n	800c0a6 <_dtoa_r+0x2e>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e7e3      	b.n	800c2bc <_dtoa_r+0x244>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e7d5      	b.n	800c2a4 <_dtoa_r+0x22c>
 800c2f8:	2401      	movs	r4, #1
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	9307      	str	r3, [sp, #28]
 800c2fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800c300:	f04f 3bff 	mov.w	fp, #4294967295
 800c304:	2200      	movs	r2, #0
 800c306:	f8cd b00c 	str.w	fp, [sp, #12]
 800c30a:	2312      	movs	r3, #18
 800c30c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c30e:	e7db      	b.n	800c2c8 <_dtoa_r+0x250>
 800c310:	2301      	movs	r3, #1
 800c312:	9309      	str	r3, [sp, #36]	@ 0x24
 800c314:	e7f4      	b.n	800c300 <_dtoa_r+0x288>
 800c316:	f04f 0b01 	mov.w	fp, #1
 800c31a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c31e:	465b      	mov	r3, fp
 800c320:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c324:	e7d0      	b.n	800c2c8 <_dtoa_r+0x250>
 800c326:	3101      	adds	r1, #1
 800c328:	0052      	lsls	r2, r2, #1
 800c32a:	e7d1      	b.n	800c2d0 <_dtoa_r+0x258>
 800c32c:	f3af 8000 	nop.w
 800c330:	636f4361 	.word	0x636f4361
 800c334:	3fd287a7 	.word	0x3fd287a7
 800c338:	8b60c8b3 	.word	0x8b60c8b3
 800c33c:	3fc68a28 	.word	0x3fc68a28
 800c340:	509f79fb 	.word	0x509f79fb
 800c344:	3fd34413 	.word	0x3fd34413
 800c348:	0800f4f6 	.word	0x0800f4f6
 800c34c:	0800f50d 	.word	0x0800f50d
 800c350:	7ff00000 	.word	0x7ff00000
 800c354:	0800f4c1 	.word	0x0800f4c1
 800c358:	3ff80000 	.word	0x3ff80000
 800c35c:	0800f6c0 	.word	0x0800f6c0
 800c360:	0800f565 	.word	0x0800f565
 800c364:	0800f4f2 	.word	0x0800f4f2
 800c368:	0800f4c0 	.word	0x0800f4c0
 800c36c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c370:	6018      	str	r0, [r3, #0]
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	2b0e      	cmp	r3, #14
 800c376:	f200 80a1 	bhi.w	800c4bc <_dtoa_r+0x444>
 800c37a:	2c00      	cmp	r4, #0
 800c37c:	f000 809e 	beq.w	800c4bc <_dtoa_r+0x444>
 800c380:	2f00      	cmp	r7, #0
 800c382:	dd33      	ble.n	800c3ec <_dtoa_r+0x374>
 800c384:	4b9c      	ldr	r3, [pc, #624]	@ (800c5f8 <_dtoa_r+0x580>)
 800c386:	f007 020f 	and.w	r2, r7, #15
 800c38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c38e:	ed93 7b00 	vldr	d7, [r3]
 800c392:	05f8      	lsls	r0, r7, #23
 800c394:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c39c:	d516      	bpl.n	800c3cc <_dtoa_r+0x354>
 800c39e:	4b97      	ldr	r3, [pc, #604]	@ (800c5fc <_dtoa_r+0x584>)
 800c3a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3a8:	f7f4 fa50 	bl	800084c <__aeabi_ddiv>
 800c3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3b0:	f004 040f 	and.w	r4, r4, #15
 800c3b4:	2603      	movs	r6, #3
 800c3b6:	4d91      	ldr	r5, [pc, #580]	@ (800c5fc <_dtoa_r+0x584>)
 800c3b8:	b954      	cbnz	r4, 800c3d0 <_dtoa_r+0x358>
 800c3ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c2:	f7f4 fa43 	bl	800084c <__aeabi_ddiv>
 800c3c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3ca:	e028      	b.n	800c41e <_dtoa_r+0x3a6>
 800c3cc:	2602      	movs	r6, #2
 800c3ce:	e7f2      	b.n	800c3b6 <_dtoa_r+0x33e>
 800c3d0:	07e1      	lsls	r1, r4, #31
 800c3d2:	d508      	bpl.n	800c3e6 <_dtoa_r+0x36e>
 800c3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c3e4:	3601      	adds	r6, #1
 800c3e6:	1064      	asrs	r4, r4, #1
 800c3e8:	3508      	adds	r5, #8
 800c3ea:	e7e5      	b.n	800c3b8 <_dtoa_r+0x340>
 800c3ec:	f000 80af 	beq.w	800c54e <_dtoa_r+0x4d6>
 800c3f0:	427c      	negs	r4, r7
 800c3f2:	4b81      	ldr	r3, [pc, #516]	@ (800c5f8 <_dtoa_r+0x580>)
 800c3f4:	4d81      	ldr	r5, [pc, #516]	@ (800c5fc <_dtoa_r+0x584>)
 800c3f6:	f004 020f 	and.w	r2, r4, #15
 800c3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c406:	f7f4 f8f7 	bl	80005f8 <__aeabi_dmul>
 800c40a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c40e:	1124      	asrs	r4, r4, #4
 800c410:	2300      	movs	r3, #0
 800c412:	2602      	movs	r6, #2
 800c414:	2c00      	cmp	r4, #0
 800c416:	f040 808f 	bne.w	800c538 <_dtoa_r+0x4c0>
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1d3      	bne.n	800c3c6 <_dtoa_r+0x34e>
 800c41e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c420:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 8094 	beq.w	800c552 <_dtoa_r+0x4da>
 800c42a:	4b75      	ldr	r3, [pc, #468]	@ (800c600 <_dtoa_r+0x588>)
 800c42c:	2200      	movs	r2, #0
 800c42e:	4620      	mov	r0, r4
 800c430:	4629      	mov	r1, r5
 800c432:	f7f4 fb53 	bl	8000adc <__aeabi_dcmplt>
 800c436:	2800      	cmp	r0, #0
 800c438:	f000 808b 	beq.w	800c552 <_dtoa_r+0x4da>
 800c43c:	9b03      	ldr	r3, [sp, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f000 8087 	beq.w	800c552 <_dtoa_r+0x4da>
 800c444:	f1bb 0f00 	cmp.w	fp, #0
 800c448:	dd34      	ble.n	800c4b4 <_dtoa_r+0x43c>
 800c44a:	4620      	mov	r0, r4
 800c44c:	4b6d      	ldr	r3, [pc, #436]	@ (800c604 <_dtoa_r+0x58c>)
 800c44e:	2200      	movs	r2, #0
 800c450:	4629      	mov	r1, r5
 800c452:	f7f4 f8d1 	bl	80005f8 <__aeabi_dmul>
 800c456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c45a:	f107 38ff 	add.w	r8, r7, #4294967295
 800c45e:	3601      	adds	r6, #1
 800c460:	465c      	mov	r4, fp
 800c462:	4630      	mov	r0, r6
 800c464:	f7f4 f85e 	bl	8000524 <__aeabi_i2d>
 800c468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c46c:	f7f4 f8c4 	bl	80005f8 <__aeabi_dmul>
 800c470:	4b65      	ldr	r3, [pc, #404]	@ (800c608 <_dtoa_r+0x590>)
 800c472:	2200      	movs	r2, #0
 800c474:	f7f3 ff0a 	bl	800028c <__adddf3>
 800c478:	4605      	mov	r5, r0
 800c47a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c47e:	2c00      	cmp	r4, #0
 800c480:	d16a      	bne.n	800c558 <_dtoa_r+0x4e0>
 800c482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c486:	4b61      	ldr	r3, [pc, #388]	@ (800c60c <_dtoa_r+0x594>)
 800c488:	2200      	movs	r2, #0
 800c48a:	f7f3 fefd 	bl	8000288 <__aeabi_dsub>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c496:	462a      	mov	r2, r5
 800c498:	4633      	mov	r3, r6
 800c49a:	f7f4 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f040 8298 	bne.w	800c9d4 <_dtoa_r+0x95c>
 800c4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4ae:	f7f4 fb15 	bl	8000adc <__aeabi_dcmplt>
 800c4b2:	bb38      	cbnz	r0, 800c504 <_dtoa_r+0x48c>
 800c4b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c4b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c4bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f2c0 8157 	blt.w	800c772 <_dtoa_r+0x6fa>
 800c4c4:	2f0e      	cmp	r7, #14
 800c4c6:	f300 8154 	bgt.w	800c772 <_dtoa_r+0x6fa>
 800c4ca:	4b4b      	ldr	r3, [pc, #300]	@ (800c5f8 <_dtoa_r+0x580>)
 800c4cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4d0:	ed93 7b00 	vldr	d7, [r3]
 800c4d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	ed8d 7b00 	vstr	d7, [sp]
 800c4dc:	f280 80e5 	bge.w	800c6aa <_dtoa_r+0x632>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f300 80e1 	bgt.w	800c6aa <_dtoa_r+0x632>
 800c4e8:	d10c      	bne.n	800c504 <_dtoa_r+0x48c>
 800c4ea:	4b48      	ldr	r3, [pc, #288]	@ (800c60c <_dtoa_r+0x594>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	ec51 0b17 	vmov	r0, r1, d7
 800c4f2:	f7f4 f881 	bl	80005f8 <__aeabi_dmul>
 800c4f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4fa:	f7f4 fb03 	bl	8000b04 <__aeabi_dcmpge>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	f000 8266 	beq.w	800c9d0 <_dtoa_r+0x958>
 800c504:	2400      	movs	r4, #0
 800c506:	4625      	mov	r5, r4
 800c508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c50a:	4656      	mov	r6, sl
 800c50c:	ea6f 0803 	mvn.w	r8, r3
 800c510:	2700      	movs	r7, #0
 800c512:	4621      	mov	r1, r4
 800c514:	4648      	mov	r0, r9
 800c516:	f000 fc09 	bl	800cd2c <_Bfree>
 800c51a:	2d00      	cmp	r5, #0
 800c51c:	f000 80bd 	beq.w	800c69a <_dtoa_r+0x622>
 800c520:	b12f      	cbz	r7, 800c52e <_dtoa_r+0x4b6>
 800c522:	42af      	cmp	r7, r5
 800c524:	d003      	beq.n	800c52e <_dtoa_r+0x4b6>
 800c526:	4639      	mov	r1, r7
 800c528:	4648      	mov	r0, r9
 800c52a:	f000 fbff 	bl	800cd2c <_Bfree>
 800c52e:	4629      	mov	r1, r5
 800c530:	4648      	mov	r0, r9
 800c532:	f000 fbfb 	bl	800cd2c <_Bfree>
 800c536:	e0b0      	b.n	800c69a <_dtoa_r+0x622>
 800c538:	07e2      	lsls	r2, r4, #31
 800c53a:	d505      	bpl.n	800c548 <_dtoa_r+0x4d0>
 800c53c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c540:	f7f4 f85a 	bl	80005f8 <__aeabi_dmul>
 800c544:	3601      	adds	r6, #1
 800c546:	2301      	movs	r3, #1
 800c548:	1064      	asrs	r4, r4, #1
 800c54a:	3508      	adds	r5, #8
 800c54c:	e762      	b.n	800c414 <_dtoa_r+0x39c>
 800c54e:	2602      	movs	r6, #2
 800c550:	e765      	b.n	800c41e <_dtoa_r+0x3a6>
 800c552:	9c03      	ldr	r4, [sp, #12]
 800c554:	46b8      	mov	r8, r7
 800c556:	e784      	b.n	800c462 <_dtoa_r+0x3ea>
 800c558:	4b27      	ldr	r3, [pc, #156]	@ (800c5f8 <_dtoa_r+0x580>)
 800c55a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c55c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c560:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c564:	4454      	add	r4, sl
 800c566:	2900      	cmp	r1, #0
 800c568:	d054      	beq.n	800c614 <_dtoa_r+0x59c>
 800c56a:	4929      	ldr	r1, [pc, #164]	@ (800c610 <_dtoa_r+0x598>)
 800c56c:	2000      	movs	r0, #0
 800c56e:	f7f4 f96d 	bl	800084c <__aeabi_ddiv>
 800c572:	4633      	mov	r3, r6
 800c574:	462a      	mov	r2, r5
 800c576:	f7f3 fe87 	bl	8000288 <__aeabi_dsub>
 800c57a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c57e:	4656      	mov	r6, sl
 800c580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c584:	f7f4 fae8 	bl	8000b58 <__aeabi_d2iz>
 800c588:	4605      	mov	r5, r0
 800c58a:	f7f3 ffcb 	bl	8000524 <__aeabi_i2d>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c596:	f7f3 fe77 	bl	8000288 <__aeabi_dsub>
 800c59a:	3530      	adds	r5, #48	@ 0x30
 800c59c:	4602      	mov	r2, r0
 800c59e:	460b      	mov	r3, r1
 800c5a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c5a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c5a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c5ac:	f7f4 fa96 	bl	8000adc <__aeabi_dcmplt>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d172      	bne.n	800c69a <_dtoa_r+0x622>
 800c5b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b8:	4911      	ldr	r1, [pc, #68]	@ (800c600 <_dtoa_r+0x588>)
 800c5ba:	2000      	movs	r0, #0
 800c5bc:	f7f3 fe64 	bl	8000288 <__aeabi_dsub>
 800c5c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c5c4:	f7f4 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f040 80b4 	bne.w	800c736 <_dtoa_r+0x6be>
 800c5ce:	42a6      	cmp	r6, r4
 800c5d0:	f43f af70 	beq.w	800c4b4 <_dtoa_r+0x43c>
 800c5d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c604 <_dtoa_r+0x58c>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	4b08      	ldr	r3, [pc, #32]	@ (800c604 <_dtoa_r+0x58c>)
 800c5e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5ec:	f7f4 f804 	bl	80005f8 <__aeabi_dmul>
 800c5f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5f4:	e7c4      	b.n	800c580 <_dtoa_r+0x508>
 800c5f6:	bf00      	nop
 800c5f8:	0800f6c0 	.word	0x0800f6c0
 800c5fc:	0800f698 	.word	0x0800f698
 800c600:	3ff00000 	.word	0x3ff00000
 800c604:	40240000 	.word	0x40240000
 800c608:	401c0000 	.word	0x401c0000
 800c60c:	40140000 	.word	0x40140000
 800c610:	3fe00000 	.word	0x3fe00000
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	f7f3 ffee 	bl	80005f8 <__aeabi_dmul>
 800c61c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c620:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c622:	4656      	mov	r6, sl
 800c624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c628:	f7f4 fa96 	bl	8000b58 <__aeabi_d2iz>
 800c62c:	4605      	mov	r5, r0
 800c62e:	f7f3 ff79 	bl	8000524 <__aeabi_i2d>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c63a:	f7f3 fe25 	bl	8000288 <__aeabi_dsub>
 800c63e:	3530      	adds	r5, #48	@ 0x30
 800c640:	f806 5b01 	strb.w	r5, [r6], #1
 800c644:	4602      	mov	r2, r0
 800c646:	460b      	mov	r3, r1
 800c648:	42a6      	cmp	r6, r4
 800c64a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c64e:	f04f 0200 	mov.w	r2, #0
 800c652:	d124      	bne.n	800c69e <_dtoa_r+0x626>
 800c654:	4baf      	ldr	r3, [pc, #700]	@ (800c914 <_dtoa_r+0x89c>)
 800c656:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c65a:	f7f3 fe17 	bl	800028c <__adddf3>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c666:	f7f4 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d163      	bne.n	800c736 <_dtoa_r+0x6be>
 800c66e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c672:	49a8      	ldr	r1, [pc, #672]	@ (800c914 <_dtoa_r+0x89c>)
 800c674:	2000      	movs	r0, #0
 800c676:	f7f3 fe07 	bl	8000288 <__aeabi_dsub>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c682:	f7f4 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800c686:	2800      	cmp	r0, #0
 800c688:	f43f af14 	beq.w	800c4b4 <_dtoa_r+0x43c>
 800c68c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c68e:	1e73      	subs	r3, r6, #1
 800c690:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c692:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c696:	2b30      	cmp	r3, #48	@ 0x30
 800c698:	d0f8      	beq.n	800c68c <_dtoa_r+0x614>
 800c69a:	4647      	mov	r7, r8
 800c69c:	e03b      	b.n	800c716 <_dtoa_r+0x69e>
 800c69e:	4b9e      	ldr	r3, [pc, #632]	@ (800c918 <_dtoa_r+0x8a0>)
 800c6a0:	f7f3 ffaa 	bl	80005f8 <__aeabi_dmul>
 800c6a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6a8:	e7bc      	b.n	800c624 <_dtoa_r+0x5ac>
 800c6aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c6ae:	4656      	mov	r6, sl
 800c6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	f7f4 f8c8 	bl	800084c <__aeabi_ddiv>
 800c6bc:	f7f4 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800c6c0:	4680      	mov	r8, r0
 800c6c2:	f7f3 ff2f 	bl	8000524 <__aeabi_i2d>
 800c6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6ca:	f7f3 ff95 	bl	80005f8 <__aeabi_dmul>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c6da:	f7f3 fdd5 	bl	8000288 <__aeabi_dsub>
 800c6de:	f806 4b01 	strb.w	r4, [r6], #1
 800c6e2:	9d03      	ldr	r5, [sp, #12]
 800c6e4:	eba6 040a 	sub.w	r4, r6, sl
 800c6e8:	42a5      	cmp	r5, r4
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	d133      	bne.n	800c758 <_dtoa_r+0x6e0>
 800c6f0:	f7f3 fdcc 	bl	800028c <__adddf3>
 800c6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	f7f4 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 800c700:	b9c0      	cbnz	r0, 800c734 <_dtoa_r+0x6bc>
 800c702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c706:	4620      	mov	r0, r4
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f4 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c70e:	b110      	cbz	r0, 800c716 <_dtoa_r+0x69e>
 800c710:	f018 0f01 	tst.w	r8, #1
 800c714:	d10e      	bne.n	800c734 <_dtoa_r+0x6bc>
 800c716:	9902      	ldr	r1, [sp, #8]
 800c718:	4648      	mov	r0, r9
 800c71a:	f000 fb07 	bl	800cd2c <_Bfree>
 800c71e:	2300      	movs	r3, #0
 800c720:	7033      	strb	r3, [r6, #0]
 800c722:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c724:	3701      	adds	r7, #1
 800c726:	601f      	str	r7, [r3, #0]
 800c728:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f000 824b 	beq.w	800cbc6 <_dtoa_r+0xb4e>
 800c730:	601e      	str	r6, [r3, #0]
 800c732:	e248      	b.n	800cbc6 <_dtoa_r+0xb4e>
 800c734:	46b8      	mov	r8, r7
 800c736:	4633      	mov	r3, r6
 800c738:	461e      	mov	r6, r3
 800c73a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c73e:	2a39      	cmp	r2, #57	@ 0x39
 800c740:	d106      	bne.n	800c750 <_dtoa_r+0x6d8>
 800c742:	459a      	cmp	sl, r3
 800c744:	d1f8      	bne.n	800c738 <_dtoa_r+0x6c0>
 800c746:	2230      	movs	r2, #48	@ 0x30
 800c748:	f108 0801 	add.w	r8, r8, #1
 800c74c:	f88a 2000 	strb.w	r2, [sl]
 800c750:	781a      	ldrb	r2, [r3, #0]
 800c752:	3201      	adds	r2, #1
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	e7a0      	b.n	800c69a <_dtoa_r+0x622>
 800c758:	4b6f      	ldr	r3, [pc, #444]	@ (800c918 <_dtoa_r+0x8a0>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	2200      	movs	r2, #0
 800c762:	2300      	movs	r3, #0
 800c764:	4604      	mov	r4, r0
 800c766:	460d      	mov	r5, r1
 800c768:	f7f4 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d09f      	beq.n	800c6b0 <_dtoa_r+0x638>
 800c770:	e7d1      	b.n	800c716 <_dtoa_r+0x69e>
 800c772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c774:	2a00      	cmp	r2, #0
 800c776:	f000 80ea 	beq.w	800c94e <_dtoa_r+0x8d6>
 800c77a:	9a07      	ldr	r2, [sp, #28]
 800c77c:	2a01      	cmp	r2, #1
 800c77e:	f300 80cd 	bgt.w	800c91c <_dtoa_r+0x8a4>
 800c782:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c784:	2a00      	cmp	r2, #0
 800c786:	f000 80c1 	beq.w	800c90c <_dtoa_r+0x894>
 800c78a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c78e:	9c08      	ldr	r4, [sp, #32]
 800c790:	9e00      	ldr	r6, [sp, #0]
 800c792:	9a00      	ldr	r2, [sp, #0]
 800c794:	441a      	add	r2, r3
 800c796:	9200      	str	r2, [sp, #0]
 800c798:	9a06      	ldr	r2, [sp, #24]
 800c79a:	2101      	movs	r1, #1
 800c79c:	441a      	add	r2, r3
 800c79e:	4648      	mov	r0, r9
 800c7a0:	9206      	str	r2, [sp, #24]
 800c7a2:	f000 fbc1 	bl	800cf28 <__i2b>
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	b166      	cbz	r6, 800c7c4 <_dtoa_r+0x74c>
 800c7aa:	9b06      	ldr	r3, [sp, #24]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	dd09      	ble.n	800c7c4 <_dtoa_r+0x74c>
 800c7b0:	42b3      	cmp	r3, r6
 800c7b2:	9a00      	ldr	r2, [sp, #0]
 800c7b4:	bfa8      	it	ge
 800c7b6:	4633      	movge	r3, r6
 800c7b8:	1ad2      	subs	r2, r2, r3
 800c7ba:	9200      	str	r2, [sp, #0]
 800c7bc:	9a06      	ldr	r2, [sp, #24]
 800c7be:	1af6      	subs	r6, r6, r3
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	9306      	str	r3, [sp, #24]
 800c7c4:	9b08      	ldr	r3, [sp, #32]
 800c7c6:	b30b      	cbz	r3, 800c80c <_dtoa_r+0x794>
 800c7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 80c6 	beq.w	800c95c <_dtoa_r+0x8e4>
 800c7d0:	2c00      	cmp	r4, #0
 800c7d2:	f000 80c0 	beq.w	800c956 <_dtoa_r+0x8de>
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4622      	mov	r2, r4
 800c7da:	4648      	mov	r0, r9
 800c7dc:	f000 fc5c 	bl	800d098 <__pow5mult>
 800c7e0:	9a02      	ldr	r2, [sp, #8]
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	4648      	mov	r0, r9
 800c7e8:	f000 fbb4 	bl	800cf54 <__multiply>
 800c7ec:	9902      	ldr	r1, [sp, #8]
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4648      	mov	r0, r9
 800c7f2:	f000 fa9b 	bl	800cd2c <_Bfree>
 800c7f6:	9b08      	ldr	r3, [sp, #32]
 800c7f8:	1b1b      	subs	r3, r3, r4
 800c7fa:	9308      	str	r3, [sp, #32]
 800c7fc:	f000 80b1 	beq.w	800c962 <_dtoa_r+0x8ea>
 800c800:	9a08      	ldr	r2, [sp, #32]
 800c802:	4641      	mov	r1, r8
 800c804:	4648      	mov	r0, r9
 800c806:	f000 fc47 	bl	800d098 <__pow5mult>
 800c80a:	9002      	str	r0, [sp, #8]
 800c80c:	2101      	movs	r1, #1
 800c80e:	4648      	mov	r0, r9
 800c810:	f000 fb8a 	bl	800cf28 <__i2b>
 800c814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c816:	4604      	mov	r4, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 81d8 	beq.w	800cbce <_dtoa_r+0xb56>
 800c81e:	461a      	mov	r2, r3
 800c820:	4601      	mov	r1, r0
 800c822:	4648      	mov	r0, r9
 800c824:	f000 fc38 	bl	800d098 <__pow5mult>
 800c828:	9b07      	ldr	r3, [sp, #28]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	4604      	mov	r4, r0
 800c82e:	f300 809f 	bgt.w	800c970 <_dtoa_r+0x8f8>
 800c832:	9b04      	ldr	r3, [sp, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f040 8097 	bne.w	800c968 <_dtoa_r+0x8f0>
 800c83a:	9b05      	ldr	r3, [sp, #20]
 800c83c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c840:	2b00      	cmp	r3, #0
 800c842:	f040 8093 	bne.w	800c96c <_dtoa_r+0x8f4>
 800c846:	9b05      	ldr	r3, [sp, #20]
 800c848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c84c:	0d1b      	lsrs	r3, r3, #20
 800c84e:	051b      	lsls	r3, r3, #20
 800c850:	b133      	cbz	r3, 800c860 <_dtoa_r+0x7e8>
 800c852:	9b00      	ldr	r3, [sp, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	9b06      	ldr	r3, [sp, #24]
 800c85a:	3301      	adds	r3, #1
 800c85c:	9306      	str	r3, [sp, #24]
 800c85e:	2301      	movs	r3, #1
 800c860:	9308      	str	r3, [sp, #32]
 800c862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 81b8 	beq.w	800cbda <_dtoa_r+0xb62>
 800c86a:	6923      	ldr	r3, [r4, #16]
 800c86c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c870:	6918      	ldr	r0, [r3, #16]
 800c872:	f000 fb0d 	bl	800ce90 <__hi0bits>
 800c876:	f1c0 0020 	rsb	r0, r0, #32
 800c87a:	9b06      	ldr	r3, [sp, #24]
 800c87c:	4418      	add	r0, r3
 800c87e:	f010 001f 	ands.w	r0, r0, #31
 800c882:	f000 8082 	beq.w	800c98a <_dtoa_r+0x912>
 800c886:	f1c0 0320 	rsb	r3, r0, #32
 800c88a:	2b04      	cmp	r3, #4
 800c88c:	dd73      	ble.n	800c976 <_dtoa_r+0x8fe>
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	f1c0 001c 	rsb	r0, r0, #28
 800c894:	4403      	add	r3, r0
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	9b06      	ldr	r3, [sp, #24]
 800c89a:	4403      	add	r3, r0
 800c89c:	4406      	add	r6, r0
 800c89e:	9306      	str	r3, [sp, #24]
 800c8a0:	9b00      	ldr	r3, [sp, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dd05      	ble.n	800c8b2 <_dtoa_r+0x83a>
 800c8a6:	9902      	ldr	r1, [sp, #8]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4648      	mov	r0, r9
 800c8ac:	f000 fc4e 	bl	800d14c <__lshift>
 800c8b0:	9002      	str	r0, [sp, #8]
 800c8b2:	9b06      	ldr	r3, [sp, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	dd05      	ble.n	800c8c4 <_dtoa_r+0x84c>
 800c8b8:	4621      	mov	r1, r4
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4648      	mov	r0, r9
 800c8be:	f000 fc45 	bl	800d14c <__lshift>
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d061      	beq.n	800c98e <_dtoa_r+0x916>
 800c8ca:	9802      	ldr	r0, [sp, #8]
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	f000 fca9 	bl	800d224 <__mcmp>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	da5b      	bge.n	800c98e <_dtoa_r+0x916>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	9902      	ldr	r1, [sp, #8]
 800c8da:	220a      	movs	r2, #10
 800c8dc:	4648      	mov	r0, r9
 800c8de:	f000 fa47 	bl	800cd70 <__multadd>
 800c8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e4:	9002      	str	r0, [sp, #8]
 800c8e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 8177 	beq.w	800cbde <_dtoa_r+0xb66>
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	220a      	movs	r2, #10
 800c8f6:	4648      	mov	r0, r9
 800c8f8:	f000 fa3a 	bl	800cd70 <__multadd>
 800c8fc:	f1bb 0f00 	cmp.w	fp, #0
 800c900:	4605      	mov	r5, r0
 800c902:	dc6f      	bgt.n	800c9e4 <_dtoa_r+0x96c>
 800c904:	9b07      	ldr	r3, [sp, #28]
 800c906:	2b02      	cmp	r3, #2
 800c908:	dc49      	bgt.n	800c99e <_dtoa_r+0x926>
 800c90a:	e06b      	b.n	800c9e4 <_dtoa_r+0x96c>
 800c90c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c90e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c912:	e73c      	b.n	800c78e <_dtoa_r+0x716>
 800c914:	3fe00000 	.word	0x3fe00000
 800c918:	40240000 	.word	0x40240000
 800c91c:	9b03      	ldr	r3, [sp, #12]
 800c91e:	1e5c      	subs	r4, r3, #1
 800c920:	9b08      	ldr	r3, [sp, #32]
 800c922:	42a3      	cmp	r3, r4
 800c924:	db09      	blt.n	800c93a <_dtoa_r+0x8c2>
 800c926:	1b1c      	subs	r4, r3, r4
 800c928:	9b03      	ldr	r3, [sp, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	f6bf af30 	bge.w	800c790 <_dtoa_r+0x718>
 800c930:	9b00      	ldr	r3, [sp, #0]
 800c932:	9a03      	ldr	r2, [sp, #12]
 800c934:	1a9e      	subs	r6, r3, r2
 800c936:	2300      	movs	r3, #0
 800c938:	e72b      	b.n	800c792 <_dtoa_r+0x71a>
 800c93a:	9b08      	ldr	r3, [sp, #32]
 800c93c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c93e:	9408      	str	r4, [sp, #32]
 800c940:	1ae3      	subs	r3, r4, r3
 800c942:	441a      	add	r2, r3
 800c944:	9e00      	ldr	r6, [sp, #0]
 800c946:	9b03      	ldr	r3, [sp, #12]
 800c948:	920d      	str	r2, [sp, #52]	@ 0x34
 800c94a:	2400      	movs	r4, #0
 800c94c:	e721      	b.n	800c792 <_dtoa_r+0x71a>
 800c94e:	9c08      	ldr	r4, [sp, #32]
 800c950:	9e00      	ldr	r6, [sp, #0]
 800c952:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c954:	e728      	b.n	800c7a8 <_dtoa_r+0x730>
 800c956:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c95a:	e751      	b.n	800c800 <_dtoa_r+0x788>
 800c95c:	9a08      	ldr	r2, [sp, #32]
 800c95e:	9902      	ldr	r1, [sp, #8]
 800c960:	e750      	b.n	800c804 <_dtoa_r+0x78c>
 800c962:	f8cd 8008 	str.w	r8, [sp, #8]
 800c966:	e751      	b.n	800c80c <_dtoa_r+0x794>
 800c968:	2300      	movs	r3, #0
 800c96a:	e779      	b.n	800c860 <_dtoa_r+0x7e8>
 800c96c:	9b04      	ldr	r3, [sp, #16]
 800c96e:	e777      	b.n	800c860 <_dtoa_r+0x7e8>
 800c970:	2300      	movs	r3, #0
 800c972:	9308      	str	r3, [sp, #32]
 800c974:	e779      	b.n	800c86a <_dtoa_r+0x7f2>
 800c976:	d093      	beq.n	800c8a0 <_dtoa_r+0x828>
 800c978:	9a00      	ldr	r2, [sp, #0]
 800c97a:	331c      	adds	r3, #28
 800c97c:	441a      	add	r2, r3
 800c97e:	9200      	str	r2, [sp, #0]
 800c980:	9a06      	ldr	r2, [sp, #24]
 800c982:	441a      	add	r2, r3
 800c984:	441e      	add	r6, r3
 800c986:	9206      	str	r2, [sp, #24]
 800c988:	e78a      	b.n	800c8a0 <_dtoa_r+0x828>
 800c98a:	4603      	mov	r3, r0
 800c98c:	e7f4      	b.n	800c978 <_dtoa_r+0x900>
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	46b8      	mov	r8, r7
 800c994:	dc20      	bgt.n	800c9d8 <_dtoa_r+0x960>
 800c996:	469b      	mov	fp, r3
 800c998:	9b07      	ldr	r3, [sp, #28]
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	dd1e      	ble.n	800c9dc <_dtoa_r+0x964>
 800c99e:	f1bb 0f00 	cmp.w	fp, #0
 800c9a2:	f47f adb1 	bne.w	800c508 <_dtoa_r+0x490>
 800c9a6:	4621      	mov	r1, r4
 800c9a8:	465b      	mov	r3, fp
 800c9aa:	2205      	movs	r2, #5
 800c9ac:	4648      	mov	r0, r9
 800c9ae:	f000 f9df 	bl	800cd70 <__multadd>
 800c9b2:	4601      	mov	r1, r0
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	9802      	ldr	r0, [sp, #8]
 800c9b8:	f000 fc34 	bl	800d224 <__mcmp>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f77f ada3 	ble.w	800c508 <_dtoa_r+0x490>
 800c9c2:	4656      	mov	r6, sl
 800c9c4:	2331      	movs	r3, #49	@ 0x31
 800c9c6:	f806 3b01 	strb.w	r3, [r6], #1
 800c9ca:	f108 0801 	add.w	r8, r8, #1
 800c9ce:	e59f      	b.n	800c510 <_dtoa_r+0x498>
 800c9d0:	9c03      	ldr	r4, [sp, #12]
 800c9d2:	46b8      	mov	r8, r7
 800c9d4:	4625      	mov	r5, r4
 800c9d6:	e7f4      	b.n	800c9c2 <_dtoa_r+0x94a>
 800c9d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 8101 	beq.w	800cbe6 <_dtoa_r+0xb6e>
 800c9e4:	2e00      	cmp	r6, #0
 800c9e6:	dd05      	ble.n	800c9f4 <_dtoa_r+0x97c>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4632      	mov	r2, r6
 800c9ec:	4648      	mov	r0, r9
 800c9ee:	f000 fbad 	bl	800d14c <__lshift>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	9b08      	ldr	r3, [sp, #32]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d05c      	beq.n	800cab4 <_dtoa_r+0xa3c>
 800c9fa:	6869      	ldr	r1, [r5, #4]
 800c9fc:	4648      	mov	r0, r9
 800c9fe:	f000 f955 	bl	800ccac <_Balloc>
 800ca02:	4606      	mov	r6, r0
 800ca04:	b928      	cbnz	r0, 800ca12 <_dtoa_r+0x99a>
 800ca06:	4b82      	ldr	r3, [pc, #520]	@ (800cc10 <_dtoa_r+0xb98>)
 800ca08:	4602      	mov	r2, r0
 800ca0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca0e:	f7ff bb4a 	b.w	800c0a6 <_dtoa_r+0x2e>
 800ca12:	692a      	ldr	r2, [r5, #16]
 800ca14:	3202      	adds	r2, #2
 800ca16:	0092      	lsls	r2, r2, #2
 800ca18:	f105 010c 	add.w	r1, r5, #12
 800ca1c:	300c      	adds	r0, #12
 800ca1e:	f002 f86b 	bl	800eaf8 <memcpy>
 800ca22:	2201      	movs	r2, #1
 800ca24:	4631      	mov	r1, r6
 800ca26:	4648      	mov	r0, r9
 800ca28:	f000 fb90 	bl	800d14c <__lshift>
 800ca2c:	f10a 0301 	add.w	r3, sl, #1
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	eb0a 030b 	add.w	r3, sl, fp
 800ca36:	9308      	str	r3, [sp, #32]
 800ca38:	9b04      	ldr	r3, [sp, #16]
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	462f      	mov	r7, r5
 800ca40:	9306      	str	r3, [sp, #24]
 800ca42:	4605      	mov	r5, r0
 800ca44:	9b00      	ldr	r3, [sp, #0]
 800ca46:	9802      	ldr	r0, [sp, #8]
 800ca48:	4621      	mov	r1, r4
 800ca4a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ca4e:	f7ff fa8b 	bl	800bf68 <quorem>
 800ca52:	4603      	mov	r3, r0
 800ca54:	3330      	adds	r3, #48	@ 0x30
 800ca56:	9003      	str	r0, [sp, #12]
 800ca58:	4639      	mov	r1, r7
 800ca5a:	9802      	ldr	r0, [sp, #8]
 800ca5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca5e:	f000 fbe1 	bl	800d224 <__mcmp>
 800ca62:	462a      	mov	r2, r5
 800ca64:	9004      	str	r0, [sp, #16]
 800ca66:	4621      	mov	r1, r4
 800ca68:	4648      	mov	r0, r9
 800ca6a:	f000 fbf7 	bl	800d25c <__mdiff>
 800ca6e:	68c2      	ldr	r2, [r0, #12]
 800ca70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca72:	4606      	mov	r6, r0
 800ca74:	bb02      	cbnz	r2, 800cab8 <_dtoa_r+0xa40>
 800ca76:	4601      	mov	r1, r0
 800ca78:	9802      	ldr	r0, [sp, #8]
 800ca7a:	f000 fbd3 	bl	800d224 <__mcmp>
 800ca7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca80:	4602      	mov	r2, r0
 800ca82:	4631      	mov	r1, r6
 800ca84:	4648      	mov	r0, r9
 800ca86:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca8a:	f000 f94f 	bl	800cd2c <_Bfree>
 800ca8e:	9b07      	ldr	r3, [sp, #28]
 800ca90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ca92:	9e00      	ldr	r6, [sp, #0]
 800ca94:	ea42 0103 	orr.w	r1, r2, r3
 800ca98:	9b06      	ldr	r3, [sp, #24]
 800ca9a:	4319      	orrs	r1, r3
 800ca9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca9e:	d10d      	bne.n	800cabc <_dtoa_r+0xa44>
 800caa0:	2b39      	cmp	r3, #57	@ 0x39
 800caa2:	d027      	beq.n	800caf4 <_dtoa_r+0xa7c>
 800caa4:	9a04      	ldr	r2, [sp, #16]
 800caa6:	2a00      	cmp	r2, #0
 800caa8:	dd01      	ble.n	800caae <_dtoa_r+0xa36>
 800caaa:	9b03      	ldr	r3, [sp, #12]
 800caac:	3331      	adds	r3, #49	@ 0x31
 800caae:	f88b 3000 	strb.w	r3, [fp]
 800cab2:	e52e      	b.n	800c512 <_dtoa_r+0x49a>
 800cab4:	4628      	mov	r0, r5
 800cab6:	e7b9      	b.n	800ca2c <_dtoa_r+0x9b4>
 800cab8:	2201      	movs	r2, #1
 800caba:	e7e2      	b.n	800ca82 <_dtoa_r+0xa0a>
 800cabc:	9904      	ldr	r1, [sp, #16]
 800cabe:	2900      	cmp	r1, #0
 800cac0:	db04      	blt.n	800cacc <_dtoa_r+0xa54>
 800cac2:	9807      	ldr	r0, [sp, #28]
 800cac4:	4301      	orrs	r1, r0
 800cac6:	9806      	ldr	r0, [sp, #24]
 800cac8:	4301      	orrs	r1, r0
 800caca:	d120      	bne.n	800cb0e <_dtoa_r+0xa96>
 800cacc:	2a00      	cmp	r2, #0
 800cace:	ddee      	ble.n	800caae <_dtoa_r+0xa36>
 800cad0:	9902      	ldr	r1, [sp, #8]
 800cad2:	9300      	str	r3, [sp, #0]
 800cad4:	2201      	movs	r2, #1
 800cad6:	4648      	mov	r0, r9
 800cad8:	f000 fb38 	bl	800d14c <__lshift>
 800cadc:	4621      	mov	r1, r4
 800cade:	9002      	str	r0, [sp, #8]
 800cae0:	f000 fba0 	bl	800d224 <__mcmp>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	9b00      	ldr	r3, [sp, #0]
 800cae8:	dc02      	bgt.n	800caf0 <_dtoa_r+0xa78>
 800caea:	d1e0      	bne.n	800caae <_dtoa_r+0xa36>
 800caec:	07da      	lsls	r2, r3, #31
 800caee:	d5de      	bpl.n	800caae <_dtoa_r+0xa36>
 800caf0:	2b39      	cmp	r3, #57	@ 0x39
 800caf2:	d1da      	bne.n	800caaa <_dtoa_r+0xa32>
 800caf4:	2339      	movs	r3, #57	@ 0x39
 800caf6:	f88b 3000 	strb.w	r3, [fp]
 800cafa:	4633      	mov	r3, r6
 800cafc:	461e      	mov	r6, r3
 800cafe:	3b01      	subs	r3, #1
 800cb00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb04:	2a39      	cmp	r2, #57	@ 0x39
 800cb06:	d04e      	beq.n	800cba6 <_dtoa_r+0xb2e>
 800cb08:	3201      	adds	r2, #1
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	e501      	b.n	800c512 <_dtoa_r+0x49a>
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	dd03      	ble.n	800cb1a <_dtoa_r+0xaa2>
 800cb12:	2b39      	cmp	r3, #57	@ 0x39
 800cb14:	d0ee      	beq.n	800caf4 <_dtoa_r+0xa7c>
 800cb16:	3301      	adds	r3, #1
 800cb18:	e7c9      	b.n	800caae <_dtoa_r+0xa36>
 800cb1a:	9a00      	ldr	r2, [sp, #0]
 800cb1c:	9908      	ldr	r1, [sp, #32]
 800cb1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cb22:	428a      	cmp	r2, r1
 800cb24:	d028      	beq.n	800cb78 <_dtoa_r+0xb00>
 800cb26:	9902      	ldr	r1, [sp, #8]
 800cb28:	2300      	movs	r3, #0
 800cb2a:	220a      	movs	r2, #10
 800cb2c:	4648      	mov	r0, r9
 800cb2e:	f000 f91f 	bl	800cd70 <__multadd>
 800cb32:	42af      	cmp	r7, r5
 800cb34:	9002      	str	r0, [sp, #8]
 800cb36:	f04f 0300 	mov.w	r3, #0
 800cb3a:	f04f 020a 	mov.w	r2, #10
 800cb3e:	4639      	mov	r1, r7
 800cb40:	4648      	mov	r0, r9
 800cb42:	d107      	bne.n	800cb54 <_dtoa_r+0xadc>
 800cb44:	f000 f914 	bl	800cd70 <__multadd>
 800cb48:	4607      	mov	r7, r0
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	9b00      	ldr	r3, [sp, #0]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	e777      	b.n	800ca44 <_dtoa_r+0x9cc>
 800cb54:	f000 f90c 	bl	800cd70 <__multadd>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4607      	mov	r7, r0
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	220a      	movs	r2, #10
 800cb60:	4648      	mov	r0, r9
 800cb62:	f000 f905 	bl	800cd70 <__multadd>
 800cb66:	4605      	mov	r5, r0
 800cb68:	e7f0      	b.n	800cb4c <_dtoa_r+0xad4>
 800cb6a:	f1bb 0f00 	cmp.w	fp, #0
 800cb6e:	bfcc      	ite	gt
 800cb70:	465e      	movgt	r6, fp
 800cb72:	2601      	movle	r6, #1
 800cb74:	4456      	add	r6, sl
 800cb76:	2700      	movs	r7, #0
 800cb78:	9902      	ldr	r1, [sp, #8]
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	4648      	mov	r0, r9
 800cb80:	f000 fae4 	bl	800d14c <__lshift>
 800cb84:	4621      	mov	r1, r4
 800cb86:	9002      	str	r0, [sp, #8]
 800cb88:	f000 fb4c 	bl	800d224 <__mcmp>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	dcb4      	bgt.n	800cafa <_dtoa_r+0xa82>
 800cb90:	d102      	bne.n	800cb98 <_dtoa_r+0xb20>
 800cb92:	9b00      	ldr	r3, [sp, #0]
 800cb94:	07db      	lsls	r3, r3, #31
 800cb96:	d4b0      	bmi.n	800cafa <_dtoa_r+0xa82>
 800cb98:	4633      	mov	r3, r6
 800cb9a:	461e      	mov	r6, r3
 800cb9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cba0:	2a30      	cmp	r2, #48	@ 0x30
 800cba2:	d0fa      	beq.n	800cb9a <_dtoa_r+0xb22>
 800cba4:	e4b5      	b.n	800c512 <_dtoa_r+0x49a>
 800cba6:	459a      	cmp	sl, r3
 800cba8:	d1a8      	bne.n	800cafc <_dtoa_r+0xa84>
 800cbaa:	2331      	movs	r3, #49	@ 0x31
 800cbac:	f108 0801 	add.w	r8, r8, #1
 800cbb0:	f88a 3000 	strb.w	r3, [sl]
 800cbb4:	e4ad      	b.n	800c512 <_dtoa_r+0x49a>
 800cbb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cbb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cc14 <_dtoa_r+0xb9c>
 800cbbc:	b11b      	cbz	r3, 800cbc6 <_dtoa_r+0xb4e>
 800cbbe:	f10a 0308 	add.w	r3, sl, #8
 800cbc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cbc4:	6013      	str	r3, [r2, #0]
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	b017      	add	sp, #92	@ 0x5c
 800cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbce:	9b07      	ldr	r3, [sp, #28]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	f77f ae2e 	ble.w	800c832 <_dtoa_r+0x7ba>
 800cbd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbd8:	9308      	str	r3, [sp, #32]
 800cbda:	2001      	movs	r0, #1
 800cbdc:	e64d      	b.n	800c87a <_dtoa_r+0x802>
 800cbde:	f1bb 0f00 	cmp.w	fp, #0
 800cbe2:	f77f aed9 	ble.w	800c998 <_dtoa_r+0x920>
 800cbe6:	4656      	mov	r6, sl
 800cbe8:	9802      	ldr	r0, [sp, #8]
 800cbea:	4621      	mov	r1, r4
 800cbec:	f7ff f9bc 	bl	800bf68 <quorem>
 800cbf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cbf4:	f806 3b01 	strb.w	r3, [r6], #1
 800cbf8:	eba6 020a 	sub.w	r2, r6, sl
 800cbfc:	4593      	cmp	fp, r2
 800cbfe:	ddb4      	ble.n	800cb6a <_dtoa_r+0xaf2>
 800cc00:	9902      	ldr	r1, [sp, #8]
 800cc02:	2300      	movs	r3, #0
 800cc04:	220a      	movs	r2, #10
 800cc06:	4648      	mov	r0, r9
 800cc08:	f000 f8b2 	bl	800cd70 <__multadd>
 800cc0c:	9002      	str	r0, [sp, #8]
 800cc0e:	e7eb      	b.n	800cbe8 <_dtoa_r+0xb70>
 800cc10:	0800f565 	.word	0x0800f565
 800cc14:	0800f4e9 	.word	0x0800f4e9

0800cc18 <_free_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	2900      	cmp	r1, #0
 800cc1e:	d041      	beq.n	800cca4 <_free_r+0x8c>
 800cc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc24:	1f0c      	subs	r4, r1, #4
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfb8      	it	lt
 800cc2a:	18e4      	addlt	r4, r4, r3
 800cc2c:	f7fe f86a 	bl	800ad04 <__malloc_lock>
 800cc30:	4a1d      	ldr	r2, [pc, #116]	@ (800cca8 <_free_r+0x90>)
 800cc32:	6813      	ldr	r3, [r2, #0]
 800cc34:	b933      	cbnz	r3, 800cc44 <_free_r+0x2c>
 800cc36:	6063      	str	r3, [r4, #4]
 800cc38:	6014      	str	r4, [r2, #0]
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc40:	f7fe b866 	b.w	800ad10 <__malloc_unlock>
 800cc44:	42a3      	cmp	r3, r4
 800cc46:	d908      	bls.n	800cc5a <_free_r+0x42>
 800cc48:	6820      	ldr	r0, [r4, #0]
 800cc4a:	1821      	adds	r1, r4, r0
 800cc4c:	428b      	cmp	r3, r1
 800cc4e:	bf01      	itttt	eq
 800cc50:	6819      	ldreq	r1, [r3, #0]
 800cc52:	685b      	ldreq	r3, [r3, #4]
 800cc54:	1809      	addeq	r1, r1, r0
 800cc56:	6021      	streq	r1, [r4, #0]
 800cc58:	e7ed      	b.n	800cc36 <_free_r+0x1e>
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	b10b      	cbz	r3, 800cc64 <_free_r+0x4c>
 800cc60:	42a3      	cmp	r3, r4
 800cc62:	d9fa      	bls.n	800cc5a <_free_r+0x42>
 800cc64:	6811      	ldr	r1, [r2, #0]
 800cc66:	1850      	adds	r0, r2, r1
 800cc68:	42a0      	cmp	r0, r4
 800cc6a:	d10b      	bne.n	800cc84 <_free_r+0x6c>
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	4401      	add	r1, r0
 800cc70:	1850      	adds	r0, r2, r1
 800cc72:	4283      	cmp	r3, r0
 800cc74:	6011      	str	r1, [r2, #0]
 800cc76:	d1e0      	bne.n	800cc3a <_free_r+0x22>
 800cc78:	6818      	ldr	r0, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	6053      	str	r3, [r2, #4]
 800cc7e:	4408      	add	r0, r1
 800cc80:	6010      	str	r0, [r2, #0]
 800cc82:	e7da      	b.n	800cc3a <_free_r+0x22>
 800cc84:	d902      	bls.n	800cc8c <_free_r+0x74>
 800cc86:	230c      	movs	r3, #12
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	e7d6      	b.n	800cc3a <_free_r+0x22>
 800cc8c:	6820      	ldr	r0, [r4, #0]
 800cc8e:	1821      	adds	r1, r4, r0
 800cc90:	428b      	cmp	r3, r1
 800cc92:	bf04      	itt	eq
 800cc94:	6819      	ldreq	r1, [r3, #0]
 800cc96:	685b      	ldreq	r3, [r3, #4]
 800cc98:	6063      	str	r3, [r4, #4]
 800cc9a:	bf04      	itt	eq
 800cc9c:	1809      	addeq	r1, r1, r0
 800cc9e:	6021      	streq	r1, [r4, #0]
 800cca0:	6054      	str	r4, [r2, #4]
 800cca2:	e7ca      	b.n	800cc3a <_free_r+0x22>
 800cca4:	bd38      	pop	{r3, r4, r5, pc}
 800cca6:	bf00      	nop
 800cca8:	20001efc 	.word	0x20001efc

0800ccac <_Balloc>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	69c6      	ldr	r6, [r0, #28]
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	b976      	cbnz	r6, 800ccd4 <_Balloc+0x28>
 800ccb6:	2010      	movs	r0, #16
 800ccb8:	f7fd ff72 	bl	800aba0 <malloc>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	61e0      	str	r0, [r4, #28]
 800ccc0:	b920      	cbnz	r0, 800cccc <_Balloc+0x20>
 800ccc2:	4b18      	ldr	r3, [pc, #96]	@ (800cd24 <_Balloc+0x78>)
 800ccc4:	4818      	ldr	r0, [pc, #96]	@ (800cd28 <_Balloc+0x7c>)
 800ccc6:	216b      	movs	r1, #107	@ 0x6b
 800ccc8:	f001 ff2e 	bl	800eb28 <__assert_func>
 800cccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccd0:	6006      	str	r6, [r0, #0]
 800ccd2:	60c6      	str	r6, [r0, #12]
 800ccd4:	69e6      	ldr	r6, [r4, #28]
 800ccd6:	68f3      	ldr	r3, [r6, #12]
 800ccd8:	b183      	cbz	r3, 800ccfc <_Balloc+0x50>
 800ccda:	69e3      	ldr	r3, [r4, #28]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cce2:	b9b8      	cbnz	r0, 800cd14 <_Balloc+0x68>
 800cce4:	2101      	movs	r1, #1
 800cce6:	fa01 f605 	lsl.w	r6, r1, r5
 800ccea:	1d72      	adds	r2, r6, #5
 800ccec:	0092      	lsls	r2, r2, #2
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f001 ff38 	bl	800eb64 <_calloc_r>
 800ccf4:	b160      	cbz	r0, 800cd10 <_Balloc+0x64>
 800ccf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccfa:	e00e      	b.n	800cd1a <_Balloc+0x6e>
 800ccfc:	2221      	movs	r2, #33	@ 0x21
 800ccfe:	2104      	movs	r1, #4
 800cd00:	4620      	mov	r0, r4
 800cd02:	f001 ff2f 	bl	800eb64 <_calloc_r>
 800cd06:	69e3      	ldr	r3, [r4, #28]
 800cd08:	60f0      	str	r0, [r6, #12]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e4      	bne.n	800ccda <_Balloc+0x2e>
 800cd10:	2000      	movs	r0, #0
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	6802      	ldr	r2, [r0, #0]
 800cd16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd20:	e7f7      	b.n	800cd12 <_Balloc+0x66>
 800cd22:	bf00      	nop
 800cd24:	0800f4f6 	.word	0x0800f4f6
 800cd28:	0800f576 	.word	0x0800f576

0800cd2c <_Bfree>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	69c6      	ldr	r6, [r0, #28]
 800cd30:	4605      	mov	r5, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	b976      	cbnz	r6, 800cd54 <_Bfree+0x28>
 800cd36:	2010      	movs	r0, #16
 800cd38:	f7fd ff32 	bl	800aba0 <malloc>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	61e8      	str	r0, [r5, #28]
 800cd40:	b920      	cbnz	r0, 800cd4c <_Bfree+0x20>
 800cd42:	4b09      	ldr	r3, [pc, #36]	@ (800cd68 <_Bfree+0x3c>)
 800cd44:	4809      	ldr	r0, [pc, #36]	@ (800cd6c <_Bfree+0x40>)
 800cd46:	218f      	movs	r1, #143	@ 0x8f
 800cd48:	f001 feee 	bl	800eb28 <__assert_func>
 800cd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd50:	6006      	str	r6, [r0, #0]
 800cd52:	60c6      	str	r6, [r0, #12]
 800cd54:	b13c      	cbz	r4, 800cd66 <_Bfree+0x3a>
 800cd56:	69eb      	ldr	r3, [r5, #28]
 800cd58:	6862      	ldr	r2, [r4, #4]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd60:	6021      	str	r1, [r4, #0]
 800cd62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	0800f4f6 	.word	0x0800f4f6
 800cd6c:	0800f576 	.word	0x0800f576

0800cd70 <__multadd>:
 800cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd74:	690d      	ldr	r5, [r1, #16]
 800cd76:	4607      	mov	r7, r0
 800cd78:	460c      	mov	r4, r1
 800cd7a:	461e      	mov	r6, r3
 800cd7c:	f101 0c14 	add.w	ip, r1, #20
 800cd80:	2000      	movs	r0, #0
 800cd82:	f8dc 3000 	ldr.w	r3, [ip]
 800cd86:	b299      	uxth	r1, r3
 800cd88:	fb02 6101 	mla	r1, r2, r1, r6
 800cd8c:	0c1e      	lsrs	r6, r3, #16
 800cd8e:	0c0b      	lsrs	r3, r1, #16
 800cd90:	fb02 3306 	mla	r3, r2, r6, r3
 800cd94:	b289      	uxth	r1, r1
 800cd96:	3001      	adds	r0, #1
 800cd98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd9c:	4285      	cmp	r5, r0
 800cd9e:	f84c 1b04 	str.w	r1, [ip], #4
 800cda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cda6:	dcec      	bgt.n	800cd82 <__multadd+0x12>
 800cda8:	b30e      	cbz	r6, 800cdee <__multadd+0x7e>
 800cdaa:	68a3      	ldr	r3, [r4, #8]
 800cdac:	42ab      	cmp	r3, r5
 800cdae:	dc19      	bgt.n	800cde4 <__multadd+0x74>
 800cdb0:	6861      	ldr	r1, [r4, #4]
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	3101      	adds	r1, #1
 800cdb6:	f7ff ff79 	bl	800ccac <_Balloc>
 800cdba:	4680      	mov	r8, r0
 800cdbc:	b928      	cbnz	r0, 800cdca <__multadd+0x5a>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf4 <__multadd+0x84>)
 800cdc2:	480d      	ldr	r0, [pc, #52]	@ (800cdf8 <__multadd+0x88>)
 800cdc4:	21ba      	movs	r1, #186	@ 0xba
 800cdc6:	f001 feaf 	bl	800eb28 <__assert_func>
 800cdca:	6922      	ldr	r2, [r4, #16]
 800cdcc:	3202      	adds	r2, #2
 800cdce:	f104 010c 	add.w	r1, r4, #12
 800cdd2:	0092      	lsls	r2, r2, #2
 800cdd4:	300c      	adds	r0, #12
 800cdd6:	f001 fe8f 	bl	800eaf8 <memcpy>
 800cdda:	4621      	mov	r1, r4
 800cddc:	4638      	mov	r0, r7
 800cdde:	f7ff ffa5 	bl	800cd2c <_Bfree>
 800cde2:	4644      	mov	r4, r8
 800cde4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cde8:	3501      	adds	r5, #1
 800cdea:	615e      	str	r6, [r3, #20]
 800cdec:	6125      	str	r5, [r4, #16]
 800cdee:	4620      	mov	r0, r4
 800cdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf4:	0800f565 	.word	0x0800f565
 800cdf8:	0800f576 	.word	0x0800f576

0800cdfc <__s2b>:
 800cdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce00:	460c      	mov	r4, r1
 800ce02:	4615      	mov	r5, r2
 800ce04:	461f      	mov	r7, r3
 800ce06:	2209      	movs	r2, #9
 800ce08:	3308      	adds	r3, #8
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce10:	2100      	movs	r1, #0
 800ce12:	2201      	movs	r2, #1
 800ce14:	429a      	cmp	r2, r3
 800ce16:	db09      	blt.n	800ce2c <__s2b+0x30>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7ff ff47 	bl	800ccac <_Balloc>
 800ce1e:	b940      	cbnz	r0, 800ce32 <__s2b+0x36>
 800ce20:	4602      	mov	r2, r0
 800ce22:	4b19      	ldr	r3, [pc, #100]	@ (800ce88 <__s2b+0x8c>)
 800ce24:	4819      	ldr	r0, [pc, #100]	@ (800ce8c <__s2b+0x90>)
 800ce26:	21d3      	movs	r1, #211	@ 0xd3
 800ce28:	f001 fe7e 	bl	800eb28 <__assert_func>
 800ce2c:	0052      	lsls	r2, r2, #1
 800ce2e:	3101      	adds	r1, #1
 800ce30:	e7f0      	b.n	800ce14 <__s2b+0x18>
 800ce32:	9b08      	ldr	r3, [sp, #32]
 800ce34:	6143      	str	r3, [r0, #20]
 800ce36:	2d09      	cmp	r5, #9
 800ce38:	f04f 0301 	mov.w	r3, #1
 800ce3c:	6103      	str	r3, [r0, #16]
 800ce3e:	dd16      	ble.n	800ce6e <__s2b+0x72>
 800ce40:	f104 0909 	add.w	r9, r4, #9
 800ce44:	46c8      	mov	r8, r9
 800ce46:	442c      	add	r4, r5
 800ce48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	3b30      	subs	r3, #48	@ 0x30
 800ce50:	220a      	movs	r2, #10
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7ff ff8c 	bl	800cd70 <__multadd>
 800ce58:	45a0      	cmp	r8, r4
 800ce5a:	d1f5      	bne.n	800ce48 <__s2b+0x4c>
 800ce5c:	f1a5 0408 	sub.w	r4, r5, #8
 800ce60:	444c      	add	r4, r9
 800ce62:	1b2d      	subs	r5, r5, r4
 800ce64:	1963      	adds	r3, r4, r5
 800ce66:	42bb      	cmp	r3, r7
 800ce68:	db04      	blt.n	800ce74 <__s2b+0x78>
 800ce6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce6e:	340a      	adds	r4, #10
 800ce70:	2509      	movs	r5, #9
 800ce72:	e7f6      	b.n	800ce62 <__s2b+0x66>
 800ce74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce78:	4601      	mov	r1, r0
 800ce7a:	3b30      	subs	r3, #48	@ 0x30
 800ce7c:	220a      	movs	r2, #10
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f7ff ff76 	bl	800cd70 <__multadd>
 800ce84:	e7ee      	b.n	800ce64 <__s2b+0x68>
 800ce86:	bf00      	nop
 800ce88:	0800f565 	.word	0x0800f565
 800ce8c:	0800f576 	.word	0x0800f576

0800ce90 <__hi0bits>:
 800ce90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce94:	4603      	mov	r3, r0
 800ce96:	bf36      	itet	cc
 800ce98:	0403      	lslcc	r3, r0, #16
 800ce9a:	2000      	movcs	r0, #0
 800ce9c:	2010      	movcc	r0, #16
 800ce9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cea2:	bf3c      	itt	cc
 800cea4:	021b      	lslcc	r3, r3, #8
 800cea6:	3008      	addcc	r0, #8
 800cea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceac:	bf3c      	itt	cc
 800ceae:	011b      	lslcc	r3, r3, #4
 800ceb0:	3004      	addcc	r0, #4
 800ceb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceb6:	bf3c      	itt	cc
 800ceb8:	009b      	lslcc	r3, r3, #2
 800ceba:	3002      	addcc	r0, #2
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	db05      	blt.n	800cecc <__hi0bits+0x3c>
 800cec0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cec4:	f100 0001 	add.w	r0, r0, #1
 800cec8:	bf08      	it	eq
 800ceca:	2020      	moveq	r0, #32
 800cecc:	4770      	bx	lr

0800cece <__lo0bits>:
 800cece:	6803      	ldr	r3, [r0, #0]
 800ced0:	4602      	mov	r2, r0
 800ced2:	f013 0007 	ands.w	r0, r3, #7
 800ced6:	d00b      	beq.n	800cef0 <__lo0bits+0x22>
 800ced8:	07d9      	lsls	r1, r3, #31
 800ceda:	d421      	bmi.n	800cf20 <__lo0bits+0x52>
 800cedc:	0798      	lsls	r0, r3, #30
 800cede:	bf49      	itett	mi
 800cee0:	085b      	lsrmi	r3, r3, #1
 800cee2:	089b      	lsrpl	r3, r3, #2
 800cee4:	2001      	movmi	r0, #1
 800cee6:	6013      	strmi	r3, [r2, #0]
 800cee8:	bf5c      	itt	pl
 800ceea:	6013      	strpl	r3, [r2, #0]
 800ceec:	2002      	movpl	r0, #2
 800ceee:	4770      	bx	lr
 800cef0:	b299      	uxth	r1, r3
 800cef2:	b909      	cbnz	r1, 800cef8 <__lo0bits+0x2a>
 800cef4:	0c1b      	lsrs	r3, r3, #16
 800cef6:	2010      	movs	r0, #16
 800cef8:	b2d9      	uxtb	r1, r3
 800cefa:	b909      	cbnz	r1, 800cf00 <__lo0bits+0x32>
 800cefc:	3008      	adds	r0, #8
 800cefe:	0a1b      	lsrs	r3, r3, #8
 800cf00:	0719      	lsls	r1, r3, #28
 800cf02:	bf04      	itt	eq
 800cf04:	091b      	lsreq	r3, r3, #4
 800cf06:	3004      	addeq	r0, #4
 800cf08:	0799      	lsls	r1, r3, #30
 800cf0a:	bf04      	itt	eq
 800cf0c:	089b      	lsreq	r3, r3, #2
 800cf0e:	3002      	addeq	r0, #2
 800cf10:	07d9      	lsls	r1, r3, #31
 800cf12:	d403      	bmi.n	800cf1c <__lo0bits+0x4e>
 800cf14:	085b      	lsrs	r3, r3, #1
 800cf16:	f100 0001 	add.w	r0, r0, #1
 800cf1a:	d003      	beq.n	800cf24 <__lo0bits+0x56>
 800cf1c:	6013      	str	r3, [r2, #0]
 800cf1e:	4770      	bx	lr
 800cf20:	2000      	movs	r0, #0
 800cf22:	4770      	bx	lr
 800cf24:	2020      	movs	r0, #32
 800cf26:	4770      	bx	lr

0800cf28 <__i2b>:
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	f7ff febd 	bl	800ccac <_Balloc>
 800cf32:	4602      	mov	r2, r0
 800cf34:	b928      	cbnz	r0, 800cf42 <__i2b+0x1a>
 800cf36:	4b05      	ldr	r3, [pc, #20]	@ (800cf4c <__i2b+0x24>)
 800cf38:	4805      	ldr	r0, [pc, #20]	@ (800cf50 <__i2b+0x28>)
 800cf3a:	f240 1145 	movw	r1, #325	@ 0x145
 800cf3e:	f001 fdf3 	bl	800eb28 <__assert_func>
 800cf42:	2301      	movs	r3, #1
 800cf44:	6144      	str	r4, [r0, #20]
 800cf46:	6103      	str	r3, [r0, #16]
 800cf48:	bd10      	pop	{r4, pc}
 800cf4a:	bf00      	nop
 800cf4c:	0800f565 	.word	0x0800f565
 800cf50:	0800f576 	.word	0x0800f576

0800cf54 <__multiply>:
 800cf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	4617      	mov	r7, r2
 800cf5a:	690a      	ldr	r2, [r1, #16]
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	bfa8      	it	ge
 800cf62:	463b      	movge	r3, r7
 800cf64:	4689      	mov	r9, r1
 800cf66:	bfa4      	itt	ge
 800cf68:	460f      	movge	r7, r1
 800cf6a:	4699      	movge	r9, r3
 800cf6c:	693d      	ldr	r5, [r7, #16]
 800cf6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	6879      	ldr	r1, [r7, #4]
 800cf76:	eb05 060a 	add.w	r6, r5, sl
 800cf7a:	42b3      	cmp	r3, r6
 800cf7c:	b085      	sub	sp, #20
 800cf7e:	bfb8      	it	lt
 800cf80:	3101      	addlt	r1, #1
 800cf82:	f7ff fe93 	bl	800ccac <_Balloc>
 800cf86:	b930      	cbnz	r0, 800cf96 <__multiply+0x42>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	4b41      	ldr	r3, [pc, #260]	@ (800d090 <__multiply+0x13c>)
 800cf8c:	4841      	ldr	r0, [pc, #260]	@ (800d094 <__multiply+0x140>)
 800cf8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf92:	f001 fdc9 	bl	800eb28 <__assert_func>
 800cf96:	f100 0414 	add.w	r4, r0, #20
 800cf9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cf9e:	4623      	mov	r3, r4
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	4573      	cmp	r3, lr
 800cfa4:	d320      	bcc.n	800cfe8 <__multiply+0x94>
 800cfa6:	f107 0814 	add.w	r8, r7, #20
 800cfaa:	f109 0114 	add.w	r1, r9, #20
 800cfae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cfb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cfb6:	9302      	str	r3, [sp, #8]
 800cfb8:	1beb      	subs	r3, r5, r7
 800cfba:	3b15      	subs	r3, #21
 800cfbc:	f023 0303 	bic.w	r3, r3, #3
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	3715      	adds	r7, #21
 800cfc4:	42bd      	cmp	r5, r7
 800cfc6:	bf38      	it	cc
 800cfc8:	2304      	movcc	r3, #4
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	9b02      	ldr	r3, [sp, #8]
 800cfce:	9103      	str	r1, [sp, #12]
 800cfd0:	428b      	cmp	r3, r1
 800cfd2:	d80c      	bhi.n	800cfee <__multiply+0x9a>
 800cfd4:	2e00      	cmp	r6, #0
 800cfd6:	dd03      	ble.n	800cfe0 <__multiply+0x8c>
 800cfd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d055      	beq.n	800d08c <__multiply+0x138>
 800cfe0:	6106      	str	r6, [r0, #16]
 800cfe2:	b005      	add	sp, #20
 800cfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe8:	f843 2b04 	str.w	r2, [r3], #4
 800cfec:	e7d9      	b.n	800cfa2 <__multiply+0x4e>
 800cfee:	f8b1 a000 	ldrh.w	sl, [r1]
 800cff2:	f1ba 0f00 	cmp.w	sl, #0
 800cff6:	d01f      	beq.n	800d038 <__multiply+0xe4>
 800cff8:	46c4      	mov	ip, r8
 800cffa:	46a1      	mov	r9, r4
 800cffc:	2700      	movs	r7, #0
 800cffe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d002:	f8d9 3000 	ldr.w	r3, [r9]
 800d006:	fa1f fb82 	uxth.w	fp, r2
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d010:	443b      	add	r3, r7
 800d012:	f8d9 7000 	ldr.w	r7, [r9]
 800d016:	0c12      	lsrs	r2, r2, #16
 800d018:	0c3f      	lsrs	r7, r7, #16
 800d01a:	fb0a 7202 	mla	r2, sl, r2, r7
 800d01e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d022:	b29b      	uxth	r3, r3
 800d024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d028:	4565      	cmp	r5, ip
 800d02a:	f849 3b04 	str.w	r3, [r9], #4
 800d02e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d032:	d8e4      	bhi.n	800cffe <__multiply+0xaa>
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	50e7      	str	r7, [r4, r3]
 800d038:	9b03      	ldr	r3, [sp, #12]
 800d03a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d03e:	3104      	adds	r1, #4
 800d040:	f1b9 0f00 	cmp.w	r9, #0
 800d044:	d020      	beq.n	800d088 <__multiply+0x134>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	4647      	mov	r7, r8
 800d04a:	46a4      	mov	ip, r4
 800d04c:	f04f 0a00 	mov.w	sl, #0
 800d050:	f8b7 b000 	ldrh.w	fp, [r7]
 800d054:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d058:	fb09 220b 	mla	r2, r9, fp, r2
 800d05c:	4452      	add	r2, sl
 800d05e:	b29b      	uxth	r3, r3
 800d060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d064:	f84c 3b04 	str.w	r3, [ip], #4
 800d068:	f857 3b04 	ldr.w	r3, [r7], #4
 800d06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d070:	f8bc 3000 	ldrh.w	r3, [ip]
 800d074:	fb09 330a 	mla	r3, r9, sl, r3
 800d078:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d07c:	42bd      	cmp	r5, r7
 800d07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d082:	d8e5      	bhi.n	800d050 <__multiply+0xfc>
 800d084:	9a01      	ldr	r2, [sp, #4]
 800d086:	50a3      	str	r3, [r4, r2]
 800d088:	3404      	adds	r4, #4
 800d08a:	e79f      	b.n	800cfcc <__multiply+0x78>
 800d08c:	3e01      	subs	r6, #1
 800d08e:	e7a1      	b.n	800cfd4 <__multiply+0x80>
 800d090:	0800f565 	.word	0x0800f565
 800d094:	0800f576 	.word	0x0800f576

0800d098 <__pow5mult>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	4615      	mov	r5, r2
 800d09e:	f012 0203 	ands.w	r2, r2, #3
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	d007      	beq.n	800d0b8 <__pow5mult+0x20>
 800d0a8:	4c25      	ldr	r4, [pc, #148]	@ (800d140 <__pow5mult+0xa8>)
 800d0aa:	3a01      	subs	r2, #1
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d0b2:	f7ff fe5d 	bl	800cd70 <__multadd>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	10ad      	asrs	r5, r5, #2
 800d0ba:	d03d      	beq.n	800d138 <__pow5mult+0xa0>
 800d0bc:	69fc      	ldr	r4, [r7, #28]
 800d0be:	b97c      	cbnz	r4, 800d0e0 <__pow5mult+0x48>
 800d0c0:	2010      	movs	r0, #16
 800d0c2:	f7fd fd6d 	bl	800aba0 <malloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	61f8      	str	r0, [r7, #28]
 800d0ca:	b928      	cbnz	r0, 800d0d8 <__pow5mult+0x40>
 800d0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d144 <__pow5mult+0xac>)
 800d0ce:	481e      	ldr	r0, [pc, #120]	@ (800d148 <__pow5mult+0xb0>)
 800d0d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0d4:	f001 fd28 	bl	800eb28 <__assert_func>
 800d0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0dc:	6004      	str	r4, [r0, #0]
 800d0de:	60c4      	str	r4, [r0, #12]
 800d0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0e8:	b94c      	cbnz	r4, 800d0fe <__pow5mult+0x66>
 800d0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	f7ff ff1a 	bl	800cf28 <__i2b>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	6003      	str	r3, [r0, #0]
 800d0fe:	f04f 0900 	mov.w	r9, #0
 800d102:	07eb      	lsls	r3, r5, #31
 800d104:	d50a      	bpl.n	800d11c <__pow5mult+0x84>
 800d106:	4631      	mov	r1, r6
 800d108:	4622      	mov	r2, r4
 800d10a:	4638      	mov	r0, r7
 800d10c:	f7ff ff22 	bl	800cf54 <__multiply>
 800d110:	4631      	mov	r1, r6
 800d112:	4680      	mov	r8, r0
 800d114:	4638      	mov	r0, r7
 800d116:	f7ff fe09 	bl	800cd2c <_Bfree>
 800d11a:	4646      	mov	r6, r8
 800d11c:	106d      	asrs	r5, r5, #1
 800d11e:	d00b      	beq.n	800d138 <__pow5mult+0xa0>
 800d120:	6820      	ldr	r0, [r4, #0]
 800d122:	b938      	cbnz	r0, 800d134 <__pow5mult+0x9c>
 800d124:	4622      	mov	r2, r4
 800d126:	4621      	mov	r1, r4
 800d128:	4638      	mov	r0, r7
 800d12a:	f7ff ff13 	bl	800cf54 <__multiply>
 800d12e:	6020      	str	r0, [r4, #0]
 800d130:	f8c0 9000 	str.w	r9, [r0]
 800d134:	4604      	mov	r4, r0
 800d136:	e7e4      	b.n	800d102 <__pow5mult+0x6a>
 800d138:	4630      	mov	r0, r6
 800d13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d13e:	bf00      	nop
 800d140:	0800f688 	.word	0x0800f688
 800d144:	0800f4f6 	.word	0x0800f4f6
 800d148:	0800f576 	.word	0x0800f576

0800d14c <__lshift>:
 800d14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d150:	460c      	mov	r4, r1
 800d152:	6849      	ldr	r1, [r1, #4]
 800d154:	6923      	ldr	r3, [r4, #16]
 800d156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d15a:	68a3      	ldr	r3, [r4, #8]
 800d15c:	4607      	mov	r7, r0
 800d15e:	4691      	mov	r9, r2
 800d160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d164:	f108 0601 	add.w	r6, r8, #1
 800d168:	42b3      	cmp	r3, r6
 800d16a:	db0b      	blt.n	800d184 <__lshift+0x38>
 800d16c:	4638      	mov	r0, r7
 800d16e:	f7ff fd9d 	bl	800ccac <_Balloc>
 800d172:	4605      	mov	r5, r0
 800d174:	b948      	cbnz	r0, 800d18a <__lshift+0x3e>
 800d176:	4602      	mov	r2, r0
 800d178:	4b28      	ldr	r3, [pc, #160]	@ (800d21c <__lshift+0xd0>)
 800d17a:	4829      	ldr	r0, [pc, #164]	@ (800d220 <__lshift+0xd4>)
 800d17c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d180:	f001 fcd2 	bl	800eb28 <__assert_func>
 800d184:	3101      	adds	r1, #1
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	e7ee      	b.n	800d168 <__lshift+0x1c>
 800d18a:	2300      	movs	r3, #0
 800d18c:	f100 0114 	add.w	r1, r0, #20
 800d190:	f100 0210 	add.w	r2, r0, #16
 800d194:	4618      	mov	r0, r3
 800d196:	4553      	cmp	r3, sl
 800d198:	db33      	blt.n	800d202 <__lshift+0xb6>
 800d19a:	6920      	ldr	r0, [r4, #16]
 800d19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d1a0:	f104 0314 	add.w	r3, r4, #20
 800d1a4:	f019 091f 	ands.w	r9, r9, #31
 800d1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d1b0:	d02b      	beq.n	800d20a <__lshift+0xbe>
 800d1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800d1b6:	468a      	mov	sl, r1
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	6818      	ldr	r0, [r3, #0]
 800d1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d1c0:	4310      	orrs	r0, r2
 800d1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800d1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ca:	459c      	cmp	ip, r3
 800d1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1d0:	d8f3      	bhi.n	800d1ba <__lshift+0x6e>
 800d1d2:	ebac 0304 	sub.w	r3, ip, r4
 800d1d6:	3b15      	subs	r3, #21
 800d1d8:	f023 0303 	bic.w	r3, r3, #3
 800d1dc:	3304      	adds	r3, #4
 800d1de:	f104 0015 	add.w	r0, r4, #21
 800d1e2:	4560      	cmp	r0, ip
 800d1e4:	bf88      	it	hi
 800d1e6:	2304      	movhi	r3, #4
 800d1e8:	50ca      	str	r2, [r1, r3]
 800d1ea:	b10a      	cbz	r2, 800d1f0 <__lshift+0xa4>
 800d1ec:	f108 0602 	add.w	r6, r8, #2
 800d1f0:	3e01      	subs	r6, #1
 800d1f2:	4638      	mov	r0, r7
 800d1f4:	612e      	str	r6, [r5, #16]
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	f7ff fd98 	bl	800cd2c <_Bfree>
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d202:	f842 0f04 	str.w	r0, [r2, #4]!
 800d206:	3301      	adds	r3, #1
 800d208:	e7c5      	b.n	800d196 <__lshift+0x4a>
 800d20a:	3904      	subs	r1, #4
 800d20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d210:	f841 2f04 	str.w	r2, [r1, #4]!
 800d214:	459c      	cmp	ip, r3
 800d216:	d8f9      	bhi.n	800d20c <__lshift+0xc0>
 800d218:	e7ea      	b.n	800d1f0 <__lshift+0xa4>
 800d21a:	bf00      	nop
 800d21c:	0800f565 	.word	0x0800f565
 800d220:	0800f576 	.word	0x0800f576

0800d224 <__mcmp>:
 800d224:	690a      	ldr	r2, [r1, #16]
 800d226:	4603      	mov	r3, r0
 800d228:	6900      	ldr	r0, [r0, #16]
 800d22a:	1a80      	subs	r0, r0, r2
 800d22c:	b530      	push	{r4, r5, lr}
 800d22e:	d10e      	bne.n	800d24e <__mcmp+0x2a>
 800d230:	3314      	adds	r3, #20
 800d232:	3114      	adds	r1, #20
 800d234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d244:	4295      	cmp	r5, r2
 800d246:	d003      	beq.n	800d250 <__mcmp+0x2c>
 800d248:	d205      	bcs.n	800d256 <__mcmp+0x32>
 800d24a:	f04f 30ff 	mov.w	r0, #4294967295
 800d24e:	bd30      	pop	{r4, r5, pc}
 800d250:	42a3      	cmp	r3, r4
 800d252:	d3f3      	bcc.n	800d23c <__mcmp+0x18>
 800d254:	e7fb      	b.n	800d24e <__mcmp+0x2a>
 800d256:	2001      	movs	r0, #1
 800d258:	e7f9      	b.n	800d24e <__mcmp+0x2a>
	...

0800d25c <__mdiff>:
 800d25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4689      	mov	r9, r1
 800d262:	4606      	mov	r6, r0
 800d264:	4611      	mov	r1, r2
 800d266:	4648      	mov	r0, r9
 800d268:	4614      	mov	r4, r2
 800d26a:	f7ff ffdb 	bl	800d224 <__mcmp>
 800d26e:	1e05      	subs	r5, r0, #0
 800d270:	d112      	bne.n	800d298 <__mdiff+0x3c>
 800d272:	4629      	mov	r1, r5
 800d274:	4630      	mov	r0, r6
 800d276:	f7ff fd19 	bl	800ccac <_Balloc>
 800d27a:	4602      	mov	r2, r0
 800d27c:	b928      	cbnz	r0, 800d28a <__mdiff+0x2e>
 800d27e:	4b3f      	ldr	r3, [pc, #252]	@ (800d37c <__mdiff+0x120>)
 800d280:	f240 2137 	movw	r1, #567	@ 0x237
 800d284:	483e      	ldr	r0, [pc, #248]	@ (800d380 <__mdiff+0x124>)
 800d286:	f001 fc4f 	bl	800eb28 <__assert_func>
 800d28a:	2301      	movs	r3, #1
 800d28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d290:	4610      	mov	r0, r2
 800d292:	b003      	add	sp, #12
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	bfbc      	itt	lt
 800d29a:	464b      	movlt	r3, r9
 800d29c:	46a1      	movlt	r9, r4
 800d29e:	4630      	mov	r0, r6
 800d2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d2a4:	bfba      	itte	lt
 800d2a6:	461c      	movlt	r4, r3
 800d2a8:	2501      	movlt	r5, #1
 800d2aa:	2500      	movge	r5, #0
 800d2ac:	f7ff fcfe 	bl	800ccac <_Balloc>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	b918      	cbnz	r0, 800d2bc <__mdiff+0x60>
 800d2b4:	4b31      	ldr	r3, [pc, #196]	@ (800d37c <__mdiff+0x120>)
 800d2b6:	f240 2145 	movw	r1, #581	@ 0x245
 800d2ba:	e7e3      	b.n	800d284 <__mdiff+0x28>
 800d2bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d2c0:	6926      	ldr	r6, [r4, #16]
 800d2c2:	60c5      	str	r5, [r0, #12]
 800d2c4:	f109 0310 	add.w	r3, r9, #16
 800d2c8:	f109 0514 	add.w	r5, r9, #20
 800d2cc:	f104 0e14 	add.w	lr, r4, #20
 800d2d0:	f100 0b14 	add.w	fp, r0, #20
 800d2d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	46d9      	mov	r9, fp
 800d2e0:	f04f 0c00 	mov.w	ip, #0
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	fa1f f38a 	uxth.w	r3, sl
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	b283      	uxth	r3, r0
 800d2f8:	1acb      	subs	r3, r1, r3
 800d2fa:	0c00      	lsrs	r0, r0, #16
 800d2fc:	4463      	add	r3, ip
 800d2fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d306:	b29b      	uxth	r3, r3
 800d308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d30c:	4576      	cmp	r6, lr
 800d30e:	f849 3b04 	str.w	r3, [r9], #4
 800d312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d316:	d8e5      	bhi.n	800d2e4 <__mdiff+0x88>
 800d318:	1b33      	subs	r3, r6, r4
 800d31a:	3b15      	subs	r3, #21
 800d31c:	f023 0303 	bic.w	r3, r3, #3
 800d320:	3415      	adds	r4, #21
 800d322:	3304      	adds	r3, #4
 800d324:	42a6      	cmp	r6, r4
 800d326:	bf38      	it	cc
 800d328:	2304      	movcc	r3, #4
 800d32a:	441d      	add	r5, r3
 800d32c:	445b      	add	r3, fp
 800d32e:	461e      	mov	r6, r3
 800d330:	462c      	mov	r4, r5
 800d332:	4544      	cmp	r4, r8
 800d334:	d30e      	bcc.n	800d354 <__mdiff+0xf8>
 800d336:	f108 0103 	add.w	r1, r8, #3
 800d33a:	1b49      	subs	r1, r1, r5
 800d33c:	f021 0103 	bic.w	r1, r1, #3
 800d340:	3d03      	subs	r5, #3
 800d342:	45a8      	cmp	r8, r5
 800d344:	bf38      	it	cc
 800d346:	2100      	movcc	r1, #0
 800d348:	440b      	add	r3, r1
 800d34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d34e:	b191      	cbz	r1, 800d376 <__mdiff+0x11a>
 800d350:	6117      	str	r7, [r2, #16]
 800d352:	e79d      	b.n	800d290 <__mdiff+0x34>
 800d354:	f854 1b04 	ldr.w	r1, [r4], #4
 800d358:	46e6      	mov	lr, ip
 800d35a:	0c08      	lsrs	r0, r1, #16
 800d35c:	fa1c fc81 	uxtah	ip, ip, r1
 800d360:	4471      	add	r1, lr
 800d362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d366:	b289      	uxth	r1, r1
 800d368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d36c:	f846 1b04 	str.w	r1, [r6], #4
 800d370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d374:	e7dd      	b.n	800d332 <__mdiff+0xd6>
 800d376:	3f01      	subs	r7, #1
 800d378:	e7e7      	b.n	800d34a <__mdiff+0xee>
 800d37a:	bf00      	nop
 800d37c:	0800f565 	.word	0x0800f565
 800d380:	0800f576 	.word	0x0800f576

0800d384 <__ulp>:
 800d384:	b082      	sub	sp, #8
 800d386:	ed8d 0b00 	vstr	d0, [sp]
 800d38a:	9a01      	ldr	r2, [sp, #4]
 800d38c:	4b0f      	ldr	r3, [pc, #60]	@ (800d3cc <__ulp+0x48>)
 800d38e:	4013      	ands	r3, r2
 800d390:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d394:	2b00      	cmp	r3, #0
 800d396:	dc08      	bgt.n	800d3aa <__ulp+0x26>
 800d398:	425b      	negs	r3, r3
 800d39a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d39e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d3a2:	da04      	bge.n	800d3ae <__ulp+0x2a>
 800d3a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d3a8:	4113      	asrs	r3, r2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	e008      	b.n	800d3c0 <__ulp+0x3c>
 800d3ae:	f1a2 0314 	sub.w	r3, r2, #20
 800d3b2:	2b1e      	cmp	r3, #30
 800d3b4:	bfda      	itte	le
 800d3b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d3ba:	40da      	lsrle	r2, r3
 800d3bc:	2201      	movgt	r2, #1
 800d3be:	2300      	movs	r3, #0
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	ec41 0b10 	vmov	d0, r0, r1
 800d3c8:	b002      	add	sp, #8
 800d3ca:	4770      	bx	lr
 800d3cc:	7ff00000 	.word	0x7ff00000

0800d3d0 <__b2d>:
 800d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	6906      	ldr	r6, [r0, #16]
 800d3d6:	f100 0814 	add.w	r8, r0, #20
 800d3da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d3de:	1f37      	subs	r7, r6, #4
 800d3e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	f7ff fd53 	bl	800ce90 <__hi0bits>
 800d3ea:	f1c0 0320 	rsb	r3, r0, #32
 800d3ee:	280a      	cmp	r0, #10
 800d3f0:	600b      	str	r3, [r1, #0]
 800d3f2:	491b      	ldr	r1, [pc, #108]	@ (800d460 <__b2d+0x90>)
 800d3f4:	dc15      	bgt.n	800d422 <__b2d+0x52>
 800d3f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800d3fe:	45b8      	cmp	r8, r7
 800d400:	ea43 0501 	orr.w	r5, r3, r1
 800d404:	bf34      	ite	cc
 800d406:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d40a:	2300      	movcs	r3, #0
 800d40c:	3015      	adds	r0, #21
 800d40e:	fa02 f000 	lsl.w	r0, r2, r0
 800d412:	fa23 f30c 	lsr.w	r3, r3, ip
 800d416:	4303      	orrs	r3, r0
 800d418:	461c      	mov	r4, r3
 800d41a:	ec45 4b10 	vmov	d0, r4, r5
 800d41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d422:	45b8      	cmp	r8, r7
 800d424:	bf3a      	itte	cc
 800d426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d42a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d42e:	2300      	movcs	r3, #0
 800d430:	380b      	subs	r0, #11
 800d432:	d012      	beq.n	800d45a <__b2d+0x8a>
 800d434:	f1c0 0120 	rsb	r1, r0, #32
 800d438:	fa23 f401 	lsr.w	r4, r3, r1
 800d43c:	4082      	lsls	r2, r0
 800d43e:	4322      	orrs	r2, r4
 800d440:	4547      	cmp	r7, r8
 800d442:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d446:	bf8c      	ite	hi
 800d448:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d44c:	2200      	movls	r2, #0
 800d44e:	4083      	lsls	r3, r0
 800d450:	40ca      	lsrs	r2, r1
 800d452:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d456:	4313      	orrs	r3, r2
 800d458:	e7de      	b.n	800d418 <__b2d+0x48>
 800d45a:	ea42 0501 	orr.w	r5, r2, r1
 800d45e:	e7db      	b.n	800d418 <__b2d+0x48>
 800d460:	3ff00000 	.word	0x3ff00000

0800d464 <__d2b>:
 800d464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d468:	460f      	mov	r7, r1
 800d46a:	2101      	movs	r1, #1
 800d46c:	ec59 8b10 	vmov	r8, r9, d0
 800d470:	4616      	mov	r6, r2
 800d472:	f7ff fc1b 	bl	800ccac <_Balloc>
 800d476:	4604      	mov	r4, r0
 800d478:	b930      	cbnz	r0, 800d488 <__d2b+0x24>
 800d47a:	4602      	mov	r2, r0
 800d47c:	4b23      	ldr	r3, [pc, #140]	@ (800d50c <__d2b+0xa8>)
 800d47e:	4824      	ldr	r0, [pc, #144]	@ (800d510 <__d2b+0xac>)
 800d480:	f240 310f 	movw	r1, #783	@ 0x30f
 800d484:	f001 fb50 	bl	800eb28 <__assert_func>
 800d488:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d48c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d490:	b10d      	cbz	r5, 800d496 <__d2b+0x32>
 800d492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d496:	9301      	str	r3, [sp, #4]
 800d498:	f1b8 0300 	subs.w	r3, r8, #0
 800d49c:	d023      	beq.n	800d4e6 <__d2b+0x82>
 800d49e:	4668      	mov	r0, sp
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	f7ff fd14 	bl	800cece <__lo0bits>
 800d4a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4aa:	b1d0      	cbz	r0, 800d4e2 <__d2b+0x7e>
 800d4ac:	f1c0 0320 	rsb	r3, r0, #32
 800d4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b4:	430b      	orrs	r3, r1
 800d4b6:	40c2      	lsrs	r2, r0
 800d4b8:	6163      	str	r3, [r4, #20]
 800d4ba:	9201      	str	r2, [sp, #4]
 800d4bc:	9b01      	ldr	r3, [sp, #4]
 800d4be:	61a3      	str	r3, [r4, #24]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	bf0c      	ite	eq
 800d4c4:	2201      	moveq	r2, #1
 800d4c6:	2202      	movne	r2, #2
 800d4c8:	6122      	str	r2, [r4, #16]
 800d4ca:	b1a5      	cbz	r5, 800d4f6 <__d2b+0x92>
 800d4cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4d0:	4405      	add	r5, r0
 800d4d2:	603d      	str	r5, [r7, #0]
 800d4d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4d8:	6030      	str	r0, [r6, #0]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	b003      	add	sp, #12
 800d4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4e2:	6161      	str	r1, [r4, #20]
 800d4e4:	e7ea      	b.n	800d4bc <__d2b+0x58>
 800d4e6:	a801      	add	r0, sp, #4
 800d4e8:	f7ff fcf1 	bl	800cece <__lo0bits>
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	6163      	str	r3, [r4, #20]
 800d4f0:	3020      	adds	r0, #32
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	e7e8      	b.n	800d4c8 <__d2b+0x64>
 800d4f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4fe:	6038      	str	r0, [r7, #0]
 800d500:	6918      	ldr	r0, [r3, #16]
 800d502:	f7ff fcc5 	bl	800ce90 <__hi0bits>
 800d506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d50a:	e7e5      	b.n	800d4d8 <__d2b+0x74>
 800d50c:	0800f565 	.word	0x0800f565
 800d510:	0800f576 	.word	0x0800f576

0800d514 <__ratio>:
 800d514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d518:	b085      	sub	sp, #20
 800d51a:	e9cd 1000 	strd	r1, r0, [sp]
 800d51e:	a902      	add	r1, sp, #8
 800d520:	f7ff ff56 	bl	800d3d0 <__b2d>
 800d524:	9800      	ldr	r0, [sp, #0]
 800d526:	a903      	add	r1, sp, #12
 800d528:	ec55 4b10 	vmov	r4, r5, d0
 800d52c:	f7ff ff50 	bl	800d3d0 <__b2d>
 800d530:	9b01      	ldr	r3, [sp, #4]
 800d532:	6919      	ldr	r1, [r3, #16]
 800d534:	9b00      	ldr	r3, [sp, #0]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	1ac9      	subs	r1, r1, r3
 800d53a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d53e:	1a9b      	subs	r3, r3, r2
 800d540:	ec5b ab10 	vmov	sl, fp, d0
 800d544:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d548:	2b00      	cmp	r3, #0
 800d54a:	bfce      	itee	gt
 800d54c:	462a      	movgt	r2, r5
 800d54e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d552:	465a      	movle	r2, fp
 800d554:	462f      	mov	r7, r5
 800d556:	46d9      	mov	r9, fp
 800d558:	bfcc      	ite	gt
 800d55a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d55e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d562:	464b      	mov	r3, r9
 800d564:	4652      	mov	r2, sl
 800d566:	4620      	mov	r0, r4
 800d568:	4639      	mov	r1, r7
 800d56a:	f7f3 f96f 	bl	800084c <__aeabi_ddiv>
 800d56e:	ec41 0b10 	vmov	d0, r0, r1
 800d572:	b005      	add	sp, #20
 800d574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d578 <__copybits>:
 800d578:	3901      	subs	r1, #1
 800d57a:	b570      	push	{r4, r5, r6, lr}
 800d57c:	1149      	asrs	r1, r1, #5
 800d57e:	6914      	ldr	r4, [r2, #16]
 800d580:	3101      	adds	r1, #1
 800d582:	f102 0314 	add.w	r3, r2, #20
 800d586:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d58a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d58e:	1f05      	subs	r5, r0, #4
 800d590:	42a3      	cmp	r3, r4
 800d592:	d30c      	bcc.n	800d5ae <__copybits+0x36>
 800d594:	1aa3      	subs	r3, r4, r2
 800d596:	3b11      	subs	r3, #17
 800d598:	f023 0303 	bic.w	r3, r3, #3
 800d59c:	3211      	adds	r2, #17
 800d59e:	42a2      	cmp	r2, r4
 800d5a0:	bf88      	it	hi
 800d5a2:	2300      	movhi	r3, #0
 800d5a4:	4418      	add	r0, r3
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	4288      	cmp	r0, r1
 800d5aa:	d305      	bcc.n	800d5b8 <__copybits+0x40>
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}
 800d5ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800d5b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800d5b6:	e7eb      	b.n	800d590 <__copybits+0x18>
 800d5b8:	f840 3b04 	str.w	r3, [r0], #4
 800d5bc:	e7f4      	b.n	800d5a8 <__copybits+0x30>

0800d5be <__any_on>:
 800d5be:	f100 0214 	add.w	r2, r0, #20
 800d5c2:	6900      	ldr	r0, [r0, #16]
 800d5c4:	114b      	asrs	r3, r1, #5
 800d5c6:	4298      	cmp	r0, r3
 800d5c8:	b510      	push	{r4, lr}
 800d5ca:	db11      	blt.n	800d5f0 <__any_on+0x32>
 800d5cc:	dd0a      	ble.n	800d5e4 <__any_on+0x26>
 800d5ce:	f011 011f 	ands.w	r1, r1, #31
 800d5d2:	d007      	beq.n	800d5e4 <__any_on+0x26>
 800d5d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5d8:	fa24 f001 	lsr.w	r0, r4, r1
 800d5dc:	fa00 f101 	lsl.w	r1, r0, r1
 800d5e0:	428c      	cmp	r4, r1
 800d5e2:	d10b      	bne.n	800d5fc <__any_on+0x3e>
 800d5e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d803      	bhi.n	800d5f4 <__any_on+0x36>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	bd10      	pop	{r4, pc}
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	e7f7      	b.n	800d5e4 <__any_on+0x26>
 800d5f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5f8:	2900      	cmp	r1, #0
 800d5fa:	d0f5      	beq.n	800d5e8 <__any_on+0x2a>
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	e7f6      	b.n	800d5ee <__any_on+0x30>

0800d600 <sulp>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	4604      	mov	r4, r0
 800d604:	460d      	mov	r5, r1
 800d606:	ec45 4b10 	vmov	d0, r4, r5
 800d60a:	4616      	mov	r6, r2
 800d60c:	f7ff feba 	bl	800d384 <__ulp>
 800d610:	ec51 0b10 	vmov	r0, r1, d0
 800d614:	b17e      	cbz	r6, 800d636 <sulp+0x36>
 800d616:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d61a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d61e:	2b00      	cmp	r3, #0
 800d620:	dd09      	ble.n	800d636 <sulp+0x36>
 800d622:	051b      	lsls	r3, r3, #20
 800d624:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d628:	2400      	movs	r4, #0
 800d62a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d62e:	4622      	mov	r2, r4
 800d630:	462b      	mov	r3, r5
 800d632:	f7f2 ffe1 	bl	80005f8 <__aeabi_dmul>
 800d636:	ec41 0b10 	vmov	d0, r0, r1
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	0000      	movs	r0, r0
	...

0800d640 <_strtod_l>:
 800d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	b09f      	sub	sp, #124	@ 0x7c
 800d646:	460c      	mov	r4, r1
 800d648:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d64a:	2200      	movs	r2, #0
 800d64c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d64e:	9005      	str	r0, [sp, #20]
 800d650:	f04f 0a00 	mov.w	sl, #0
 800d654:	f04f 0b00 	mov.w	fp, #0
 800d658:	460a      	mov	r2, r1
 800d65a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d65c:	7811      	ldrb	r1, [r2, #0]
 800d65e:	292b      	cmp	r1, #43	@ 0x2b
 800d660:	d04a      	beq.n	800d6f8 <_strtod_l+0xb8>
 800d662:	d838      	bhi.n	800d6d6 <_strtod_l+0x96>
 800d664:	290d      	cmp	r1, #13
 800d666:	d832      	bhi.n	800d6ce <_strtod_l+0x8e>
 800d668:	2908      	cmp	r1, #8
 800d66a:	d832      	bhi.n	800d6d2 <_strtod_l+0x92>
 800d66c:	2900      	cmp	r1, #0
 800d66e:	d03b      	beq.n	800d6e8 <_strtod_l+0xa8>
 800d670:	2200      	movs	r2, #0
 800d672:	920e      	str	r2, [sp, #56]	@ 0x38
 800d674:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d676:	782a      	ldrb	r2, [r5, #0]
 800d678:	2a30      	cmp	r2, #48	@ 0x30
 800d67a:	f040 80b2 	bne.w	800d7e2 <_strtod_l+0x1a2>
 800d67e:	786a      	ldrb	r2, [r5, #1]
 800d680:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d684:	2a58      	cmp	r2, #88	@ 0x58
 800d686:	d16e      	bne.n	800d766 <_strtod_l+0x126>
 800d688:	9302      	str	r3, [sp, #8]
 800d68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	4a8f      	ldr	r2, [pc, #572]	@ (800d8d0 <_strtod_l+0x290>)
 800d694:	9805      	ldr	r0, [sp, #20]
 800d696:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d698:	a919      	add	r1, sp, #100	@ 0x64
 800d69a:	f001 fadf 	bl	800ec5c <__gethex>
 800d69e:	f010 060f 	ands.w	r6, r0, #15
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	d005      	beq.n	800d6b2 <_strtod_l+0x72>
 800d6a6:	2e06      	cmp	r6, #6
 800d6a8:	d128      	bne.n	800d6fc <_strtod_l+0xbc>
 800d6aa:	3501      	adds	r5, #1
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800d6b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d6b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f040 858e 	bne.w	800e1d6 <_strtod_l+0xb96>
 800d6ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6bc:	b1cb      	cbz	r3, 800d6f2 <_strtod_l+0xb2>
 800d6be:	4652      	mov	r2, sl
 800d6c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d6c4:	ec43 2b10 	vmov	d0, r2, r3
 800d6c8:	b01f      	add	sp, #124	@ 0x7c
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ce:	2920      	cmp	r1, #32
 800d6d0:	d1ce      	bne.n	800d670 <_strtod_l+0x30>
 800d6d2:	3201      	adds	r2, #1
 800d6d4:	e7c1      	b.n	800d65a <_strtod_l+0x1a>
 800d6d6:	292d      	cmp	r1, #45	@ 0x2d
 800d6d8:	d1ca      	bne.n	800d670 <_strtod_l+0x30>
 800d6da:	2101      	movs	r1, #1
 800d6dc:	910e      	str	r1, [sp, #56]	@ 0x38
 800d6de:	1c51      	adds	r1, r2, #1
 800d6e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d6e2:	7852      	ldrb	r2, [r2, #1]
 800d6e4:	2a00      	cmp	r2, #0
 800d6e6:	d1c5      	bne.n	800d674 <_strtod_l+0x34>
 800d6e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f040 8570 	bne.w	800e1d2 <_strtod_l+0xb92>
 800d6f2:	4652      	mov	r2, sl
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	e7e5      	b.n	800d6c4 <_strtod_l+0x84>
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	e7ef      	b.n	800d6dc <_strtod_l+0x9c>
 800d6fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d6fe:	b13a      	cbz	r2, 800d710 <_strtod_l+0xd0>
 800d700:	2135      	movs	r1, #53	@ 0x35
 800d702:	a81c      	add	r0, sp, #112	@ 0x70
 800d704:	f7ff ff38 	bl	800d578 <__copybits>
 800d708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d70a:	9805      	ldr	r0, [sp, #20]
 800d70c:	f7ff fb0e 	bl	800cd2c <_Bfree>
 800d710:	3e01      	subs	r6, #1
 800d712:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d714:	2e04      	cmp	r6, #4
 800d716:	d806      	bhi.n	800d726 <_strtod_l+0xe6>
 800d718:	e8df f006 	tbb	[pc, r6]
 800d71c:	201d0314 	.word	0x201d0314
 800d720:	14          	.byte	0x14
 800d721:	00          	.byte	0x00
 800d722:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d726:	05e1      	lsls	r1, r4, #23
 800d728:	bf48      	it	mi
 800d72a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d72e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d732:	0d1b      	lsrs	r3, r3, #20
 800d734:	051b      	lsls	r3, r3, #20
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1bb      	bne.n	800d6b2 <_strtod_l+0x72>
 800d73a:	f7fe fbe1 	bl	800bf00 <__errno>
 800d73e:	2322      	movs	r3, #34	@ 0x22
 800d740:	6003      	str	r3, [r0, #0]
 800d742:	e7b6      	b.n	800d6b2 <_strtod_l+0x72>
 800d744:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d748:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d74c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d750:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d754:	e7e7      	b.n	800d726 <_strtod_l+0xe6>
 800d756:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d8d8 <_strtod_l+0x298>
 800d75a:	e7e4      	b.n	800d726 <_strtod_l+0xe6>
 800d75c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d760:	f04f 3aff 	mov.w	sl, #4294967295
 800d764:	e7df      	b.n	800d726 <_strtod_l+0xe6>
 800d766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d768:	1c5a      	adds	r2, r3, #1
 800d76a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d76c:	785b      	ldrb	r3, [r3, #1]
 800d76e:	2b30      	cmp	r3, #48	@ 0x30
 800d770:	d0f9      	beq.n	800d766 <_strtod_l+0x126>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d09d      	beq.n	800d6b2 <_strtod_l+0x72>
 800d776:	2301      	movs	r3, #1
 800d778:	2700      	movs	r7, #0
 800d77a:	9308      	str	r3, [sp, #32]
 800d77c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d77e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d780:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d782:	46b9      	mov	r9, r7
 800d784:	220a      	movs	r2, #10
 800d786:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d788:	7805      	ldrb	r5, [r0, #0]
 800d78a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d78e:	b2d9      	uxtb	r1, r3
 800d790:	2909      	cmp	r1, #9
 800d792:	d928      	bls.n	800d7e6 <_strtod_l+0x1a6>
 800d794:	494f      	ldr	r1, [pc, #316]	@ (800d8d4 <_strtod_l+0x294>)
 800d796:	2201      	movs	r2, #1
 800d798:	f001 f97a 	bl	800ea90 <strncmp>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d032      	beq.n	800d806 <_strtod_l+0x1c6>
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d7a6:	464d      	mov	r5, r9
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2a65      	cmp	r2, #101	@ 0x65
 800d7ac:	d001      	beq.n	800d7b2 <_strtod_l+0x172>
 800d7ae:	2a45      	cmp	r2, #69	@ 0x45
 800d7b0:	d114      	bne.n	800d7dc <_strtod_l+0x19c>
 800d7b2:	b91d      	cbnz	r5, 800d7bc <_strtod_l+0x17c>
 800d7b4:	9a08      	ldr	r2, [sp, #32]
 800d7b6:	4302      	orrs	r2, r0
 800d7b8:	d096      	beq.n	800d6e8 <_strtod_l+0xa8>
 800d7ba:	2500      	movs	r5, #0
 800d7bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d7be:	1c62      	adds	r2, r4, #1
 800d7c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d7c2:	7862      	ldrb	r2, [r4, #1]
 800d7c4:	2a2b      	cmp	r2, #43	@ 0x2b
 800d7c6:	d07a      	beq.n	800d8be <_strtod_l+0x27e>
 800d7c8:	2a2d      	cmp	r2, #45	@ 0x2d
 800d7ca:	d07e      	beq.n	800d8ca <_strtod_l+0x28a>
 800d7cc:	f04f 0c00 	mov.w	ip, #0
 800d7d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d7d4:	2909      	cmp	r1, #9
 800d7d6:	f240 8085 	bls.w	800d8e4 <_strtod_l+0x2a4>
 800d7da:	9419      	str	r4, [sp, #100]	@ 0x64
 800d7dc:	f04f 0800 	mov.w	r8, #0
 800d7e0:	e0a5      	b.n	800d92e <_strtod_l+0x2ee>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	e7c8      	b.n	800d778 <_strtod_l+0x138>
 800d7e6:	f1b9 0f08 	cmp.w	r9, #8
 800d7ea:	bfd8      	it	le
 800d7ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d7ee:	f100 0001 	add.w	r0, r0, #1
 800d7f2:	bfda      	itte	le
 800d7f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d7f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d7fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d7fe:	f109 0901 	add.w	r9, r9, #1
 800d802:	9019      	str	r0, [sp, #100]	@ 0x64
 800d804:	e7bf      	b.n	800d786 <_strtod_l+0x146>
 800d806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d80c:	785a      	ldrb	r2, [r3, #1]
 800d80e:	f1b9 0f00 	cmp.w	r9, #0
 800d812:	d03b      	beq.n	800d88c <_strtod_l+0x24c>
 800d814:	900a      	str	r0, [sp, #40]	@ 0x28
 800d816:	464d      	mov	r5, r9
 800d818:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d81c:	2b09      	cmp	r3, #9
 800d81e:	d912      	bls.n	800d846 <_strtod_l+0x206>
 800d820:	2301      	movs	r3, #1
 800d822:	e7c2      	b.n	800d7aa <_strtod_l+0x16a>
 800d824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	9219      	str	r2, [sp, #100]	@ 0x64
 800d82a:	785a      	ldrb	r2, [r3, #1]
 800d82c:	3001      	adds	r0, #1
 800d82e:	2a30      	cmp	r2, #48	@ 0x30
 800d830:	d0f8      	beq.n	800d824 <_strtod_l+0x1e4>
 800d832:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d836:	2b08      	cmp	r3, #8
 800d838:	f200 84d2 	bhi.w	800e1e0 <_strtod_l+0xba0>
 800d83c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d83e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d840:	2000      	movs	r0, #0
 800d842:	930c      	str	r3, [sp, #48]	@ 0x30
 800d844:	4605      	mov	r5, r0
 800d846:	3a30      	subs	r2, #48	@ 0x30
 800d848:	f100 0301 	add.w	r3, r0, #1
 800d84c:	d018      	beq.n	800d880 <_strtod_l+0x240>
 800d84e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d850:	4419      	add	r1, r3
 800d852:	910a      	str	r1, [sp, #40]	@ 0x28
 800d854:	462e      	mov	r6, r5
 800d856:	f04f 0e0a 	mov.w	lr, #10
 800d85a:	1c71      	adds	r1, r6, #1
 800d85c:	eba1 0c05 	sub.w	ip, r1, r5
 800d860:	4563      	cmp	r3, ip
 800d862:	dc15      	bgt.n	800d890 <_strtod_l+0x250>
 800d864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d868:	182b      	adds	r3, r5, r0
 800d86a:	2b08      	cmp	r3, #8
 800d86c:	f105 0501 	add.w	r5, r5, #1
 800d870:	4405      	add	r5, r0
 800d872:	dc1a      	bgt.n	800d8aa <_strtod_l+0x26a>
 800d874:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d876:	230a      	movs	r3, #10
 800d878:	fb03 2301 	mla	r3, r3, r1, r2
 800d87c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d87e:	2300      	movs	r3, #0
 800d880:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d882:	1c51      	adds	r1, r2, #1
 800d884:	9119      	str	r1, [sp, #100]	@ 0x64
 800d886:	7852      	ldrb	r2, [r2, #1]
 800d888:	4618      	mov	r0, r3
 800d88a:	e7c5      	b.n	800d818 <_strtod_l+0x1d8>
 800d88c:	4648      	mov	r0, r9
 800d88e:	e7ce      	b.n	800d82e <_strtod_l+0x1ee>
 800d890:	2e08      	cmp	r6, #8
 800d892:	dc05      	bgt.n	800d8a0 <_strtod_l+0x260>
 800d894:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d896:	fb0e f606 	mul.w	r6, lr, r6
 800d89a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d89c:	460e      	mov	r6, r1
 800d89e:	e7dc      	b.n	800d85a <_strtod_l+0x21a>
 800d8a0:	2910      	cmp	r1, #16
 800d8a2:	bfd8      	it	le
 800d8a4:	fb0e f707 	mulle.w	r7, lr, r7
 800d8a8:	e7f8      	b.n	800d89c <_strtod_l+0x25c>
 800d8aa:	2b0f      	cmp	r3, #15
 800d8ac:	bfdc      	itt	le
 800d8ae:	230a      	movle	r3, #10
 800d8b0:	fb03 2707 	mlale	r7, r3, r7, r2
 800d8b4:	e7e3      	b.n	800d87e <_strtod_l+0x23e>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e77a      	b.n	800d7b4 <_strtod_l+0x174>
 800d8be:	f04f 0c00 	mov.w	ip, #0
 800d8c2:	1ca2      	adds	r2, r4, #2
 800d8c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d8c6:	78a2      	ldrb	r2, [r4, #2]
 800d8c8:	e782      	b.n	800d7d0 <_strtod_l+0x190>
 800d8ca:	f04f 0c01 	mov.w	ip, #1
 800d8ce:	e7f8      	b.n	800d8c2 <_strtod_l+0x282>
 800d8d0:	0800f79c 	.word	0x0800f79c
 800d8d4:	0800f5cf 	.word	0x0800f5cf
 800d8d8:	7ff00000 	.word	0x7ff00000
 800d8dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8de:	1c51      	adds	r1, r2, #1
 800d8e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d8e2:	7852      	ldrb	r2, [r2, #1]
 800d8e4:	2a30      	cmp	r2, #48	@ 0x30
 800d8e6:	d0f9      	beq.n	800d8dc <_strtod_l+0x29c>
 800d8e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d8ec:	2908      	cmp	r1, #8
 800d8ee:	f63f af75 	bhi.w	800d7dc <_strtod_l+0x19c>
 800d8f2:	3a30      	subs	r2, #48	@ 0x30
 800d8f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d8f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d8fa:	f04f 080a 	mov.w	r8, #10
 800d8fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d900:	1c56      	adds	r6, r2, #1
 800d902:	9619      	str	r6, [sp, #100]	@ 0x64
 800d904:	7852      	ldrb	r2, [r2, #1]
 800d906:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d90a:	f1be 0f09 	cmp.w	lr, #9
 800d90e:	d939      	bls.n	800d984 <_strtod_l+0x344>
 800d910:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d912:	1a76      	subs	r6, r6, r1
 800d914:	2e08      	cmp	r6, #8
 800d916:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d91a:	dc03      	bgt.n	800d924 <_strtod_l+0x2e4>
 800d91c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d91e:	4588      	cmp	r8, r1
 800d920:	bfa8      	it	ge
 800d922:	4688      	movge	r8, r1
 800d924:	f1bc 0f00 	cmp.w	ip, #0
 800d928:	d001      	beq.n	800d92e <_strtod_l+0x2ee>
 800d92a:	f1c8 0800 	rsb	r8, r8, #0
 800d92e:	2d00      	cmp	r5, #0
 800d930:	d14e      	bne.n	800d9d0 <_strtod_l+0x390>
 800d932:	9908      	ldr	r1, [sp, #32]
 800d934:	4308      	orrs	r0, r1
 800d936:	f47f aebc 	bne.w	800d6b2 <_strtod_l+0x72>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f47f aed4 	bne.w	800d6e8 <_strtod_l+0xa8>
 800d940:	2a69      	cmp	r2, #105	@ 0x69
 800d942:	d028      	beq.n	800d996 <_strtod_l+0x356>
 800d944:	dc25      	bgt.n	800d992 <_strtod_l+0x352>
 800d946:	2a49      	cmp	r2, #73	@ 0x49
 800d948:	d025      	beq.n	800d996 <_strtod_l+0x356>
 800d94a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d94c:	f47f aecc 	bne.w	800d6e8 <_strtod_l+0xa8>
 800d950:	499a      	ldr	r1, [pc, #616]	@ (800dbbc <_strtod_l+0x57c>)
 800d952:	a819      	add	r0, sp, #100	@ 0x64
 800d954:	f001 fba4 	bl	800f0a0 <__match>
 800d958:	2800      	cmp	r0, #0
 800d95a:	f43f aec5 	beq.w	800d6e8 <_strtod_l+0xa8>
 800d95e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	2b28      	cmp	r3, #40	@ 0x28
 800d964:	d12e      	bne.n	800d9c4 <_strtod_l+0x384>
 800d966:	4996      	ldr	r1, [pc, #600]	@ (800dbc0 <_strtod_l+0x580>)
 800d968:	aa1c      	add	r2, sp, #112	@ 0x70
 800d96a:	a819      	add	r0, sp, #100	@ 0x64
 800d96c:	f001 fbac 	bl	800f0c8 <__hexnan>
 800d970:	2805      	cmp	r0, #5
 800d972:	d127      	bne.n	800d9c4 <_strtod_l+0x384>
 800d974:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d976:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d97a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d97e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d982:	e696      	b.n	800d6b2 <_strtod_l+0x72>
 800d984:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d986:	fb08 2101 	mla	r1, r8, r1, r2
 800d98a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d98e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d990:	e7b5      	b.n	800d8fe <_strtod_l+0x2be>
 800d992:	2a6e      	cmp	r2, #110	@ 0x6e
 800d994:	e7da      	b.n	800d94c <_strtod_l+0x30c>
 800d996:	498b      	ldr	r1, [pc, #556]	@ (800dbc4 <_strtod_l+0x584>)
 800d998:	a819      	add	r0, sp, #100	@ 0x64
 800d99a:	f001 fb81 	bl	800f0a0 <__match>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f43f aea2 	beq.w	800d6e8 <_strtod_l+0xa8>
 800d9a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9a6:	4988      	ldr	r1, [pc, #544]	@ (800dbc8 <_strtod_l+0x588>)
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	a819      	add	r0, sp, #100	@ 0x64
 800d9ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800d9ae:	f001 fb77 	bl	800f0a0 <__match>
 800d9b2:	b910      	cbnz	r0, 800d9ba <_strtod_l+0x37a>
 800d9b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d9ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dbd8 <_strtod_l+0x598>
 800d9be:	f04f 0a00 	mov.w	sl, #0
 800d9c2:	e676      	b.n	800d6b2 <_strtod_l+0x72>
 800d9c4:	4881      	ldr	r0, [pc, #516]	@ (800dbcc <_strtod_l+0x58c>)
 800d9c6:	f001 f8a7 	bl	800eb18 <nan>
 800d9ca:	ec5b ab10 	vmov	sl, fp, d0
 800d9ce:	e670      	b.n	800d6b2 <_strtod_l+0x72>
 800d9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d9d4:	eba8 0303 	sub.w	r3, r8, r3
 800d9d8:	f1b9 0f00 	cmp.w	r9, #0
 800d9dc:	bf08      	it	eq
 800d9de:	46a9      	moveq	r9, r5
 800d9e0:	2d10      	cmp	r5, #16
 800d9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9e4:	462c      	mov	r4, r5
 800d9e6:	bfa8      	it	ge
 800d9e8:	2410      	movge	r4, #16
 800d9ea:	f7f2 fd8b 	bl	8000504 <__aeabi_ui2d>
 800d9ee:	2d09      	cmp	r5, #9
 800d9f0:	4682      	mov	sl, r0
 800d9f2:	468b      	mov	fp, r1
 800d9f4:	dc13      	bgt.n	800da1e <_strtod_l+0x3de>
 800d9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f43f ae5a 	beq.w	800d6b2 <_strtod_l+0x72>
 800d9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da00:	dd78      	ble.n	800daf4 <_strtod_l+0x4b4>
 800da02:	2b16      	cmp	r3, #22
 800da04:	dc5f      	bgt.n	800dac6 <_strtod_l+0x486>
 800da06:	4972      	ldr	r1, [pc, #456]	@ (800dbd0 <_strtod_l+0x590>)
 800da08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da10:	4652      	mov	r2, sl
 800da12:	465b      	mov	r3, fp
 800da14:	f7f2 fdf0 	bl	80005f8 <__aeabi_dmul>
 800da18:	4682      	mov	sl, r0
 800da1a:	468b      	mov	fp, r1
 800da1c:	e649      	b.n	800d6b2 <_strtod_l+0x72>
 800da1e:	4b6c      	ldr	r3, [pc, #432]	@ (800dbd0 <_strtod_l+0x590>)
 800da20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800da28:	f7f2 fde6 	bl	80005f8 <__aeabi_dmul>
 800da2c:	4682      	mov	sl, r0
 800da2e:	4638      	mov	r0, r7
 800da30:	468b      	mov	fp, r1
 800da32:	f7f2 fd67 	bl	8000504 <__aeabi_ui2d>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4650      	mov	r0, sl
 800da3c:	4659      	mov	r1, fp
 800da3e:	f7f2 fc25 	bl	800028c <__adddf3>
 800da42:	2d0f      	cmp	r5, #15
 800da44:	4682      	mov	sl, r0
 800da46:	468b      	mov	fp, r1
 800da48:	ddd5      	ble.n	800d9f6 <_strtod_l+0x3b6>
 800da4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da4c:	1b2c      	subs	r4, r5, r4
 800da4e:	441c      	add	r4, r3
 800da50:	2c00      	cmp	r4, #0
 800da52:	f340 8093 	ble.w	800db7c <_strtod_l+0x53c>
 800da56:	f014 030f 	ands.w	r3, r4, #15
 800da5a:	d00a      	beq.n	800da72 <_strtod_l+0x432>
 800da5c:	495c      	ldr	r1, [pc, #368]	@ (800dbd0 <_strtod_l+0x590>)
 800da5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da62:	4652      	mov	r2, sl
 800da64:	465b      	mov	r3, fp
 800da66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da6a:	f7f2 fdc5 	bl	80005f8 <__aeabi_dmul>
 800da6e:	4682      	mov	sl, r0
 800da70:	468b      	mov	fp, r1
 800da72:	f034 040f 	bics.w	r4, r4, #15
 800da76:	d073      	beq.n	800db60 <_strtod_l+0x520>
 800da78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800da7c:	dd49      	ble.n	800db12 <_strtod_l+0x4d2>
 800da7e:	2400      	movs	r4, #0
 800da80:	46a0      	mov	r8, r4
 800da82:	940b      	str	r4, [sp, #44]	@ 0x2c
 800da84:	46a1      	mov	r9, r4
 800da86:	9a05      	ldr	r2, [sp, #20]
 800da88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dbd8 <_strtod_l+0x598>
 800da8c:	2322      	movs	r3, #34	@ 0x22
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	f04f 0a00 	mov.w	sl, #0
 800da94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da96:	2b00      	cmp	r3, #0
 800da98:	f43f ae0b 	beq.w	800d6b2 <_strtod_l+0x72>
 800da9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da9e:	9805      	ldr	r0, [sp, #20]
 800daa0:	f7ff f944 	bl	800cd2c <_Bfree>
 800daa4:	9805      	ldr	r0, [sp, #20]
 800daa6:	4649      	mov	r1, r9
 800daa8:	f7ff f940 	bl	800cd2c <_Bfree>
 800daac:	9805      	ldr	r0, [sp, #20]
 800daae:	4641      	mov	r1, r8
 800dab0:	f7ff f93c 	bl	800cd2c <_Bfree>
 800dab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dab6:	9805      	ldr	r0, [sp, #20]
 800dab8:	f7ff f938 	bl	800cd2c <_Bfree>
 800dabc:	9805      	ldr	r0, [sp, #20]
 800dabe:	4621      	mov	r1, r4
 800dac0:	f7ff f934 	bl	800cd2c <_Bfree>
 800dac4:	e5f5      	b.n	800d6b2 <_strtod_l+0x72>
 800dac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dac8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dacc:	4293      	cmp	r3, r2
 800dace:	dbbc      	blt.n	800da4a <_strtod_l+0x40a>
 800dad0:	4c3f      	ldr	r4, [pc, #252]	@ (800dbd0 <_strtod_l+0x590>)
 800dad2:	f1c5 050f 	rsb	r5, r5, #15
 800dad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dada:	4652      	mov	r2, sl
 800dadc:	465b      	mov	r3, fp
 800dade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dae2:	f7f2 fd89 	bl	80005f8 <__aeabi_dmul>
 800dae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dae8:	1b5d      	subs	r5, r3, r5
 800daea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800daee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800daf2:	e78f      	b.n	800da14 <_strtod_l+0x3d4>
 800daf4:	3316      	adds	r3, #22
 800daf6:	dba8      	blt.n	800da4a <_strtod_l+0x40a>
 800daf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dafa:	eba3 0808 	sub.w	r8, r3, r8
 800dafe:	4b34      	ldr	r3, [pc, #208]	@ (800dbd0 <_strtod_l+0x590>)
 800db00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800db04:	e9d8 2300 	ldrd	r2, r3, [r8]
 800db08:	4650      	mov	r0, sl
 800db0a:	4659      	mov	r1, fp
 800db0c:	f7f2 fe9e 	bl	800084c <__aeabi_ddiv>
 800db10:	e782      	b.n	800da18 <_strtod_l+0x3d8>
 800db12:	2300      	movs	r3, #0
 800db14:	4f2f      	ldr	r7, [pc, #188]	@ (800dbd4 <_strtod_l+0x594>)
 800db16:	1124      	asrs	r4, r4, #4
 800db18:	4650      	mov	r0, sl
 800db1a:	4659      	mov	r1, fp
 800db1c:	461e      	mov	r6, r3
 800db1e:	2c01      	cmp	r4, #1
 800db20:	dc21      	bgt.n	800db66 <_strtod_l+0x526>
 800db22:	b10b      	cbz	r3, 800db28 <_strtod_l+0x4e8>
 800db24:	4682      	mov	sl, r0
 800db26:	468b      	mov	fp, r1
 800db28:	492a      	ldr	r1, [pc, #168]	@ (800dbd4 <_strtod_l+0x594>)
 800db2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800db2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800db32:	4652      	mov	r2, sl
 800db34:	465b      	mov	r3, fp
 800db36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3a:	f7f2 fd5d 	bl	80005f8 <__aeabi_dmul>
 800db3e:	4b26      	ldr	r3, [pc, #152]	@ (800dbd8 <_strtod_l+0x598>)
 800db40:	460a      	mov	r2, r1
 800db42:	400b      	ands	r3, r1
 800db44:	4925      	ldr	r1, [pc, #148]	@ (800dbdc <_strtod_l+0x59c>)
 800db46:	428b      	cmp	r3, r1
 800db48:	4682      	mov	sl, r0
 800db4a:	d898      	bhi.n	800da7e <_strtod_l+0x43e>
 800db4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800db50:	428b      	cmp	r3, r1
 800db52:	bf86      	itte	hi
 800db54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dbe0 <_strtod_l+0x5a0>
 800db58:	f04f 3aff 	movhi.w	sl, #4294967295
 800db5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800db60:	2300      	movs	r3, #0
 800db62:	9308      	str	r3, [sp, #32]
 800db64:	e076      	b.n	800dc54 <_strtod_l+0x614>
 800db66:	07e2      	lsls	r2, r4, #31
 800db68:	d504      	bpl.n	800db74 <_strtod_l+0x534>
 800db6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db6e:	f7f2 fd43 	bl	80005f8 <__aeabi_dmul>
 800db72:	2301      	movs	r3, #1
 800db74:	3601      	adds	r6, #1
 800db76:	1064      	asrs	r4, r4, #1
 800db78:	3708      	adds	r7, #8
 800db7a:	e7d0      	b.n	800db1e <_strtod_l+0x4de>
 800db7c:	d0f0      	beq.n	800db60 <_strtod_l+0x520>
 800db7e:	4264      	negs	r4, r4
 800db80:	f014 020f 	ands.w	r2, r4, #15
 800db84:	d00a      	beq.n	800db9c <_strtod_l+0x55c>
 800db86:	4b12      	ldr	r3, [pc, #72]	@ (800dbd0 <_strtod_l+0x590>)
 800db88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db8c:	4650      	mov	r0, sl
 800db8e:	4659      	mov	r1, fp
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fe5a 	bl	800084c <__aeabi_ddiv>
 800db98:	4682      	mov	sl, r0
 800db9a:	468b      	mov	fp, r1
 800db9c:	1124      	asrs	r4, r4, #4
 800db9e:	d0df      	beq.n	800db60 <_strtod_l+0x520>
 800dba0:	2c1f      	cmp	r4, #31
 800dba2:	dd1f      	ble.n	800dbe4 <_strtod_l+0x5a4>
 800dba4:	2400      	movs	r4, #0
 800dba6:	46a0      	mov	r8, r4
 800dba8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dbaa:	46a1      	mov	r9, r4
 800dbac:	9a05      	ldr	r2, [sp, #20]
 800dbae:	2322      	movs	r3, #34	@ 0x22
 800dbb0:	f04f 0a00 	mov.w	sl, #0
 800dbb4:	f04f 0b00 	mov.w	fp, #0
 800dbb8:	6013      	str	r3, [r2, #0]
 800dbba:	e76b      	b.n	800da94 <_strtod_l+0x454>
 800dbbc:	0800f4bd 	.word	0x0800f4bd
 800dbc0:	0800f788 	.word	0x0800f788
 800dbc4:	0800f4b5 	.word	0x0800f4b5
 800dbc8:	0800f4ec 	.word	0x0800f4ec
 800dbcc:	0800f625 	.word	0x0800f625
 800dbd0:	0800f6c0 	.word	0x0800f6c0
 800dbd4:	0800f698 	.word	0x0800f698
 800dbd8:	7ff00000 	.word	0x7ff00000
 800dbdc:	7ca00000 	.word	0x7ca00000
 800dbe0:	7fefffff 	.word	0x7fefffff
 800dbe4:	f014 0310 	ands.w	r3, r4, #16
 800dbe8:	bf18      	it	ne
 800dbea:	236a      	movne	r3, #106	@ 0x6a
 800dbec:	4ea9      	ldr	r6, [pc, #676]	@ (800de94 <_strtod_l+0x854>)
 800dbee:	9308      	str	r3, [sp, #32]
 800dbf0:	4650      	mov	r0, sl
 800dbf2:	4659      	mov	r1, fp
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	07e7      	lsls	r7, r4, #31
 800dbf8:	d504      	bpl.n	800dc04 <_strtod_l+0x5c4>
 800dbfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbfe:	f7f2 fcfb 	bl	80005f8 <__aeabi_dmul>
 800dc02:	2301      	movs	r3, #1
 800dc04:	1064      	asrs	r4, r4, #1
 800dc06:	f106 0608 	add.w	r6, r6, #8
 800dc0a:	d1f4      	bne.n	800dbf6 <_strtod_l+0x5b6>
 800dc0c:	b10b      	cbz	r3, 800dc12 <_strtod_l+0x5d2>
 800dc0e:	4682      	mov	sl, r0
 800dc10:	468b      	mov	fp, r1
 800dc12:	9b08      	ldr	r3, [sp, #32]
 800dc14:	b1b3      	cbz	r3, 800dc44 <_strtod_l+0x604>
 800dc16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dc1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	4659      	mov	r1, fp
 800dc22:	dd0f      	ble.n	800dc44 <_strtod_l+0x604>
 800dc24:	2b1f      	cmp	r3, #31
 800dc26:	dd56      	ble.n	800dcd6 <_strtod_l+0x696>
 800dc28:	2b34      	cmp	r3, #52	@ 0x34
 800dc2a:	bfde      	ittt	le
 800dc2c:	f04f 33ff 	movle.w	r3, #4294967295
 800dc30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dc34:	4093      	lslle	r3, r2
 800dc36:	f04f 0a00 	mov.w	sl, #0
 800dc3a:	bfcc      	ite	gt
 800dc3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dc40:	ea03 0b01 	andle.w	fp, r3, r1
 800dc44:	2200      	movs	r2, #0
 800dc46:	2300      	movs	r3, #0
 800dc48:	4650      	mov	r0, sl
 800dc4a:	4659      	mov	r1, fp
 800dc4c:	f7f2 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d1a7      	bne.n	800dba4 <_strtod_l+0x564>
 800dc54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dc5a:	9805      	ldr	r0, [sp, #20]
 800dc5c:	462b      	mov	r3, r5
 800dc5e:	464a      	mov	r2, r9
 800dc60:	f7ff f8cc 	bl	800cdfc <__s2b>
 800dc64:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dc66:	2800      	cmp	r0, #0
 800dc68:	f43f af09 	beq.w	800da7e <_strtod_l+0x43e>
 800dc6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc70:	2a00      	cmp	r2, #0
 800dc72:	eba3 0308 	sub.w	r3, r3, r8
 800dc76:	bfa8      	it	ge
 800dc78:	2300      	movge	r3, #0
 800dc7a:	9312      	str	r3, [sp, #72]	@ 0x48
 800dc7c:	2400      	movs	r4, #0
 800dc7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dc82:	9316      	str	r3, [sp, #88]	@ 0x58
 800dc84:	46a0      	mov	r8, r4
 800dc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc88:	9805      	ldr	r0, [sp, #20]
 800dc8a:	6859      	ldr	r1, [r3, #4]
 800dc8c:	f7ff f80e 	bl	800ccac <_Balloc>
 800dc90:	4681      	mov	r9, r0
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f43f aef7 	beq.w	800da86 <_strtod_l+0x446>
 800dc98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc9a:	691a      	ldr	r2, [r3, #16]
 800dc9c:	3202      	adds	r2, #2
 800dc9e:	f103 010c 	add.w	r1, r3, #12
 800dca2:	0092      	lsls	r2, r2, #2
 800dca4:	300c      	adds	r0, #12
 800dca6:	f000 ff27 	bl	800eaf8 <memcpy>
 800dcaa:	ec4b ab10 	vmov	d0, sl, fp
 800dcae:	9805      	ldr	r0, [sp, #20]
 800dcb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800dcb2:	a91b      	add	r1, sp, #108	@ 0x6c
 800dcb4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800dcb8:	f7ff fbd4 	bl	800d464 <__d2b>
 800dcbc:	901a      	str	r0, [sp, #104]	@ 0x68
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	f43f aee1 	beq.w	800da86 <_strtod_l+0x446>
 800dcc4:	9805      	ldr	r0, [sp, #20]
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	f7ff f92e 	bl	800cf28 <__i2b>
 800dccc:	4680      	mov	r8, r0
 800dcce:	b948      	cbnz	r0, 800dce4 <_strtod_l+0x6a4>
 800dcd0:	f04f 0800 	mov.w	r8, #0
 800dcd4:	e6d7      	b.n	800da86 <_strtod_l+0x446>
 800dcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcda:	fa02 f303 	lsl.w	r3, r2, r3
 800dcde:	ea03 0a0a 	and.w	sl, r3, sl
 800dce2:	e7af      	b.n	800dc44 <_strtod_l+0x604>
 800dce4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800dce6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800dce8:	2d00      	cmp	r5, #0
 800dcea:	bfab      	itete	ge
 800dcec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800dcee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800dcf0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800dcf2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800dcf4:	bfac      	ite	ge
 800dcf6:	18ef      	addge	r7, r5, r3
 800dcf8:	1b5e      	sublt	r6, r3, r5
 800dcfa:	9b08      	ldr	r3, [sp, #32]
 800dcfc:	1aed      	subs	r5, r5, r3
 800dcfe:	4415      	add	r5, r2
 800dd00:	4b65      	ldr	r3, [pc, #404]	@ (800de98 <_strtod_l+0x858>)
 800dd02:	3d01      	subs	r5, #1
 800dd04:	429d      	cmp	r5, r3
 800dd06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800dd0a:	da50      	bge.n	800ddae <_strtod_l+0x76e>
 800dd0c:	1b5b      	subs	r3, r3, r5
 800dd0e:	2b1f      	cmp	r3, #31
 800dd10:	eba2 0203 	sub.w	r2, r2, r3
 800dd14:	f04f 0101 	mov.w	r1, #1
 800dd18:	dc3d      	bgt.n	800dd96 <_strtod_l+0x756>
 800dd1a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd20:	2300      	movs	r3, #0
 800dd22:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd24:	18bd      	adds	r5, r7, r2
 800dd26:	9b08      	ldr	r3, [sp, #32]
 800dd28:	42af      	cmp	r7, r5
 800dd2a:	4416      	add	r6, r2
 800dd2c:	441e      	add	r6, r3
 800dd2e:	463b      	mov	r3, r7
 800dd30:	bfa8      	it	ge
 800dd32:	462b      	movge	r3, r5
 800dd34:	42b3      	cmp	r3, r6
 800dd36:	bfa8      	it	ge
 800dd38:	4633      	movge	r3, r6
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bfc2      	ittt	gt
 800dd3e:	1aed      	subgt	r5, r5, r3
 800dd40:	1af6      	subgt	r6, r6, r3
 800dd42:	1aff      	subgt	r7, r7, r3
 800dd44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	dd16      	ble.n	800dd78 <_strtod_l+0x738>
 800dd4a:	4641      	mov	r1, r8
 800dd4c:	9805      	ldr	r0, [sp, #20]
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f7ff f9a2 	bl	800d098 <__pow5mult>
 800dd54:	4680      	mov	r8, r0
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d0ba      	beq.n	800dcd0 <_strtod_l+0x690>
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dd5e:	9805      	ldr	r0, [sp, #20]
 800dd60:	f7ff f8f8 	bl	800cf54 <__multiply>
 800dd64:	900a      	str	r0, [sp, #40]	@ 0x28
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f43f ae8d 	beq.w	800da86 <_strtod_l+0x446>
 800dd6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd6e:	9805      	ldr	r0, [sp, #20]
 800dd70:	f7fe ffdc 	bl	800cd2c <_Bfree>
 800dd74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd76:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd78:	2d00      	cmp	r5, #0
 800dd7a:	dc1d      	bgt.n	800ddb8 <_strtod_l+0x778>
 800dd7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	dd23      	ble.n	800ddca <_strtod_l+0x78a>
 800dd82:	4649      	mov	r1, r9
 800dd84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dd86:	9805      	ldr	r0, [sp, #20]
 800dd88:	f7ff f986 	bl	800d098 <__pow5mult>
 800dd8c:	4681      	mov	r9, r0
 800dd8e:	b9e0      	cbnz	r0, 800ddca <_strtod_l+0x78a>
 800dd90:	f04f 0900 	mov.w	r9, #0
 800dd94:	e677      	b.n	800da86 <_strtod_l+0x446>
 800dd96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dd9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dd9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dda2:	35e2      	adds	r5, #226	@ 0xe2
 800dda4:	fa01 f305 	lsl.w	r3, r1, r5
 800dda8:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ddac:	e7ba      	b.n	800dd24 <_strtod_l+0x6e4>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ddb6:	e7b5      	b.n	800dd24 <_strtod_l+0x6e4>
 800ddb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddba:	9805      	ldr	r0, [sp, #20]
 800ddbc:	462a      	mov	r2, r5
 800ddbe:	f7ff f9c5 	bl	800d14c <__lshift>
 800ddc2:	901a      	str	r0, [sp, #104]	@ 0x68
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d1d9      	bne.n	800dd7c <_strtod_l+0x73c>
 800ddc8:	e65d      	b.n	800da86 <_strtod_l+0x446>
 800ddca:	2e00      	cmp	r6, #0
 800ddcc:	dd07      	ble.n	800ddde <_strtod_l+0x79e>
 800ddce:	4649      	mov	r1, r9
 800ddd0:	9805      	ldr	r0, [sp, #20]
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	f7ff f9ba 	bl	800d14c <__lshift>
 800ddd8:	4681      	mov	r9, r0
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d0d8      	beq.n	800dd90 <_strtod_l+0x750>
 800ddde:	2f00      	cmp	r7, #0
 800dde0:	dd08      	ble.n	800ddf4 <_strtod_l+0x7b4>
 800dde2:	4641      	mov	r1, r8
 800dde4:	9805      	ldr	r0, [sp, #20]
 800dde6:	463a      	mov	r2, r7
 800dde8:	f7ff f9b0 	bl	800d14c <__lshift>
 800ddec:	4680      	mov	r8, r0
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f43f ae49 	beq.w	800da86 <_strtod_l+0x446>
 800ddf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ddf6:	9805      	ldr	r0, [sp, #20]
 800ddf8:	464a      	mov	r2, r9
 800ddfa:	f7ff fa2f 	bl	800d25c <__mdiff>
 800ddfe:	4604      	mov	r4, r0
 800de00:	2800      	cmp	r0, #0
 800de02:	f43f ae40 	beq.w	800da86 <_strtod_l+0x446>
 800de06:	68c3      	ldr	r3, [r0, #12]
 800de08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de0a:	2300      	movs	r3, #0
 800de0c:	60c3      	str	r3, [r0, #12]
 800de0e:	4641      	mov	r1, r8
 800de10:	f7ff fa08 	bl	800d224 <__mcmp>
 800de14:	2800      	cmp	r0, #0
 800de16:	da45      	bge.n	800dea4 <_strtod_l+0x864>
 800de18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de1a:	ea53 030a 	orrs.w	r3, r3, sl
 800de1e:	d16b      	bne.n	800def8 <_strtod_l+0x8b8>
 800de20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de24:	2b00      	cmp	r3, #0
 800de26:	d167      	bne.n	800def8 <_strtod_l+0x8b8>
 800de28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de2c:	0d1b      	lsrs	r3, r3, #20
 800de2e:	051b      	lsls	r3, r3, #20
 800de30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800de34:	d960      	bls.n	800def8 <_strtod_l+0x8b8>
 800de36:	6963      	ldr	r3, [r4, #20]
 800de38:	b913      	cbnz	r3, 800de40 <_strtod_l+0x800>
 800de3a:	6923      	ldr	r3, [r4, #16]
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	dd5b      	ble.n	800def8 <_strtod_l+0x8b8>
 800de40:	4621      	mov	r1, r4
 800de42:	2201      	movs	r2, #1
 800de44:	9805      	ldr	r0, [sp, #20]
 800de46:	f7ff f981 	bl	800d14c <__lshift>
 800de4a:	4641      	mov	r1, r8
 800de4c:	4604      	mov	r4, r0
 800de4e:	f7ff f9e9 	bl	800d224 <__mcmp>
 800de52:	2800      	cmp	r0, #0
 800de54:	dd50      	ble.n	800def8 <_strtod_l+0x8b8>
 800de56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de5a:	9a08      	ldr	r2, [sp, #32]
 800de5c:	0d1b      	lsrs	r3, r3, #20
 800de5e:	051b      	lsls	r3, r3, #20
 800de60:	2a00      	cmp	r2, #0
 800de62:	d06a      	beq.n	800df3a <_strtod_l+0x8fa>
 800de64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800de68:	d867      	bhi.n	800df3a <_strtod_l+0x8fa>
 800de6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800de6e:	f67f ae9d 	bls.w	800dbac <_strtod_l+0x56c>
 800de72:	4b0a      	ldr	r3, [pc, #40]	@ (800de9c <_strtod_l+0x85c>)
 800de74:	4650      	mov	r0, sl
 800de76:	4659      	mov	r1, fp
 800de78:	2200      	movs	r2, #0
 800de7a:	f7f2 fbbd 	bl	80005f8 <__aeabi_dmul>
 800de7e:	4b08      	ldr	r3, [pc, #32]	@ (800dea0 <_strtod_l+0x860>)
 800de80:	400b      	ands	r3, r1
 800de82:	4682      	mov	sl, r0
 800de84:	468b      	mov	fp, r1
 800de86:	2b00      	cmp	r3, #0
 800de88:	f47f ae08 	bne.w	800da9c <_strtod_l+0x45c>
 800de8c:	9a05      	ldr	r2, [sp, #20]
 800de8e:	2322      	movs	r3, #34	@ 0x22
 800de90:	6013      	str	r3, [r2, #0]
 800de92:	e603      	b.n	800da9c <_strtod_l+0x45c>
 800de94:	0800f7b0 	.word	0x0800f7b0
 800de98:	fffffc02 	.word	0xfffffc02
 800de9c:	39500000 	.word	0x39500000
 800dea0:	7ff00000 	.word	0x7ff00000
 800dea4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dea8:	d165      	bne.n	800df76 <_strtod_l+0x936>
 800deaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800deac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800deb0:	b35a      	cbz	r2, 800df0a <_strtod_l+0x8ca>
 800deb2:	4a9f      	ldr	r2, [pc, #636]	@ (800e130 <_strtod_l+0xaf0>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d12b      	bne.n	800df10 <_strtod_l+0x8d0>
 800deb8:	9b08      	ldr	r3, [sp, #32]
 800deba:	4651      	mov	r1, sl
 800debc:	b303      	cbz	r3, 800df00 <_strtod_l+0x8c0>
 800debe:	4b9d      	ldr	r3, [pc, #628]	@ (800e134 <_strtod_l+0xaf4>)
 800dec0:	465a      	mov	r2, fp
 800dec2:	4013      	ands	r3, r2
 800dec4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dec8:	f04f 32ff 	mov.w	r2, #4294967295
 800decc:	d81b      	bhi.n	800df06 <_strtod_l+0x8c6>
 800dece:	0d1b      	lsrs	r3, r3, #20
 800ded0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ded4:	fa02 f303 	lsl.w	r3, r2, r3
 800ded8:	4299      	cmp	r1, r3
 800deda:	d119      	bne.n	800df10 <_strtod_l+0x8d0>
 800dedc:	4b96      	ldr	r3, [pc, #600]	@ (800e138 <_strtod_l+0xaf8>)
 800dede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d102      	bne.n	800deea <_strtod_l+0x8aa>
 800dee4:	3101      	adds	r1, #1
 800dee6:	f43f adce 	beq.w	800da86 <_strtod_l+0x446>
 800deea:	4b92      	ldr	r3, [pc, #584]	@ (800e134 <_strtod_l+0xaf4>)
 800deec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800deee:	401a      	ands	r2, r3
 800def0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800def4:	f04f 0a00 	mov.w	sl, #0
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d1b9      	bne.n	800de72 <_strtod_l+0x832>
 800defe:	e5cd      	b.n	800da9c <_strtod_l+0x45c>
 800df00:	f04f 33ff 	mov.w	r3, #4294967295
 800df04:	e7e8      	b.n	800ded8 <_strtod_l+0x898>
 800df06:	4613      	mov	r3, r2
 800df08:	e7e6      	b.n	800ded8 <_strtod_l+0x898>
 800df0a:	ea53 030a 	orrs.w	r3, r3, sl
 800df0e:	d0a2      	beq.n	800de56 <_strtod_l+0x816>
 800df10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df12:	b1db      	cbz	r3, 800df4c <_strtod_l+0x90c>
 800df14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df16:	4213      	tst	r3, r2
 800df18:	d0ee      	beq.n	800def8 <_strtod_l+0x8b8>
 800df1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df1c:	9a08      	ldr	r2, [sp, #32]
 800df1e:	4650      	mov	r0, sl
 800df20:	4659      	mov	r1, fp
 800df22:	b1bb      	cbz	r3, 800df54 <_strtod_l+0x914>
 800df24:	f7ff fb6c 	bl	800d600 <sulp>
 800df28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df2c:	ec53 2b10 	vmov	r2, r3, d0
 800df30:	f7f2 f9ac 	bl	800028c <__adddf3>
 800df34:	4682      	mov	sl, r0
 800df36:	468b      	mov	fp, r1
 800df38:	e7de      	b.n	800def8 <_strtod_l+0x8b8>
 800df3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800df3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800df42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800df46:	f04f 3aff 	mov.w	sl, #4294967295
 800df4a:	e7d5      	b.n	800def8 <_strtod_l+0x8b8>
 800df4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df4e:	ea13 0f0a 	tst.w	r3, sl
 800df52:	e7e1      	b.n	800df18 <_strtod_l+0x8d8>
 800df54:	f7ff fb54 	bl	800d600 <sulp>
 800df58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df5c:	ec53 2b10 	vmov	r2, r3, d0
 800df60:	f7f2 f992 	bl	8000288 <__aeabi_dsub>
 800df64:	2200      	movs	r2, #0
 800df66:	2300      	movs	r3, #0
 800df68:	4682      	mov	sl, r0
 800df6a:	468b      	mov	fp, r1
 800df6c:	f7f2 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 800df70:	2800      	cmp	r0, #0
 800df72:	d0c1      	beq.n	800def8 <_strtod_l+0x8b8>
 800df74:	e61a      	b.n	800dbac <_strtod_l+0x56c>
 800df76:	4641      	mov	r1, r8
 800df78:	4620      	mov	r0, r4
 800df7a:	f7ff facb 	bl	800d514 <__ratio>
 800df7e:	ec57 6b10 	vmov	r6, r7, d0
 800df82:	2200      	movs	r2, #0
 800df84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800df88:	4630      	mov	r0, r6
 800df8a:	4639      	mov	r1, r7
 800df8c:	f7f2 fdb0 	bl	8000af0 <__aeabi_dcmple>
 800df90:	2800      	cmp	r0, #0
 800df92:	d06f      	beq.n	800e074 <_strtod_l+0xa34>
 800df94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df96:	2b00      	cmp	r3, #0
 800df98:	d17a      	bne.n	800e090 <_strtod_l+0xa50>
 800df9a:	f1ba 0f00 	cmp.w	sl, #0
 800df9e:	d158      	bne.n	800e052 <_strtod_l+0xa12>
 800dfa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d15a      	bne.n	800e060 <_strtod_l+0xa20>
 800dfaa:	4b64      	ldr	r3, [pc, #400]	@ (800e13c <_strtod_l+0xafc>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	4630      	mov	r0, r6
 800dfb0:	4639      	mov	r1, r7
 800dfb2:	f7f2 fd93 	bl	8000adc <__aeabi_dcmplt>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d159      	bne.n	800e06e <_strtod_l+0xa2e>
 800dfba:	4630      	mov	r0, r6
 800dfbc:	4639      	mov	r1, r7
 800dfbe:	4b60      	ldr	r3, [pc, #384]	@ (800e140 <_strtod_l+0xb00>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f7f2 fb19 	bl	80005f8 <__aeabi_dmul>
 800dfc6:	4606      	mov	r6, r0
 800dfc8:	460f      	mov	r7, r1
 800dfca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dfce:	9606      	str	r6, [sp, #24]
 800dfd0:	9307      	str	r3, [sp, #28]
 800dfd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dfd6:	4d57      	ldr	r5, [pc, #348]	@ (800e134 <_strtod_l+0xaf4>)
 800dfd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dfdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfde:	401d      	ands	r5, r3
 800dfe0:	4b58      	ldr	r3, [pc, #352]	@ (800e144 <_strtod_l+0xb04>)
 800dfe2:	429d      	cmp	r5, r3
 800dfe4:	f040 80b2 	bne.w	800e14c <_strtod_l+0xb0c>
 800dfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dfee:	ec4b ab10 	vmov	d0, sl, fp
 800dff2:	f7ff f9c7 	bl	800d384 <__ulp>
 800dff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dffa:	ec51 0b10 	vmov	r0, r1, d0
 800dffe:	f7f2 fafb 	bl	80005f8 <__aeabi_dmul>
 800e002:	4652      	mov	r2, sl
 800e004:	465b      	mov	r3, fp
 800e006:	f7f2 f941 	bl	800028c <__adddf3>
 800e00a:	460b      	mov	r3, r1
 800e00c:	4949      	ldr	r1, [pc, #292]	@ (800e134 <_strtod_l+0xaf4>)
 800e00e:	4a4e      	ldr	r2, [pc, #312]	@ (800e148 <_strtod_l+0xb08>)
 800e010:	4019      	ands	r1, r3
 800e012:	4291      	cmp	r1, r2
 800e014:	4682      	mov	sl, r0
 800e016:	d942      	bls.n	800e09e <_strtod_l+0xa5e>
 800e018:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e01a:	4b47      	ldr	r3, [pc, #284]	@ (800e138 <_strtod_l+0xaf8>)
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d103      	bne.n	800e028 <_strtod_l+0x9e8>
 800e020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e022:	3301      	adds	r3, #1
 800e024:	f43f ad2f 	beq.w	800da86 <_strtod_l+0x446>
 800e028:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e138 <_strtod_l+0xaf8>
 800e02c:	f04f 3aff 	mov.w	sl, #4294967295
 800e030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e032:	9805      	ldr	r0, [sp, #20]
 800e034:	f7fe fe7a 	bl	800cd2c <_Bfree>
 800e038:	9805      	ldr	r0, [sp, #20]
 800e03a:	4649      	mov	r1, r9
 800e03c:	f7fe fe76 	bl	800cd2c <_Bfree>
 800e040:	9805      	ldr	r0, [sp, #20]
 800e042:	4641      	mov	r1, r8
 800e044:	f7fe fe72 	bl	800cd2c <_Bfree>
 800e048:	9805      	ldr	r0, [sp, #20]
 800e04a:	4621      	mov	r1, r4
 800e04c:	f7fe fe6e 	bl	800cd2c <_Bfree>
 800e050:	e619      	b.n	800dc86 <_strtod_l+0x646>
 800e052:	f1ba 0f01 	cmp.w	sl, #1
 800e056:	d103      	bne.n	800e060 <_strtod_l+0xa20>
 800e058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f43f ada6 	beq.w	800dbac <_strtod_l+0x56c>
 800e060:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e110 <_strtod_l+0xad0>
 800e064:	4f35      	ldr	r7, [pc, #212]	@ (800e13c <_strtod_l+0xafc>)
 800e066:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e06a:	2600      	movs	r6, #0
 800e06c:	e7b1      	b.n	800dfd2 <_strtod_l+0x992>
 800e06e:	4f34      	ldr	r7, [pc, #208]	@ (800e140 <_strtod_l+0xb00>)
 800e070:	2600      	movs	r6, #0
 800e072:	e7aa      	b.n	800dfca <_strtod_l+0x98a>
 800e074:	4b32      	ldr	r3, [pc, #200]	@ (800e140 <_strtod_l+0xb00>)
 800e076:	4630      	mov	r0, r6
 800e078:	4639      	mov	r1, r7
 800e07a:	2200      	movs	r2, #0
 800e07c:	f7f2 fabc 	bl	80005f8 <__aeabi_dmul>
 800e080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e082:	4606      	mov	r6, r0
 800e084:	460f      	mov	r7, r1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d09f      	beq.n	800dfca <_strtod_l+0x98a>
 800e08a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e08e:	e7a0      	b.n	800dfd2 <_strtod_l+0x992>
 800e090:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e118 <_strtod_l+0xad8>
 800e094:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e098:	ec57 6b17 	vmov	r6, r7, d7
 800e09c:	e799      	b.n	800dfd2 <_strtod_l+0x992>
 800e09e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e0a2:	9b08      	ldr	r3, [sp, #32]
 800e0a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1c1      	bne.n	800e030 <_strtod_l+0x9f0>
 800e0ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0b0:	0d1b      	lsrs	r3, r3, #20
 800e0b2:	051b      	lsls	r3, r3, #20
 800e0b4:	429d      	cmp	r5, r3
 800e0b6:	d1bb      	bne.n	800e030 <_strtod_l+0x9f0>
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 fdfc 	bl	8000cb8 <__aeabi_d2lz>
 800e0c0:	f7f2 fa6c 	bl	800059c <__aeabi_l2d>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	f7f2 f8dc 	bl	8000288 <__aeabi_dsub>
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e0d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0de:	ea46 060a 	orr.w	r6, r6, sl
 800e0e2:	431e      	orrs	r6, r3
 800e0e4:	d06f      	beq.n	800e1c6 <_strtod_l+0xb86>
 800e0e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e120 <_strtod_l+0xae0>)
 800e0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ec:	f7f2 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	f47f acd3 	bne.w	800da9c <_strtod_l+0x45c>
 800e0f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800e128 <_strtod_l+0xae8>)
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e100:	f7f2 fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 800e104:	2800      	cmp	r0, #0
 800e106:	d093      	beq.n	800e030 <_strtod_l+0x9f0>
 800e108:	e4c8      	b.n	800da9c <_strtod_l+0x45c>
 800e10a:	bf00      	nop
 800e10c:	f3af 8000 	nop.w
 800e110:	00000000 	.word	0x00000000
 800e114:	bff00000 	.word	0xbff00000
 800e118:	00000000 	.word	0x00000000
 800e11c:	3ff00000 	.word	0x3ff00000
 800e120:	94a03595 	.word	0x94a03595
 800e124:	3fdfffff 	.word	0x3fdfffff
 800e128:	35afe535 	.word	0x35afe535
 800e12c:	3fe00000 	.word	0x3fe00000
 800e130:	000fffff 	.word	0x000fffff
 800e134:	7ff00000 	.word	0x7ff00000
 800e138:	7fefffff 	.word	0x7fefffff
 800e13c:	3ff00000 	.word	0x3ff00000
 800e140:	3fe00000 	.word	0x3fe00000
 800e144:	7fe00000 	.word	0x7fe00000
 800e148:	7c9fffff 	.word	0x7c9fffff
 800e14c:	9b08      	ldr	r3, [sp, #32]
 800e14e:	b323      	cbz	r3, 800e19a <_strtod_l+0xb5a>
 800e150:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e154:	d821      	bhi.n	800e19a <_strtod_l+0xb5a>
 800e156:	a328      	add	r3, pc, #160	@ (adr r3, 800e1f8 <_strtod_l+0xbb8>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	4630      	mov	r0, r6
 800e15e:	4639      	mov	r1, r7
 800e160:	f7f2 fcc6 	bl	8000af0 <__aeabi_dcmple>
 800e164:	b1a0      	cbz	r0, 800e190 <_strtod_l+0xb50>
 800e166:	4639      	mov	r1, r7
 800e168:	4630      	mov	r0, r6
 800e16a:	f7f2 fd1d 	bl	8000ba8 <__aeabi_d2uiz>
 800e16e:	2801      	cmp	r0, #1
 800e170:	bf38      	it	cc
 800e172:	2001      	movcc	r0, #1
 800e174:	f7f2 f9c6 	bl	8000504 <__aeabi_ui2d>
 800e178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e17a:	4606      	mov	r6, r0
 800e17c:	460f      	mov	r7, r1
 800e17e:	b9fb      	cbnz	r3, 800e1c0 <_strtod_l+0xb80>
 800e180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e184:	9014      	str	r0, [sp, #80]	@ 0x50
 800e186:	9315      	str	r3, [sp, #84]	@ 0x54
 800e188:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e18c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e190:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e192:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e196:	1b5b      	subs	r3, r3, r5
 800e198:	9311      	str	r3, [sp, #68]	@ 0x44
 800e19a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e19e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e1a2:	f7ff f8ef 	bl	800d384 <__ulp>
 800e1a6:	4650      	mov	r0, sl
 800e1a8:	ec53 2b10 	vmov	r2, r3, d0
 800e1ac:	4659      	mov	r1, fp
 800e1ae:	f7f2 fa23 	bl	80005f8 <__aeabi_dmul>
 800e1b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e1b6:	f7f2 f869 	bl	800028c <__adddf3>
 800e1ba:	4682      	mov	sl, r0
 800e1bc:	468b      	mov	fp, r1
 800e1be:	e770      	b.n	800e0a2 <_strtod_l+0xa62>
 800e1c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e1c4:	e7e0      	b.n	800e188 <_strtod_l+0xb48>
 800e1c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e200 <_strtod_l+0xbc0>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	f7f2 fc86 	bl	8000adc <__aeabi_dcmplt>
 800e1d0:	e798      	b.n	800e104 <_strtod_l+0xac4>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e1d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1da:	6013      	str	r3, [r2, #0]
 800e1dc:	f7ff ba6d 	b.w	800d6ba <_strtod_l+0x7a>
 800e1e0:	2a65      	cmp	r2, #101	@ 0x65
 800e1e2:	f43f ab68 	beq.w	800d8b6 <_strtod_l+0x276>
 800e1e6:	2a45      	cmp	r2, #69	@ 0x45
 800e1e8:	f43f ab65 	beq.w	800d8b6 <_strtod_l+0x276>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f7ff bba0 	b.w	800d932 <_strtod_l+0x2f2>
 800e1f2:	bf00      	nop
 800e1f4:	f3af 8000 	nop.w
 800e1f8:	ffc00000 	.word	0xffc00000
 800e1fc:	41dfffff 	.word	0x41dfffff
 800e200:	94a03595 	.word	0x94a03595
 800e204:	3fcfffff 	.word	0x3fcfffff

0800e208 <_strtod_r>:
 800e208:	4b01      	ldr	r3, [pc, #4]	@ (800e210 <_strtod_r+0x8>)
 800e20a:	f7ff ba19 	b.w	800d640 <_strtod_l>
 800e20e:	bf00      	nop
 800e210:	20000288 	.word	0x20000288

0800e214 <_strtol_l.isra.0>:
 800e214:	2b24      	cmp	r3, #36	@ 0x24
 800e216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21a:	4686      	mov	lr, r0
 800e21c:	4690      	mov	r8, r2
 800e21e:	d801      	bhi.n	800e224 <_strtol_l.isra.0+0x10>
 800e220:	2b01      	cmp	r3, #1
 800e222:	d106      	bne.n	800e232 <_strtol_l.isra.0+0x1e>
 800e224:	f7fd fe6c 	bl	800bf00 <__errno>
 800e228:	2316      	movs	r3, #22
 800e22a:	6003      	str	r3, [r0, #0]
 800e22c:	2000      	movs	r0, #0
 800e22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e232:	4834      	ldr	r0, [pc, #208]	@ (800e304 <_strtol_l.isra.0+0xf0>)
 800e234:	460d      	mov	r5, r1
 800e236:	462a      	mov	r2, r5
 800e238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e23c:	5d06      	ldrb	r6, [r0, r4]
 800e23e:	f016 0608 	ands.w	r6, r6, #8
 800e242:	d1f8      	bne.n	800e236 <_strtol_l.isra.0+0x22>
 800e244:	2c2d      	cmp	r4, #45	@ 0x2d
 800e246:	d110      	bne.n	800e26a <_strtol_l.isra.0+0x56>
 800e248:	782c      	ldrb	r4, [r5, #0]
 800e24a:	2601      	movs	r6, #1
 800e24c:	1c95      	adds	r5, r2, #2
 800e24e:	f033 0210 	bics.w	r2, r3, #16
 800e252:	d115      	bne.n	800e280 <_strtol_l.isra.0+0x6c>
 800e254:	2c30      	cmp	r4, #48	@ 0x30
 800e256:	d10d      	bne.n	800e274 <_strtol_l.isra.0+0x60>
 800e258:	782a      	ldrb	r2, [r5, #0]
 800e25a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e25e:	2a58      	cmp	r2, #88	@ 0x58
 800e260:	d108      	bne.n	800e274 <_strtol_l.isra.0+0x60>
 800e262:	786c      	ldrb	r4, [r5, #1]
 800e264:	3502      	adds	r5, #2
 800e266:	2310      	movs	r3, #16
 800e268:	e00a      	b.n	800e280 <_strtol_l.isra.0+0x6c>
 800e26a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e26c:	bf04      	itt	eq
 800e26e:	782c      	ldrbeq	r4, [r5, #0]
 800e270:	1c95      	addeq	r5, r2, #2
 800e272:	e7ec      	b.n	800e24e <_strtol_l.isra.0+0x3a>
 800e274:	2b00      	cmp	r3, #0
 800e276:	d1f6      	bne.n	800e266 <_strtol_l.isra.0+0x52>
 800e278:	2c30      	cmp	r4, #48	@ 0x30
 800e27a:	bf14      	ite	ne
 800e27c:	230a      	movne	r3, #10
 800e27e:	2308      	moveq	r3, #8
 800e280:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e284:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e288:	2200      	movs	r2, #0
 800e28a:	fbbc f9f3 	udiv	r9, ip, r3
 800e28e:	4610      	mov	r0, r2
 800e290:	fb03 ca19 	mls	sl, r3, r9, ip
 800e294:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e298:	2f09      	cmp	r7, #9
 800e29a:	d80f      	bhi.n	800e2bc <_strtol_l.isra.0+0xa8>
 800e29c:	463c      	mov	r4, r7
 800e29e:	42a3      	cmp	r3, r4
 800e2a0:	dd1b      	ble.n	800e2da <_strtol_l.isra.0+0xc6>
 800e2a2:	1c57      	adds	r7, r2, #1
 800e2a4:	d007      	beq.n	800e2b6 <_strtol_l.isra.0+0xa2>
 800e2a6:	4581      	cmp	r9, r0
 800e2a8:	d314      	bcc.n	800e2d4 <_strtol_l.isra.0+0xc0>
 800e2aa:	d101      	bne.n	800e2b0 <_strtol_l.isra.0+0x9c>
 800e2ac:	45a2      	cmp	sl, r4
 800e2ae:	db11      	blt.n	800e2d4 <_strtol_l.isra.0+0xc0>
 800e2b0:	fb00 4003 	mla	r0, r0, r3, r4
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2ba:	e7eb      	b.n	800e294 <_strtol_l.isra.0+0x80>
 800e2bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e2c0:	2f19      	cmp	r7, #25
 800e2c2:	d801      	bhi.n	800e2c8 <_strtol_l.isra.0+0xb4>
 800e2c4:	3c37      	subs	r4, #55	@ 0x37
 800e2c6:	e7ea      	b.n	800e29e <_strtol_l.isra.0+0x8a>
 800e2c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e2cc:	2f19      	cmp	r7, #25
 800e2ce:	d804      	bhi.n	800e2da <_strtol_l.isra.0+0xc6>
 800e2d0:	3c57      	subs	r4, #87	@ 0x57
 800e2d2:	e7e4      	b.n	800e29e <_strtol_l.isra.0+0x8a>
 800e2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2d8:	e7ed      	b.n	800e2b6 <_strtol_l.isra.0+0xa2>
 800e2da:	1c53      	adds	r3, r2, #1
 800e2dc:	d108      	bne.n	800e2f0 <_strtol_l.isra.0+0xdc>
 800e2de:	2322      	movs	r3, #34	@ 0x22
 800e2e0:	f8ce 3000 	str.w	r3, [lr]
 800e2e4:	4660      	mov	r0, ip
 800e2e6:	f1b8 0f00 	cmp.w	r8, #0
 800e2ea:	d0a0      	beq.n	800e22e <_strtol_l.isra.0+0x1a>
 800e2ec:	1e69      	subs	r1, r5, #1
 800e2ee:	e006      	b.n	800e2fe <_strtol_l.isra.0+0xea>
 800e2f0:	b106      	cbz	r6, 800e2f4 <_strtol_l.isra.0+0xe0>
 800e2f2:	4240      	negs	r0, r0
 800e2f4:	f1b8 0f00 	cmp.w	r8, #0
 800e2f8:	d099      	beq.n	800e22e <_strtol_l.isra.0+0x1a>
 800e2fa:	2a00      	cmp	r2, #0
 800e2fc:	d1f6      	bne.n	800e2ec <_strtol_l.isra.0+0xd8>
 800e2fe:	f8c8 1000 	str.w	r1, [r8]
 800e302:	e794      	b.n	800e22e <_strtol_l.isra.0+0x1a>
 800e304:	0800f7d9 	.word	0x0800f7d9

0800e308 <_strtol_r>:
 800e308:	f7ff bf84 	b.w	800e214 <_strtol_l.isra.0>

0800e30c <__ssputs_r>:
 800e30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e310:	688e      	ldr	r6, [r1, #8]
 800e312:	461f      	mov	r7, r3
 800e314:	42be      	cmp	r6, r7
 800e316:	680b      	ldr	r3, [r1, #0]
 800e318:	4682      	mov	sl, r0
 800e31a:	460c      	mov	r4, r1
 800e31c:	4690      	mov	r8, r2
 800e31e:	d82d      	bhi.n	800e37c <__ssputs_r+0x70>
 800e320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e328:	d026      	beq.n	800e378 <__ssputs_r+0x6c>
 800e32a:	6965      	ldr	r5, [r4, #20]
 800e32c:	6909      	ldr	r1, [r1, #16]
 800e32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e332:	eba3 0901 	sub.w	r9, r3, r1
 800e336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e33a:	1c7b      	adds	r3, r7, #1
 800e33c:	444b      	add	r3, r9
 800e33e:	106d      	asrs	r5, r5, #1
 800e340:	429d      	cmp	r5, r3
 800e342:	bf38      	it	cc
 800e344:	461d      	movcc	r5, r3
 800e346:	0553      	lsls	r3, r2, #21
 800e348:	d527      	bpl.n	800e39a <__ssputs_r+0x8e>
 800e34a:	4629      	mov	r1, r5
 800e34c:	f7fc fc5a 	bl	800ac04 <_malloc_r>
 800e350:	4606      	mov	r6, r0
 800e352:	b360      	cbz	r0, 800e3ae <__ssputs_r+0xa2>
 800e354:	6921      	ldr	r1, [r4, #16]
 800e356:	464a      	mov	r2, r9
 800e358:	f000 fbce 	bl	800eaf8 <memcpy>
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e366:	81a3      	strh	r3, [r4, #12]
 800e368:	6126      	str	r6, [r4, #16]
 800e36a:	6165      	str	r5, [r4, #20]
 800e36c:	444e      	add	r6, r9
 800e36e:	eba5 0509 	sub.w	r5, r5, r9
 800e372:	6026      	str	r6, [r4, #0]
 800e374:	60a5      	str	r5, [r4, #8]
 800e376:	463e      	mov	r6, r7
 800e378:	42be      	cmp	r6, r7
 800e37a:	d900      	bls.n	800e37e <__ssputs_r+0x72>
 800e37c:	463e      	mov	r6, r7
 800e37e:	6820      	ldr	r0, [r4, #0]
 800e380:	4632      	mov	r2, r6
 800e382:	4641      	mov	r1, r8
 800e384:	f000 fb6a 	bl	800ea5c <memmove>
 800e388:	68a3      	ldr	r3, [r4, #8]
 800e38a:	1b9b      	subs	r3, r3, r6
 800e38c:	60a3      	str	r3, [r4, #8]
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	4433      	add	r3, r6
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	2000      	movs	r0, #0
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39a:	462a      	mov	r2, r5
 800e39c:	f000 ff41 	bl	800f222 <_realloc_r>
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	d1e0      	bne.n	800e368 <__ssputs_r+0x5c>
 800e3a6:	6921      	ldr	r1, [r4, #16]
 800e3a8:	4650      	mov	r0, sl
 800e3aa:	f7fe fc35 	bl	800cc18 <_free_r>
 800e3ae:	230c      	movs	r3, #12
 800e3b0:	f8ca 3000 	str.w	r3, [sl]
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ba:	81a3      	strh	r3, [r4, #12]
 800e3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c0:	e7e9      	b.n	800e396 <__ssputs_r+0x8a>
	...

0800e3c4 <_svfiprintf_r>:
 800e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	4698      	mov	r8, r3
 800e3ca:	898b      	ldrh	r3, [r1, #12]
 800e3cc:	061b      	lsls	r3, r3, #24
 800e3ce:	b09d      	sub	sp, #116	@ 0x74
 800e3d0:	4607      	mov	r7, r0
 800e3d2:	460d      	mov	r5, r1
 800e3d4:	4614      	mov	r4, r2
 800e3d6:	d510      	bpl.n	800e3fa <_svfiprintf_r+0x36>
 800e3d8:	690b      	ldr	r3, [r1, #16]
 800e3da:	b973      	cbnz	r3, 800e3fa <_svfiprintf_r+0x36>
 800e3dc:	2140      	movs	r1, #64	@ 0x40
 800e3de:	f7fc fc11 	bl	800ac04 <_malloc_r>
 800e3e2:	6028      	str	r0, [r5, #0]
 800e3e4:	6128      	str	r0, [r5, #16]
 800e3e6:	b930      	cbnz	r0, 800e3f6 <_svfiprintf_r+0x32>
 800e3e8:	230c      	movs	r3, #12
 800e3ea:	603b      	str	r3, [r7, #0]
 800e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f0:	b01d      	add	sp, #116	@ 0x74
 800e3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f6:	2340      	movs	r3, #64	@ 0x40
 800e3f8:	616b      	str	r3, [r5, #20]
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3fe:	2320      	movs	r3, #32
 800e400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e404:	f8cd 800c 	str.w	r8, [sp, #12]
 800e408:	2330      	movs	r3, #48	@ 0x30
 800e40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e5a8 <_svfiprintf_r+0x1e4>
 800e40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e412:	f04f 0901 	mov.w	r9, #1
 800e416:	4623      	mov	r3, r4
 800e418:	469a      	mov	sl, r3
 800e41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e41e:	b10a      	cbz	r2, 800e424 <_svfiprintf_r+0x60>
 800e420:	2a25      	cmp	r2, #37	@ 0x25
 800e422:	d1f9      	bne.n	800e418 <_svfiprintf_r+0x54>
 800e424:	ebba 0b04 	subs.w	fp, sl, r4
 800e428:	d00b      	beq.n	800e442 <_svfiprintf_r+0x7e>
 800e42a:	465b      	mov	r3, fp
 800e42c:	4622      	mov	r2, r4
 800e42e:	4629      	mov	r1, r5
 800e430:	4638      	mov	r0, r7
 800e432:	f7ff ff6b 	bl	800e30c <__ssputs_r>
 800e436:	3001      	adds	r0, #1
 800e438:	f000 80a7 	beq.w	800e58a <_svfiprintf_r+0x1c6>
 800e43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e43e:	445a      	add	r2, fp
 800e440:	9209      	str	r2, [sp, #36]	@ 0x24
 800e442:	f89a 3000 	ldrb.w	r3, [sl]
 800e446:	2b00      	cmp	r3, #0
 800e448:	f000 809f 	beq.w	800e58a <_svfiprintf_r+0x1c6>
 800e44c:	2300      	movs	r3, #0
 800e44e:	f04f 32ff 	mov.w	r2, #4294967295
 800e452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e456:	f10a 0a01 	add.w	sl, sl, #1
 800e45a:	9304      	str	r3, [sp, #16]
 800e45c:	9307      	str	r3, [sp, #28]
 800e45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e462:	931a      	str	r3, [sp, #104]	@ 0x68
 800e464:	4654      	mov	r4, sl
 800e466:	2205      	movs	r2, #5
 800e468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e46c:	484e      	ldr	r0, [pc, #312]	@ (800e5a8 <_svfiprintf_r+0x1e4>)
 800e46e:	f7f1 feaf 	bl	80001d0 <memchr>
 800e472:	9a04      	ldr	r2, [sp, #16]
 800e474:	b9d8      	cbnz	r0, 800e4ae <_svfiprintf_r+0xea>
 800e476:	06d0      	lsls	r0, r2, #27
 800e478:	bf44      	itt	mi
 800e47a:	2320      	movmi	r3, #32
 800e47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e480:	0711      	lsls	r1, r2, #28
 800e482:	bf44      	itt	mi
 800e484:	232b      	movmi	r3, #43	@ 0x2b
 800e486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e48a:	f89a 3000 	ldrb.w	r3, [sl]
 800e48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e490:	d015      	beq.n	800e4be <_svfiprintf_r+0xfa>
 800e492:	9a07      	ldr	r2, [sp, #28]
 800e494:	4654      	mov	r4, sl
 800e496:	2000      	movs	r0, #0
 800e498:	f04f 0c0a 	mov.w	ip, #10
 800e49c:	4621      	mov	r1, r4
 800e49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4a2:	3b30      	subs	r3, #48	@ 0x30
 800e4a4:	2b09      	cmp	r3, #9
 800e4a6:	d94b      	bls.n	800e540 <_svfiprintf_r+0x17c>
 800e4a8:	b1b0      	cbz	r0, 800e4d8 <_svfiprintf_r+0x114>
 800e4aa:	9207      	str	r2, [sp, #28]
 800e4ac:	e014      	b.n	800e4d8 <_svfiprintf_r+0x114>
 800e4ae:	eba0 0308 	sub.w	r3, r0, r8
 800e4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e4b6:	4313      	orrs	r3, r2
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	46a2      	mov	sl, r4
 800e4bc:	e7d2      	b.n	800e464 <_svfiprintf_r+0xa0>
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	1d19      	adds	r1, r3, #4
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	9103      	str	r1, [sp, #12]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	bfbb      	ittet	lt
 800e4ca:	425b      	neglt	r3, r3
 800e4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e4d0:	9307      	strge	r3, [sp, #28]
 800e4d2:	9307      	strlt	r3, [sp, #28]
 800e4d4:	bfb8      	it	lt
 800e4d6:	9204      	strlt	r2, [sp, #16]
 800e4d8:	7823      	ldrb	r3, [r4, #0]
 800e4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4dc:	d10a      	bne.n	800e4f4 <_svfiprintf_r+0x130>
 800e4de:	7863      	ldrb	r3, [r4, #1]
 800e4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4e2:	d132      	bne.n	800e54a <_svfiprintf_r+0x186>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	1d1a      	adds	r2, r3, #4
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	9203      	str	r2, [sp, #12]
 800e4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4f0:	3402      	adds	r4, #2
 800e4f2:	9305      	str	r3, [sp, #20]
 800e4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e5b8 <_svfiprintf_r+0x1f4>
 800e4f8:	7821      	ldrb	r1, [r4, #0]
 800e4fa:	2203      	movs	r2, #3
 800e4fc:	4650      	mov	r0, sl
 800e4fe:	f7f1 fe67 	bl	80001d0 <memchr>
 800e502:	b138      	cbz	r0, 800e514 <_svfiprintf_r+0x150>
 800e504:	9b04      	ldr	r3, [sp, #16]
 800e506:	eba0 000a 	sub.w	r0, r0, sl
 800e50a:	2240      	movs	r2, #64	@ 0x40
 800e50c:	4082      	lsls	r2, r0
 800e50e:	4313      	orrs	r3, r2
 800e510:	3401      	adds	r4, #1
 800e512:	9304      	str	r3, [sp, #16]
 800e514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e518:	4824      	ldr	r0, [pc, #144]	@ (800e5ac <_svfiprintf_r+0x1e8>)
 800e51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e51e:	2206      	movs	r2, #6
 800e520:	f7f1 fe56 	bl	80001d0 <memchr>
 800e524:	2800      	cmp	r0, #0
 800e526:	d036      	beq.n	800e596 <_svfiprintf_r+0x1d2>
 800e528:	4b21      	ldr	r3, [pc, #132]	@ (800e5b0 <_svfiprintf_r+0x1ec>)
 800e52a:	bb1b      	cbnz	r3, 800e574 <_svfiprintf_r+0x1b0>
 800e52c:	9b03      	ldr	r3, [sp, #12]
 800e52e:	3307      	adds	r3, #7
 800e530:	f023 0307 	bic.w	r3, r3, #7
 800e534:	3308      	adds	r3, #8
 800e536:	9303      	str	r3, [sp, #12]
 800e538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e53a:	4433      	add	r3, r6
 800e53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e53e:	e76a      	b.n	800e416 <_svfiprintf_r+0x52>
 800e540:	fb0c 3202 	mla	r2, ip, r2, r3
 800e544:	460c      	mov	r4, r1
 800e546:	2001      	movs	r0, #1
 800e548:	e7a8      	b.n	800e49c <_svfiprintf_r+0xd8>
 800e54a:	2300      	movs	r3, #0
 800e54c:	3401      	adds	r4, #1
 800e54e:	9305      	str	r3, [sp, #20]
 800e550:	4619      	mov	r1, r3
 800e552:	f04f 0c0a 	mov.w	ip, #10
 800e556:	4620      	mov	r0, r4
 800e558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e55c:	3a30      	subs	r2, #48	@ 0x30
 800e55e:	2a09      	cmp	r2, #9
 800e560:	d903      	bls.n	800e56a <_svfiprintf_r+0x1a6>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d0c6      	beq.n	800e4f4 <_svfiprintf_r+0x130>
 800e566:	9105      	str	r1, [sp, #20]
 800e568:	e7c4      	b.n	800e4f4 <_svfiprintf_r+0x130>
 800e56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e56e:	4604      	mov	r4, r0
 800e570:	2301      	movs	r3, #1
 800e572:	e7f0      	b.n	800e556 <_svfiprintf_r+0x192>
 800e574:	ab03      	add	r3, sp, #12
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	462a      	mov	r2, r5
 800e57a:	4b0e      	ldr	r3, [pc, #56]	@ (800e5b4 <_svfiprintf_r+0x1f0>)
 800e57c:	a904      	add	r1, sp, #16
 800e57e:	4638      	mov	r0, r7
 800e580:	f7fc fc6c 	bl	800ae5c <_printf_float>
 800e584:	1c42      	adds	r2, r0, #1
 800e586:	4606      	mov	r6, r0
 800e588:	d1d6      	bne.n	800e538 <_svfiprintf_r+0x174>
 800e58a:	89ab      	ldrh	r3, [r5, #12]
 800e58c:	065b      	lsls	r3, r3, #25
 800e58e:	f53f af2d 	bmi.w	800e3ec <_svfiprintf_r+0x28>
 800e592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e594:	e72c      	b.n	800e3f0 <_svfiprintf_r+0x2c>
 800e596:	ab03      	add	r3, sp, #12
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	462a      	mov	r2, r5
 800e59c:	4b05      	ldr	r3, [pc, #20]	@ (800e5b4 <_svfiprintf_r+0x1f0>)
 800e59e:	a904      	add	r1, sp, #16
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f7fc fef3 	bl	800b38c <_printf_i>
 800e5a6:	e7ed      	b.n	800e584 <_svfiprintf_r+0x1c0>
 800e5a8:	0800f5d1 	.word	0x0800f5d1
 800e5ac:	0800f5db 	.word	0x0800f5db
 800e5b0:	0800ae5d 	.word	0x0800ae5d
 800e5b4:	0800e30d 	.word	0x0800e30d
 800e5b8:	0800f5d7 	.word	0x0800f5d7

0800e5bc <__sfputc_r>:
 800e5bc:	6893      	ldr	r3, [r2, #8]
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	b410      	push	{r4}
 800e5c4:	6093      	str	r3, [r2, #8]
 800e5c6:	da08      	bge.n	800e5da <__sfputc_r+0x1e>
 800e5c8:	6994      	ldr	r4, [r2, #24]
 800e5ca:	42a3      	cmp	r3, r4
 800e5cc:	db01      	blt.n	800e5d2 <__sfputc_r+0x16>
 800e5ce:	290a      	cmp	r1, #10
 800e5d0:	d103      	bne.n	800e5da <__sfputc_r+0x1e>
 800e5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5d6:	f7fd bb9c 	b.w	800bd12 <__swbuf_r>
 800e5da:	6813      	ldr	r3, [r2, #0]
 800e5dc:	1c58      	adds	r0, r3, #1
 800e5de:	6010      	str	r0, [r2, #0]
 800e5e0:	7019      	strb	r1, [r3, #0]
 800e5e2:	4608      	mov	r0, r1
 800e5e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e8:	4770      	bx	lr

0800e5ea <__sfputs_r>:
 800e5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ec:	4606      	mov	r6, r0
 800e5ee:	460f      	mov	r7, r1
 800e5f0:	4614      	mov	r4, r2
 800e5f2:	18d5      	adds	r5, r2, r3
 800e5f4:	42ac      	cmp	r4, r5
 800e5f6:	d101      	bne.n	800e5fc <__sfputs_r+0x12>
 800e5f8:	2000      	movs	r0, #0
 800e5fa:	e007      	b.n	800e60c <__sfputs_r+0x22>
 800e5fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e600:	463a      	mov	r2, r7
 800e602:	4630      	mov	r0, r6
 800e604:	f7ff ffda 	bl	800e5bc <__sfputc_r>
 800e608:	1c43      	adds	r3, r0, #1
 800e60a:	d1f3      	bne.n	800e5f4 <__sfputs_r+0xa>
 800e60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e610 <_vfiprintf_r>:
 800e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e614:	460d      	mov	r5, r1
 800e616:	b09d      	sub	sp, #116	@ 0x74
 800e618:	4614      	mov	r4, r2
 800e61a:	4698      	mov	r8, r3
 800e61c:	4606      	mov	r6, r0
 800e61e:	b118      	cbz	r0, 800e628 <_vfiprintf_r+0x18>
 800e620:	6a03      	ldr	r3, [r0, #32]
 800e622:	b90b      	cbnz	r3, 800e628 <_vfiprintf_r+0x18>
 800e624:	f7fd fa6a 	bl	800bafc <__sinit>
 800e628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e62a:	07d9      	lsls	r1, r3, #31
 800e62c:	d405      	bmi.n	800e63a <_vfiprintf_r+0x2a>
 800e62e:	89ab      	ldrh	r3, [r5, #12]
 800e630:	059a      	lsls	r2, r3, #22
 800e632:	d402      	bmi.n	800e63a <_vfiprintf_r+0x2a>
 800e634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e636:	f7fd fc8e 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800e63a:	89ab      	ldrh	r3, [r5, #12]
 800e63c:	071b      	lsls	r3, r3, #28
 800e63e:	d501      	bpl.n	800e644 <_vfiprintf_r+0x34>
 800e640:	692b      	ldr	r3, [r5, #16]
 800e642:	b99b      	cbnz	r3, 800e66c <_vfiprintf_r+0x5c>
 800e644:	4629      	mov	r1, r5
 800e646:	4630      	mov	r0, r6
 800e648:	f7fd fba2 	bl	800bd90 <__swsetup_r>
 800e64c:	b170      	cbz	r0, 800e66c <_vfiprintf_r+0x5c>
 800e64e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e650:	07dc      	lsls	r4, r3, #31
 800e652:	d504      	bpl.n	800e65e <_vfiprintf_r+0x4e>
 800e654:	f04f 30ff 	mov.w	r0, #4294967295
 800e658:	b01d      	add	sp, #116	@ 0x74
 800e65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65e:	89ab      	ldrh	r3, [r5, #12]
 800e660:	0598      	lsls	r0, r3, #22
 800e662:	d4f7      	bmi.n	800e654 <_vfiprintf_r+0x44>
 800e664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e666:	f7fd fc77 	bl	800bf58 <__retarget_lock_release_recursive>
 800e66a:	e7f3      	b.n	800e654 <_vfiprintf_r+0x44>
 800e66c:	2300      	movs	r3, #0
 800e66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e670:	2320      	movs	r3, #32
 800e672:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e676:	f8cd 800c 	str.w	r8, [sp, #12]
 800e67a:	2330      	movs	r3, #48	@ 0x30
 800e67c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e82c <_vfiprintf_r+0x21c>
 800e680:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e684:	f04f 0901 	mov.w	r9, #1
 800e688:	4623      	mov	r3, r4
 800e68a:	469a      	mov	sl, r3
 800e68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e690:	b10a      	cbz	r2, 800e696 <_vfiprintf_r+0x86>
 800e692:	2a25      	cmp	r2, #37	@ 0x25
 800e694:	d1f9      	bne.n	800e68a <_vfiprintf_r+0x7a>
 800e696:	ebba 0b04 	subs.w	fp, sl, r4
 800e69a:	d00b      	beq.n	800e6b4 <_vfiprintf_r+0xa4>
 800e69c:	465b      	mov	r3, fp
 800e69e:	4622      	mov	r2, r4
 800e6a0:	4629      	mov	r1, r5
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	f7ff ffa1 	bl	800e5ea <__sfputs_r>
 800e6a8:	3001      	adds	r0, #1
 800e6aa:	f000 80a7 	beq.w	800e7fc <_vfiprintf_r+0x1ec>
 800e6ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6b0:	445a      	add	r2, fp
 800e6b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 809f 	beq.w	800e7fc <_vfiprintf_r+0x1ec>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6c8:	f10a 0a01 	add.w	sl, sl, #1
 800e6cc:	9304      	str	r3, [sp, #16]
 800e6ce:	9307      	str	r3, [sp, #28]
 800e6d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6d6:	4654      	mov	r4, sl
 800e6d8:	2205      	movs	r2, #5
 800e6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6de:	4853      	ldr	r0, [pc, #332]	@ (800e82c <_vfiprintf_r+0x21c>)
 800e6e0:	f7f1 fd76 	bl	80001d0 <memchr>
 800e6e4:	9a04      	ldr	r2, [sp, #16]
 800e6e6:	b9d8      	cbnz	r0, 800e720 <_vfiprintf_r+0x110>
 800e6e8:	06d1      	lsls	r1, r2, #27
 800e6ea:	bf44      	itt	mi
 800e6ec:	2320      	movmi	r3, #32
 800e6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6f2:	0713      	lsls	r3, r2, #28
 800e6f4:	bf44      	itt	mi
 800e6f6:	232b      	movmi	r3, #43	@ 0x2b
 800e6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e700:	2b2a      	cmp	r3, #42	@ 0x2a
 800e702:	d015      	beq.n	800e730 <_vfiprintf_r+0x120>
 800e704:	9a07      	ldr	r2, [sp, #28]
 800e706:	4654      	mov	r4, sl
 800e708:	2000      	movs	r0, #0
 800e70a:	f04f 0c0a 	mov.w	ip, #10
 800e70e:	4621      	mov	r1, r4
 800e710:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e714:	3b30      	subs	r3, #48	@ 0x30
 800e716:	2b09      	cmp	r3, #9
 800e718:	d94b      	bls.n	800e7b2 <_vfiprintf_r+0x1a2>
 800e71a:	b1b0      	cbz	r0, 800e74a <_vfiprintf_r+0x13a>
 800e71c:	9207      	str	r2, [sp, #28]
 800e71e:	e014      	b.n	800e74a <_vfiprintf_r+0x13a>
 800e720:	eba0 0308 	sub.w	r3, r0, r8
 800e724:	fa09 f303 	lsl.w	r3, r9, r3
 800e728:	4313      	orrs	r3, r2
 800e72a:	9304      	str	r3, [sp, #16]
 800e72c:	46a2      	mov	sl, r4
 800e72e:	e7d2      	b.n	800e6d6 <_vfiprintf_r+0xc6>
 800e730:	9b03      	ldr	r3, [sp, #12]
 800e732:	1d19      	adds	r1, r3, #4
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	9103      	str	r1, [sp, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	bfbb      	ittet	lt
 800e73c:	425b      	neglt	r3, r3
 800e73e:	f042 0202 	orrlt.w	r2, r2, #2
 800e742:	9307      	strge	r3, [sp, #28]
 800e744:	9307      	strlt	r3, [sp, #28]
 800e746:	bfb8      	it	lt
 800e748:	9204      	strlt	r2, [sp, #16]
 800e74a:	7823      	ldrb	r3, [r4, #0]
 800e74c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e74e:	d10a      	bne.n	800e766 <_vfiprintf_r+0x156>
 800e750:	7863      	ldrb	r3, [r4, #1]
 800e752:	2b2a      	cmp	r3, #42	@ 0x2a
 800e754:	d132      	bne.n	800e7bc <_vfiprintf_r+0x1ac>
 800e756:	9b03      	ldr	r3, [sp, #12]
 800e758:	1d1a      	adds	r2, r3, #4
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	9203      	str	r2, [sp, #12]
 800e75e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e762:	3402      	adds	r4, #2
 800e764:	9305      	str	r3, [sp, #20]
 800e766:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e83c <_vfiprintf_r+0x22c>
 800e76a:	7821      	ldrb	r1, [r4, #0]
 800e76c:	2203      	movs	r2, #3
 800e76e:	4650      	mov	r0, sl
 800e770:	f7f1 fd2e 	bl	80001d0 <memchr>
 800e774:	b138      	cbz	r0, 800e786 <_vfiprintf_r+0x176>
 800e776:	9b04      	ldr	r3, [sp, #16]
 800e778:	eba0 000a 	sub.w	r0, r0, sl
 800e77c:	2240      	movs	r2, #64	@ 0x40
 800e77e:	4082      	lsls	r2, r0
 800e780:	4313      	orrs	r3, r2
 800e782:	3401      	adds	r4, #1
 800e784:	9304      	str	r3, [sp, #16]
 800e786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78a:	4829      	ldr	r0, [pc, #164]	@ (800e830 <_vfiprintf_r+0x220>)
 800e78c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e790:	2206      	movs	r2, #6
 800e792:	f7f1 fd1d 	bl	80001d0 <memchr>
 800e796:	2800      	cmp	r0, #0
 800e798:	d03f      	beq.n	800e81a <_vfiprintf_r+0x20a>
 800e79a:	4b26      	ldr	r3, [pc, #152]	@ (800e834 <_vfiprintf_r+0x224>)
 800e79c:	bb1b      	cbnz	r3, 800e7e6 <_vfiprintf_r+0x1d6>
 800e79e:	9b03      	ldr	r3, [sp, #12]
 800e7a0:	3307      	adds	r3, #7
 800e7a2:	f023 0307 	bic.w	r3, r3, #7
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	9303      	str	r3, [sp, #12]
 800e7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ac:	443b      	add	r3, r7
 800e7ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7b0:	e76a      	b.n	800e688 <_vfiprintf_r+0x78>
 800e7b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	2001      	movs	r0, #1
 800e7ba:	e7a8      	b.n	800e70e <_vfiprintf_r+0xfe>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	3401      	adds	r4, #1
 800e7c0:	9305      	str	r3, [sp, #20]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	f04f 0c0a 	mov.w	ip, #10
 800e7c8:	4620      	mov	r0, r4
 800e7ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7ce:	3a30      	subs	r2, #48	@ 0x30
 800e7d0:	2a09      	cmp	r2, #9
 800e7d2:	d903      	bls.n	800e7dc <_vfiprintf_r+0x1cc>
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d0c6      	beq.n	800e766 <_vfiprintf_r+0x156>
 800e7d8:	9105      	str	r1, [sp, #20]
 800e7da:	e7c4      	b.n	800e766 <_vfiprintf_r+0x156>
 800e7dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e7f0      	b.n	800e7c8 <_vfiprintf_r+0x1b8>
 800e7e6:	ab03      	add	r3, sp, #12
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	462a      	mov	r2, r5
 800e7ec:	4b12      	ldr	r3, [pc, #72]	@ (800e838 <_vfiprintf_r+0x228>)
 800e7ee:	a904      	add	r1, sp, #16
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f7fc fb33 	bl	800ae5c <_printf_float>
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	1c78      	adds	r0, r7, #1
 800e7fa:	d1d6      	bne.n	800e7aa <_vfiprintf_r+0x19a>
 800e7fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7fe:	07d9      	lsls	r1, r3, #31
 800e800:	d405      	bmi.n	800e80e <_vfiprintf_r+0x1fe>
 800e802:	89ab      	ldrh	r3, [r5, #12]
 800e804:	059a      	lsls	r2, r3, #22
 800e806:	d402      	bmi.n	800e80e <_vfiprintf_r+0x1fe>
 800e808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e80a:	f7fd fba5 	bl	800bf58 <__retarget_lock_release_recursive>
 800e80e:	89ab      	ldrh	r3, [r5, #12]
 800e810:	065b      	lsls	r3, r3, #25
 800e812:	f53f af1f 	bmi.w	800e654 <_vfiprintf_r+0x44>
 800e816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e818:	e71e      	b.n	800e658 <_vfiprintf_r+0x48>
 800e81a:	ab03      	add	r3, sp, #12
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	462a      	mov	r2, r5
 800e820:	4b05      	ldr	r3, [pc, #20]	@ (800e838 <_vfiprintf_r+0x228>)
 800e822:	a904      	add	r1, sp, #16
 800e824:	4630      	mov	r0, r6
 800e826:	f7fc fdb1 	bl	800b38c <_printf_i>
 800e82a:	e7e4      	b.n	800e7f6 <_vfiprintf_r+0x1e6>
 800e82c:	0800f5d1 	.word	0x0800f5d1
 800e830:	0800f5db 	.word	0x0800f5db
 800e834:	0800ae5d 	.word	0x0800ae5d
 800e838:	0800e5eb 	.word	0x0800e5eb
 800e83c:	0800f5d7 	.word	0x0800f5d7

0800e840 <__sflush_r>:
 800e840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e848:	0716      	lsls	r6, r2, #28
 800e84a:	4605      	mov	r5, r0
 800e84c:	460c      	mov	r4, r1
 800e84e:	d454      	bmi.n	800e8fa <__sflush_r+0xba>
 800e850:	684b      	ldr	r3, [r1, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	dc02      	bgt.n	800e85c <__sflush_r+0x1c>
 800e856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e858:	2b00      	cmp	r3, #0
 800e85a:	dd48      	ble.n	800e8ee <__sflush_r+0xae>
 800e85c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e85e:	2e00      	cmp	r6, #0
 800e860:	d045      	beq.n	800e8ee <__sflush_r+0xae>
 800e862:	2300      	movs	r3, #0
 800e864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e868:	682f      	ldr	r7, [r5, #0]
 800e86a:	6a21      	ldr	r1, [r4, #32]
 800e86c:	602b      	str	r3, [r5, #0]
 800e86e:	d030      	beq.n	800e8d2 <__sflush_r+0x92>
 800e870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	0759      	lsls	r1, r3, #29
 800e876:	d505      	bpl.n	800e884 <__sflush_r+0x44>
 800e878:	6863      	ldr	r3, [r4, #4]
 800e87a:	1ad2      	subs	r2, r2, r3
 800e87c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e87e:	b10b      	cbz	r3, 800e884 <__sflush_r+0x44>
 800e880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	2300      	movs	r3, #0
 800e886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e888:	6a21      	ldr	r1, [r4, #32]
 800e88a:	4628      	mov	r0, r5
 800e88c:	47b0      	blx	r6
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	d106      	bne.n	800e8a2 <__sflush_r+0x62>
 800e894:	6829      	ldr	r1, [r5, #0]
 800e896:	291d      	cmp	r1, #29
 800e898:	d82b      	bhi.n	800e8f2 <__sflush_r+0xb2>
 800e89a:	4a2a      	ldr	r2, [pc, #168]	@ (800e944 <__sflush_r+0x104>)
 800e89c:	40ca      	lsrs	r2, r1
 800e89e:	07d6      	lsls	r6, r2, #31
 800e8a0:	d527      	bpl.n	800e8f2 <__sflush_r+0xb2>
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	6062      	str	r2, [r4, #4]
 800e8a6:	04d9      	lsls	r1, r3, #19
 800e8a8:	6922      	ldr	r2, [r4, #16]
 800e8aa:	6022      	str	r2, [r4, #0]
 800e8ac:	d504      	bpl.n	800e8b8 <__sflush_r+0x78>
 800e8ae:	1c42      	adds	r2, r0, #1
 800e8b0:	d101      	bne.n	800e8b6 <__sflush_r+0x76>
 800e8b2:	682b      	ldr	r3, [r5, #0]
 800e8b4:	b903      	cbnz	r3, 800e8b8 <__sflush_r+0x78>
 800e8b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e8b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8ba:	602f      	str	r7, [r5, #0]
 800e8bc:	b1b9      	cbz	r1, 800e8ee <__sflush_r+0xae>
 800e8be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8c2:	4299      	cmp	r1, r3
 800e8c4:	d002      	beq.n	800e8cc <__sflush_r+0x8c>
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f7fe f9a6 	bl	800cc18 <_free_r>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800e8d0:	e00d      	b.n	800e8ee <__sflush_r+0xae>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	47b0      	blx	r6
 800e8d8:	4602      	mov	r2, r0
 800e8da:	1c50      	adds	r0, r2, #1
 800e8dc:	d1c9      	bne.n	800e872 <__sflush_r+0x32>
 800e8de:	682b      	ldr	r3, [r5, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d0c6      	beq.n	800e872 <__sflush_r+0x32>
 800e8e4:	2b1d      	cmp	r3, #29
 800e8e6:	d001      	beq.n	800e8ec <__sflush_r+0xac>
 800e8e8:	2b16      	cmp	r3, #22
 800e8ea:	d11e      	bne.n	800e92a <__sflush_r+0xea>
 800e8ec:	602f      	str	r7, [r5, #0]
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	e022      	b.n	800e938 <__sflush_r+0xf8>
 800e8f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8f6:	b21b      	sxth	r3, r3
 800e8f8:	e01b      	b.n	800e932 <__sflush_r+0xf2>
 800e8fa:	690f      	ldr	r7, [r1, #16]
 800e8fc:	2f00      	cmp	r7, #0
 800e8fe:	d0f6      	beq.n	800e8ee <__sflush_r+0xae>
 800e900:	0793      	lsls	r3, r2, #30
 800e902:	680e      	ldr	r6, [r1, #0]
 800e904:	bf08      	it	eq
 800e906:	694b      	ldreq	r3, [r1, #20]
 800e908:	600f      	str	r7, [r1, #0]
 800e90a:	bf18      	it	ne
 800e90c:	2300      	movne	r3, #0
 800e90e:	eba6 0807 	sub.w	r8, r6, r7
 800e912:	608b      	str	r3, [r1, #8]
 800e914:	f1b8 0f00 	cmp.w	r8, #0
 800e918:	dde9      	ble.n	800e8ee <__sflush_r+0xae>
 800e91a:	6a21      	ldr	r1, [r4, #32]
 800e91c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e91e:	4643      	mov	r3, r8
 800e920:	463a      	mov	r2, r7
 800e922:	4628      	mov	r0, r5
 800e924:	47b0      	blx	r6
 800e926:	2800      	cmp	r0, #0
 800e928:	dc08      	bgt.n	800e93c <__sflush_r+0xfc>
 800e92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e932:	81a3      	strh	r3, [r4, #12]
 800e934:	f04f 30ff 	mov.w	r0, #4294967295
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93c:	4407      	add	r7, r0
 800e93e:	eba8 0800 	sub.w	r8, r8, r0
 800e942:	e7e7      	b.n	800e914 <__sflush_r+0xd4>
 800e944:	20400001 	.word	0x20400001

0800e948 <_fflush_r>:
 800e948:	b538      	push	{r3, r4, r5, lr}
 800e94a:	690b      	ldr	r3, [r1, #16]
 800e94c:	4605      	mov	r5, r0
 800e94e:	460c      	mov	r4, r1
 800e950:	b913      	cbnz	r3, 800e958 <_fflush_r+0x10>
 800e952:	2500      	movs	r5, #0
 800e954:	4628      	mov	r0, r5
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	b118      	cbz	r0, 800e962 <_fflush_r+0x1a>
 800e95a:	6a03      	ldr	r3, [r0, #32]
 800e95c:	b90b      	cbnz	r3, 800e962 <_fflush_r+0x1a>
 800e95e:	f7fd f8cd 	bl	800bafc <__sinit>
 800e962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d0f3      	beq.n	800e952 <_fflush_r+0xa>
 800e96a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e96c:	07d0      	lsls	r0, r2, #31
 800e96e:	d404      	bmi.n	800e97a <_fflush_r+0x32>
 800e970:	0599      	lsls	r1, r3, #22
 800e972:	d402      	bmi.n	800e97a <_fflush_r+0x32>
 800e974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e976:	f7fd faee 	bl	800bf56 <__retarget_lock_acquire_recursive>
 800e97a:	4628      	mov	r0, r5
 800e97c:	4621      	mov	r1, r4
 800e97e:	f7ff ff5f 	bl	800e840 <__sflush_r>
 800e982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e984:	07da      	lsls	r2, r3, #31
 800e986:	4605      	mov	r5, r0
 800e988:	d4e4      	bmi.n	800e954 <_fflush_r+0xc>
 800e98a:	89a3      	ldrh	r3, [r4, #12]
 800e98c:	059b      	lsls	r3, r3, #22
 800e98e:	d4e1      	bmi.n	800e954 <_fflush_r+0xc>
 800e990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e992:	f7fd fae1 	bl	800bf58 <__retarget_lock_release_recursive>
 800e996:	e7dd      	b.n	800e954 <_fflush_r+0xc>

0800e998 <__swhatbuf_r>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	460c      	mov	r4, r1
 800e99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a0:	2900      	cmp	r1, #0
 800e9a2:	b096      	sub	sp, #88	@ 0x58
 800e9a4:	4615      	mov	r5, r2
 800e9a6:	461e      	mov	r6, r3
 800e9a8:	da0d      	bge.n	800e9c6 <__swhatbuf_r+0x2e>
 800e9aa:	89a3      	ldrh	r3, [r4, #12]
 800e9ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e9b0:	f04f 0100 	mov.w	r1, #0
 800e9b4:	bf14      	ite	ne
 800e9b6:	2340      	movne	r3, #64	@ 0x40
 800e9b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e9bc:	2000      	movs	r0, #0
 800e9be:	6031      	str	r1, [r6, #0]
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	b016      	add	sp, #88	@ 0x58
 800e9c4:	bd70      	pop	{r4, r5, r6, pc}
 800e9c6:	466a      	mov	r2, sp
 800e9c8:	f000 f874 	bl	800eab4 <_fstat_r>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	dbec      	blt.n	800e9aa <__swhatbuf_r+0x12>
 800e9d0:	9901      	ldr	r1, [sp, #4]
 800e9d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e9d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e9da:	4259      	negs	r1, r3
 800e9dc:	4159      	adcs	r1, r3
 800e9de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9e2:	e7eb      	b.n	800e9bc <__swhatbuf_r+0x24>

0800e9e4 <__smakebuf_r>:
 800e9e4:	898b      	ldrh	r3, [r1, #12]
 800e9e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9e8:	079d      	lsls	r5, r3, #30
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	d507      	bpl.n	800ea00 <__smakebuf_r+0x1c>
 800e9f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	6123      	str	r3, [r4, #16]
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	6163      	str	r3, [r4, #20]
 800e9fc:	b003      	add	sp, #12
 800e9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea00:	ab01      	add	r3, sp, #4
 800ea02:	466a      	mov	r2, sp
 800ea04:	f7ff ffc8 	bl	800e998 <__swhatbuf_r>
 800ea08:	9f00      	ldr	r7, [sp, #0]
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7fc f8f8 	bl	800ac04 <_malloc_r>
 800ea14:	b948      	cbnz	r0, 800ea2a <__smakebuf_r+0x46>
 800ea16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea1a:	059a      	lsls	r2, r3, #22
 800ea1c:	d4ee      	bmi.n	800e9fc <__smakebuf_r+0x18>
 800ea1e:	f023 0303 	bic.w	r3, r3, #3
 800ea22:	f043 0302 	orr.w	r3, r3, #2
 800ea26:	81a3      	strh	r3, [r4, #12]
 800ea28:	e7e2      	b.n	800e9f0 <__smakebuf_r+0xc>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	6020      	str	r0, [r4, #0]
 800ea2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea32:	81a3      	strh	r3, [r4, #12]
 800ea34:	9b01      	ldr	r3, [sp, #4]
 800ea36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea3a:	b15b      	cbz	r3, 800ea54 <__smakebuf_r+0x70>
 800ea3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea40:	4630      	mov	r0, r6
 800ea42:	f000 f849 	bl	800ead8 <_isatty_r>
 800ea46:	b128      	cbz	r0, 800ea54 <__smakebuf_r+0x70>
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	f023 0303 	bic.w	r3, r3, #3
 800ea4e:	f043 0301 	orr.w	r3, r3, #1
 800ea52:	81a3      	strh	r3, [r4, #12]
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	431d      	orrs	r5, r3
 800ea58:	81a5      	strh	r5, [r4, #12]
 800ea5a:	e7cf      	b.n	800e9fc <__smakebuf_r+0x18>

0800ea5c <memmove>:
 800ea5c:	4288      	cmp	r0, r1
 800ea5e:	b510      	push	{r4, lr}
 800ea60:	eb01 0402 	add.w	r4, r1, r2
 800ea64:	d902      	bls.n	800ea6c <memmove+0x10>
 800ea66:	4284      	cmp	r4, r0
 800ea68:	4623      	mov	r3, r4
 800ea6a:	d807      	bhi.n	800ea7c <memmove+0x20>
 800ea6c:	1e43      	subs	r3, r0, #1
 800ea6e:	42a1      	cmp	r1, r4
 800ea70:	d008      	beq.n	800ea84 <memmove+0x28>
 800ea72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea7a:	e7f8      	b.n	800ea6e <memmove+0x12>
 800ea7c:	4402      	add	r2, r0
 800ea7e:	4601      	mov	r1, r0
 800ea80:	428a      	cmp	r2, r1
 800ea82:	d100      	bne.n	800ea86 <memmove+0x2a>
 800ea84:	bd10      	pop	{r4, pc}
 800ea86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea8e:	e7f7      	b.n	800ea80 <memmove+0x24>

0800ea90 <strncmp>:
 800ea90:	b510      	push	{r4, lr}
 800ea92:	b16a      	cbz	r2, 800eab0 <strncmp+0x20>
 800ea94:	3901      	subs	r1, #1
 800ea96:	1884      	adds	r4, r0, r2
 800ea98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea9c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d103      	bne.n	800eaac <strncmp+0x1c>
 800eaa4:	42a0      	cmp	r0, r4
 800eaa6:	d001      	beq.n	800eaac <strncmp+0x1c>
 800eaa8:	2a00      	cmp	r2, #0
 800eaaa:	d1f5      	bne.n	800ea98 <strncmp+0x8>
 800eaac:	1ad0      	subs	r0, r2, r3
 800eaae:	bd10      	pop	{r4, pc}
 800eab0:	4610      	mov	r0, r2
 800eab2:	e7fc      	b.n	800eaae <strncmp+0x1e>

0800eab4 <_fstat_r>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	4d07      	ldr	r5, [pc, #28]	@ (800ead4 <_fstat_r+0x20>)
 800eab8:	2300      	movs	r3, #0
 800eaba:	4604      	mov	r4, r0
 800eabc:	4608      	mov	r0, r1
 800eabe:	4611      	mov	r1, r2
 800eac0:	602b      	str	r3, [r5, #0]
 800eac2:	f7f2 ffa5 	bl	8001a10 <_fstat>
 800eac6:	1c43      	adds	r3, r0, #1
 800eac8:	d102      	bne.n	800ead0 <_fstat_r+0x1c>
 800eaca:	682b      	ldr	r3, [r5, #0]
 800eacc:	b103      	cbz	r3, 800ead0 <_fstat_r+0x1c>
 800eace:	6023      	str	r3, [r4, #0]
 800ead0:	bd38      	pop	{r3, r4, r5, pc}
 800ead2:	bf00      	nop
 800ead4:	2000203c 	.word	0x2000203c

0800ead8 <_isatty_r>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	4d06      	ldr	r5, [pc, #24]	@ (800eaf4 <_isatty_r+0x1c>)
 800eadc:	2300      	movs	r3, #0
 800eade:	4604      	mov	r4, r0
 800eae0:	4608      	mov	r0, r1
 800eae2:	602b      	str	r3, [r5, #0]
 800eae4:	f7f2 ffa4 	bl	8001a30 <_isatty>
 800eae8:	1c43      	adds	r3, r0, #1
 800eaea:	d102      	bne.n	800eaf2 <_isatty_r+0x1a>
 800eaec:	682b      	ldr	r3, [r5, #0]
 800eaee:	b103      	cbz	r3, 800eaf2 <_isatty_r+0x1a>
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	bd38      	pop	{r3, r4, r5, pc}
 800eaf4:	2000203c 	.word	0x2000203c

0800eaf8 <memcpy>:
 800eaf8:	440a      	add	r2, r1
 800eafa:	4291      	cmp	r1, r2
 800eafc:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb00:	d100      	bne.n	800eb04 <memcpy+0xc>
 800eb02:	4770      	bx	lr
 800eb04:	b510      	push	{r4, lr}
 800eb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb0e:	4291      	cmp	r1, r2
 800eb10:	d1f9      	bne.n	800eb06 <memcpy+0xe>
 800eb12:	bd10      	pop	{r4, pc}
 800eb14:	0000      	movs	r0, r0
	...

0800eb18 <nan>:
 800eb18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eb20 <nan+0x8>
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	00000000 	.word	0x00000000
 800eb24:	7ff80000 	.word	0x7ff80000

0800eb28 <__assert_func>:
 800eb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb2a:	4614      	mov	r4, r2
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	4b09      	ldr	r3, [pc, #36]	@ (800eb54 <__assert_func+0x2c>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4605      	mov	r5, r0
 800eb34:	68d8      	ldr	r0, [r3, #12]
 800eb36:	b14c      	cbz	r4, 800eb4c <__assert_func+0x24>
 800eb38:	4b07      	ldr	r3, [pc, #28]	@ (800eb58 <__assert_func+0x30>)
 800eb3a:	9100      	str	r1, [sp, #0]
 800eb3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb40:	4906      	ldr	r1, [pc, #24]	@ (800eb5c <__assert_func+0x34>)
 800eb42:	462b      	mov	r3, r5
 800eb44:	f000 fba8 	bl	800f298 <fiprintf>
 800eb48:	f000 fbb8 	bl	800f2bc <abort>
 800eb4c:	4b04      	ldr	r3, [pc, #16]	@ (800eb60 <__assert_func+0x38>)
 800eb4e:	461c      	mov	r4, r3
 800eb50:	e7f3      	b.n	800eb3a <__assert_func+0x12>
 800eb52:	bf00      	nop
 800eb54:	20000238 	.word	0x20000238
 800eb58:	0800f5ea 	.word	0x0800f5ea
 800eb5c:	0800f5f7 	.word	0x0800f5f7
 800eb60:	0800f625 	.word	0x0800f625

0800eb64 <_calloc_r>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	fba1 5402 	umull	r5, r4, r1, r2
 800eb6a:	b934      	cbnz	r4, 800eb7a <_calloc_r+0x16>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	f7fc f849 	bl	800ac04 <_malloc_r>
 800eb72:	4606      	mov	r6, r0
 800eb74:	b928      	cbnz	r0, 800eb82 <_calloc_r+0x1e>
 800eb76:	4630      	mov	r0, r6
 800eb78:	bd70      	pop	{r4, r5, r6, pc}
 800eb7a:	220c      	movs	r2, #12
 800eb7c:	6002      	str	r2, [r0, #0]
 800eb7e:	2600      	movs	r6, #0
 800eb80:	e7f9      	b.n	800eb76 <_calloc_r+0x12>
 800eb82:	462a      	mov	r2, r5
 800eb84:	4621      	mov	r1, r4
 800eb86:	f7fd f959 	bl	800be3c <memset>
 800eb8a:	e7f4      	b.n	800eb76 <_calloc_r+0x12>

0800eb8c <rshift>:
 800eb8c:	6903      	ldr	r3, [r0, #16]
 800eb8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eb92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eb9a:	f100 0414 	add.w	r4, r0, #20
 800eb9e:	dd45      	ble.n	800ec2c <rshift+0xa0>
 800eba0:	f011 011f 	ands.w	r1, r1, #31
 800eba4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eba8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ebac:	d10c      	bne.n	800ebc8 <rshift+0x3c>
 800ebae:	f100 0710 	add.w	r7, r0, #16
 800ebb2:	4629      	mov	r1, r5
 800ebb4:	42b1      	cmp	r1, r6
 800ebb6:	d334      	bcc.n	800ec22 <rshift+0x96>
 800ebb8:	1a9b      	subs	r3, r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	1eea      	subs	r2, r5, #3
 800ebbe:	4296      	cmp	r6, r2
 800ebc0:	bf38      	it	cc
 800ebc2:	2300      	movcc	r3, #0
 800ebc4:	4423      	add	r3, r4
 800ebc6:	e015      	b.n	800ebf4 <rshift+0x68>
 800ebc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ebcc:	f1c1 0820 	rsb	r8, r1, #32
 800ebd0:	40cf      	lsrs	r7, r1
 800ebd2:	f105 0e04 	add.w	lr, r5, #4
 800ebd6:	46a1      	mov	r9, r4
 800ebd8:	4576      	cmp	r6, lr
 800ebda:	46f4      	mov	ip, lr
 800ebdc:	d815      	bhi.n	800ec0a <rshift+0x7e>
 800ebde:	1a9a      	subs	r2, r3, r2
 800ebe0:	0092      	lsls	r2, r2, #2
 800ebe2:	3a04      	subs	r2, #4
 800ebe4:	3501      	adds	r5, #1
 800ebe6:	42ae      	cmp	r6, r5
 800ebe8:	bf38      	it	cc
 800ebea:	2200      	movcc	r2, #0
 800ebec:	18a3      	adds	r3, r4, r2
 800ebee:	50a7      	str	r7, [r4, r2]
 800ebf0:	b107      	cbz	r7, 800ebf4 <rshift+0x68>
 800ebf2:	3304      	adds	r3, #4
 800ebf4:	1b1a      	subs	r2, r3, r4
 800ebf6:	42a3      	cmp	r3, r4
 800ebf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ebfc:	bf08      	it	eq
 800ebfe:	2300      	moveq	r3, #0
 800ec00:	6102      	str	r2, [r0, #16]
 800ec02:	bf08      	it	eq
 800ec04:	6143      	streq	r3, [r0, #20]
 800ec06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec0a:	f8dc c000 	ldr.w	ip, [ip]
 800ec0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ec12:	ea4c 0707 	orr.w	r7, ip, r7
 800ec16:	f849 7b04 	str.w	r7, [r9], #4
 800ec1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec1e:	40cf      	lsrs	r7, r1
 800ec20:	e7da      	b.n	800ebd8 <rshift+0x4c>
 800ec22:	f851 cb04 	ldr.w	ip, [r1], #4
 800ec26:	f847 cf04 	str.w	ip, [r7, #4]!
 800ec2a:	e7c3      	b.n	800ebb4 <rshift+0x28>
 800ec2c:	4623      	mov	r3, r4
 800ec2e:	e7e1      	b.n	800ebf4 <rshift+0x68>

0800ec30 <__hexdig_fun>:
 800ec30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ec34:	2b09      	cmp	r3, #9
 800ec36:	d802      	bhi.n	800ec3e <__hexdig_fun+0xe>
 800ec38:	3820      	subs	r0, #32
 800ec3a:	b2c0      	uxtb	r0, r0
 800ec3c:	4770      	bx	lr
 800ec3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ec42:	2b05      	cmp	r3, #5
 800ec44:	d801      	bhi.n	800ec4a <__hexdig_fun+0x1a>
 800ec46:	3847      	subs	r0, #71	@ 0x47
 800ec48:	e7f7      	b.n	800ec3a <__hexdig_fun+0xa>
 800ec4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d801      	bhi.n	800ec56 <__hexdig_fun+0x26>
 800ec52:	3827      	subs	r0, #39	@ 0x27
 800ec54:	e7f1      	b.n	800ec3a <__hexdig_fun+0xa>
 800ec56:	2000      	movs	r0, #0
 800ec58:	4770      	bx	lr
	...

0800ec5c <__gethex>:
 800ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec60:	b085      	sub	sp, #20
 800ec62:	468a      	mov	sl, r1
 800ec64:	9302      	str	r3, [sp, #8]
 800ec66:	680b      	ldr	r3, [r1, #0]
 800ec68:	9001      	str	r0, [sp, #4]
 800ec6a:	4690      	mov	r8, r2
 800ec6c:	1c9c      	adds	r4, r3, #2
 800ec6e:	46a1      	mov	r9, r4
 800ec70:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ec74:	2830      	cmp	r0, #48	@ 0x30
 800ec76:	d0fa      	beq.n	800ec6e <__gethex+0x12>
 800ec78:	eba9 0303 	sub.w	r3, r9, r3
 800ec7c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ec80:	f7ff ffd6 	bl	800ec30 <__hexdig_fun>
 800ec84:	4605      	mov	r5, r0
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d168      	bne.n	800ed5c <__gethex+0x100>
 800ec8a:	49a0      	ldr	r1, [pc, #640]	@ (800ef0c <__gethex+0x2b0>)
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	4648      	mov	r0, r9
 800ec90:	f7ff fefe 	bl	800ea90 <strncmp>
 800ec94:	4607      	mov	r7, r0
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d167      	bne.n	800ed6a <__gethex+0x10e>
 800ec9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ec9e:	4626      	mov	r6, r4
 800eca0:	f7ff ffc6 	bl	800ec30 <__hexdig_fun>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d062      	beq.n	800ed6e <__gethex+0x112>
 800eca8:	4623      	mov	r3, r4
 800ecaa:	7818      	ldrb	r0, [r3, #0]
 800ecac:	2830      	cmp	r0, #48	@ 0x30
 800ecae:	4699      	mov	r9, r3
 800ecb0:	f103 0301 	add.w	r3, r3, #1
 800ecb4:	d0f9      	beq.n	800ecaa <__gethex+0x4e>
 800ecb6:	f7ff ffbb 	bl	800ec30 <__hexdig_fun>
 800ecba:	fab0 f580 	clz	r5, r0
 800ecbe:	096d      	lsrs	r5, r5, #5
 800ecc0:	f04f 0b01 	mov.w	fp, #1
 800ecc4:	464a      	mov	r2, r9
 800ecc6:	4616      	mov	r6, r2
 800ecc8:	3201      	adds	r2, #1
 800ecca:	7830      	ldrb	r0, [r6, #0]
 800eccc:	f7ff ffb0 	bl	800ec30 <__hexdig_fun>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d1f8      	bne.n	800ecc6 <__gethex+0x6a>
 800ecd4:	498d      	ldr	r1, [pc, #564]	@ (800ef0c <__gethex+0x2b0>)
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f7ff fed9 	bl	800ea90 <strncmp>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d13f      	bne.n	800ed62 <__gethex+0x106>
 800ece2:	b944      	cbnz	r4, 800ecf6 <__gethex+0x9a>
 800ece4:	1c74      	adds	r4, r6, #1
 800ece6:	4622      	mov	r2, r4
 800ece8:	4616      	mov	r6, r2
 800ecea:	3201      	adds	r2, #1
 800ecec:	7830      	ldrb	r0, [r6, #0]
 800ecee:	f7ff ff9f 	bl	800ec30 <__hexdig_fun>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d1f8      	bne.n	800ece8 <__gethex+0x8c>
 800ecf6:	1ba4      	subs	r4, r4, r6
 800ecf8:	00a7      	lsls	r7, r4, #2
 800ecfa:	7833      	ldrb	r3, [r6, #0]
 800ecfc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ed00:	2b50      	cmp	r3, #80	@ 0x50
 800ed02:	d13e      	bne.n	800ed82 <__gethex+0x126>
 800ed04:	7873      	ldrb	r3, [r6, #1]
 800ed06:	2b2b      	cmp	r3, #43	@ 0x2b
 800ed08:	d033      	beq.n	800ed72 <__gethex+0x116>
 800ed0a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ed0c:	d034      	beq.n	800ed78 <__gethex+0x11c>
 800ed0e:	1c71      	adds	r1, r6, #1
 800ed10:	2400      	movs	r4, #0
 800ed12:	7808      	ldrb	r0, [r1, #0]
 800ed14:	f7ff ff8c 	bl	800ec30 <__hexdig_fun>
 800ed18:	1e43      	subs	r3, r0, #1
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b18      	cmp	r3, #24
 800ed1e:	d830      	bhi.n	800ed82 <__gethex+0x126>
 800ed20:	f1a0 0210 	sub.w	r2, r0, #16
 800ed24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ed28:	f7ff ff82 	bl	800ec30 <__hexdig_fun>
 800ed2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ed30:	fa5f fc8c 	uxtb.w	ip, ip
 800ed34:	f1bc 0f18 	cmp.w	ip, #24
 800ed38:	f04f 030a 	mov.w	r3, #10
 800ed3c:	d91e      	bls.n	800ed7c <__gethex+0x120>
 800ed3e:	b104      	cbz	r4, 800ed42 <__gethex+0xe6>
 800ed40:	4252      	negs	r2, r2
 800ed42:	4417      	add	r7, r2
 800ed44:	f8ca 1000 	str.w	r1, [sl]
 800ed48:	b1ed      	cbz	r5, 800ed86 <__gethex+0x12a>
 800ed4a:	f1bb 0f00 	cmp.w	fp, #0
 800ed4e:	bf0c      	ite	eq
 800ed50:	2506      	moveq	r5, #6
 800ed52:	2500      	movne	r5, #0
 800ed54:	4628      	mov	r0, r5
 800ed56:	b005      	add	sp, #20
 800ed58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5c:	2500      	movs	r5, #0
 800ed5e:	462c      	mov	r4, r5
 800ed60:	e7b0      	b.n	800ecc4 <__gethex+0x68>
 800ed62:	2c00      	cmp	r4, #0
 800ed64:	d1c7      	bne.n	800ecf6 <__gethex+0x9a>
 800ed66:	4627      	mov	r7, r4
 800ed68:	e7c7      	b.n	800ecfa <__gethex+0x9e>
 800ed6a:	464e      	mov	r6, r9
 800ed6c:	462f      	mov	r7, r5
 800ed6e:	2501      	movs	r5, #1
 800ed70:	e7c3      	b.n	800ecfa <__gethex+0x9e>
 800ed72:	2400      	movs	r4, #0
 800ed74:	1cb1      	adds	r1, r6, #2
 800ed76:	e7cc      	b.n	800ed12 <__gethex+0xb6>
 800ed78:	2401      	movs	r4, #1
 800ed7a:	e7fb      	b.n	800ed74 <__gethex+0x118>
 800ed7c:	fb03 0002 	mla	r0, r3, r2, r0
 800ed80:	e7ce      	b.n	800ed20 <__gethex+0xc4>
 800ed82:	4631      	mov	r1, r6
 800ed84:	e7de      	b.n	800ed44 <__gethex+0xe8>
 800ed86:	eba6 0309 	sub.w	r3, r6, r9
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	2b07      	cmp	r3, #7
 800ed90:	dc0a      	bgt.n	800eda8 <__gethex+0x14c>
 800ed92:	9801      	ldr	r0, [sp, #4]
 800ed94:	f7fd ff8a 	bl	800ccac <_Balloc>
 800ed98:	4604      	mov	r4, r0
 800ed9a:	b940      	cbnz	r0, 800edae <__gethex+0x152>
 800ed9c:	4b5c      	ldr	r3, [pc, #368]	@ (800ef10 <__gethex+0x2b4>)
 800ed9e:	4602      	mov	r2, r0
 800eda0:	21e4      	movs	r1, #228	@ 0xe4
 800eda2:	485c      	ldr	r0, [pc, #368]	@ (800ef14 <__gethex+0x2b8>)
 800eda4:	f7ff fec0 	bl	800eb28 <__assert_func>
 800eda8:	3101      	adds	r1, #1
 800edaa:	105b      	asrs	r3, r3, #1
 800edac:	e7ef      	b.n	800ed8e <__gethex+0x132>
 800edae:	f100 0a14 	add.w	sl, r0, #20
 800edb2:	2300      	movs	r3, #0
 800edb4:	4655      	mov	r5, sl
 800edb6:	469b      	mov	fp, r3
 800edb8:	45b1      	cmp	r9, r6
 800edba:	d337      	bcc.n	800ee2c <__gethex+0x1d0>
 800edbc:	f845 bb04 	str.w	fp, [r5], #4
 800edc0:	eba5 050a 	sub.w	r5, r5, sl
 800edc4:	10ad      	asrs	r5, r5, #2
 800edc6:	6125      	str	r5, [r4, #16]
 800edc8:	4658      	mov	r0, fp
 800edca:	f7fe f861 	bl	800ce90 <__hi0bits>
 800edce:	016d      	lsls	r5, r5, #5
 800edd0:	f8d8 6000 	ldr.w	r6, [r8]
 800edd4:	1a2d      	subs	r5, r5, r0
 800edd6:	42b5      	cmp	r5, r6
 800edd8:	dd54      	ble.n	800ee84 <__gethex+0x228>
 800edda:	1bad      	subs	r5, r5, r6
 800eddc:	4629      	mov	r1, r5
 800edde:	4620      	mov	r0, r4
 800ede0:	f7fe fbed 	bl	800d5be <__any_on>
 800ede4:	4681      	mov	r9, r0
 800ede6:	b178      	cbz	r0, 800ee08 <__gethex+0x1ac>
 800ede8:	1e6b      	subs	r3, r5, #1
 800edea:	1159      	asrs	r1, r3, #5
 800edec:	f003 021f 	and.w	r2, r3, #31
 800edf0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800edf4:	f04f 0901 	mov.w	r9, #1
 800edf8:	fa09 f202 	lsl.w	r2, r9, r2
 800edfc:	420a      	tst	r2, r1
 800edfe:	d003      	beq.n	800ee08 <__gethex+0x1ac>
 800ee00:	454b      	cmp	r3, r9
 800ee02:	dc36      	bgt.n	800ee72 <__gethex+0x216>
 800ee04:	f04f 0902 	mov.w	r9, #2
 800ee08:	4629      	mov	r1, r5
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f7ff febe 	bl	800eb8c <rshift>
 800ee10:	442f      	add	r7, r5
 800ee12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee16:	42bb      	cmp	r3, r7
 800ee18:	da42      	bge.n	800eea0 <__gethex+0x244>
 800ee1a:	9801      	ldr	r0, [sp, #4]
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	f7fd ff85 	bl	800cd2c <_Bfree>
 800ee22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee24:	2300      	movs	r3, #0
 800ee26:	6013      	str	r3, [r2, #0]
 800ee28:	25a3      	movs	r5, #163	@ 0xa3
 800ee2a:	e793      	b.n	800ed54 <__gethex+0xf8>
 800ee2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ee30:	2a2e      	cmp	r2, #46	@ 0x2e
 800ee32:	d012      	beq.n	800ee5a <__gethex+0x1fe>
 800ee34:	2b20      	cmp	r3, #32
 800ee36:	d104      	bne.n	800ee42 <__gethex+0x1e6>
 800ee38:	f845 bb04 	str.w	fp, [r5], #4
 800ee3c:	f04f 0b00 	mov.w	fp, #0
 800ee40:	465b      	mov	r3, fp
 800ee42:	7830      	ldrb	r0, [r6, #0]
 800ee44:	9303      	str	r3, [sp, #12]
 800ee46:	f7ff fef3 	bl	800ec30 <__hexdig_fun>
 800ee4a:	9b03      	ldr	r3, [sp, #12]
 800ee4c:	f000 000f 	and.w	r0, r0, #15
 800ee50:	4098      	lsls	r0, r3
 800ee52:	ea4b 0b00 	orr.w	fp, fp, r0
 800ee56:	3304      	adds	r3, #4
 800ee58:	e7ae      	b.n	800edb8 <__gethex+0x15c>
 800ee5a:	45b1      	cmp	r9, r6
 800ee5c:	d8ea      	bhi.n	800ee34 <__gethex+0x1d8>
 800ee5e:	492b      	ldr	r1, [pc, #172]	@ (800ef0c <__gethex+0x2b0>)
 800ee60:	9303      	str	r3, [sp, #12]
 800ee62:	2201      	movs	r2, #1
 800ee64:	4630      	mov	r0, r6
 800ee66:	f7ff fe13 	bl	800ea90 <strncmp>
 800ee6a:	9b03      	ldr	r3, [sp, #12]
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d1e1      	bne.n	800ee34 <__gethex+0x1d8>
 800ee70:	e7a2      	b.n	800edb8 <__gethex+0x15c>
 800ee72:	1ea9      	subs	r1, r5, #2
 800ee74:	4620      	mov	r0, r4
 800ee76:	f7fe fba2 	bl	800d5be <__any_on>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d0c2      	beq.n	800ee04 <__gethex+0x1a8>
 800ee7e:	f04f 0903 	mov.w	r9, #3
 800ee82:	e7c1      	b.n	800ee08 <__gethex+0x1ac>
 800ee84:	da09      	bge.n	800ee9a <__gethex+0x23e>
 800ee86:	1b75      	subs	r5, r6, r5
 800ee88:	4621      	mov	r1, r4
 800ee8a:	9801      	ldr	r0, [sp, #4]
 800ee8c:	462a      	mov	r2, r5
 800ee8e:	f7fe f95d 	bl	800d14c <__lshift>
 800ee92:	1b7f      	subs	r7, r7, r5
 800ee94:	4604      	mov	r4, r0
 800ee96:	f100 0a14 	add.w	sl, r0, #20
 800ee9a:	f04f 0900 	mov.w	r9, #0
 800ee9e:	e7b8      	b.n	800ee12 <__gethex+0x1b6>
 800eea0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eea4:	42bd      	cmp	r5, r7
 800eea6:	dd6f      	ble.n	800ef88 <__gethex+0x32c>
 800eea8:	1bed      	subs	r5, r5, r7
 800eeaa:	42ae      	cmp	r6, r5
 800eeac:	dc34      	bgt.n	800ef18 <__gethex+0x2bc>
 800eeae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eeb2:	2b02      	cmp	r3, #2
 800eeb4:	d022      	beq.n	800eefc <__gethex+0x2a0>
 800eeb6:	2b03      	cmp	r3, #3
 800eeb8:	d024      	beq.n	800ef04 <__gethex+0x2a8>
 800eeba:	2b01      	cmp	r3, #1
 800eebc:	d115      	bne.n	800eeea <__gethex+0x28e>
 800eebe:	42ae      	cmp	r6, r5
 800eec0:	d113      	bne.n	800eeea <__gethex+0x28e>
 800eec2:	2e01      	cmp	r6, #1
 800eec4:	d10b      	bne.n	800eede <__gethex+0x282>
 800eec6:	9a02      	ldr	r2, [sp, #8]
 800eec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	2301      	movs	r3, #1
 800eed0:	6123      	str	r3, [r4, #16]
 800eed2:	f8ca 3000 	str.w	r3, [sl]
 800eed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eed8:	2562      	movs	r5, #98	@ 0x62
 800eeda:	601c      	str	r4, [r3, #0]
 800eedc:	e73a      	b.n	800ed54 <__gethex+0xf8>
 800eede:	1e71      	subs	r1, r6, #1
 800eee0:	4620      	mov	r0, r4
 800eee2:	f7fe fb6c 	bl	800d5be <__any_on>
 800eee6:	2800      	cmp	r0, #0
 800eee8:	d1ed      	bne.n	800eec6 <__gethex+0x26a>
 800eeea:	9801      	ldr	r0, [sp, #4]
 800eeec:	4621      	mov	r1, r4
 800eeee:	f7fd ff1d 	bl	800cd2c <_Bfree>
 800eef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eef4:	2300      	movs	r3, #0
 800eef6:	6013      	str	r3, [r2, #0]
 800eef8:	2550      	movs	r5, #80	@ 0x50
 800eefa:	e72b      	b.n	800ed54 <__gethex+0xf8>
 800eefc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1f3      	bne.n	800eeea <__gethex+0x28e>
 800ef02:	e7e0      	b.n	800eec6 <__gethex+0x26a>
 800ef04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1dd      	bne.n	800eec6 <__gethex+0x26a>
 800ef0a:	e7ee      	b.n	800eeea <__gethex+0x28e>
 800ef0c:	0800f5cf 	.word	0x0800f5cf
 800ef10:	0800f565 	.word	0x0800f565
 800ef14:	0800f626 	.word	0x0800f626
 800ef18:	1e6f      	subs	r7, r5, #1
 800ef1a:	f1b9 0f00 	cmp.w	r9, #0
 800ef1e:	d130      	bne.n	800ef82 <__gethex+0x326>
 800ef20:	b127      	cbz	r7, 800ef2c <__gethex+0x2d0>
 800ef22:	4639      	mov	r1, r7
 800ef24:	4620      	mov	r0, r4
 800ef26:	f7fe fb4a 	bl	800d5be <__any_on>
 800ef2a:	4681      	mov	r9, r0
 800ef2c:	117a      	asrs	r2, r7, #5
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ef34:	f007 071f 	and.w	r7, r7, #31
 800ef38:	40bb      	lsls	r3, r7
 800ef3a:	4213      	tst	r3, r2
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	4620      	mov	r0, r4
 800ef40:	bf18      	it	ne
 800ef42:	f049 0902 	orrne.w	r9, r9, #2
 800ef46:	f7ff fe21 	bl	800eb8c <rshift>
 800ef4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ef4e:	1b76      	subs	r6, r6, r5
 800ef50:	2502      	movs	r5, #2
 800ef52:	f1b9 0f00 	cmp.w	r9, #0
 800ef56:	d047      	beq.n	800efe8 <__gethex+0x38c>
 800ef58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d015      	beq.n	800ef8c <__gethex+0x330>
 800ef60:	2b03      	cmp	r3, #3
 800ef62:	d017      	beq.n	800ef94 <__gethex+0x338>
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d109      	bne.n	800ef7c <__gethex+0x320>
 800ef68:	f019 0f02 	tst.w	r9, #2
 800ef6c:	d006      	beq.n	800ef7c <__gethex+0x320>
 800ef6e:	f8da 3000 	ldr.w	r3, [sl]
 800ef72:	ea49 0903 	orr.w	r9, r9, r3
 800ef76:	f019 0f01 	tst.w	r9, #1
 800ef7a:	d10e      	bne.n	800ef9a <__gethex+0x33e>
 800ef7c:	f045 0510 	orr.w	r5, r5, #16
 800ef80:	e032      	b.n	800efe8 <__gethex+0x38c>
 800ef82:	f04f 0901 	mov.w	r9, #1
 800ef86:	e7d1      	b.n	800ef2c <__gethex+0x2d0>
 800ef88:	2501      	movs	r5, #1
 800ef8a:	e7e2      	b.n	800ef52 <__gethex+0x2f6>
 800ef8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef8e:	f1c3 0301 	rsb	r3, r3, #1
 800ef92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d0f0      	beq.n	800ef7c <__gethex+0x320>
 800ef9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ef9e:	f104 0314 	add.w	r3, r4, #20
 800efa2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800efa6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800efaa:	f04f 0c00 	mov.w	ip, #0
 800efae:	4618      	mov	r0, r3
 800efb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800efb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800efb8:	d01b      	beq.n	800eff2 <__gethex+0x396>
 800efba:	3201      	adds	r2, #1
 800efbc:	6002      	str	r2, [r0, #0]
 800efbe:	2d02      	cmp	r5, #2
 800efc0:	f104 0314 	add.w	r3, r4, #20
 800efc4:	d13c      	bne.n	800f040 <__gethex+0x3e4>
 800efc6:	f8d8 2000 	ldr.w	r2, [r8]
 800efca:	3a01      	subs	r2, #1
 800efcc:	42b2      	cmp	r2, r6
 800efce:	d109      	bne.n	800efe4 <__gethex+0x388>
 800efd0:	1171      	asrs	r1, r6, #5
 800efd2:	2201      	movs	r2, #1
 800efd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800efd8:	f006 061f 	and.w	r6, r6, #31
 800efdc:	fa02 f606 	lsl.w	r6, r2, r6
 800efe0:	421e      	tst	r6, r3
 800efe2:	d13a      	bne.n	800f05a <__gethex+0x3fe>
 800efe4:	f045 0520 	orr.w	r5, r5, #32
 800efe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efea:	601c      	str	r4, [r3, #0]
 800efec:	9b02      	ldr	r3, [sp, #8]
 800efee:	601f      	str	r7, [r3, #0]
 800eff0:	e6b0      	b.n	800ed54 <__gethex+0xf8>
 800eff2:	4299      	cmp	r1, r3
 800eff4:	f843 cc04 	str.w	ip, [r3, #-4]
 800eff8:	d8d9      	bhi.n	800efae <__gethex+0x352>
 800effa:	68a3      	ldr	r3, [r4, #8]
 800effc:	459b      	cmp	fp, r3
 800effe:	db17      	blt.n	800f030 <__gethex+0x3d4>
 800f000:	6861      	ldr	r1, [r4, #4]
 800f002:	9801      	ldr	r0, [sp, #4]
 800f004:	3101      	adds	r1, #1
 800f006:	f7fd fe51 	bl	800ccac <_Balloc>
 800f00a:	4681      	mov	r9, r0
 800f00c:	b918      	cbnz	r0, 800f016 <__gethex+0x3ba>
 800f00e:	4b1a      	ldr	r3, [pc, #104]	@ (800f078 <__gethex+0x41c>)
 800f010:	4602      	mov	r2, r0
 800f012:	2184      	movs	r1, #132	@ 0x84
 800f014:	e6c5      	b.n	800eda2 <__gethex+0x146>
 800f016:	6922      	ldr	r2, [r4, #16]
 800f018:	3202      	adds	r2, #2
 800f01a:	f104 010c 	add.w	r1, r4, #12
 800f01e:	0092      	lsls	r2, r2, #2
 800f020:	300c      	adds	r0, #12
 800f022:	f7ff fd69 	bl	800eaf8 <memcpy>
 800f026:	4621      	mov	r1, r4
 800f028:	9801      	ldr	r0, [sp, #4]
 800f02a:	f7fd fe7f 	bl	800cd2c <_Bfree>
 800f02e:	464c      	mov	r4, r9
 800f030:	6923      	ldr	r3, [r4, #16]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f038:	6122      	str	r2, [r4, #16]
 800f03a:	2201      	movs	r2, #1
 800f03c:	615a      	str	r2, [r3, #20]
 800f03e:	e7be      	b.n	800efbe <__gethex+0x362>
 800f040:	6922      	ldr	r2, [r4, #16]
 800f042:	455a      	cmp	r2, fp
 800f044:	dd0b      	ble.n	800f05e <__gethex+0x402>
 800f046:	2101      	movs	r1, #1
 800f048:	4620      	mov	r0, r4
 800f04a:	f7ff fd9f 	bl	800eb8c <rshift>
 800f04e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f052:	3701      	adds	r7, #1
 800f054:	42bb      	cmp	r3, r7
 800f056:	f6ff aee0 	blt.w	800ee1a <__gethex+0x1be>
 800f05a:	2501      	movs	r5, #1
 800f05c:	e7c2      	b.n	800efe4 <__gethex+0x388>
 800f05e:	f016 061f 	ands.w	r6, r6, #31
 800f062:	d0fa      	beq.n	800f05a <__gethex+0x3fe>
 800f064:	4453      	add	r3, sl
 800f066:	f1c6 0620 	rsb	r6, r6, #32
 800f06a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f06e:	f7fd ff0f 	bl	800ce90 <__hi0bits>
 800f072:	42b0      	cmp	r0, r6
 800f074:	dbe7      	blt.n	800f046 <__gethex+0x3ea>
 800f076:	e7f0      	b.n	800f05a <__gethex+0x3fe>
 800f078:	0800f565 	.word	0x0800f565

0800f07c <L_shift>:
 800f07c:	f1c2 0208 	rsb	r2, r2, #8
 800f080:	0092      	lsls	r2, r2, #2
 800f082:	b570      	push	{r4, r5, r6, lr}
 800f084:	f1c2 0620 	rsb	r6, r2, #32
 800f088:	6843      	ldr	r3, [r0, #4]
 800f08a:	6804      	ldr	r4, [r0, #0]
 800f08c:	fa03 f506 	lsl.w	r5, r3, r6
 800f090:	432c      	orrs	r4, r5
 800f092:	40d3      	lsrs	r3, r2
 800f094:	6004      	str	r4, [r0, #0]
 800f096:	f840 3f04 	str.w	r3, [r0, #4]!
 800f09a:	4288      	cmp	r0, r1
 800f09c:	d3f4      	bcc.n	800f088 <L_shift+0xc>
 800f09e:	bd70      	pop	{r4, r5, r6, pc}

0800f0a0 <__match>:
 800f0a0:	b530      	push	{r4, r5, lr}
 800f0a2:	6803      	ldr	r3, [r0, #0]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0aa:	b914      	cbnz	r4, 800f0b2 <__match+0x12>
 800f0ac:	6003      	str	r3, [r0, #0]
 800f0ae:	2001      	movs	r0, #1
 800f0b0:	bd30      	pop	{r4, r5, pc}
 800f0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f0ba:	2d19      	cmp	r5, #25
 800f0bc:	bf98      	it	ls
 800f0be:	3220      	addls	r2, #32
 800f0c0:	42a2      	cmp	r2, r4
 800f0c2:	d0f0      	beq.n	800f0a6 <__match+0x6>
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	e7f3      	b.n	800f0b0 <__match+0x10>

0800f0c8 <__hexnan>:
 800f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0cc:	680b      	ldr	r3, [r1, #0]
 800f0ce:	6801      	ldr	r1, [r0, #0]
 800f0d0:	115e      	asrs	r6, r3, #5
 800f0d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f0d6:	f013 031f 	ands.w	r3, r3, #31
 800f0da:	b087      	sub	sp, #28
 800f0dc:	bf18      	it	ne
 800f0de:	3604      	addne	r6, #4
 800f0e0:	2500      	movs	r5, #0
 800f0e2:	1f37      	subs	r7, r6, #4
 800f0e4:	4682      	mov	sl, r0
 800f0e6:	4690      	mov	r8, r2
 800f0e8:	9301      	str	r3, [sp, #4]
 800f0ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800f0ee:	46b9      	mov	r9, r7
 800f0f0:	463c      	mov	r4, r7
 800f0f2:	9502      	str	r5, [sp, #8]
 800f0f4:	46ab      	mov	fp, r5
 800f0f6:	784a      	ldrb	r2, [r1, #1]
 800f0f8:	1c4b      	adds	r3, r1, #1
 800f0fa:	9303      	str	r3, [sp, #12]
 800f0fc:	b342      	cbz	r2, 800f150 <__hexnan+0x88>
 800f0fe:	4610      	mov	r0, r2
 800f100:	9105      	str	r1, [sp, #20]
 800f102:	9204      	str	r2, [sp, #16]
 800f104:	f7ff fd94 	bl	800ec30 <__hexdig_fun>
 800f108:	2800      	cmp	r0, #0
 800f10a:	d151      	bne.n	800f1b0 <__hexnan+0xe8>
 800f10c:	9a04      	ldr	r2, [sp, #16]
 800f10e:	9905      	ldr	r1, [sp, #20]
 800f110:	2a20      	cmp	r2, #32
 800f112:	d818      	bhi.n	800f146 <__hexnan+0x7e>
 800f114:	9b02      	ldr	r3, [sp, #8]
 800f116:	459b      	cmp	fp, r3
 800f118:	dd13      	ble.n	800f142 <__hexnan+0x7a>
 800f11a:	454c      	cmp	r4, r9
 800f11c:	d206      	bcs.n	800f12c <__hexnan+0x64>
 800f11e:	2d07      	cmp	r5, #7
 800f120:	dc04      	bgt.n	800f12c <__hexnan+0x64>
 800f122:	462a      	mov	r2, r5
 800f124:	4649      	mov	r1, r9
 800f126:	4620      	mov	r0, r4
 800f128:	f7ff ffa8 	bl	800f07c <L_shift>
 800f12c:	4544      	cmp	r4, r8
 800f12e:	d952      	bls.n	800f1d6 <__hexnan+0x10e>
 800f130:	2300      	movs	r3, #0
 800f132:	f1a4 0904 	sub.w	r9, r4, #4
 800f136:	f844 3c04 	str.w	r3, [r4, #-4]
 800f13a:	f8cd b008 	str.w	fp, [sp, #8]
 800f13e:	464c      	mov	r4, r9
 800f140:	461d      	mov	r5, r3
 800f142:	9903      	ldr	r1, [sp, #12]
 800f144:	e7d7      	b.n	800f0f6 <__hexnan+0x2e>
 800f146:	2a29      	cmp	r2, #41	@ 0x29
 800f148:	d157      	bne.n	800f1fa <__hexnan+0x132>
 800f14a:	3102      	adds	r1, #2
 800f14c:	f8ca 1000 	str.w	r1, [sl]
 800f150:	f1bb 0f00 	cmp.w	fp, #0
 800f154:	d051      	beq.n	800f1fa <__hexnan+0x132>
 800f156:	454c      	cmp	r4, r9
 800f158:	d206      	bcs.n	800f168 <__hexnan+0xa0>
 800f15a:	2d07      	cmp	r5, #7
 800f15c:	dc04      	bgt.n	800f168 <__hexnan+0xa0>
 800f15e:	462a      	mov	r2, r5
 800f160:	4649      	mov	r1, r9
 800f162:	4620      	mov	r0, r4
 800f164:	f7ff ff8a 	bl	800f07c <L_shift>
 800f168:	4544      	cmp	r4, r8
 800f16a:	d936      	bls.n	800f1da <__hexnan+0x112>
 800f16c:	f1a8 0204 	sub.w	r2, r8, #4
 800f170:	4623      	mov	r3, r4
 800f172:	f853 1b04 	ldr.w	r1, [r3], #4
 800f176:	f842 1f04 	str.w	r1, [r2, #4]!
 800f17a:	429f      	cmp	r7, r3
 800f17c:	d2f9      	bcs.n	800f172 <__hexnan+0xaa>
 800f17e:	1b3b      	subs	r3, r7, r4
 800f180:	f023 0303 	bic.w	r3, r3, #3
 800f184:	3304      	adds	r3, #4
 800f186:	3401      	adds	r4, #1
 800f188:	3e03      	subs	r6, #3
 800f18a:	42b4      	cmp	r4, r6
 800f18c:	bf88      	it	hi
 800f18e:	2304      	movhi	r3, #4
 800f190:	4443      	add	r3, r8
 800f192:	2200      	movs	r2, #0
 800f194:	f843 2b04 	str.w	r2, [r3], #4
 800f198:	429f      	cmp	r7, r3
 800f19a:	d2fb      	bcs.n	800f194 <__hexnan+0xcc>
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	b91b      	cbnz	r3, 800f1a8 <__hexnan+0xe0>
 800f1a0:	4547      	cmp	r7, r8
 800f1a2:	d128      	bne.n	800f1f6 <__hexnan+0x12e>
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	2005      	movs	r0, #5
 800f1aa:	b007      	add	sp, #28
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	3501      	adds	r5, #1
 800f1b2:	2d08      	cmp	r5, #8
 800f1b4:	f10b 0b01 	add.w	fp, fp, #1
 800f1b8:	dd06      	ble.n	800f1c8 <__hexnan+0x100>
 800f1ba:	4544      	cmp	r4, r8
 800f1bc:	d9c1      	bls.n	800f142 <__hexnan+0x7a>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1c4:	2501      	movs	r5, #1
 800f1c6:	3c04      	subs	r4, #4
 800f1c8:	6822      	ldr	r2, [r4, #0]
 800f1ca:	f000 000f 	and.w	r0, r0, #15
 800f1ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f1d2:	6020      	str	r0, [r4, #0]
 800f1d4:	e7b5      	b.n	800f142 <__hexnan+0x7a>
 800f1d6:	2508      	movs	r5, #8
 800f1d8:	e7b3      	b.n	800f142 <__hexnan+0x7a>
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d0dd      	beq.n	800f19c <__hexnan+0xd4>
 800f1e0:	f1c3 0320 	rsb	r3, r3, #32
 800f1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1e8:	40da      	lsrs	r2, r3
 800f1ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f1ee:	4013      	ands	r3, r2
 800f1f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f1f4:	e7d2      	b.n	800f19c <__hexnan+0xd4>
 800f1f6:	3f04      	subs	r7, #4
 800f1f8:	e7d0      	b.n	800f19c <__hexnan+0xd4>
 800f1fa:	2004      	movs	r0, #4
 800f1fc:	e7d5      	b.n	800f1aa <__hexnan+0xe2>

0800f1fe <__ascii_mbtowc>:
 800f1fe:	b082      	sub	sp, #8
 800f200:	b901      	cbnz	r1, 800f204 <__ascii_mbtowc+0x6>
 800f202:	a901      	add	r1, sp, #4
 800f204:	b142      	cbz	r2, 800f218 <__ascii_mbtowc+0x1a>
 800f206:	b14b      	cbz	r3, 800f21c <__ascii_mbtowc+0x1e>
 800f208:	7813      	ldrb	r3, [r2, #0]
 800f20a:	600b      	str	r3, [r1, #0]
 800f20c:	7812      	ldrb	r2, [r2, #0]
 800f20e:	1e10      	subs	r0, r2, #0
 800f210:	bf18      	it	ne
 800f212:	2001      	movne	r0, #1
 800f214:	b002      	add	sp, #8
 800f216:	4770      	bx	lr
 800f218:	4610      	mov	r0, r2
 800f21a:	e7fb      	b.n	800f214 <__ascii_mbtowc+0x16>
 800f21c:	f06f 0001 	mvn.w	r0, #1
 800f220:	e7f8      	b.n	800f214 <__ascii_mbtowc+0x16>

0800f222 <_realloc_r>:
 800f222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f226:	4607      	mov	r7, r0
 800f228:	4614      	mov	r4, r2
 800f22a:	460d      	mov	r5, r1
 800f22c:	b921      	cbnz	r1, 800f238 <_realloc_r+0x16>
 800f22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f232:	4611      	mov	r1, r2
 800f234:	f7fb bce6 	b.w	800ac04 <_malloc_r>
 800f238:	b92a      	cbnz	r2, 800f246 <_realloc_r+0x24>
 800f23a:	f7fd fced 	bl	800cc18 <_free_r>
 800f23e:	4625      	mov	r5, r4
 800f240:	4628      	mov	r0, r5
 800f242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f246:	f000 f840 	bl	800f2ca <_malloc_usable_size_r>
 800f24a:	4284      	cmp	r4, r0
 800f24c:	4606      	mov	r6, r0
 800f24e:	d802      	bhi.n	800f256 <_realloc_r+0x34>
 800f250:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f254:	d8f4      	bhi.n	800f240 <_realloc_r+0x1e>
 800f256:	4621      	mov	r1, r4
 800f258:	4638      	mov	r0, r7
 800f25a:	f7fb fcd3 	bl	800ac04 <_malloc_r>
 800f25e:	4680      	mov	r8, r0
 800f260:	b908      	cbnz	r0, 800f266 <_realloc_r+0x44>
 800f262:	4645      	mov	r5, r8
 800f264:	e7ec      	b.n	800f240 <_realloc_r+0x1e>
 800f266:	42b4      	cmp	r4, r6
 800f268:	4622      	mov	r2, r4
 800f26a:	4629      	mov	r1, r5
 800f26c:	bf28      	it	cs
 800f26e:	4632      	movcs	r2, r6
 800f270:	f7ff fc42 	bl	800eaf8 <memcpy>
 800f274:	4629      	mov	r1, r5
 800f276:	4638      	mov	r0, r7
 800f278:	f7fd fcce 	bl	800cc18 <_free_r>
 800f27c:	e7f1      	b.n	800f262 <_realloc_r+0x40>

0800f27e <__ascii_wctomb>:
 800f27e:	4603      	mov	r3, r0
 800f280:	4608      	mov	r0, r1
 800f282:	b141      	cbz	r1, 800f296 <__ascii_wctomb+0x18>
 800f284:	2aff      	cmp	r2, #255	@ 0xff
 800f286:	d904      	bls.n	800f292 <__ascii_wctomb+0x14>
 800f288:	228a      	movs	r2, #138	@ 0x8a
 800f28a:	601a      	str	r2, [r3, #0]
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	4770      	bx	lr
 800f292:	700a      	strb	r2, [r1, #0]
 800f294:	2001      	movs	r0, #1
 800f296:	4770      	bx	lr

0800f298 <fiprintf>:
 800f298:	b40e      	push	{r1, r2, r3}
 800f29a:	b503      	push	{r0, r1, lr}
 800f29c:	4601      	mov	r1, r0
 800f29e:	ab03      	add	r3, sp, #12
 800f2a0:	4805      	ldr	r0, [pc, #20]	@ (800f2b8 <fiprintf+0x20>)
 800f2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2a6:	6800      	ldr	r0, [r0, #0]
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	f7ff f9b1 	bl	800e610 <_vfiprintf_r>
 800f2ae:	b002      	add	sp, #8
 800f2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2b4:	b003      	add	sp, #12
 800f2b6:	4770      	bx	lr
 800f2b8:	20000238 	.word	0x20000238

0800f2bc <abort>:
 800f2bc:	b508      	push	{r3, lr}
 800f2be:	2006      	movs	r0, #6
 800f2c0:	f000 f834 	bl	800f32c <raise>
 800f2c4:	2001      	movs	r0, #1
 800f2c6:	f7f2 fb6f 	bl	80019a8 <_exit>

0800f2ca <_malloc_usable_size_r>:
 800f2ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2ce:	1f18      	subs	r0, r3, #4
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bfbc      	itt	lt
 800f2d4:	580b      	ldrlt	r3, [r1, r0]
 800f2d6:	18c0      	addlt	r0, r0, r3
 800f2d8:	4770      	bx	lr

0800f2da <_raise_r>:
 800f2da:	291f      	cmp	r1, #31
 800f2dc:	b538      	push	{r3, r4, r5, lr}
 800f2de:	4605      	mov	r5, r0
 800f2e0:	460c      	mov	r4, r1
 800f2e2:	d904      	bls.n	800f2ee <_raise_r+0x14>
 800f2e4:	2316      	movs	r3, #22
 800f2e6:	6003      	str	r3, [r0, #0]
 800f2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ec:	bd38      	pop	{r3, r4, r5, pc}
 800f2ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2f0:	b112      	cbz	r2, 800f2f8 <_raise_r+0x1e>
 800f2f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2f6:	b94b      	cbnz	r3, 800f30c <_raise_r+0x32>
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	f000 f831 	bl	800f360 <_getpid_r>
 800f2fe:	4622      	mov	r2, r4
 800f300:	4601      	mov	r1, r0
 800f302:	4628      	mov	r0, r5
 800f304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f308:	f000 b818 	b.w	800f33c <_kill_r>
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d00a      	beq.n	800f326 <_raise_r+0x4c>
 800f310:	1c59      	adds	r1, r3, #1
 800f312:	d103      	bne.n	800f31c <_raise_r+0x42>
 800f314:	2316      	movs	r3, #22
 800f316:	6003      	str	r3, [r0, #0]
 800f318:	2001      	movs	r0, #1
 800f31a:	e7e7      	b.n	800f2ec <_raise_r+0x12>
 800f31c:	2100      	movs	r1, #0
 800f31e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f322:	4620      	mov	r0, r4
 800f324:	4798      	blx	r3
 800f326:	2000      	movs	r0, #0
 800f328:	e7e0      	b.n	800f2ec <_raise_r+0x12>
	...

0800f32c <raise>:
 800f32c:	4b02      	ldr	r3, [pc, #8]	@ (800f338 <raise+0xc>)
 800f32e:	4601      	mov	r1, r0
 800f330:	6818      	ldr	r0, [r3, #0]
 800f332:	f7ff bfd2 	b.w	800f2da <_raise_r>
 800f336:	bf00      	nop
 800f338:	20000238 	.word	0x20000238

0800f33c <_kill_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d07      	ldr	r5, [pc, #28]	@ (800f35c <_kill_r+0x20>)
 800f340:	2300      	movs	r3, #0
 800f342:	4604      	mov	r4, r0
 800f344:	4608      	mov	r0, r1
 800f346:	4611      	mov	r1, r2
 800f348:	602b      	str	r3, [r5, #0]
 800f34a:	f7f2 fb1d 	bl	8001988 <_kill>
 800f34e:	1c43      	adds	r3, r0, #1
 800f350:	d102      	bne.n	800f358 <_kill_r+0x1c>
 800f352:	682b      	ldr	r3, [r5, #0]
 800f354:	b103      	cbz	r3, 800f358 <_kill_r+0x1c>
 800f356:	6023      	str	r3, [r4, #0]
 800f358:	bd38      	pop	{r3, r4, r5, pc}
 800f35a:	bf00      	nop
 800f35c:	2000203c 	.word	0x2000203c

0800f360 <_getpid_r>:
 800f360:	f7f2 bb0a 	b.w	8001978 <_getpid>

0800f364 <_init>:
 800f364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f366:	bf00      	nop
 800f368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f36a:	bc08      	pop	{r3}
 800f36c:	469e      	mov	lr, r3
 800f36e:	4770      	bx	lr

0800f370 <_fini>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	bf00      	nop
 800f374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f376:	bc08      	pop	{r3}
 800f378:	469e      	mov	lr, r3
 800f37a:	4770      	bx	lr
