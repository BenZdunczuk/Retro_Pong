
pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08008c9c  08008c9c  00009c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d34  08008d34  0000a1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008d34  08008d34  00009d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d3c  08008d3c  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008d44  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bc4  200001e0  08008f24  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001da4  08008f24  0000ada4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd6c  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6f  00000000  00000000  00027f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  0002ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001587  00000000  00000000  0002e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006a6f  00000000  00000000  0002fe97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000248ab  00000000  00000000  00036906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff4a0  00000000  00000000  0005b1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015a651  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078ac  00000000  00000000  0015a694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00161f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c84 	.word	0x08008c84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	08008c84 	.word	0x08008c84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	@ 0x30
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 031c 	add.w	r3, r7, #28
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	4b82      	ldr	r3, [pc, #520]	@ (8000724 <MX_GPIO_Init+0x220>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a81      	ldr	r2, [pc, #516]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000526:	4b7f      	ldr	r3, [pc, #508]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	61bb      	str	r3, [r7, #24]
 8000530:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b7c      	ldr	r3, [pc, #496]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	4a7b      	ldr	r2, [pc, #492]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800053c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800053e:	4b79      	ldr	r3, [pc, #484]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	4b76      	ldr	r3, [pc, #472]	@ (8000724 <MX_GPIO_Init+0x220>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	4a75      	ldr	r2, [pc, #468]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000556:	4b73      	ldr	r3, [pc, #460]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	4b70      	ldr	r3, [pc, #448]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	4a6f      	ldr	r2, [pc, #444]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000568:	f043 0302 	orr.w	r3, r3, #2
 800056c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056e:	4b6d      	ldr	r3, [pc, #436]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	f003 0302 	and.w	r3, r3, #2
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057a:	4b6a      	ldr	r3, [pc, #424]	@ (8000724 <MX_GPIO_Init+0x220>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	4a69      	ldr	r2, [pc, #420]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000580:	f043 0310 	orr.w	r3, r3, #16
 8000584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000586:	4b67      	ldr	r3, [pc, #412]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	f003 0310 	and.w	r3, r3, #16
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	4b64      	ldr	r3, [pc, #400]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	4a63      	ldr	r2, [pc, #396]	@ (8000724 <MX_GPIO_Init+0x220>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800059e:	4b61      	ldr	r3, [pc, #388]	@ (8000724 <MX_GPIO_Init+0x220>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	f240 2101 	movw	r1, #513	@ 0x201
 80005b0:	485d      	ldr	r0, [pc, #372]	@ (8000728 <MX_GPIO_Init+0x224>)
 80005b2:	f001 f80f 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	210c      	movs	r1, #12
 80005ba:	485c      	ldr	r0, [pc, #368]	@ (800072c <MX_GPIO_Init+0x228>)
 80005bc:	f001 f80a 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f240 1101 	movw	r1, #257	@ 0x101
 80005c6:	485a      	ldr	r0, [pc, #360]	@ (8000730 <MX_GPIO_Init+0x22c>)
 80005c8:	f001 f804 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2180      	movs	r1, #128	@ 0x80
 80005d0:	4858      	ldr	r0, [pc, #352]	@ (8000734 <MX_GPIO_Init+0x230>)
 80005d2:	f000 ffff 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin;
 80005d6:	f240 2301 	movw	r3, #513	@ 0x201
 80005da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	484e      	ldr	r0, [pc, #312]	@ (8000728 <MX_GPIO_Init+0x224>)
 80005f0:	f000 fe46 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80005f4:	232f      	movs	r3, #47	@ 0x2f
 80005f6:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fc:	2302      	movs	r3, #2
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 031c 	add.w	r3, r7, #28
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800060a:	f000 fe39 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 800060e:	2310      	movs	r3, #16
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000612:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <MX_GPIO_Init+0x234>)
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 fe2c 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000628:	2304      	movs	r3, #4
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	2301      	movs	r3, #1
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	483b      	ldr	r0, [pc, #236]	@ (800072c <MX_GPIO_Init+0x228>)
 8000640:	f000 fe1e 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064e:	2301      	movs	r3, #1
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4834      	ldr	r0, [pc, #208]	@ (8000730 <MX_GPIO_Init+0x22c>)
 800065e:	f000 fe0f 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000662:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000668:	4b33      	ldr	r3, [pc, #204]	@ (8000738 <MX_GPIO_Init+0x234>)
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	482c      	ldr	r0, [pc, #176]	@ (8000728 <MX_GPIO_Init+0x224>)
 8000678:	f000 fe02 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 800067c:	2305      	movs	r3, #5
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <MX_GPIO_Init+0x234>)
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <MX_GPIO_Init+0x230>)
 8000690:	f000 fdf6 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4822      	ldr	r0, [pc, #136]	@ (8000734 <MX_GPIO_Init+0x230>)
 80006ac:	f000 fde8 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 80006b0:	2308      	movs	r3, #8
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2300      	movs	r3, #0
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4819      	ldr	r0, [pc, #100]	@ (800072c <MX_GPIO_Init+0x228>)
 80006c8:	f000 fdda 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <MX_GPIO_Init+0x234>)
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4812      	ldr	r0, [pc, #72]	@ (800072c <MX_GPIO_Init+0x228>)
 80006e2:	f000 fdcd 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_GPIO_Init+0x22c>)
 80006fe:	f000 fdbf 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000702:	2302      	movs	r3, #2
 8000704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <MX_GPIO_Init+0x234>)
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4806      	ldr	r0, [pc, #24]	@ (8000730 <MX_GPIO_Init+0x22c>)
 8000716:	f000 fdb3 	bl	8001280 <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	@ 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800
 800072c:	48000400 	.word	0x48000400
 8000730:	48001000 	.word	0x48001000
 8000734:	48000c00 	.word	0x48000c00
 8000738:	10120000 	.word	0x10120000

0800073c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_I2C1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <MX_I2C1_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <MX_I2C1_Init+0x74>)
 8000778:	f000 ff5e 	bl	8001638 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f929 	bl	80009d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <MX_I2C1_Init+0x74>)
 800078a:	f000 ffe4 	bl	8001756 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f920 	bl	80009d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_I2C1_Init+0x74>)
 800079c:	f001 f826 	bl	80017ec <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f917 	bl	80009d8 <Error_Handler>
  }

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200001fc 	.word	0x200001fc
 80007b4:	40005400 	.word	0x40005400
 80007b8:	10909cec 	.word	0x10909cec

080007bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_I2C_MspInit+0x7c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d127      	bne.n	800082e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <HAL_I2C_MspInit+0x80>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e2:	4a16      	ldr	r2, [pc, #88]	@ (800083c <HAL_I2C_MspInit+0x80>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_I2C_MspInit+0x80>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007f6:	23c0      	movs	r3, #192	@ 0xc0
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fa:	2312      	movs	r3, #18
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000806:	2304      	movs	r3, #4
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <HAL_I2C_MspInit+0x84>)
 8000812:	f000 fd35 	bl	8001280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	@ (800083c <HAL_I2C_MspInit+0x80>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	@ (800083c <HAL_I2C_MspInit+0x80>)
 800081c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000820:	6593      	str	r3, [r2, #88]	@ 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <HAL_I2C_MspInit+0x80>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40005400 	.word	0x40005400
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fb27 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f825 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f7ff fe57 	bl	8000504 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000856:	f7ff ff71 	bl	800073c <MX_I2C1_Init>
  MX_SPI2_Init();
 800085a:	f000 f8cb 	bl	80009f4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800085e:	f000 fa77 	bl	8000d50 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000862:	f000 fa1f 	bl	8000ca4 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000866:	f007 faa9 	bl	8007dbc <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	uint8_t message[] = "Hello\r\n";
 800086a:	4a0b      	ldr	r2, [pc, #44]	@ (8000898 <main+0x54>)
 800086c:	463b      	mov	r3, r7
 800086e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000872:	e883 0003 	stmia.w	r3, {r0, r1}
	CDC_Transmit_FS(message, strlen((char*)message));
 8000876:	463b      	mov	r3, r7
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fca5 	bl	80001c8 <strlen>
 800087e:	4602      	mov	r2, r0
 8000880:	463b      	mov	r3, r7
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f007 fb57 	bl	8007f38 <CDC_Transmit_FS>

//	gyroGetData(filteredGyro);
//	accGetData(filteredAcc);

	HAL_Delay(2000);
 800088a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800088e:	f000 fb81 	bl	8000f94 <HAL_Delay>
  {
 8000892:	bf00      	nop
 8000894:	e7e9      	b.n	800086a <main+0x26>
 8000896:	bf00      	nop
 8000898:	08008c9c 	.word	0x08008c9c

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0b8      	sub	sp, #224	@ 0xe0
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a6:	2244      	movs	r2, #68	@ 0x44
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 f95c 	bl	8008b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2288      	movs	r2, #136	@ 0x88
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 f94e 	bl	8008b68 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008cc:	f002 f87a 	bl	80029c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d0:	4b40      	ldr	r3, [pc, #256]	@ (80009d4 <SystemClock_Config+0x138>)
 80008d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008d6:	4a3f      	ldr	r2, [pc, #252]	@ (80009d4 <SystemClock_Config+0x138>)
 80008d8:	f023 0318 	bic.w	r3, r3, #24
 80008dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008e0:	2314      	movs	r3, #20
 80008e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f8:	2360      	movs	r3, #96	@ 0x60
 80008fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000904:	2301      	movs	r3, #1
 8000906:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000910:	2328      	movs	r3, #40	@ 0x28
 8000912:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000916:	2307      	movs	r3, #7
 8000918:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000922:	2302      	movs	r3, #2
 8000924:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800092c:	4618      	mov	r0, r3
 800092e:	f002 f8cd 	bl	8002acc <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000938:	f000 f84e 	bl	80009d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2303      	movs	r3, #3
 8000944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800095a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800095e:	2104      	movs	r1, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fc9b 	bl	800329c <HAL_RCC_ClockConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800096c:	f000 f834 	bl	80009d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000970:	f242 0342 	movw	r3, #8258	@ 0x2042
 8000974:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000976:	2300      	movs	r3, #0
 8000978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800097a:	2300      	movs	r3, #0
 800097c:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800097e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000982:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800098c:	2318      	movs	r3, #24
 800098e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000990:	2307      	movs	r3, #7
 8000992:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800099c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009a0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fe7f 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80009b0:	f000 f812 	bl	80009d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b8:	f002 f822 	bl	8002a00 <HAL_PWREx_ControlVoltageScaling>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80009c2:	f000 f809 	bl	80009d8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009c6:	f003 f959 	bl	8003c7c <HAL_RCCEx_EnableMSIPLLMode>
}
 80009ca:	bf00      	nop
 80009cc:	37e0      	adds	r7, #224	@ 0xe0
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80009dc:	2104      	movs	r1, #4
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <Error_Handler+0x18>)
 80009e0:	f000 fe10 	bl	8001604 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80009e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009e8:	f000 fad4 	bl	8000f94 <HAL_Delay>

  /* USER CODE END Error_Handler_Debug */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	48000400 	.word	0x48000400

080009f4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <MX_SPI2_Init+0x74>)
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <MX_SPI2_Init+0x78>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b18      	ldr	r3, [pc, #96]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000a12:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a26:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a2a:	2220      	movs	r2, #32
 8000a2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a42:	2207      	movs	r2, #7
 8000a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_SPI2_Init+0x74>)
 8000a54:	f003 faf4 	bl	8004040 <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a5e:	f7ff ffbb 	bl	80009d8 <Error_Handler>
  }

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000248 	.word	0x20000248
 8000a6c:	40003800 	.word	0x40003800

08000a70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	@ (8000aec <HAL_SPI_MspInit+0x7c>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d127      	bne.n	8000ae2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_SPI_MspInit+0x80>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8000ac2:	231a      	movs	r3, #26
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_SPI_MspInit+0x84>)
 8000ade:	f000 fbcf 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40003800 	.word	0x40003800
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000c00 	.word	0x48000c00

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	bf00      	nop
 8000b54:	e7fd      	b.n	8000b52 <HardFault_Handler+0x4>

08000b56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5a:	bf00      	nop
 8000b5c:	e7fd      	b.n	8000b5a <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	bf00      	nop
 8000b64:	e7fd      	b.n	8000b62 <BusFault_Handler+0x4>

08000b66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6a:	bf00      	nop
 8000b6c:	e7fd      	b.n	8000b6a <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f9da 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <USART2_IRQHandler+0x10>)
 8000baa:	f003 fcb3 	bl	8004514 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200002fc 	.word	0x200002fc

08000bb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <OTG_FS_IRQHandler+0x10>)
 8000bbe:	f000 ffb4 	bl	8001b2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20001854 	.word	0x20001854

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f007 ffcc 	bl	8008b98 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20018000 	.word	0x20018000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200002ac 	.word	0x200002ac
 8000c34:	20001da8 	.word	0x20001da8

08000c38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <SystemInit+0x64>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a16      	ldr	r2, [pc, #88]	@ (8000c9c <SystemInit+0x64>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <SystemInit+0x68>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a13      	ldr	r2, [pc, #76]	@ (8000ca0 <SystemInit+0x68>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <SystemInit+0x68>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <SystemInit+0x68>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca0 <SystemInit+0x68>)
 8000c64:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000c68:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000c6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <SystemInit+0x68>)
 8000c70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <SystemInit+0x68>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <SystemInit+0x68>)
 8000c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <SystemInit+0x68>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SystemInit+0x64>)
 8000c8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	@ (8000d0c <MX_TIM6_Init+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ccc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cd4:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cd6:	f003 fa56 	bl	8004186 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ce0:	f7ff fe7a 	bl	80009d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_TIM6_Init+0x64>)
 8000cf2:	f003 fb39 	bl	8004368 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f7ff fe6c 	bl	80009d8 <Error_Handler>
  }

}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200002b0 	.word	0x200002b0
 8000d0c:	40001000 	.word	0x40001000

08000d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_TIM_Base_MspInit+0x38>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10b      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	4a09      	ldr	r2, [pc, #36]	@ (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d2e:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40001000 	.word	0x40001000
 8000d4c:	40021000 	.word	0x40021000

08000d50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d54:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <MX_USART2_UART_Init+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <MX_USART2_UART_Init+0x58>)
 8000d94:	f003 fb70 	bl	8004478 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d9e:	f7ff fe1b 	bl	80009d8 <Error_Handler>
  }

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200002fc 	.word	0x200002fc
 8000dac:	40004400 	.word	0x40004400

08000db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <HAL_UART_MspInit+0x8c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12f      	bne.n	8000e32 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e40 <HAL_UART_MspInit+0x90>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000e40 <HAL_UART_MspInit+0x90>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dde:	4b18      	ldr	r3, [pc, #96]	@ (8000e40 <HAL_UART_MspInit+0x90>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <HAL_UART_MspInit+0x90>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <HAL_UART_MspInit+0x90>)
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df6:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <HAL_UART_MspInit+0x90>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e02:	2360      	movs	r3, #96	@ 0x60
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e12:	2307      	movs	r3, #7
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <HAL_UART_MspInit+0x94>)
 8000e1e:	f000 fa2f 	bl	8001280 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2026      	movs	r0, #38	@ 0x26
 8000e28:	f000 f9b3 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e2c:	2026      	movs	r0, #38	@ 0x26
 8000e2e:	f000 f9cc 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	@ 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000c00 	.word	0x48000c00

08000e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff fef4 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e54:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e5c:	480a      	ldr	r0, [pc, #40]	@ (8000e88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
	ldr	r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <LoopForever+0x16>)
	cmp	r2, r3
 8000e72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f007 fe95 	bl	8008ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7a:	f7ff fce3 	bl	8000844 <main>

08000e7e <LoopForever>:

LoopForever:
    b LoopForever
 8000e7e:	e7fe      	b.n	8000e7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000e84:	08008d44 	.word	0x08008d44
	ldr	r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e8c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8000e90:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8000e94:	20001da4 	.word	0x20001da4

08000e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC1_2_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <HAL_Init+0x3c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <HAL_Init+0x3c>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	f000 f962 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f000 f80f 	bl	8000edc <HAL_InitTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	e001      	b.n	8000ece <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eca:	f7ff fe15 	bl	8000af8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d023      	beq.n	8000f38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <HAL_InitTick+0x70>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_InitTick+0x6c>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f96d 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10f      	bne.n	8000f32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d809      	bhi.n	8000f2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f937 	bl	8001192 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_InitTick+0x74>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e007      	b.n	8000f3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e004      	b.n	8000f3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e001      	b.n	8000f3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000004 	.word	0x20000004

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008
 8000f78:	2000037c 	.word	0x2000037c

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	@ (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	2000037c 	.word	0x2000037c

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	@ (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d005      	beq.n	8001222 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e029      	b.n	8001276 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 020e 	bic.w	r2, r2, #14
 8001230:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f003 021c 	and.w	r2, r3, #28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
    }
  }
  return status;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e17f      	b.n	8001590 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8171 	beq.w	800158a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d00b      	beq.n	80012c8 <HAL_GPIO_Init+0x48>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012bc:	2b11      	cmp	r3, #17
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2b12      	cmp	r3, #18
 80012c6:	d130      	bne.n	800132a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012fe:	2201      	movs	r2, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	f003 0201 	and.w	r2, r3, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b03      	cmp	r3, #3
 8001334:	d118      	bne.n	8001368 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800133c:	2201      	movs	r2, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	08db      	lsrs	r3, r3, #3
 8001352:	f003 0201 	and.w	r2, r3, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x128>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b12      	cmp	r3, #18
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80ac 	beq.w	800158a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b5f      	ldr	r3, [pc, #380]	@ (80015b0 <HAL_GPIO_Init+0x330>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	4a5e      	ldr	r2, [pc, #376]	@ (80015b0 <HAL_GPIO_Init+0x330>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6613      	str	r3, [r2, #96]	@ 0x60
 800143e:	4b5c      	ldr	r3, [pc, #368]	@ (80015b0 <HAL_GPIO_Init+0x330>)
 8001440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800144a:	4a5a      	ldr	r2, [pc, #360]	@ (80015b4 <HAL_GPIO_Init+0x334>)
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x242>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4f      	ldr	r2, [pc, #316]	@ (80015b8 <HAL_GPIO_Init+0x338>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x23e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4e      	ldr	r2, [pc, #312]	@ (80015bc <HAL_GPIO_Init+0x33c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x23a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4d      	ldr	r2, [pc, #308]	@ (80015c0 <HAL_GPIO_Init+0x340>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x236>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4c      	ldr	r2, [pc, #304]	@ (80015c4 <HAL_GPIO_Init+0x344>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x232>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4b      	ldr	r2, [pc, #300]	@ (80015c8 <HAL_GPIO_Init+0x348>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x22e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4a      	ldr	r2, [pc, #296]	@ (80015cc <HAL_GPIO_Init+0x34c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x22a>
 80014a6:	2306      	movs	r3, #6
 80014a8:	e00c      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00a      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014ae:	2305      	movs	r3, #5
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x244>
 80014c2:	2300      	movs	r3, #0
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d4:	4937      	ldr	r1, [pc, #220]	@ (80015b4 <HAL_GPIO_Init+0x334>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001506:	4a32      	ldr	r2, [pc, #200]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001530:	4a27      	ldr	r2, [pc, #156]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800155a:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_GPIO_Init+0x350>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	3301      	adds	r3, #1
 800158e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f ae78 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000c00 	.word	0x48000c00
 80015c4:	48001000 	.word	0x48001000
 80015c8:	48001400 	.word	0x48001400
 80015cc:	48001800 	.word	0x48001800
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	43d9      	mvns	r1, r3
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	400b      	ands	r3, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e081      	b.n	800174e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff f8ac 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	@ 0x24
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001688:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001698:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d107      	bne.n	80016b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	e006      	b.n	80016c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d104      	bne.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	ea42 0103 	orr.w	r1, r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	021a      	lsls	r2, r3, #8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69d9      	ldr	r1, [r3, #28]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1a      	ldr	r2, [r3, #32]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b20      	cmp	r3, #32
 800176a:	d138      	bne.n	80017de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001776:	2302      	movs	r3, #2
 8001778:	e032      	b.n	80017e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2224      	movs	r2, #36	@ 0x24
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0201 	bic.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017de:	2302      	movs	r3, #2
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d139      	bne.n	8001876 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800180c:	2302      	movs	r3, #2
 800180e:	e033      	b.n	8001878 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	@ 0x24
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800183e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0201 	orr.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001876:	2302      	movs	r3, #2
  }
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b08f      	sub	sp, #60	@ 0x3c
 8001888:	af0a      	add	r7, sp, #40	@ 0x28
 800188a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e116      	b.n	8001ac4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d106      	bne.n	80018b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f006 fc9b 	bl	80081ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2203      	movs	r2, #3
 80018ba:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d102      	bne.n	80018d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 fcec 	bl	80052b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	687e      	ldr	r6, [r7, #4]
 80018e2:	466d      	mov	r5, sp
 80018e4:	f106 0410 	add.w	r4, r6, #16
 80018e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80018f8:	1d33      	adds	r3, r6, #4
 80018fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f003 fbd8 	bl	80050b2 <USB_CoreInit>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d7      	b.n	8001ac4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f003 fcda 	bl	80052d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e04a      	b.n	80019bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	333d      	adds	r3, #61	@ 0x3d
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	333c      	adds	r3, #60	@ 0x3c
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	b298      	uxth	r0, r3
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	1a9b      	subs	r3, r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3342      	adds	r3, #66	@ 0x42
 8001962:	4602      	mov	r2, r0
 8001964:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	1a9b      	subs	r3, r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	333f      	adds	r3, #63	@ 0x3f
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3344      	adds	r3, #68	@ 0x44
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	3348      	adds	r3, #72	@ 0x48
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	3350      	adds	r3, #80	@ 0x50
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	3301      	adds	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	7bfa      	ldrb	r2, [r7, #15]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d3af      	bcc.n	8001926 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
 80019ca:	e044      	b.n	8001a56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	3301      	adds	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3b5      	bcc.n	80019cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	687e      	ldr	r6, [r7, #4]
 8001a68:	466d      	mov	r5, sp
 8001a6a:	f106 0410 	add.w	r4, r6, #16
 8001a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a7e:	1d33      	adds	r3, r6, #4
 8001a80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a82:	6838      	ldr	r0, [r7, #0]
 8001a84:	f003 fc50 	bl	8005328 <USB_DevInit>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d005      	beq.n	8001a9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2202      	movs	r2, #2
 8001a92:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e014      	b.n	8001ac4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d102      	bne.n	8001ab8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 ff62 	bl	800297c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 fbd2 	bl	8006266 <USB_DevDisconnect>

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001acc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_PCD_Start+0x1c>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e01c      	b.n	8001b22 <HAL_PCD_Start+0x56>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fbc1 	bl	8005290 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fb86 	bl	8006224 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b2a:	b590      	push	{r4, r7, lr}
 8001b2c:	b08d      	sub	sp, #52	@ 0x34
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f004 fc44 	bl	80063ce <USB_GetMode>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 838f 	bne.w	800226c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 fba8 	bl	80062a8 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8385 	beq.w	800226a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fb9f 	bl	80062a8 <USB_ReadInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d107      	bne.n	8001b84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f002 0202 	and.w	r2, r2, #2
 8001b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fb8d 	bl	80062a8 <USB_ReadInterrupts>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b10      	cmp	r3, #16
 8001b96:	d161      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0210 	bic.w	r2, r2, #16
 8001ba6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001bce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001bd2:	d124      	bne.n	8001c1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d035      	beq.n	8001c4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6a38      	ldr	r0, [r7, #32]
 8001bf4:	f004 f9f3 	bl	8005fde <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c04:	441a      	add	r2, r3
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c16:	441a      	add	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	619a      	str	r2, [r3, #24]
 8001c1c:	e016      	b.n	8001c4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001c24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001c28:	d110      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8001c30:	2208      	movs	r2, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	6a38      	ldr	r0, [r7, #32]
 8001c36:	f004 f9d2 	bl	8005fde <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c46:	441a      	add	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0210 	orr.w	r2, r2, #16
 8001c5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fb21 	bl	80062a8 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c6c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c70:	d16e      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 fb27 	bl	80062ce <USB_ReadDevAllOutEpInterrupt>
 8001c80:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001c82:	e062      	b.n	8001d4a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d057      	beq.n	8001d3e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 fb4c 	bl	8006336 <USB_ReadDevOutEPInterrupt>
 8001c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2301      	movs	r3, #1
 8001cba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fd82 	bl	80027c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2308      	movs	r3, #8
 8001cde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fdbe 	bl	8002864 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2310      	movs	r3, #16
 8001d02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d36:	461a      	mov	r2, r3
 8001d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	3301      	adds	r3, #1
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d199      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 faa7 	bl	80062a8 <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d64:	f040 8087 	bne.w	8001e76 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 fac8 	bl	8006302 <USB_ReadDevAllInEpInterrupt>
 8001d72:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001d78:	e07a      	b.n	8001e70 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d06f      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 faef 	bl	8006372 <USB_ReadDevInEPInterrupt>
 8001d94:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	2201      	movs	r2, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69f9      	ldr	r1, [r7, #28]
 8001dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f006 fa98 	bl	8008312 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e14:	461a      	mov	r2, r3
 8001e16:	2310      	movs	r3, #16
 8001e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e30:	461a      	mov	r2, r3
 8001e32:	2340      	movs	r3, #64	@ 0x40
 8001e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d008      	beq.n	8001e52 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	2302      	movs	r3, #2
 8001e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fc29 	bl	80026b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	3301      	adds	r3, #1
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d181      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 fa14 	bl	80062a8 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e8a:	d122      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f006 fd45 	bl	8008944 <HAL_PCDEx_LPM_Callback>
 8001eba:	e002      	b.n	8001ec2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f006 fa95 	bl	80083ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 f9e6 	bl	80062a8 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ee6:	d112      	bne.n	8001f0e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 fa51 	bl	80083a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001f0c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 f9c8 	bl	80062a8 <USB_ReadInterrupts>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f22:	d121      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001f32:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d111      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	f003 020f 	and.w	r2, r3, #15
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f58:	2101      	movs	r1, #1
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f006 fcf2 	bl	8008944 <HAL_PCDEx_LPM_Callback>
 8001f60:	e002      	b.n	8001f68 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f006 fa1c 	bl	80083a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 f99b 	bl	80062a8 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f7c:	f040 80c5 	bne.w	800210a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	69fa      	ldr	r2, [r7, #28]
 8001f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2110      	movs	r1, #16
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f003 fb10 	bl	80055c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa4:	e056      	b.n	8002054 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001fb8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fca:	0151      	lsls	r1, r2, #5
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	440a      	add	r2, r1
 8001fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001fd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fd8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fea:	0151      	lsls	r1, r2, #5
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	440a      	add	r2, r1
 8001ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001ff4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800200c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800200e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800201e:	0151      	lsls	r1, r2, #5
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	440a      	add	r2, r1
 8002024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002028:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800202c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	440a      	add	r2, r1
 8002044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002048:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800204c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002050:	3301      	adds	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800205a:	429a      	cmp	r2, r3
 800205c:	d3a3      	bcc.n	8001fa6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800206c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002070:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	2b00      	cmp	r3, #0
 8002078:	d016      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002080:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800208a:	f043 030b 	orr.w	r3, r3, #11
 800208e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020a0:	f043 030b 	orr.w	r3, r3, #11
 80020a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a6:	e015      	b.n	80020d4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020ba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80020be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020ce:	f043 030b 	orr.w	r3, r3, #11
 80020d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80020e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f004 f99b 	bl	8006430 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002108:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 f8ca 	bl	80062a8 <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211e:	d124      	bne.n	800216a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f004 f960 	bl	80063ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 faa7 	bl	8005682 <USB_GetDevSpeed>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681c      	ldr	r4, [r3, #0]
 8002140:	f001 fa1a 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8002144:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800214a:	b2db      	uxtb	r3, r3
 800214c:	461a      	mov	r2, r3
 800214e:	4620      	mov	r0, r4
 8002150:	f003 f802 	bl	8005158 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f006 f904 	bl	8008362 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002168:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 f89a 	bl	80062a8 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d10a      	bne.n	8002194 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f006 f8e1 	bl	8008346 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f002 0208 	and.w	r2, r2, #8
 8002192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f004 f885 	bl	80062a8 <USB_ReadInterrupts>
 800219e:	4603      	mov	r3, r0
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021a8:	d10f      	bne.n	80021ca <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f006 f953 	bl	8008460 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80021c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 f86a 	bl	80062a8 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021de:	d10f      	bne.n	8002200 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f006 f926 	bl	800843c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80021fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f004 f84f 	bl	80062a8 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002214:	d10a      	bne.n	800222c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f006 f934 	bl	8008484 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800222a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f839 	bl	80062a8 <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d115      	bne.n	800226c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f006 f924 	bl	80084a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	430a      	orrs	r2, r1
 8002266:	605a      	str	r2, [r3, #4]
 8002268:	e000      	b.n	800226c <HAL_PCD_IRQHandler+0x742>
      return;
 800226a:	bf00      	nop
    }
  }
}
 800226c:	3734      	adds	r7, #52	@ 0x34
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}

08002272 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_PCD_SetAddress+0x1a>
 8002288:	2302      	movs	r3, #2
 800228a:	e013      	b.n	80022b4 <HAL_PCD_SetAddress+0x42>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	78fa      	ldrb	r2, [r7, #3]
 8002298:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 ff97 	bl	80061d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	70fb      	strb	r3, [r7, #3]
 80022ce:	460b      	mov	r3, r1
 80022d0:	803b      	strh	r3, [r7, #0]
 80022d2:	4613      	mov	r3, r2
 80022d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	da0f      	bge.n	8002302 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	3338      	adds	r3, #56	@ 0x38
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	3304      	adds	r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	705a      	strb	r2, [r3, #1]
 8002300:	e00f      	b.n	8002322 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002302:	78fb      	ldrb	r3, [r7, #3]
 8002304:	f003 020f 	and.w	r2, r3, #15
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800232e:	883a      	ldrh	r2, [r7, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	78ba      	ldrb	r2, [r7, #2]
 8002338:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800234c:	78bb      	ldrb	r3, [r7, #2]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d102      	bne.n	8002358 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_PCD_EP_Open+0xaa>
 8002362:	2302      	movs	r3, #2
 8002364:	e00e      	b.n	8002384 <HAL_PCD_EP_Open+0xc8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	4618      	mov	r0, r3
 8002376:	f003 f9a3 	bl	80056c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8002382:	7afb      	ldrb	r3, [r7, #11]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da0f      	bge.n	80023c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	f003 020f 	and.w	r2, r3, #15
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	3338      	adds	r3, #56	@ 0x38
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	3304      	adds	r3, #4
 80023b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	705a      	strb	r2, [r3, #1]
 80023be:	e00f      	b.n	80023e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_PCD_EP_Close+0x6e>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e00e      	b.n	8002418 <HAL_PCD_EP_Close+0x8c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68f9      	ldr	r1, [r7, #12]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f9e1 	bl	80057d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	460b      	mov	r3, r1
 800242e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002430:	7afb      	ldrb	r3, [r7, #11]
 8002432:	f003 020f 	and.w	r2, r3, #15
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2200      	movs	r2, #0
 8002460:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	b2da      	uxtb	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6979      	ldr	r1, [r7, #20]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fc5e 	bl	8005d40 <USB_EP0StartXfer>
 8002484:	e005      	b.n	8002492 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6979      	ldr	r1, [r7, #20]
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fa7b 	bl	8005988 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 020f 	and.w	r2, r3, #15
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	3338      	adds	r3, #56	@ 0x38
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	3304      	adds	r3, #4
 80024f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2201      	movs	r2, #1
 800250a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	b2da      	uxtb	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002518:	7afb      	ldrb	r3, [r7, #11]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6979      	ldr	r1, [r7, #20]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fc09 	bl	8005d40 <USB_EP0StartXfer>
 800252e:	e005      	b.n	800253c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6979      	ldr	r1, [r7, #20]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fa26 	bl	8005988 <USB_EPStartXfer>
  }

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 020f 	and.w	r2, r3, #15
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	d901      	bls.n	8002564 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e04e      	b.n	8002602 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002568:	2b00      	cmp	r3, #0
 800256a:	da0f      	bge.n	800258c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	f003 020f 	and.w	r2, r3, #15
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	3338      	adds	r3, #56	@ 0x38
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	705a      	strb	r2, [r3, #1]
 800258a:	e00d      	b.n	80025a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	4413      	add	r3, r2
 800259e:	3304      	adds	r3, #4
 80025a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_PCD_EP_SetStall+0x82>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e01c      	b.n	8002602 <HAL_PCD_EP_SetStall+0xbc>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68f9      	ldr	r1, [r7, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fd2a 	bl	8006030 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f003 ff1c 	bl	8006430 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 020f 	and.w	r2, r3, #15
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d901      	bls.n	8002628 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e042      	b.n	80026ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	da0f      	bge.n	8002650 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 020f 	and.w	r2, r3, #15
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	3338      	adds	r3, #56	@ 0x38
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	3304      	adds	r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	705a      	strb	r2, [r3, #1]
 800264e:	e00f      	b.n	8002670 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 020f 	and.w	r2, r3, #15
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	b2da      	uxtb	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_PCD_EP_ClrStall+0x86>
 800268c:	2302      	movs	r3, #2
 800268e:	e00e      	b.n	80026ae <HAL_PCD_EP_ClrStall+0xa4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fd34 	bl	800610c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b088      	sub	sp, #32
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	3338      	adds	r3, #56	@ 0x38
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d901      	bls.n	80026ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e067      	b.n	80027be <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	429a      	cmp	r2, r3
 8002702:	d902      	bls.n	800270a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3303      	adds	r3, #3
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002712:	e026      	b.n	8002762 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	429a      	cmp	r2, r3
 8002728:	d902      	bls.n	8002730 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3303      	adds	r3, #3
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	68d9      	ldr	r1, [r3, #12]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	b29b      	uxth	r3, r3
 8002744:	6978      	ldr	r0, [r7, #20]
 8002746:	f003 fc19 	bl	8005f7c <USB_WritePacket>

    ep->xfer_buff  += len;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	441a      	add	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	441a      	add	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	429a      	cmp	r2, r3
 8002776:	d809      	bhi.n	800278c <PCD_WriteEmptyTxFifo+0xd6>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002780:	429a      	cmp	r2, r3
 8002782:	d203      	bcs.n	800278c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1c3      	bne.n	8002714 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	429a      	cmp	r2, r3
 8002796:	d811      	bhi.n	80027bc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	2201      	movs	r2, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	6939      	ldr	r1, [r7, #16]
 80027b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027b8:	4013      	ands	r3, r2
 80027ba:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	333c      	adds	r3, #60	@ 0x3c
 80027e0:	3304      	adds	r3, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <PCD_EP_OutXfrComplete_int+0x98>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d124      	bne.n	8002848 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002814:	461a      	mov	r2, r3
 8002816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800281a:	6093      	str	r3, [r2, #8]
 800281c:	e01a      	b.n	8002854 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	2320      	movs	r3, #32
 8002838:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f005 fd4b 	bl	80082dc <HAL_PCD_DataOutStageCallback>
 8002846:	e005      	b.n	8002854 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4619      	mov	r1, r3
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f005 fd44 	bl	80082dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	4f54310a 	.word	0x4f54310a

08002864 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	333c      	adds	r3, #60	@ 0x3c
 800287c:	3304      	adds	r3, #4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4a0c      	ldr	r2, [pc, #48]	@ (80028c8 <PCD_EP_OutSetupPacket_int+0x64>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d90e      	bls.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f005 fcfd 	bl	80082b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	4f54300a 	.word	0x4f54300a

080028cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	4613      	mov	r3, r2
 80028da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80028ea:	883b      	ldrh	r3, [r7, #0]
 80028ec:	0419      	lsls	r1, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80028f8:	e028      	b.n	800294c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4413      	add	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e00d      	b.n	800292a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	3340      	adds	r3, #64	@ 0x40
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4413      	add	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	3301      	adds	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	3b01      	subs	r3, #1
 8002930:	429a      	cmp	r2, r3
 8002932:	d3ec      	bcc.n	800290e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002934:	883b      	ldrh	r3, [r7, #0]
 8002936:	0418      	lsls	r0, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	3b01      	subs	r3, #1
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	4302      	orrs	r2, r0
 8002944:	3340      	adds	r3, #64	@ 0x40
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	f043 0303 	orr.w	r3, r3, #3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40007000 	.word	0x40007000

080029e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029e8:	4b04      	ldr	r3, [pc, #16]	@ (80029fc <HAL_PWREx_GetVoltageRange+0x18>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40007000 	.word	0x40007000

08002a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0e:	d130      	bne.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a10:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a1c:	d038      	beq.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a26:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2232      	movs	r2, #50	@ 0x32
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	3301      	adds	r3, #1
 8002a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a44:	e002      	b.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a58:	d102      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f2      	bne.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6c:	d110      	bne.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e00f      	b.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a72:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7e:	d007      	beq.n	8002a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a88:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	431bde83 	.word	0x431bde83

08002aac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aba:	6053      	str	r3, [r2, #4]
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40007000 	.word	0x40007000

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e3d8      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	4b97      	ldr	r3, [pc, #604]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae8:	4b94      	ldr	r3, [pc, #592]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80e4 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_RCC_OscConfig+0x4a>
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	f040 808b 	bne.w	8002c24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	f040 8087 	bne.w	8002c24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b16:	4b89      	ldr	r3, [pc, #548]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_RCC_OscConfig+0x62>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e3b0      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1a      	ldr	r2, [r3, #32]
 8002b32:	4b82      	ldr	r3, [pc, #520]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <HAL_RCC_OscConfig+0x7c>
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b46:	e005      	b.n	8002b54 <HAL_RCC_OscConfig+0x88>
 8002b48:	4b7c      	ldr	r3, [pc, #496]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d223      	bcs.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fd43 	bl	80035e8 <RCC_SetFlashLatencyFromMSIRange>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e391      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b6c:	4b73      	ldr	r3, [pc, #460]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a72      	ldr	r2, [pc, #456]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b72:	f043 0308 	orr.w	r3, r3, #8
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b70      	ldr	r3, [pc, #448]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	496d      	ldr	r1, [pc, #436]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	4968      	ldr	r1, [pc, #416]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
 8002b9e:	e025      	b.n	8002bec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba0:	4b66      	ldr	r3, [pc, #408]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a65      	ldr	r2, [pc, #404]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ba6:	f043 0308 	orr.w	r3, r3, #8
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b63      	ldr	r3, [pc, #396]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4960      	ldr	r1, [pc, #384]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	495b      	ldr	r1, [pc, #364]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fd03 	bl	80035e8 <RCC_SetFlashLatencyFromMSIRange>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e351      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bec:	f000 fc38 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b52      	ldr	r3, [pc, #328]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	4950      	ldr	r1, [pc, #320]	@ (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	5ccb      	ldrb	r3, [r1, r3]
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
 8002c08:	4a4e      	ldr	r2, [pc, #312]	@ (8002d44 <HAL_RCC_OscConfig+0x278>)
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <HAL_RCC_OscConfig+0x27c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe f963 	bl	8000edc <HAL_InitTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d052      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	e335      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d032      	beq.n	8002c92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c2c:	4b43      	ldr	r3, [pc, #268]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a42      	ldr	r2, [pc, #264]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c38:	f7fe f9a0 	bl	8000f7c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c40:	f7fe f99c 	bl	8000f7c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e31e      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c52:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c5e:	4b37      	ldr	r3, [pc, #220]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a36      	ldr	r2, [pc, #216]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	4931      	ldr	r1, [pc, #196]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	492c      	ldr	r1, [pc, #176]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
 8002c90:	e01a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c92:	4b2a      	ldr	r3, [pc, #168]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c98:	f023 0301 	bic.w	r3, r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c9e:	f7fe f96d 	bl	8000f7c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ca6:	f7fe f969 	bl	8000f7c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e2eb      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cb8:	4b20      	ldr	r3, [pc, #128]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f0      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x1da>
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d074      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d005      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x21a>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b0c      	cmp	r3, #12
 8002cde:	d10e      	bne.n	8002cfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d064      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d160      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e2c8      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x24a>
 8002d08:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e026      	b.n	8002d64 <HAL_RCC_OscConfig+0x298>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d1e:	d115      	bne.n	8002d4c <HAL_RCC_OscConfig+0x280>
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a02      	ldr	r2, [pc, #8]	@ (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e014      	b.n	8002d64 <HAL_RCC_OscConfig+0x298>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08008cec 	.word	0x08008cec
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000004 	.word	0x20000004
 8002d4c:	4ba0      	ldr	r3, [pc, #640]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a9f      	ldr	r2, [pc, #636]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b9d      	ldr	r3, [pc, #628]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a9c      	ldr	r2, [pc, #624]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f906 	bl	8000f7c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe f902 	bl	8000f7c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e284      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d86:	4b92      	ldr	r3, [pc, #584]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2a8>
 8002d92:	e014      	b.n	8002dbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe f8f2 	bl	8000f7c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe f8ee 	bl	8000f7c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	@ 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e270      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	4b88      	ldr	r3, [pc, #544]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2d0>
 8002dba:	e000      	b.n	8002dbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d060      	beq.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_OscConfig+0x310>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d119      	bne.n	8002e0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d116      	bne.n	8002e0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_OscConfig+0x328>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e24d      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b76      	ldr	r3, [pc, #472]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	4973      	ldr	r1, [pc, #460]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	e040      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d023      	beq.n	8002e5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e12:	4b6f      	ldr	r3, [pc, #444]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a6e      	ldr	r2, [pc, #440]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe f8ad 	bl	8000f7c <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe f8a9 	bl	8000f7c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e22b      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e38:	4b65      	ldr	r3, [pc, #404]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b62      	ldr	r3, [pc, #392]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	495f      	ldr	r1, [pc, #380]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
 8002e58:	e018      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe f889 	bl	8000f7c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe f885 	bl	8000f7c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e207      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e80:	4b53      	ldr	r3, [pc, #332]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f0      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03c      	beq.n	8002f12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01c      	beq.n	8002eda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea6:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe f864 	bl	8000f7c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe f860 	bl	8000f7c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1e2      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eca:	4b41      	ldr	r3, [pc, #260]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x3ec>
 8002ed8:	e01b      	b.n	8002f12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eda:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7fe f847 	bl	8000f7c <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7fe f843 	bl	8000f7c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e1c5      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f04:	4b32      	ldr	r3, [pc, #200]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1ef      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80a6 	beq.w	800306c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f24:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f30:	4b27      	ldr	r3, [pc, #156]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	4a26      	ldr	r2, [pc, #152]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f3c:	4b24      	ldr	r3, [pc, #144]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4c:	4b21      	ldr	r3, [pc, #132]	@ (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d118      	bne.n	8002f8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f58:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f64:	f7fe f80a 	bl	8000f7c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fe f806 	bl	8000f7c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e188      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7e:	4b15      	ldr	r3, [pc, #84]	@ (8002fd4 <HAL_RCC_OscConfig+0x508>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d108      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4d8>
 8002f92:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa2:	e029      	b.n	8002ff8 <HAL_RCC_OscConfig+0x52c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d115      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x50c>
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc2:	4a03      	ldr	r2, [pc, #12]	@ (8002fd0 <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fcc:	e014      	b.n	8002ff8 <HAL_RCC_OscConfig+0x52c>
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	4b91      	ldr	r3, [pc, #580]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	4a90      	ldr	r2, [pc, #576]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fe8:	4b8d      	ldr	r3, [pc, #564]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fee:	4a8c      	ldr	r2, [pc, #560]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8002ff0:	f023 0304 	bic.w	r3, r3, #4
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d016      	beq.n	800302e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003000:	f7fd ffbc 	bl	8000f7c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fd ffb8 	bl	8000f7c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e138      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301e:	4b80      	ldr	r3, [pc, #512]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ed      	beq.n	8003008 <HAL_RCC_OscConfig+0x53c>
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fd ffa5 	bl	8000f7c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fd ffa1 	bl	8000f7c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e121      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800304c:	4b74      	ldr	r3, [pc, #464]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ed      	bne.n	8003036 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003060:	4b6f      	ldr	r3, [pc, #444]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	4a6e      	ldr	r2, [pc, #440]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800306a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 810c 	beq.w	800328e <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	2b02      	cmp	r3, #2
 800307c:	f040 80d4 	bne.w	8003228 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003080:	4b67      	ldr	r3, [pc, #412]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f003 0203 	and.w	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d130      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	3b01      	subs	r3, #1
 80030a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d127      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d11f      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030c0:	2a07      	cmp	r2, #7
 80030c2:	bf14      	ite	ne
 80030c4:	2201      	movne	r2, #1
 80030c6:	2200      	moveq	r2, #0
 80030c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d113      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	3b01      	subs	r3, #1
 80030dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030de:	429a      	cmp	r2, r3
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	085b      	lsrs	r3, r3, #1
 80030ee:	3b01      	subs	r3, #1
 80030f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d06e      	beq.n	80031d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d069      	beq.n	80031d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030fc:	4b48      	ldr	r3, [pc, #288]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003108:	4b45      	ldr	r3, [pc, #276]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0bb      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a40      	ldr	r2, [pc, #256]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800311e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003122:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003124:	f7fd ff2a 	bl	8000f7c <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312c:	f7fd ff26 	bl	8000f7c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0a8      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313e:	4b38      	ldr	r3, [pc, #224]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800314a:	4b35      	ldr	r3, [pc, #212]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	4b35      	ldr	r3, [pc, #212]	@ (8003224 <HAL_RCC_OscConfig+0x758>)
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800315a:	3a01      	subs	r2, #1
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003164:	0212      	lsls	r2, r2, #8
 8003166:	4311      	orrs	r1, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	3a01      	subs	r2, #1
 8003170:	0552      	lsls	r2, r2, #21
 8003172:	4311      	orrs	r1, r2
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003178:	0852      	lsrs	r2, r2, #1
 800317a:	3a01      	subs	r2, #1
 800317c:	0652      	lsls	r2, r2, #25
 800317e:	4311      	orrs	r1, r2
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003184:	0912      	lsrs	r2, r2, #4
 8003186:	0452      	lsls	r2, r2, #17
 8003188:	430a      	orrs	r2, r1
 800318a:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800318c:	4313      	orrs	r3, r2
 800318e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003190:	4b23      	ldr	r3, [pc, #140]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800319c:	4b20      	ldr	r3, [pc, #128]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031a8:	f7fd fee8 	bl	8000f7c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fd fee4 	bl	8000f7c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e066      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4b17      	ldr	r3, [pc, #92]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ce:	e05e      	b.n	800328e <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e05d      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d4:	4b12      	ldr	r3, [pc, #72]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d156      	bne.n	800328e <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031f8:	f7fd fec0 	bl	8000f7c <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fd febc 	bl	8000f7c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e03e      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003212:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_RCC_OscConfig+0x754>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x734>
 800321e:	e036      	b.n	800328e <HAL_RCC_OscConfig+0x7c2>
 8003220:	40021000 	.word	0x40021000
 8003224:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d02d      	beq.n	800328a <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a19      	ldr	r2, [pc, #100]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 8003234:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003238:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d105      	bne.n	8003252 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 800324c:	f023 0303 	bic.w	r3, r3, #3
 8003250:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a10      	ldr	r2, [pc, #64]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 8003258:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800325c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003260:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fd fe8b 	bl	8000f7c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fd fe87 	bl	8000f7c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e009      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <HAL_RCC_OscConfig+0x7cc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x79e>
 8003288:	e001      	b.n	800328e <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0c8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b66      	ldr	r3, [pc, #408]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d910      	bls.n	80032e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b63      	ldr	r3, [pc, #396]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	4961      	ldr	r1, [pc, #388]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b5f      	ldr	r3, [pc, #380]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b0      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d04c      	beq.n	8003386 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f4:	4b56      	ldr	r3, [pc, #344]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d121      	bne.n	8003344 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e09e      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d115      	bne.n	8003344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e092      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d107      	bne.n	8003334 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003324:	4b4a      	ldr	r3, [pc, #296]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e086      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003334:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e07e      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003344:	4b42      	ldr	r3, [pc, #264]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 0203 	bic.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	493f      	ldr	r1, [pc, #252]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003356:	f7fd fe11 	bl	8000f7c <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	e00a      	b.n	8003374 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335e:	f7fd fe0d 	bl	8000f7c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e066      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003374:	4b36      	ldr	r3, [pc, #216]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 020c 	and.w	r2, r3, #12
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	429a      	cmp	r2, r3
 8003384:	d1eb      	bne.n	800335e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003392:	4b2f      	ldr	r3, [pc, #188]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	492c      	ldr	r1, [pc, #176]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b29      	ldr	r3, [pc, #164]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d210      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b26      	ldr	r3, [pc, #152]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4924      	ldr	r1, [pc, #144]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <HAL_RCC_ClockConfig+0x1b0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e036      	b.n	8003442 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4918      	ldr	r1, [pc, #96]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033fe:	4b14      	ldr	r3, [pc, #80]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4910      	ldr	r1, [pc, #64]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003412:	f000 f825 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8003416:	4602      	mov	r2, r0
 8003418:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <HAL_RCC_ClockConfig+0x1b4>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	490c      	ldr	r1, [pc, #48]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	5ccb      	ldrb	r3, [r1, r3]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fd50 	bl	8000edc <HAL_InitTick>
 800343c:	4603      	mov	r3, r0
 800343e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003440:	7afb      	ldrb	r3, [r7, #11]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
 8003454:	08008cec 	.word	0x08008cec
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	@ 0x24
 8003464:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	2300      	movs	r3, #0
 800346c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b3e      	ldr	r3, [pc, #248]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003478:	4b3b      	ldr	r3, [pc, #236]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d121      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d11e      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003494:	4b34      	ldr	r3, [pc, #208]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034a0:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e005      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034bc:	4a2b      	ldr	r2, [pc, #172]	@ (800356c <HAL_RCC_GetSysClockFreq+0x10c>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10d      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d102      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d8:	4b25      	ldr	r3, [pc, #148]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x110>)
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e004      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034e4:	4b23      	ldr	r3, [pc, #140]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x114>)
 80034e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d134      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0xa6>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b03      	cmp	r3, #3
 8003502:	d003      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0xac>
 8003504:	e005      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003506:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x110>)
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	e005      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x114>)
 800350e:	617b      	str	r3, [r7, #20]
      break;
 8003510:	e002      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	617b      	str	r3, [r7, #20]
      break;
 8003516:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	3301      	adds	r3, #1
 8003524:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	fb03 f202 	mul.w	r2, r3, r2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	0e5b      	lsrs	r3, r3, #25
 8003544:	f003 0303 	and.w	r3, r3, #3
 8003548:	3301      	adds	r3, #1
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003558:	69bb      	ldr	r3, [r7, #24]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3724      	adds	r7, #36	@ 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	08008d04 	.word	0x08008d04
 8003570:	00f42400 	.word	0x00f42400
 8003574:	007a1200 	.word	0x007a1200

08003578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_RCC_GetHCLKFreq+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000000 	.word	0x20000000

08003590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003594:	f7ff fff0 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4904      	ldr	r1, [pc, #16]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08008cfc 	.word	0x08008cfc

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035c0:	f7ff ffda 	bl	8003578 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	f003 031f 	and.w	r3, r3, #31
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40021000 	.word	0x40021000
 80035e4:	08008cfc 	.word	0x08008cfc

080035e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035f4:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003600:	f7ff f9f0 	bl	80029e4 <HAL_PWREx_GetVoltageRange>
 8003604:	6178      	str	r0, [r7, #20]
 8003606:	e014      	b.n	8003632 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	4a24      	ldr	r2, [pc, #144]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003612:	6593      	str	r3, [r2, #88]	@ 0x58
 8003614:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003620:	f7ff f9e0 	bl	80029e4 <HAL_PWREx_GetVoltageRange>
 8003624:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003626:	4b1e      	ldr	r3, [pc, #120]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	4a1d      	ldr	r2, [pc, #116]	@ (80036a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003638:	d10b      	bne.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b80      	cmp	r3, #128	@ 0x80
 800363e:	d919      	bls.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2ba0      	cmp	r3, #160	@ 0xa0
 8003644:	d902      	bls.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003646:	2302      	movs	r3, #2
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	e013      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800364c:	2301      	movs	r3, #1
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e010      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	@ 0x80
 8003656:	d902      	bls.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003658:	2303      	movs	r3, #3
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e00a      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b80      	cmp	r3, #128	@ 0x80
 8003662:	d102      	bne.n	800366a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003664:	2302      	movs	r3, #2
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e004      	b.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b70      	cmp	r3, #112	@ 0x70
 800366e:	d101      	bne.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003670:	2301      	movs	r3, #1
 8003672:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 0207 	bic.w	r2, r3, #7
 800367c:	4909      	ldr	r1, [pc, #36]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003684:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	429a      	cmp	r2, r3
 8003690:	d001      	beq.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40022000 	.word	0x40022000

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036b0:	2300      	movs	r3, #0
 80036b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036b4:	2300      	movs	r3, #0
 80036b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d041      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036cc:	d02a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036d2:	d824      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d8:	d008      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036de:	d81e      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e8:	d010      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036ea:	e018      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036ec:	4b86      	ldr	r3, [pc, #536]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a85      	ldr	r2, [pc, #532]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f8:	e015      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 facb 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800370a:	e00c      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3320      	adds	r3, #32
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fbb6 	bl	8003e84 <RCCEx_PLLSAI2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	74fb      	strb	r3, [r7, #19]
      break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800372c:	4b76      	ldr	r3, [pc, #472]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800373a:	4973      	ldr	r1, [pc, #460]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003742:	e001      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d041      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003758:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800375c:	d02a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800375e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003762:	d824      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003764:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003768:	d008      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800376a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800376e:	d81e      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003778:	d010      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800377a:	e018      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800377c:	4b62      	ldr	r3, [pc, #392]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a61      	ldr	r2, [pc, #388]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003786:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003788:	e015      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3304      	adds	r3, #4
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fa83 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800379a:	e00c      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3320      	adds	r3, #32
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fb6e 	bl	8003e84 <RCCEx_PLLSAI2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037ac:	e003      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	74fb      	strb	r3, [r7, #19]
      break;
 80037b2:	e000      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037bc:	4b52      	ldr	r3, [pc, #328]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ca:	494f      	ldr	r1, [pc, #316]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037d2:	e001      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a0 	beq.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037e6:	2300      	movs	r3, #0
 80037e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037ea:	4b47      	ldr	r3, [pc, #284]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037fa:	2300      	movs	r3, #0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003800:	4b41      	ldr	r3, [pc, #260]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	4a40      	ldr	r2, [pc, #256]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380a:	6593      	str	r3, [r2, #88]	@ 0x58
 800380c:	4b3e      	ldr	r3, [pc, #248]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003818:	2301      	movs	r3, #1
 800381a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381c:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3a      	ldr	r2, [pc, #232]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003826:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003828:	f7fd fba8 	bl	8000f7c <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800382e:	e009      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003830:	f7fd fba4 	bl	8000f7c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d902      	bls.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	74fb      	strb	r3, [r7, #19]
        break;
 8003842:	e005      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003844:	4b31      	ldr	r3, [pc, #196]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ef      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d15c      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003856:	4b2c      	ldr	r3, [pc, #176]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003860:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01f      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	429a      	cmp	r2, r3
 8003872:	d019      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003874:	4b24      	ldr	r3, [pc, #144]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800387e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003880:	4b21      	ldr	r3, [pc, #132]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003886:	4a20      	ldr	r2, [pc, #128]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003890:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003896:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038a0:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fb63 	bl	8000f7c <HAL_GetTick>
 80038b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b8:	e00b      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd fb5f 	bl	8000f7c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d902      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	74fb      	strb	r3, [r7, #19]
            break;
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ec      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038e6:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f6:	4904      	ldr	r1, [pc, #16]	@ (8003908 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038fe:	e009      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003900:	7cfb      	ldrb	r3, [r7, #19]
 8003902:	74bb      	strb	r3, [r7, #18]
 8003904:	e006      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	7cfb      	ldrb	r3, [r7, #19]
 8003912:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003914:	7c7b      	ldrb	r3, [r7, #17]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391a:	4b9e      	ldr	r3, [pc, #632]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	4a9d      	ldr	r2, [pc, #628]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003924:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003932:	4b98      	ldr	r3, [pc, #608]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003938:	f023 0203 	bic.w	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	4994      	ldr	r1, [pc, #592]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003954:	4b8f      	ldr	r3, [pc, #572]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f023 020c 	bic.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003962:	498c      	ldr	r1, [pc, #560]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003976:	4b87      	ldr	r3, [pc, #540]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003984:	4983      	ldr	r1, [pc, #524]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003998:	4b7e      	ldr	r3, [pc, #504]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	497b      	ldr	r1, [pc, #492]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ba:	4b76      	ldr	r3, [pc, #472]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c8:	4972      	ldr	r1, [pc, #456]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ea:	496a      	ldr	r1, [pc, #424]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	4961      	ldr	r1, [pc, #388]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a20:	4b5c      	ldr	r3, [pc, #368]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	4959      	ldr	r1, [pc, #356]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a42:	4b54      	ldr	r3, [pc, #336]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a50:	4950      	ldr	r1, [pc, #320]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a64:	4b4b      	ldr	r3, [pc, #300]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	4948      	ldr	r1, [pc, #288]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a86:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a94:	493f      	ldr	r1, [pc, #252]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d028      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	4937      	ldr	r1, [pc, #220]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac8:	4b32      	ldr	r3, [pc, #200]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a31      	ldr	r2, [pc, #196]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad2:	60d3      	str	r3, [r2, #12]
 8003ad4:	e011      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ade:	d10c      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 f8d8 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003af0:	7cfb      	ldrb	r3, [r7, #19]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003af6:	7cfb      	ldrb	r3, [r7, #19]
 8003af8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d028      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b06:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	491f      	ldr	r1, [pc, #124]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b24:	d106      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b26:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b30:	60d3      	str	r3, [r2, #12]
 8003b32:	e011      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2101      	movs	r1, #1
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f8a9 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d02b      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	4908      	ldr	r1, [pc, #32]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b82:	d109      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b03      	ldr	r3, [pc, #12]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a02      	ldr	r2, [pc, #8]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
 8003b90:	e014      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f877 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bb2:	7cfb      	ldrb	r3, [r7, #19]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02f      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd6:	4928      	ldr	r1, [pc, #160]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2102      	movs	r1, #2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f854 	bl	8003c9c <RCCEx_PLLSAI1_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d014      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	74bb      	strb	r3, [r7, #18]
 8003c02:	e011      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3320      	adds	r3, #32
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f935 	bl	8003e84 <RCCEx_PLLSAI2_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c34:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c42:	490d      	ldr	r1, [pc, #52]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c56:	4b08      	ldr	r3, [pc, #32]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c66:	4904      	ldr	r1, [pc, #16]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000

08003c7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a04      	ldr	r2, [pc, #16]	@ (8003c98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c86:	f043 0304 	orr.w	r3, r3, #4
 8003c8a:	6013      	str	r3, [r2, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000

08003c9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003caa:	4b75      	ldr	r3, [pc, #468]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d018      	beq.n	8003ce8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003cb6:	4b72      	ldr	r3, [pc, #456]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10d      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cce:	4b6c      	ldr	r3, [pc, #432]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d047      	beq.n	8003d72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
 8003ce6:	e044      	b.n	8003d72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	d018      	beq.n	8003d22 <RCCEx_PLLSAI1_Config+0x86>
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d825      	bhi.n	8003d40 <RCCEx_PLLSAI1_Config+0xa4>
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d002      	beq.n	8003cfe <RCCEx_PLLSAI1_Config+0x62>
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d009      	beq.n	8003d10 <RCCEx_PLLSAI1_Config+0x74>
 8003cfc:	e020      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cfe:	4b60      	ldr	r3, [pc, #384]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0e:	e01a      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d10:	4b5b      	ldr	r3, [pc, #364]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d116      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d20:	e013      	b.n	8003d4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d22:	4b57      	ldr	r3, [pc, #348]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d2e:	4b54      	ldr	r3, [pc, #336]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d3e:	e006      	b.n	8003d4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e004      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10d      	bne.n	8003d72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d56:	4b4a      	ldr	r3, [pc, #296]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	4944      	ldr	r1, [pc, #272]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d17d      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d78:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a40      	ldr	r2, [pc, #256]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d84:	f7fd f8fa 	bl	8000f7c <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8c:	f7fd f8f6 	bl	8000f7c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003da0:	4b37      	ldr	r3, [pc, #220]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ef      	bne.n	8003d8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d160      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db8:	4b31      	ldr	r3, [pc, #196]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	0211      	lsls	r1, r2, #8
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68d2      	ldr	r2, [r2, #12]
 8003dce:	0912      	lsrs	r2, r2, #4
 8003dd0:	0452      	lsls	r2, r2, #17
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	492a      	ldr	r1, [pc, #168]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
 8003dda:	e027      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d112      	bne.n	8003e08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003de2:	4b27      	ldr	r3, [pc, #156]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	0211      	lsls	r1, r2, #8
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6912      	ldr	r2, [r2, #16]
 8003df8:	0852      	lsrs	r2, r2, #1
 8003dfa:	3a01      	subs	r2, #1
 8003dfc:	0552      	lsls	r2, r2, #21
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	491f      	ldr	r1, [pc, #124]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	610b      	str	r3, [r1, #16]
 8003e06:	e011      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e08:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003e10:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	0211      	lsls	r1, r2, #8
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6952      	ldr	r2, [r2, #20]
 8003e1e:	0852      	lsrs	r2, r2, #1
 8003e20:	3a01      	subs	r2, #1
 8003e22:	0652      	lsls	r2, r2, #25
 8003e24:	430a      	orrs	r2, r1
 8003e26:	4916      	ldr	r1, [pc, #88]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e2c:	4b14      	ldr	r3, [pc, #80]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a13      	ldr	r2, [pc, #76]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e38:	f7fd f8a0 	bl	8000f7c <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e3e:	e009      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e40:	f7fd f89c 	bl	8000f7c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	73fb      	strb	r3, [r7, #15]
          break;
 8003e52:	e005      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e54:	4b0a      	ldr	r3, [pc, #40]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0ef      	beq.n	8003e40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e66:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	4904      	ldr	r1, [pc, #16]	@ (8003e80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000

08003e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e92:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e9e:	4b67      	ldr	r3, [pc, #412]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0203 	and.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d10d      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003eb6:	4b61      	ldr	r3, [pc, #388]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d047      	beq.n	8003f5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	73fb      	strb	r3, [r7, #15]
 8003ece:	e044      	b.n	8003f5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d018      	beq.n	8003f0a <RCCEx_PLLSAI2_Config+0x86>
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d825      	bhi.n	8003f28 <RCCEx_PLLSAI2_Config+0xa4>
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d002      	beq.n	8003ee6 <RCCEx_PLLSAI2_Config+0x62>
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d009      	beq.n	8003ef8 <RCCEx_PLLSAI2_Config+0x74>
 8003ee4:	e020      	b.n	8003f28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ee6:	4b55      	ldr	r3, [pc, #340]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11d      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef6:	e01a      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ef8:	4b50      	ldr	r3, [pc, #320]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f08:	e013      	b.n	8003f32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10f      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f16:	4b49      	ldr	r3, [pc, #292]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f26:	e006      	b.n	8003f36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2c:	e004      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	430b      	orrs	r3, r1
 8003f54:	4939      	ldr	r1, [pc, #228]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d167      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f60:	4b36      	ldr	r3, [pc, #216]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a35      	ldr	r2, [pc, #212]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6c:	f7fd f806 	bl	8000f7c <HAL_GetTick>
 8003f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f72:	e009      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f74:	f7fd f802 	bl	8000f7c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d902      	bls.n	8003f88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	73fb      	strb	r3, [r7, #15]
        break;
 8003f86:	e005      	b.n	8003f94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f88:	4b2c      	ldr	r3, [pc, #176]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ef      	bne.n	8003f74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d14a      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d111      	bne.n	8003fc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fa0:	4b26      	ldr	r3, [pc, #152]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6892      	ldr	r2, [r2, #8]
 8003fb0:	0211      	lsls	r1, r2, #8
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	0912      	lsrs	r2, r2, #4
 8003fb8:	0452      	lsls	r2, r2, #17
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	491f      	ldr	r1, [pc, #124]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	614b      	str	r3, [r1, #20]
 8003fc2:	e011      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6892      	ldr	r2, [r2, #8]
 8003fd4:	0211      	lsls	r1, r2, #8
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6912      	ldr	r2, [r2, #16]
 8003fda:	0852      	lsrs	r2, r2, #1
 8003fdc:	3a01      	subs	r2, #1
 8003fde:	0652      	lsls	r2, r2, #25
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	4916      	ldr	r1, [pc, #88]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fe8:	4b14      	ldr	r3, [pc, #80]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a13      	ldr	r2, [pc, #76]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fc ffc2 	bl	8000f7c <HAL_GetTick>
 8003ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffa:	e009      	b.n	8004010 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ffc:	f7fc ffbe 	bl	8000f7c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d902      	bls.n	8004010 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	73fb      	strb	r3, [r7, #15]
          break;
 800400e:	e005      	b.n	800401c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004010:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0ef      	beq.n	8003ffc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004022:	4b06      	ldr	r3, [pc, #24]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	4904      	ldr	r1, [pc, #16]	@ (800403c <RCCEx_PLLSAI2_Config+0x1b8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e095      	b.n	800417e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004062:	d009      	beq.n	8004078 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	61da      	str	r2, [r3, #28]
 800406a:	e005      	b.n	8004078 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fc fcec 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040b8:	d902      	bls.n	80040c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e002      	b.n	80040c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80040ce:	d007      	beq.n	80040e0 <HAL_SPI_Init+0xa0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040d8:	d002      	beq.n	80040e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	431a      	orrs	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004122:	ea42 0103 	orr.w	r1, r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	f003 0204 	and.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800415c:	ea42 0103 	orr.w	r1, r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e049      	b.n	800422c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7fc fdaf 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4619      	mov	r1, r3
 80041c4:	4610      	mov	r0, r2
 80041c6:	f000 f835 	bl	8004234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a40      	ldr	r2, [pc, #256]	@ (8004348 <TIM_Base_SetConfig+0x114>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d013      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004252:	d00f      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a3d      	ldr	r2, [pc, #244]	@ (800434c <TIM_Base_SetConfig+0x118>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d00b      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a3c      	ldr	r2, [pc, #240]	@ (8004350 <TIM_Base_SetConfig+0x11c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3b      	ldr	r2, [pc, #236]	@ (8004354 <TIM_Base_SetConfig+0x120>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3a      	ldr	r2, [pc, #232]	@ (8004358 <TIM_Base_SetConfig+0x124>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d108      	bne.n	8004286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800427a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a2f      	ldr	r2, [pc, #188]	@ (8004348 <TIM_Base_SetConfig+0x114>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d01f      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004294:	d01b      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a2c      	ldr	r2, [pc, #176]	@ (800434c <TIM_Base_SetConfig+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d017      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004350 <TIM_Base_SetConfig+0x11c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004354 <TIM_Base_SetConfig+0x120>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00f      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a29      	ldr	r2, [pc, #164]	@ (8004358 <TIM_Base_SetConfig+0x124>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00b      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a28      	ldr	r2, [pc, #160]	@ (800435c <TIM_Base_SetConfig+0x128>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a27      	ldr	r2, [pc, #156]	@ (8004360 <TIM_Base_SetConfig+0x12c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d003      	beq.n	80042ce <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a26      	ldr	r2, [pc, #152]	@ (8004364 <TIM_Base_SetConfig+0x130>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a10      	ldr	r2, [pc, #64]	@ (8004348 <TIM_Base_SetConfig+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a12      	ldr	r2, [pc, #72]	@ (8004358 <TIM_Base_SetConfig+0x124>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a11      	ldr	r2, [pc, #68]	@ (800435c <TIM_Base_SetConfig+0x128>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a10      	ldr	r2, [pc, #64]	@ (8004360 <TIM_Base_SetConfig+0x12c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0xf8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a0f      	ldr	r2, [pc, #60]	@ (8004364 <TIM_Base_SetConfig+0x130>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d103      	bne.n	8004334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	615a      	str	r2, [r3, #20]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800
 8004354:	40000c00 	.word	0x40000c00
 8004358:	40013400 	.word	0x40013400
 800435c:	40014000 	.word	0x40014000
 8004360:	40014400 	.word	0x40014400
 8004364:	40014800 	.word	0x40014800

08004368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800437c:	2302      	movs	r3, #2
 800437e:	e068      	b.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80043ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d01d      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f2:	d018      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1a      	ldr	r2, [pc, #104]	@ (800446c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a18      	ldr	r2, [pc, #96]	@ (8004470 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a13      	ldr	r2, [pc, #76]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a14      	ldr	r2, [pc, #80]	@ (8004474 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10c      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800442c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000

08004478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e040      	b.n	800450c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc fc88 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	@ 0x24
 80044a4:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f986 	bl	80047c8 <UART_SetConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fc34 	bl	8004d3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fcbb 	bl	8004e80 <UART_CheckIdleState>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	f640 030f 	movw	r3, #2063	@ 0x80f
 800453a:	4013      	ands	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d113      	bne.n	800456c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d009      	beq.n	800456c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8113 	beq.w	8004788 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      }
      return;
 800456a:	e10d      	b.n	8004788 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80d6 	beq.w	8004720 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d105      	bne.n	800458a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4b85      	ldr	r3, [pc, #532]	@ (8004798 <HAL_UART_IRQHandler+0x284>)
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80cb 	beq.w	8004720 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00e      	beq.n	80045b2 <HAL_UART_IRQHandler+0x9e>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00e      	beq.n	80045da <HAL_UART_IRQHandler+0xc6>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2202      	movs	r2, #2
 80045cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d2:	f043 0204 	orr.w	r2, r3, #4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <HAL_UART_IRQHandler+0xee>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2204      	movs	r2, #4
 80045f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045fa:	f043 0202 	orr.w	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	67da      	str	r2, [r3, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2208      	movs	r2, #8
 8004626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800462c:	f043 0208 	orr.w	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00f      	beq.n	800465e <HAL_UART_IRQHandler+0x14a>
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004656:	f043 0220 	orr.w	r2, r3, #32
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8092 	beq.w	800478c <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004690:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d004      	beq.n	80046aa <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d031      	beq.n	800470e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fca8 	bl	8005000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ba:	2b40      	cmp	r3, #64	@ 0x40
 80046bc:	d123      	bne.n	8004706 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046da:	4a30      	ldr	r2, [pc, #192]	@ (800479c <HAL_UART_IRQHandler+0x288>)
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fc fd8b 	bl	80011fe <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d016      	beq.n	800471c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e00e      	b.n	800471c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f858 	bl	80047b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004704:	e00a      	b.n	800471c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f854 	bl	80047b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470c:	e006      	b.n	800471c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f850 	bl	80047b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 800471a:	e037      	b.n	800478c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	bf00      	nop
    return;
 800471e:	e035      	b.n	800478c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <HAL_UART_IRQHandler+0x232>
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800473c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fcad 	bl	800509e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004744:	e025      	b.n	8004792 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
    }
    return;
 800476a:	e011      	b.n	8004790 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00d      	beq.n	8004792 <HAL_UART_IRQHandler+0x27e>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fc73 	bl	800506c <UART_EndTransmit_IT>
    return;
 8004786:	e004      	b.n	8004792 <HAL_UART_IRQHandler+0x27e>
      return;
 8004788:	bf00      	nop
 800478a:	e002      	b.n	8004792 <HAL_UART_IRQHandler+0x27e>
    return;
 800478c:	bf00      	nop
 800478e:	e000      	b.n	8004792 <HAL_UART_IRQHandler+0x27e>
    return;
 8004790:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	04000120 	.word	0x04000120
 800479c:	08005041 	.word	0x08005041

080047a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047cc:	b08a      	sub	sp, #40	@ 0x28
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4ba4      	ldr	r3, [pc, #656]	@ (8004a88 <UART_SetConfig+0x2c0>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004800:	430b      	orrs	r3, r1
 8004802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a99      	ldr	r2, [pc, #612]	@ (8004a8c <UART_SetConfig+0x2c4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004830:	4313      	orrs	r3, r2
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004844:	430a      	orrs	r2, r1
 8004846:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a90      	ldr	r2, [pc, #576]	@ (8004a90 <UART_SetConfig+0x2c8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d126      	bne.n	80048a0 <UART_SetConfig+0xd8>
 8004852:	4b90      	ldr	r3, [pc, #576]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b03      	cmp	r3, #3
 800485e:	d81b      	bhi.n	8004898 <UART_SetConfig+0xd0>
 8004860:	a201      	add	r2, pc, #4	@ (adr r2, 8004868 <UART_SetConfig+0xa0>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	08004879 	.word	0x08004879
 800486c:	08004889 	.word	0x08004889
 8004870:	08004881 	.word	0x08004881
 8004874:	08004891 	.word	0x08004891
 8004878:	2301      	movs	r3, #1
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e116      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004880:	2302      	movs	r3, #2
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004886:	e112      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488e:	e10e      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004890:	2308      	movs	r3, #8
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004896:	e10a      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489e:	e106      	b.n	8004aae <UART_SetConfig+0x2e6>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004a98 <UART_SetConfig+0x2d0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d138      	bne.n	800491c <UART_SetConfig+0x154>
 80048aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004a94 <UART_SetConfig+0x2cc>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	d82d      	bhi.n	8004914 <UART_SetConfig+0x14c>
 80048b8:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <UART_SetConfig+0xf8>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	08004915 	.word	0x08004915
 80048c8:	08004915 	.word	0x08004915
 80048cc:	08004915 	.word	0x08004915
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004915 	.word	0x08004915
 80048d8:	08004915 	.word	0x08004915
 80048dc:	08004915 	.word	0x08004915
 80048e0:	080048fd 	.word	0x080048fd
 80048e4:	08004915 	.word	0x08004915
 80048e8:	08004915 	.word	0x08004915
 80048ec:	08004915 	.word	0x08004915
 80048f0:	0800490d 	.word	0x0800490d
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e0d8      	b.n	8004aae <UART_SetConfig+0x2e6>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e0d4      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490a:	e0d0      	b.n	8004aae <UART_SetConfig+0x2e6>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004912:	e0cc      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491a:	e0c8      	b.n	8004aae <UART_SetConfig+0x2e6>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a5e      	ldr	r2, [pc, #376]	@ (8004a9c <UART_SetConfig+0x2d4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d125      	bne.n	8004972 <UART_SetConfig+0x1aa>
 8004926:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004930:	2b30      	cmp	r3, #48	@ 0x30
 8004932:	d016      	beq.n	8004962 <UART_SetConfig+0x19a>
 8004934:	2b30      	cmp	r3, #48	@ 0x30
 8004936:	d818      	bhi.n	800496a <UART_SetConfig+0x1a2>
 8004938:	2b20      	cmp	r3, #32
 800493a:	d00a      	beq.n	8004952 <UART_SetConfig+0x18a>
 800493c:	2b20      	cmp	r3, #32
 800493e:	d814      	bhi.n	800496a <UART_SetConfig+0x1a2>
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <UART_SetConfig+0x182>
 8004944:	2b10      	cmp	r3, #16
 8004946:	d008      	beq.n	800495a <UART_SetConfig+0x192>
 8004948:	e00f      	b.n	800496a <UART_SetConfig+0x1a2>
 800494a:	2300      	movs	r3, #0
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004950:	e0ad      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004952:	2302      	movs	r3, #2
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004958:	e0a9      	b.n	8004aae <UART_SetConfig+0x2e6>
 800495a:	2304      	movs	r3, #4
 800495c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004960:	e0a5      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004962:	2308      	movs	r3, #8
 8004964:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004968:	e0a1      	b.n	8004aae <UART_SetConfig+0x2e6>
 800496a:	2310      	movs	r3, #16
 800496c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004970:	e09d      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a4a      	ldr	r2, [pc, #296]	@ (8004aa0 <UART_SetConfig+0x2d8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d125      	bne.n	80049c8 <UART_SetConfig+0x200>
 800497c:	4b45      	ldr	r3, [pc, #276]	@ (8004a94 <UART_SetConfig+0x2cc>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004986:	2bc0      	cmp	r3, #192	@ 0xc0
 8004988:	d016      	beq.n	80049b8 <UART_SetConfig+0x1f0>
 800498a:	2bc0      	cmp	r3, #192	@ 0xc0
 800498c:	d818      	bhi.n	80049c0 <UART_SetConfig+0x1f8>
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d00a      	beq.n	80049a8 <UART_SetConfig+0x1e0>
 8004992:	2b80      	cmp	r3, #128	@ 0x80
 8004994:	d814      	bhi.n	80049c0 <UART_SetConfig+0x1f8>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <UART_SetConfig+0x1d8>
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d008      	beq.n	80049b0 <UART_SetConfig+0x1e8>
 800499e:	e00f      	b.n	80049c0 <UART_SetConfig+0x1f8>
 80049a0:	2300      	movs	r3, #0
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e082      	b.n	8004aae <UART_SetConfig+0x2e6>
 80049a8:	2302      	movs	r3, #2
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e07e      	b.n	8004aae <UART_SetConfig+0x2e6>
 80049b0:	2304      	movs	r3, #4
 80049b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b6:	e07a      	b.n	8004aae <UART_SetConfig+0x2e6>
 80049b8:	2308      	movs	r3, #8
 80049ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049be:	e076      	b.n	8004aae <UART_SetConfig+0x2e6>
 80049c0:	2310      	movs	r3, #16
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c6:	e072      	b.n	8004aae <UART_SetConfig+0x2e6>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a35      	ldr	r2, [pc, #212]	@ (8004aa4 <UART_SetConfig+0x2dc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d12a      	bne.n	8004a28 <UART_SetConfig+0x260>
 80049d2:	4b30      	ldr	r3, [pc, #192]	@ (8004a94 <UART_SetConfig+0x2cc>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e0:	d01a      	beq.n	8004a18 <UART_SetConfig+0x250>
 80049e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e6:	d81b      	bhi.n	8004a20 <UART_SetConfig+0x258>
 80049e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ec:	d00c      	beq.n	8004a08 <UART_SetConfig+0x240>
 80049ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f2:	d815      	bhi.n	8004a20 <UART_SetConfig+0x258>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <UART_SetConfig+0x238>
 80049f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fc:	d008      	beq.n	8004a10 <UART_SetConfig+0x248>
 80049fe:	e00f      	b.n	8004a20 <UART_SetConfig+0x258>
 8004a00:	2300      	movs	r3, #0
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e052      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e04e      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e04a      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	e046      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a26:	e042      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <UART_SetConfig+0x2c4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d13a      	bne.n	8004aa8 <UART_SetConfig+0x2e0>
 8004a32:	4b18      	ldr	r3, [pc, #96]	@ (8004a94 <UART_SetConfig+0x2cc>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a40:	d01a      	beq.n	8004a78 <UART_SetConfig+0x2b0>
 8004a42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a46:	d81b      	bhi.n	8004a80 <UART_SetConfig+0x2b8>
 8004a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a4c:	d00c      	beq.n	8004a68 <UART_SetConfig+0x2a0>
 8004a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a52:	d815      	bhi.n	8004a80 <UART_SetConfig+0x2b8>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <UART_SetConfig+0x298>
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5c:	d008      	beq.n	8004a70 <UART_SetConfig+0x2a8>
 8004a5e:	e00f      	b.n	8004a80 <UART_SetConfig+0x2b8>
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e022      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e01e      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e01a      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7e:	e016      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a86:	e012      	b.n	8004aae <UART_SetConfig+0x2e6>
 8004a88:	efff69f3 	.word	0xefff69f3
 8004a8c:	40008000 	.word	0x40008000
 8004a90:	40013800 	.word	0x40013800
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40004400 	.word	0x40004400
 8004a9c:	40004800 	.word	0x40004800
 8004aa0:	40004c00 	.word	0x40004c00
 8004aa4:	40005000 	.word	0x40005000
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4aa0      	ldr	r2, [pc, #640]	@ (8004d34 <UART_SetConfig+0x56c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d17a      	bne.n	8004bae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004abc:	2b08      	cmp	r3, #8
 8004abe:	d824      	bhi.n	8004b0a <UART_SetConfig+0x342>
 8004ac0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac8 <UART_SetConfig+0x300>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004b0b 	.word	0x08004b0b
 8004ad0:	08004af5 	.word	0x08004af5
 8004ad4:	08004b0b 	.word	0x08004b0b
 8004ad8:	08004afb 	.word	0x08004afb
 8004adc:	08004b0b 	.word	0x08004b0b
 8004ae0:	08004b0b 	.word	0x08004b0b
 8004ae4:	08004b0b 	.word	0x08004b0b
 8004ae8:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aec:	f7fe fd50 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004af0:	61f8      	str	r0, [r7, #28]
        break;
 8004af2:	e010      	b.n	8004b16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b90      	ldr	r3, [pc, #576]	@ (8004d38 <UART_SetConfig+0x570>)
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e00d      	b.n	8004b16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe fcb1 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8004afe:	61f8      	str	r0, [r7, #28]
        break;
 8004b00:	e009      	b.n	8004b16 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b06:	61fb      	str	r3, [r7, #28]
        break;
 8004b08:	e005      	b.n	8004b16 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80fd 	beq.w	8004d18 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d305      	bcc.n	8004b3a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b34:	69fa      	ldr	r2, [r7, #28]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d903      	bls.n	8004b42 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b40:	e0ea      	b.n	8004d18 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	2200      	movs	r2, #0
 8004b46:	461c      	mov	r4, r3
 8004b48:	4615      	mov	r5, r2
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	022b      	lsls	r3, r5, #8
 8004b54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b58:	0222      	lsls	r2, r4, #8
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	6849      	ldr	r1, [r1, #4]
 8004b5e:	0849      	lsrs	r1, r1, #1
 8004b60:	2000      	movs	r0, #0
 8004b62:	4688      	mov	r8, r1
 8004b64:	4681      	mov	r9, r0
 8004b66:	eb12 0a08 	adds.w	sl, r2, r8
 8004b6a:	eb43 0b09 	adc.w	fp, r3, r9
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	603b      	str	r3, [r7, #0]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	4659      	mov	r1, fp
 8004b80:	f7fb fb2a 	bl	80001d8 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4613      	mov	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b92:	d308      	bcc.n	8004ba6 <UART_SetConfig+0x3de>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b9a:	d204      	bcs.n	8004ba6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	e0b8      	b.n	8004d18 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bac:	e0b4      	b.n	8004d18 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb6:	d15f      	bne.n	8004c78 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8004bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d828      	bhi.n	8004c12 <UART_SetConfig+0x44a>
 8004bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x400>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004c03 	.word	0x08004c03
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c13 	.word	0x08004c13
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fe fcd0 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004bf0:	61f8      	str	r0, [r7, #28]
        break;
 8004bf2:	e014      	b.n	8004c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7fe fce2 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004bf8:	61f8      	str	r0, [r7, #28]
        break;
 8004bfa:	e010      	b.n	8004c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8004d38 <UART_SetConfig+0x570>)
 8004bfe:	61fb      	str	r3, [r7, #28]
        break;
 8004c00:	e00d      	b.n	8004c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fe fc2d 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8004c06:	61f8      	str	r0, [r7, #28]
        break;
 8004c08:	e009      	b.n	8004c1e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0e:	61fb      	str	r3, [r7, #28]
        break;
 8004c10:	e005      	b.n	8004c1e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d079      	beq.n	8004d18 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	005a      	lsls	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d916      	bls.n	8004c70 <UART_SetConfig+0x4a8>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c48:	d212      	bcs.n	8004c70 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f023 030f 	bic.w	r3, r3, #15
 8004c52:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	8afb      	ldrh	r3, [r7, #22]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	8afa      	ldrh	r2, [r7, #22]
 8004c6c:	60da      	str	r2, [r3, #12]
 8004c6e:	e053      	b.n	8004d18 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c76:	e04f      	b.n	8004d18 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d828      	bhi.n	8004cd2 <UART_SetConfig+0x50a>
 8004c80:	a201      	add	r2, pc, #4	@ (adr r2, 8004c88 <UART_SetConfig+0x4c0>)
 8004c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c86:	bf00      	nop
 8004c88:	08004cad 	.word	0x08004cad
 8004c8c:	08004cb5 	.word	0x08004cb5
 8004c90:	08004cbd 	.word	0x08004cbd
 8004c94:	08004cd3 	.word	0x08004cd3
 8004c98:	08004cc3 	.word	0x08004cc3
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cd3 	.word	0x08004cd3
 8004ca4:	08004cd3 	.word	0x08004cd3
 8004ca8:	08004ccb 	.word	0x08004ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe fc70 	bl	8003590 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	61f8      	str	r0, [r7, #28]
        break;
 8004cb2:	e014      	b.n	8004cde <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb4:	f7fe fc82 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004cb8:	61f8      	str	r0, [r7, #28]
        break;
 8004cba:	e010      	b.n	8004cde <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004d38 <UART_SetConfig+0x570>)
 8004cbe:	61fb      	str	r3, [r7, #28]
        break;
 8004cc0:	e00d      	b.n	8004cde <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc2:	f7fe fbcd 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 8004cc6:	61f8      	str	r0, [r7, #28]
        break;
 8004cc8:	e009      	b.n	8004cde <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cce:	61fb      	str	r3, [r7, #28]
        break;
 8004cd0:	e005      	b.n	8004cde <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cdc:	bf00      	nop
    }

    if (pclk != 0U)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	085a      	lsrs	r2, r3, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d908      	bls.n	8004d12 <UART_SetConfig+0x54a>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d06:	d204      	bcs.n	8004d12 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	e002      	b.n	8004d18 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8004d24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3728      	adds	r7, #40	@ 0x28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d32:	bf00      	nop
 8004d34:	40008000 	.word	0x40008000
 8004d38:	00f42400 	.word	0x00f42400

08004d3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e3a:	d10a      	bne.n	8004e52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004e8e:	f7fc f875 	bl	8000f7c <HAL_GetTick>
 8004e92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d10e      	bne.n	8004ec0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f82a 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e020      	b.n	8004f02 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d10e      	bne.n	8004eec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ece:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f814 	bl	8004f0a <UART_WaitOnFlagUntilTimeout>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e00a      	b.n	8004f02 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	603b      	str	r3, [r7, #0]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f1a:	e05d      	b.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d059      	beq.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f24:	f7fc f82a 	bl	8000f7c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d302      	bcc.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11b      	bne.n	8004f72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004f48:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e042      	b.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02b      	beq.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f8e:	d123      	bne.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f98:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8004fa8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
 8004fb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e00f      	b.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	69da      	ldr	r2, [r3, #28]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	79fb      	ldrb	r3, [r7, #7]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d092      	beq.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8005016:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2220      	movs	r2, #32
 800502c:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fba8 	bl	80047b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005082:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2220      	movs	r2, #32
 8005088:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff fb85 	bl	80047a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050b2:	b084      	sub	sp, #16
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	f107 001c 	add.w	r0, r7, #28
 80050c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d122      	bne.n	8005110 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80050de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d105      	bne.n	8005104 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 f9db 	bl	80064c0 <USB_CoreReset>
 800510a:	4603      	mov	r3, r0
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e01a      	b.n	8005146 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f001 f9cf 	bl	80064c0 <USB_CoreReset>
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d106      	bne.n	800513a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005130:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
 8005138:	e005      	b.n	8005146 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 8005146:	7bfb      	ldrb	r3, [r7, #15]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005152:	b004      	add	sp, #16
 8005154:	4770      	bx	lr
	...

08005158 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	2b02      	cmp	r3, #2
 800516a:	d165      	bne.n	8005238 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4a3e      	ldr	r2, [pc, #248]	@ (8005268 <USB_SetTurnaroundTime+0x110>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d906      	bls.n	8005182 <USB_SetTurnaroundTime+0x2a>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4a3d      	ldr	r2, [pc, #244]	@ (800526c <USB_SetTurnaroundTime+0x114>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d202      	bcs.n	8005182 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800517c:	230f      	movs	r3, #15
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e05c      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a39      	ldr	r2, [pc, #228]	@ (800526c <USB_SetTurnaroundTime+0x114>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d306      	bcc.n	8005198 <USB_SetTurnaroundTime+0x40>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4a38      	ldr	r2, [pc, #224]	@ (8005270 <USB_SetTurnaroundTime+0x118>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d202      	bcs.n	8005198 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005192:	230e      	movs	r3, #14
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	e051      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a35      	ldr	r2, [pc, #212]	@ (8005270 <USB_SetTurnaroundTime+0x118>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d306      	bcc.n	80051ae <USB_SetTurnaroundTime+0x56>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4a34      	ldr	r2, [pc, #208]	@ (8005274 <USB_SetTurnaroundTime+0x11c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d202      	bcs.n	80051ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80051a8:	230d      	movs	r3, #13
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	e046      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4a30      	ldr	r2, [pc, #192]	@ (8005274 <USB_SetTurnaroundTime+0x11c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d306      	bcc.n	80051c4 <USB_SetTurnaroundTime+0x6c>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005278 <USB_SetTurnaroundTime+0x120>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d802      	bhi.n	80051c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80051be:	230c      	movs	r3, #12
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	e03b      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005278 <USB_SetTurnaroundTime+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d906      	bls.n	80051da <USB_SetTurnaroundTime+0x82>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a2b      	ldr	r2, [pc, #172]	@ (800527c <USB_SetTurnaroundTime+0x124>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d802      	bhi.n	80051da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80051d4:	230b      	movs	r3, #11
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e030      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a27      	ldr	r2, [pc, #156]	@ (800527c <USB_SetTurnaroundTime+0x124>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d906      	bls.n	80051f0 <USB_SetTurnaroundTime+0x98>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a26      	ldr	r2, [pc, #152]	@ (8005280 <USB_SetTurnaroundTime+0x128>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d802      	bhi.n	80051f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80051ea:	230a      	movs	r3, #10
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e025      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a23      	ldr	r2, [pc, #140]	@ (8005280 <USB_SetTurnaroundTime+0x128>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d906      	bls.n	8005206 <USB_SetTurnaroundTime+0xae>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <USB_SetTurnaroundTime+0x12c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d202      	bcs.n	8005206 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005200:	2309      	movs	r3, #9
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e01a      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a1e      	ldr	r2, [pc, #120]	@ (8005284 <USB_SetTurnaroundTime+0x12c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d306      	bcc.n	800521c <USB_SetTurnaroundTime+0xc4>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <USB_SetTurnaroundTime+0x130>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d802      	bhi.n	800521c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005216:	2308      	movs	r3, #8
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e00f      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a1a      	ldr	r2, [pc, #104]	@ (8005288 <USB_SetTurnaroundTime+0x130>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d906      	bls.n	8005232 <USB_SetTurnaroundTime+0xda>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a19      	ldr	r2, [pc, #100]	@ (800528c <USB_SetTurnaroundTime+0x134>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d202      	bcs.n	8005232 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800522c:	2307      	movs	r3, #7
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e004      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005232:	2306      	movs	r3, #6
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e001      	b.n	800523c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005238:	2309      	movs	r3, #9
 800523a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005254:	431a      	orrs	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	00d8acbf 	.word	0x00d8acbf
 800526c:	00e4e1c0 	.word	0x00e4e1c0
 8005270:	00f42400 	.word	0x00f42400
 8005274:	01067380 	.word	0x01067380
 8005278:	011a499f 	.word	0x011a499f
 800527c:	01312cff 	.word	0x01312cff
 8005280:	014ca43f 	.word	0x014ca43f
 8005284:	016e3600 	.word	0x016e3600
 8005288:	01a6ab1f 	.word	0x01a6ab1f
 800528c:	01e84800 	.word	0x01e84800

08005290 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f043 0201 	orr.w	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d106      	bne.n	8005300 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]
 80052fe:	e00b      	b.n	8005318 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e001      	b.n	8005318 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e003      	b.n	8005320 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005318:	2032      	movs	r0, #50	@ 0x32
 800531a:	f7fb fe3b 	bl	8000f94 <HAL_Delay>

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005328:	b084      	sub	sp, #16
 800532a:	b580      	push	{r7, lr}
 800532c:	b086      	sub	sp, #24
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e009      	b.n	800535c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3340      	adds	r3, #64	@ 0x40
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	2200      	movs	r2, #0
 8005354:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	2b0e      	cmp	r3, #14
 8005360:	d9f2      	bls.n	8005348 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d11c      	bne.n	80053a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	e005      	b.n	80053ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2300      	movs	r3, #0
 80053b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c0:	4619      	mov	r1, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c8:	461a      	mov	r2, r3
 80053ca:	680b      	ldr	r3, [r1, #0]
 80053cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053ce:	2103      	movs	r1, #3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f93d 	bl	8005650 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053d6:	2110      	movs	r1, #16
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8f1 	bl	80055c0 <USB_FlushTxFifo>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f90f 	bl	800560c <USB_FlushRxFifo>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fe:	461a      	mov	r2, r3
 8005400:	2300      	movs	r3, #0
 8005402:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800540a:	461a      	mov	r2, r3
 800540c:	2300      	movs	r3, #0
 800540e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e043      	b.n	80054aa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005438:	d118      	bne.n	800546c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544c:	461a      	mov	r2, r3
 800544e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	e013      	b.n	800547e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005462:	461a      	mov	r2, r3
 8005464:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	e008      	b.n	800547e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548a:	461a      	mov	r2, r3
 800548c:	2300      	movs	r3, #0
 800548e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3301      	adds	r3, #1
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d3b7      	bcc.n	8005422 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	e043      	b.n	8005540 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ce:	d118      	bne.n	8005502 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	e013      	b.n	8005514 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e008      	b.n	8005514 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550e:	461a      	mov	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	461a      	mov	r2, r3
 8005522:	2300      	movs	r3, #0
 8005524:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005538:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3301      	adds	r3, #1
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	429a      	cmp	r2, r3
 8005546:	d3b7      	bcc.n	80054b8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005556:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800555a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005568:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f043 0210 	orr.w	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	4b10      	ldr	r3, [pc, #64]	@ (80055bc <USB_DevInit+0x294>)
 800557c:	4313      	orrs	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f043 0208 	orr.w	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055a2:	f043 0304 	orr.w	r3, r3, #4
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055b6:	b004      	add	sp, #16
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	803c3800 	.word	0x803c3800

080055c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	019b      	lsls	r3, r3, #6
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4a09      	ldr	r2, [pc, #36]	@ (8005608 <USB_FlushTxFifo+0x48>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e006      	b.n	80055fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d0f0      	beq.n	80055da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	00030d40 	.word	0x00030d40

0800560c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2210      	movs	r2, #16
 800561c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4a09      	ldr	r2, [pc, #36]	@ (800564c <USB_FlushRxFifo+0x40>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e006      	b.n	800563e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b10      	cmp	r3, #16
 800563a:	d0f0      	beq.n	800561e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	00030d40 	.word	0x00030d40

08005650 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	68f9      	ldr	r1, [r7, #12]
 800566c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0306 	and.w	r3, r3, #6
 800569a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d002      	beq.n	80056a8 <USB_GetDevSpeed+0x26>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d102      	bne.n	80056ae <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80056a8:	2302      	movs	r3, #2
 80056aa:	75fb      	strb	r3, [r7, #23]
 80056ac:	e001      	b.n	80056b2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80056ae:	230f      	movs	r3, #15
 80056b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80056b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d13a      	bne.n	8005752 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	2101      	movs	r1, #1
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d155      	bne.n	80057c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005730:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	059b      	lsls	r3, r3, #22
 8005736:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005738:	4313      	orrs	r3, r2
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800574a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e036      	b.n	80057c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	2101      	movs	r1, #1
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005770:	4313      	orrs	r3, r2
 8005772:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d11a      	bne.n	80057c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	78db      	ldrb	r3, [r3, #3]
 80057a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80057a6:	430b      	orrs	r3, r1
 80057a8:	4313      	orrs	r3, r2
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d161      	bne.n	80058b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005802:	d11f      	bne.n	8005844 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800581e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005822:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800583e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	2101      	movs	r1, #1
 8005856:	fa01 f303 	lsl.w	r3, r1, r3
 800585a:	b29b      	uxth	r3, r3
 800585c:	43db      	mvns	r3, r3
 800585e:	68f9      	ldr	r1, [r7, #12]
 8005860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005864:	4013      	ands	r3, r2
 8005866:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 030f 	and.w	r3, r3, #15
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	b29b      	uxth	r3, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005888:	4013      	ands	r3, r2
 800588a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	0159      	lsls	r1, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	440b      	add	r3, r1
 80058a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a6:	4619      	mov	r1, r3
 80058a8:	4b35      	ldr	r3, [pc, #212]	@ (8005980 <USB_DeactivateEndpoint+0x1b0>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]
 80058ae:	e060      	b.n	8005972 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058c6:	d11f      	bne.n	8005908 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005902:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005906:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	2101      	movs	r1, #1
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	43db      	mvns	r3, r3
 8005922:	68f9      	ldr	r1, [r7, #12]
 8005924:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005928:	4013      	ands	r3, r2
 800592a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	041b      	lsls	r3, r3, #16
 8005944:	43db      	mvns	r3, r3
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800594c:	4013      	ands	r3, r2
 800594e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	0159      	lsls	r1, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	440b      	add	r3, r1
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	4619      	mov	r1, r3
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <USB_DeactivateEndpoint+0x1b4>)
 800596e:	4013      	ands	r3, r2
 8005970:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	ec337800 	.word	0xec337800
 8005984:	eff37800 	.word	0xeff37800

08005988 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	f040 810a 	bne.w	8005bba <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d132      	bne.n	8005a14 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	0151      	lsls	r1, r2, #5
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	440a      	add	r2, r1
 8005a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a0c:	0cdb      	lsrs	r3, r3, #19
 8005a0e:	04db      	lsls	r3, r3, #19
 8005a10:	6113      	str	r3, [r2, #16]
 8005a12:	e074      	b.n	8005afe <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	0151      	lsls	r1, r2, #5
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	440a      	add	r2, r1
 8005a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a2e:	0cdb      	lsrs	r3, r3, #19
 8005a30:	04db      	lsls	r3, r3, #19
 8005a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005a52:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005a56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6959      	ldr	r1, [r3, #20]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	440b      	add	r3, r1
 8005a70:	1e59      	subs	r1, r3, #1
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a7a:	04d9      	lsls	r1, r3, #19
 8005a7c:	4baf      	ldr	r3, [pc, #700]	@ (8005d3c <USB_EPStartXfer+0x3b4>)
 8005a7e:	400b      	ands	r3, r1
 8005a80:	6939      	ldr	r1, [r7, #16]
 8005a82:	0148      	lsls	r0, r1, #5
 8005a84:	6979      	ldr	r1, [r7, #20]
 8005a86:	4401      	add	r1, r0
 8005a88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa6:	6939      	ldr	r1, [r7, #16]
 8005aa8:	0148      	lsls	r0, r1, #5
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	4401      	add	r1, r0
 8005aae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	78db      	ldrb	r3, [r3, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d11f      	bne.n	8005afe <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ad8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005adc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005afc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b1c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	78db      	ldrb	r3, [r3, #3]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d015      	beq.n	8005b52 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8100 	beq.w	8005d30 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	6979      	ldr	r1, [r7, #20]
 8005b48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b50:	e0ee      	b.n	8005d30 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d110      	bne.n	8005b84 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e00f      	b.n	8005ba4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68d9      	ldr	r1, [r3, #12]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9e2 	bl	8005f7c <USB_WritePacket>
 8005bb8:	e0ba      	b.n	8005d30 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bd4:	0cdb      	lsrs	r3, r3, #19
 8005bd6:	04db      	lsls	r3, r3, #19
 8005bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bf8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d123      	bne.n	8005c4e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1c:	6939      	ldr	r1, [r7, #16]
 8005c1e:	0148      	lsls	r0, r1, #5
 8005c20:	6979      	ldr	r1, [r7, #20]
 8005c22:	4401      	add	r1, r0
 8005c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c4a:	6113      	str	r3, [r2, #16]
 8005c4c:	e033      	b.n	8005cb6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	4413      	add	r3, r2
 8005c58:	1e5a      	subs	r2, r3, #1
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c62:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	04d9      	lsls	r1, r3, #19
 8005c76:	4b31      	ldr	r3, [pc, #196]	@ (8005d3c <USB_EPStartXfer+0x3b4>)
 8005c78:	400b      	ands	r3, r1
 8005c7a:	6939      	ldr	r1, [r7, #16]
 8005c7c:	0148      	lsls	r0, r1, #5
 8005c7e:	6979      	ldr	r1, [r7, #20]
 8005c80:	4401      	add	r1, r0
 8005c82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c86:	4313      	orrs	r3, r2
 8005c88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	89f9      	ldrh	r1, [r7, #14]
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca6:	6939      	ldr	r1, [r7, #16]
 8005ca8:	0148      	lsls	r0, r1, #5
 8005caa:	6979      	ldr	r1, [r7, #20]
 8005cac:	4401      	add	r1, r0
 8005cae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	78db      	ldrb	r3, [r3, #3]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d128      	bne.n	8005d10 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d110      	bne.n	8005cf0 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	e00f      	b.n	8005d10 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	1ff80000 	.word	0x1ff80000

08005d40 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	f040 80ab 	bne.w	8005eb4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d132      	bne.n	8005dcc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	0151      	lsls	r1, r2, #5
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	440a      	add	r2, r1
 8005da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005da4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	0151      	lsls	r1, r2, #5
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	440a      	add	r2, r1
 8005dc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc4:	0cdb      	lsrs	r3, r3, #19
 8005dc6:	04db      	lsls	r3, r3, #19
 8005dc8:	6113      	str	r3, [r2, #16]
 8005dca:	e04e      	b.n	8005e6a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de6:	0cdb      	lsrs	r3, r3, #19
 8005de8:	04db      	lsls	r3, r3, #19
 8005dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e06:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e0a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e0e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d903      	bls.n	8005e24 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	0148      	lsls	r0, r1, #5
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	4401      	add	r1, r0
 8005e62:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005e66:	4313      	orrs	r3, r2
 8005e68:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e88:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d06d      	beq.n	8005f6e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	634b      	str	r3, [r1, #52]	@ 0x34
 8005eb2:	e05c      	b.n	8005f6e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ece:	0cdb      	lsrs	r3, r3, #19
 8005ed0:	04db      	lsls	r3, r3, #19
 8005ed2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ef2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ef6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f26:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	0148      	lsls	r0, r1, #5
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	4401      	add	r1, r0
 8005f46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b089      	sub	sp, #36	@ 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	4611      	mov	r1, r2
 8005f88:	461a      	mov	r2, r3
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	71fb      	strb	r3, [r7, #7]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005f9a:	88bb      	ldrh	r3, [r7, #4]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	089b      	lsrs	r3, r3, #2
 8005fa0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	e00f      	b.n	8005fc8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	031a      	lsls	r2, r3, #12
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d3eb      	bcc.n	8005fa8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3724      	adds	r7, #36	@ 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b089      	sub	sp, #36	@ 0x24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	3303      	adds	r3, #3
 8005ff8:	089b      	lsrs	r3, r3, #2
 8005ffa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	e00b      	b.n	800601a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	601a      	str	r2, [r3, #0]
    pDest++;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	3304      	adds	r3, #4
 8006012:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	3301      	adds	r3, #1
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3ef      	bcc.n	8006002 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006022:	69fb      	ldr	r3, [r7, #28]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3724      	adds	r7, #36	@ 0x24
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d12c      	bne.n	80060a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	db12      	blt.n	8006084 <USB_EPSetStall+0x54>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00f      	beq.n	8006084 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800607e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006082:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e02b      	b.n	80060fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	db12      	blt.n	80060de <USB_EPSetStall+0xae>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00f      	beq.n	80060de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d128      	bne.n	800617a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	440a      	add	r2, r1
 800613e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006142:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006146:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	78db      	ldrb	r3, [r3, #3]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d003      	beq.n	8006158 <USB_EPClearStall+0x4c>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	78db      	ldrb	r3, [r3, #3]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d138      	bne.n	80061ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e027      	b.n	80061ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006194:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006198:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d003      	beq.n	80061aa <USB_EPClearStall+0x9e>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	78db      	ldrb	r3, [r3, #3]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d10f      	bne.n	80061ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80061fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	78fb      	ldrb	r3, [r7, #3]
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006252:	f023 0302 	bic.w	r3, r3, #2
 8006256:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006280:	f023 0303 	bic.w	r3, r3, #3
 8006284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062c0:	68fb      	ldr	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	4013      	ands	r3, r2
 80062f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	0c1b      	lsrs	r3, r3, #16
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	b29b      	uxth	r3, r3
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006364:	68bb      	ldr	r3, [r7, #8]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006394:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	fa22 f303 	lsr.w	r3, r2, r3
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4013      	ands	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063c0:	68bb      	ldr	r3, [r7, #8]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0301 	and.w	r3, r3, #1
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006404:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006408:	f023 0307 	bic.w	r3, r3, #7
 800640c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800641c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	333c      	adds	r3, #60	@ 0x3c
 8006442:	3304      	adds	r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4a1c      	ldr	r2, [pc, #112]	@ (80064bc <USB_EP0_OutStart+0x8c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d90a      	bls.n	8006466 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800645c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006460:	d101      	bne.n	8006466 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e024      	b.n	80064b0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646c:	461a      	mov	r2, r3
 800646e:	2300      	movs	r3, #0
 8006470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006480:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006484:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006494:	f043 0318 	orr.w	r3, r3, #24
 8006498:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80064ac:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	4f54300a 	.word	0x4f54300a

080064c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a13      	ldr	r2, [pc, #76]	@ (8006524 <USB_CoreReset+0x64>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d901      	bls.n	80064de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e01b      	b.n	8006516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	daf2      	bge.n	80064cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a09      	ldr	r2, [pc, #36]	@ (8006524 <USB_CoreReset+0x64>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e006      	b.n	8006516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d0f0      	beq.n	80064f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	00030d40 	.word	0x00030d40

08006528 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006534:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006538:	f002 fa58 	bl	80089ec <malloc>
 800653c:	4603      	mov	r3, r0
 800653e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d105      	bne.n	8006552 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800654e:	2302      	movs	r3, #2
 8006550:	e066      	b.n	8006620 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	7c1b      	ldrb	r3, [r3, #16]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d119      	bne.n	8006596 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006562:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006566:	2202      	movs	r2, #2
 8006568:	2181      	movs	r1, #129	@ 0x81
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f002 f824 	bl	80085b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006576:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800657a:	2202      	movs	r2, #2
 800657c:	2101      	movs	r1, #1
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f002 f81a 	bl	80085b8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2210      	movs	r2, #16
 8006590:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8006594:	e016      	b.n	80065c4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006596:	2340      	movs	r3, #64	@ 0x40
 8006598:	2202      	movs	r2, #2
 800659a:	2181      	movs	r1, #129	@ 0x81
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f002 f80b 	bl	80085b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065a8:	2340      	movs	r3, #64	@ 0x40
 80065aa:	2202      	movs	r2, #2
 80065ac:	2101      	movs	r1, #1
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f002 f802 	bl	80085b8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2210      	movs	r2, #16
 80065c0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065c4:	2308      	movs	r3, #8
 80065c6:	2203      	movs	r2, #3
 80065c8:	2182      	movs	r1, #130	@ 0x82
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f001 fff4 	bl	80085b8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7c1b      	ldrb	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006600:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006604:	2101      	movs	r1, #1
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 f950 	bl	80088ac <USBD_LL_PrepareReceive>
 800660c:	e007      	b.n	800661e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006614:	2340      	movs	r3, #64	@ 0x40
 8006616:	2101      	movs	r1, #1
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f002 f947 	bl	80088ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006634:	2181      	movs	r1, #129	@ 0x81
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 fffc 	bl	8008634 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006642:	2101      	movs	r1, #1
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fff5 	bl	8008634 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006652:	2182      	movs	r1, #130	@ 0x82
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 ffed 	bl	8008634 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006684:	4618      	mov	r0, r3
 8006686:	f002 f9b9 	bl	80089fc <free>
    pdev->pClassData = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80066ac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03a      	beq.n	800673c <USBD_CDC_Setup+0xa0>
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	f040 8097 	bne.w	80067fa <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	88db      	ldrh	r3, [r3, #6]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d029      	beq.n	8006728 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da11      	bge.n	8006702 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80066ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	88d2      	ldrh	r2, [r2, #6]
 80066f0:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80066f2:	6939      	ldr	r1, [r7, #16]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	88db      	ldrh	r3, [r3, #6]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fade 	bl	8007cbc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006700:	e082      	b.n	8006808 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	785a      	ldrb	r2, [r3, #1]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006718:	6939      	ldr	r1, [r7, #16]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	88db      	ldrh	r3, [r3, #6]
 800671e:	461a      	mov	r2, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f001 faf7 	bl	8007d14 <USBD_CtlPrepareRx>
      break;
 8006726:	e06f      	b.n	8006808 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	7850      	ldrb	r0, [r2, #1]
 8006734:	2200      	movs	r2, #0
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	4798      	blx	r3
      break;
 800673a:	e065      	b.n	8006808 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b0b      	cmp	r3, #11
 8006742:	d84f      	bhi.n	80067e4 <USBD_CDC_Setup+0x148>
 8006744:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <USBD_CDC_Setup+0xb0>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	0800677d 	.word	0x0800677d
 8006750:	080067f3 	.word	0x080067f3
 8006754:	080067e5 	.word	0x080067e5
 8006758:	080067e5 	.word	0x080067e5
 800675c:	080067e5 	.word	0x080067e5
 8006760:	080067e5 	.word	0x080067e5
 8006764:	080067e5 	.word	0x080067e5
 8006768:	080067e5 	.word	0x080067e5
 800676c:	080067e5 	.word	0x080067e5
 8006770:	080067e5 	.word	0x080067e5
 8006774:	080067a5 	.word	0x080067a5
 8006778:	080067cd 	.word	0x080067cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006782:	2b03      	cmp	r3, #3
 8006784:	d107      	bne.n	8006796 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006786:	f107 030c 	add.w	r3, r7, #12
 800678a:	2202      	movs	r2, #2
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f001 fa94 	bl	8007cbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006794:	e030      	b.n	80067f8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fa1e 	bl	8007bda <USBD_CtlError>
            ret = USBD_FAIL;
 800679e:	2303      	movs	r3, #3
 80067a0:	75fb      	strb	r3, [r7, #23]
          break;
 80067a2:	e029      	b.n	80067f8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d107      	bne.n	80067be <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80067ae:	f107 030f 	add.w	r3, r7, #15
 80067b2:	2201      	movs	r2, #1
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fa80 	bl	8007cbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067bc:	e01c      	b.n	80067f8 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fa0a 	bl	8007bda <USBD_CtlError>
            ret = USBD_FAIL;
 80067c6:	2303      	movs	r3, #3
 80067c8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ca:	e015      	b.n	80067f8 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d00f      	beq.n	80067f6 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f9fe 	bl	8007bda <USBD_CtlError>
            ret = USBD_FAIL;
 80067de:	2303      	movs	r3, #3
 80067e0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067e2:	e008      	b.n	80067f6 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f9f7 	bl	8007bda <USBD_CtlError>
          ret = USBD_FAIL;
 80067ec:	2303      	movs	r3, #3
 80067ee:	75fb      	strb	r3, [r7, #23]
          break;
 80067f0:	e002      	b.n	80067f8 <USBD_CDC_Setup+0x15c>
          break;
 80067f2:	bf00      	nop
 80067f4:	e008      	b.n	8006808 <USBD_CDC_Setup+0x16c>
          break;
 80067f6:	bf00      	nop
      }
      break;
 80067f8:	e006      	b.n	8006808 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f9ec 	bl	8007bda <USBD_CtlError>
      ret = USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	75fb      	strb	r3, [r7, #23]
      break;
 8006806:	bf00      	nop
  }

  return (uint8_t)ret;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop

08006814 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8006826:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	e04f      	b.n	80068d6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800683c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	440b      	add	r3, r1
 800684c:	3318      	adds	r3, #24
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d029      	beq.n	80068a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	3318      	adds	r3, #24
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	78f9      	ldrb	r1, [r7, #3]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	460b      	mov	r3, r1
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	1a5b      	subs	r3, r3, r1
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4403      	add	r3, r0
 8006874:	3344      	adds	r3, #68	@ 0x44
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	fbb2 f1f3 	udiv	r1, r2, r3
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006882:	2b00      	cmp	r3, #0
 8006884:	d110      	bne.n	80068a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006886:	78fa      	ldrb	r2, [r7, #3]
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	440b      	add	r3, r1
 8006894:	3318      	adds	r3, #24
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800689a:	78f9      	ldrb	r1, [r7, #3]
 800689c:	2300      	movs	r3, #0
 800689e:	2200      	movs	r2, #0
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 ffcb 	bl	800883c <USBD_LL_Transmit>
 80068a6:	e015      	b.n	80068d4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e015      	b.n	800692c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f002 f809 	bl	800891c <USBD_LL_GetRxDataSize>
 800690a:	4602      	mov	r2, r0
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006926:	4611      	mov	r1, r2
 8006928:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006942:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d014      	beq.n	8006978 <USBD_CDC_EP0_RxReady+0x44>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006954:	2bff      	cmp	r3, #255	@ 0xff
 8006956:	d00f      	beq.n	8006978 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8006966:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800696e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	22ff      	movs	r2, #255	@ 0xff
 8006974:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2243      	movs	r2, #67	@ 0x43
 8006990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006992:	4b03      	ldr	r3, [pc, #12]	@ (80069a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000094 	.word	0x20000094

080069a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2243      	movs	r2, #67	@ 0x43
 80069b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80069b2:	4b03      	ldr	r3, [pc, #12]	@ (80069c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20000050 	.word	0x20000050

080069c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2243      	movs	r2, #67	@ 0x43
 80069d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80069d2:	4b03      	ldr	r3, [pc, #12]	@ (80069e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	200000d8 	.word	0x200000d8

080069e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	220a      	movs	r2, #10
 80069f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069f2:	4b03      	ldr	r3, [pc, #12]	@ (8006a00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	2000000c 	.word	0x2000000c

08006a04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e004      	b.n	8006a22 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b087      	sub	sp, #28
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a40:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a70:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e01a      	b.n	8006ae0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d114      	bne.n	8006ade <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006ad2:	2181      	movs	r1, #129	@ 0x81
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 feb1 	bl	800883c <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006af6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e016      	b.n	8006b34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7c1b      	ldrb	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b18:	2101      	movs	r1, #1
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fec6 	bl	80088ac <USBD_LL_PrepareReceive>
 8006b20:	e007      	b.n	8006b32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006b28:	2340      	movs	r3, #64	@ 0x40
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 febd 	bl	80088ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e01f      	b.n	8006b94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d003      	beq.n	8006b7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	79fa      	ldrb	r2, [r7, #7]
 8006b86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fc97 	bl	80084bc <USBD_LL_Init>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e016      	b.n	8006be2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	f107 020e 	add.w	r2, r7, #14
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fcae 	bl	8008554 <USBD_LL_Start>
 8006bf8:	4603      	mov	r3, r0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c24:	2303      	movs	r3, #3
 8006c26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	4611      	mov	r1, r2
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
  }

  return USBD_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ff67 	bl	8007b66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d01a      	beq.n	8006cf2 <USBD_LL_SetupStage+0x72>
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d822      	bhi.n	8006d06 <USBD_LL_SetupStage+0x86>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <USBD_LL_SetupStage+0x4a>
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d00a      	beq.n	8006cde <USBD_LL_SetupStage+0x5e>
 8006cc8:	e01d      	b.n	8006d06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa18 	bl	8007108 <USBD_StdDevReq>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73fb      	strb	r3, [r7, #15]
      break;
 8006cdc:	e020      	b.n	8006d20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa7c 	bl	80071e4 <USBD_StdItfReq>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf0:	e016      	b.n	8006d20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 faba 	bl	8007274 <USBD_StdEPReq>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
      break;
 8006d04:	e00c      	b.n	8006d20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006d0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fcc3 	bl	80086a0 <USBD_LL_StallEP>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1e:	bf00      	nop
  }

  return ret;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b086      	sub	sp, #24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	460b      	mov	r3, r1
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d137      	bne.n	8006dae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006d44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d14a      	bne.n	8006de6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d913      	bls.n	8006d84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	1ad2      	subs	r2, r2, r3
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bf28      	it	cs
 8006d76:	4613      	movcs	r3, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 ffe6 	bl	8007d4e <USBD_CtlContinueRx>
 8006d82:	e030      	b.n	8006de6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d105      	bne.n	8006da6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 ffe2 	bl	8007d70 <USBD_CtlSendStatus>
 8006dac:	e01b      	b.n	8006de6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d013      	beq.n	8006de2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d10e      	bne.n	8006de2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	7afa      	ldrb	r2, [r7, #11]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	4798      	blx	r3
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	e002      	b.n	8006de8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e000      	b.n	8006de8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d16a      	bne.n	8006eda <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	3314      	adds	r3, #20
 8006e08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d155      	bne.n	8006ec0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d914      	bls.n	8006e4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	1ad2      	subs	r2, r2, r3
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 ff5b 	bl	8007cf2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f001 fd32 	bl	80088ac <USBD_LL_PrepareReceive>
 8006e48:	e03a      	b.n	8006ec0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d11c      	bne.n	8006e90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d316      	bcc.n	8006e90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d20f      	bcs.n	8006e90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 ff3c 	bl	8007cf2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e82:	2300      	movs	r3, #0
 8006e84:	2200      	movs	r2, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f001 fd0f 	bl	80088ac <USBD_LL_PrepareReceive>
 8006e8e:	e017      	b.n	8006ec0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00a      	beq.n	8006eb2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d105      	bne.n	8006eb2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eb2:	2180      	movs	r1, #128	@ 0x80
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f001 fbf3 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 ff6b 	bl	8007d96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d123      	bne.n	8006f12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff fe99 	bl	8006c02 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006ed8:	e01b      	b.n	8006f12 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d10e      	bne.n	8006f0e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	7afa      	ldrb	r2, [r7, #11]
 8006efa:	4611      	mov	r1, r2
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	e002      	b.n	8006f14 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e000      	b.n	8006f14 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6852      	ldr	r2, [r2, #4]
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f60:	2340      	movs	r3, #64	@ 0x40
 8006f62:	2200      	movs	r2, #0
 8006f64:	2100      	movs	r1, #0
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fb26 	bl	80085b8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2240      	movs	r2, #64	@ 0x40
 8006f78:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f7c:	2340      	movs	r3, #64	@ 0x40
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2180      	movs	r1, #128	@ 0x80
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 fb18 	bl	80085b8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2240      	movs	r2, #64	@ 0x40
 8006f92:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	78fa      	ldrb	r2, [r7, #3]
 8006fae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d105      	bne.n	8007006 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007022:	2b03      	cmp	r3, #3
 8007024:	d10b      	bne.n	800703e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	6852      	ldr	r2, [r2, #4]
 80070b8:	b2d2      	uxtb	r2, r2
 80070ba:	4611      	mov	r1, r2
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	4798      	blx	r3
  }

  return USBD_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	3301      	adds	r3, #1
 80070e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80070ec:	021b      	lsls	r3, r3, #8
 80070ee:	b21a      	sxth	r2, r3
 80070f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070fa:	89fb      	ldrh	r3, [r7, #14]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800711e:	2b40      	cmp	r3, #64	@ 0x40
 8007120:	d005      	beq.n	800712e <USBD_StdDevReq+0x26>
 8007122:	2b40      	cmp	r3, #64	@ 0x40
 8007124:	d853      	bhi.n	80071ce <USBD_StdDevReq+0xc6>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <USBD_StdDevReq+0x3a>
 800712a:	2b20      	cmp	r3, #32
 800712c:	d14f      	bne.n	80071ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
    break;
 8007140:	e04a      	b.n	80071d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b09      	cmp	r3, #9
 8007148:	d83b      	bhi.n	80071c2 <USBD_StdDevReq+0xba>
 800714a:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <USBD_StdDevReq+0x48>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	080071a5 	.word	0x080071a5
 8007154:	080071b9 	.word	0x080071b9
 8007158:	080071c3 	.word	0x080071c3
 800715c:	080071af 	.word	0x080071af
 8007160:	080071c3 	.word	0x080071c3
 8007164:	08007183 	.word	0x08007183
 8007168:	08007179 	.word	0x08007179
 800716c:	080071c3 	.word	0x080071c3
 8007170:	0800719b 	.word	0x0800719b
 8007174:	0800718d 	.word	0x0800718d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9da 	bl	8007534 <USBD_GetDescriptor>
      break;
 8007180:	e024      	b.n	80071cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb69 	bl	800785c <USBD_SetAddress>
      break;
 800718a:	e01f      	b.n	80071cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fba8 	bl	80078e4 <USBD_SetConfig>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]
      break;
 8007198:	e018      	b.n	80071cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fc45 	bl	8007a2c <USBD_GetConfig>
      break;
 80071a2:	e013      	b.n	80071cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fc75 	bl	8007a96 <USBD_GetStatus>
      break;
 80071ac:	e00e      	b.n	80071cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fca3 	bl	8007afc <USBD_SetFeature>
      break;
 80071b6:	e009      	b.n	80071cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fcb2 	bl	8007b24 <USBD_ClrFeature>
      break;
 80071c0:	e004      	b.n	80071cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fd08 	bl	8007bda <USBD_CtlError>
      break;
 80071ca:	bf00      	nop
    }
    break;
 80071cc:	e004      	b.n	80071d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fd02 	bl	8007bda <USBD_CtlError>
    break;
 80071d6:	bf00      	nop
  }

  return ret;
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop

080071e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071fa:	2b40      	cmp	r3, #64	@ 0x40
 80071fc:	d005      	beq.n	800720a <USBD_StdItfReq+0x26>
 80071fe:	2b40      	cmp	r3, #64	@ 0x40
 8007200:	d82e      	bhi.n	8007260 <USBD_StdItfReq+0x7c>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <USBD_StdItfReq+0x26>
 8007206:	2b20      	cmp	r3, #32
 8007208:	d12a      	bne.n	8007260 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007210:	3b01      	subs	r3, #1
 8007212:	2b02      	cmp	r3, #2
 8007214:	d81d      	bhi.n	8007252 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	889b      	ldrh	r3, [r3, #4]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	d813      	bhi.n	8007248 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	4798      	blx	r3
 800722e:	4603      	mov	r3, r0
 8007230:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	88db      	ldrh	r3, [r3, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d110      	bne.n	800725c <USBD_StdItfReq+0x78>
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10d      	bne.n	800725c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fd95 	bl	8007d70 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007246:	e009      	b.n	800725c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fcc5 	bl	8007bda <USBD_CtlError>
      break;
 8007250:	e004      	b.n	800725c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fcc0 	bl	8007bda <USBD_CtlError>
      break;
 800725a:	e000      	b.n	800725e <USBD_StdItfReq+0x7a>
      break;
 800725c:	bf00      	nop
    }
    break;
 800725e:	e004      	b.n	800726a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fcb9 	bl	8007bda <USBD_CtlError>
    break;
 8007268:	bf00      	nop
  }

  return ret;
 800726a:	7bfb      	ldrb	r3, [r7, #15]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	889b      	ldrh	r3, [r3, #4]
 8007286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007290:	2b40      	cmp	r3, #64	@ 0x40
 8007292:	d007      	beq.n	80072a4 <USBD_StdEPReq+0x30>
 8007294:	2b40      	cmp	r3, #64	@ 0x40
 8007296:	f200 8142 	bhi.w	800751e <USBD_StdEPReq+0x2aa>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00c      	beq.n	80072b8 <USBD_StdEPReq+0x44>
 800729e:	2b20      	cmp	r3, #32
 80072a0:	f040 813d 	bne.w	800751e <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
    break;
 80072b6:	e137      	b.n	8007528 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d007      	beq.n	80072d0 <USBD_StdEPReq+0x5c>
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	f300 8126 	bgt.w	8007512 <USBD_StdEPReq+0x29e>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d07d      	beq.n	80073c6 <USBD_StdEPReq+0x152>
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d03b      	beq.n	8007346 <USBD_StdEPReq+0xd2>
 80072ce:	e120      	b.n	8007512 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d002      	beq.n	80072e0 <USBD_StdEPReq+0x6c>
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d016      	beq.n	800730c <USBD_StdEPReq+0x98>
 80072de:	e02c      	b.n	800733a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00d      	beq.n	8007302 <USBD_StdEPReq+0x8e>
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b80      	cmp	r3, #128	@ 0x80
 80072ea:	d00a      	beq.n	8007302 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80072ec:	7bbb      	ldrb	r3, [r7, #14]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 f9d5 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072f6:	2180      	movs	r1, #128	@ 0x80
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 f9d1 	bl	80086a0 <USBD_LL_StallEP>
 80072fe:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007300:	e020      	b.n	8007344 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fc68 	bl	8007bda <USBD_CtlError>
        break;
 800730a:	e01b      	b.n	8007344 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	885b      	ldrh	r3, [r3, #2]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10e      	bne.n	8007332 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00b      	beq.n	8007332 <USBD_StdEPReq+0xbe>
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	2b80      	cmp	r3, #128	@ 0x80
 800731e:	d008      	beq.n	8007332 <USBD_StdEPReq+0xbe>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	88db      	ldrh	r3, [r3, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 f9b7 	bl	80086a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fd1c 	bl	8007d70 <USBD_CtlSendStatus>

        break;
 8007338:	e004      	b.n	8007344 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fc4c 	bl	8007bda <USBD_CtlError>
        break;
 8007342:	bf00      	nop
      }
      break;
 8007344:	e0ea      	b.n	800751c <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800734c:	2b02      	cmp	r3, #2
 800734e:	d002      	beq.n	8007356 <USBD_StdEPReq+0xe2>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d016      	beq.n	8007382 <USBD_StdEPReq+0x10e>
 8007354:	e030      	b.n	80073b8 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00d      	beq.n	8007378 <USBD_StdEPReq+0x104>
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b80      	cmp	r3, #128	@ 0x80
 8007360:	d00a      	beq.n	8007378 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f99a 	bl	80086a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800736c:	2180      	movs	r1, #128	@ 0x80
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f996 	bl	80086a0 <USBD_LL_StallEP>
 8007374:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007376:	e025      	b.n	80073c4 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fc2d 	bl	8007bda <USBD_CtlError>
        break;
 8007380:	e020      	b.n	80073c4 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d11b      	bne.n	80073c2 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007390:	2b00      	cmp	r3, #0
 8007392:	d004      	beq.n	800739e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 f9b7 	bl	800870c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fce6 	bl	8007d70 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	4798      	blx	r3
 80073b2:	4603      	mov	r3, r0
 80073b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073b6:	e004      	b.n	80073c2 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fc0d 	bl	8007bda <USBD_CtlError>
        break;
 80073c0:	e000      	b.n	80073c4 <USBD_StdEPReq+0x150>
        break;
 80073c2:	bf00      	nop
      }
      break;
 80073c4:	e0aa      	b.n	800751c <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d002      	beq.n	80073d6 <USBD_StdEPReq+0x162>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d032      	beq.n	800743a <USBD_StdEPReq+0x1c6>
 80073d4:	e097      	b.n	8007506 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <USBD_StdEPReq+0x178>
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b80      	cmp	r3, #128	@ 0x80
 80073e0:	d004      	beq.n	80073ec <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fbf8 	bl	8007bda <USBD_CtlError>
          break;
 80073ea:	e091      	b.n	8007510 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da0b      	bge.n	800740c <USBD_StdEPReq+0x198>
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	3310      	adds	r3, #16
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	4413      	add	r3, r2
 8007408:	3304      	adds	r3, #4
 800740a:	e00b      	b.n	8007424 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800740c:	7bbb      	ldrb	r3, [r7, #14]
 800740e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	4413      	add	r3, r2
 8007422:	3304      	adds	r3, #4
 8007424:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2202      	movs	r2, #2
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fc42 	bl	8007cbc <USBD_CtlSendData>
        break;
 8007438:	e06a      	b.n	8007510 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800743a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	da11      	bge.n	8007466 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	f003 020f 	and.w	r2, r3, #15
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	3324      	adds	r3, #36	@ 0x24
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d117      	bne.n	800748c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fbbb 	bl	8007bda <USBD_CtlError>
            break;
 8007464:	e054      	b.n	8007510 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	f003 020f 	and.w	r2, r3, #15
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d104      	bne.n	800748c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fba8 	bl	8007bda <USBD_CtlError>
            break;
 800748a:	e041      	b.n	8007510 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800748c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007490:	2b00      	cmp	r3, #0
 8007492:	da0b      	bge.n	80074ac <USBD_StdEPReq+0x238>
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	3310      	adds	r3, #16
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	4413      	add	r3, r2
 80074a8:	3304      	adds	r3, #4
 80074aa:	e00b      	b.n	80074c4 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4413      	add	r3, r2
 80074c2:	3304      	adds	r3, #4
 80074c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <USBD_StdEPReq+0x25e>
 80074cc:	7bbb      	ldrb	r3, [r7, #14]
 80074ce:	2b80      	cmp	r3, #128	@ 0x80
 80074d0:	d103      	bne.n	80074da <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e00e      	b.n	80074f8 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f001 f94a 	bl	8008778 <USBD_LL_IsStallEP>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2201      	movs	r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e002      	b.n	80074f8 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2202      	movs	r2, #2
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fbdc 	bl	8007cbc <USBD_CtlSendData>
          break;
 8007504:	e004      	b.n	8007510 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb66 	bl	8007bda <USBD_CtlError>
        break;
 800750e:	bf00      	nop
      }
      break;
 8007510:	e004      	b.n	800751c <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fb60 	bl	8007bda <USBD_CtlError>
      break;
 800751a:	bf00      	nop
    }
    break;
 800751c:	e004      	b.n	8007528 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb5a 	bl	8007bda <USBD_CtlError>
    break;
 8007526:	bf00      	nop
  }

  return ret;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	885b      	ldrh	r3, [r3, #2]
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	2b0e      	cmp	r3, #14
 8007556:	f200 8152 	bhi.w	80077fe <USBD_GetDescriptor+0x2ca>
 800755a:	a201      	add	r2, pc, #4	@ (adr r2, 8007560 <USBD_GetDescriptor+0x2c>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	080075d1 	.word	0x080075d1
 8007564:	080075e9 	.word	0x080075e9
 8007568:	08007629 	.word	0x08007629
 800756c:	080077ff 	.word	0x080077ff
 8007570:	080077ff 	.word	0x080077ff
 8007574:	0800779f 	.word	0x0800779f
 8007578:	080077cb 	.word	0x080077cb
 800757c:	080077ff 	.word	0x080077ff
 8007580:	080077ff 	.word	0x080077ff
 8007584:	080077ff 	.word	0x080077ff
 8007588:	080077ff 	.word	0x080077ff
 800758c:	080077ff 	.word	0x080077ff
 8007590:	080077ff 	.word	0x080077ff
 8007594:	080077ff 	.word	0x080077ff
 8007598:	0800759d 	.word	0x0800759d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80075be:	e126      	b.n	800780e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb09 	bl	8007bda <USBD_CtlError>
      err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
    break;
 80075ce:	e11e      	b.n	800780e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7c12      	ldrb	r2, [r2, #16]
 80075dc:	f107 0108 	add.w	r1, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
    break;
 80075e6:	e112      	b.n	800780e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7c1b      	ldrb	r3, [r3, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10d      	bne.n	800760c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	f107 0208 	add.w	r2, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3301      	adds	r3, #1
 8007606:	2202      	movs	r2, #2
 8007608:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800760a:	e100      	b.n	800780e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	f107 0208 	add.w	r2, r7, #8
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	2202      	movs	r2, #2
 8007624:	701a      	strb	r2, [r3, #0]
    break;
 8007626:	e0f2      	b.n	800780e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	885b      	ldrh	r3, [r3, #2]
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b05      	cmp	r3, #5
 8007630:	f200 80ac 	bhi.w	800778c <USBD_GetDescriptor+0x258>
 8007634:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <USBD_GetDescriptor+0x108>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	08007655 	.word	0x08007655
 8007640:	08007689 	.word	0x08007689
 8007644:	080076bd 	.word	0x080076bd
 8007648:	080076f1 	.word	0x080076f1
 800764c:	08007725 	.word	0x08007725
 8007650:	08007759 	.word	0x08007759
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	7c12      	ldrb	r2, [r2, #16]
 800766c:	f107 0108 	add.w	r1, r7, #8
 8007670:	4610      	mov	r0, r2
 8007672:	4798      	blx	r3
 8007674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007676:	e091      	b.n	800779c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 faad 	bl	8007bda <USBD_CtlError>
        err++;
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	3301      	adds	r3, #1
 8007684:	72fb      	strb	r3, [r7, #11]
      break;
 8007686:	e089      	b.n	800779c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7c12      	ldrb	r2, [r2, #16]
 80076a0:	f107 0108 	add.w	r1, r7, #8
 80076a4:	4610      	mov	r0, r2
 80076a6:	4798      	blx	r3
 80076a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076aa:	e077      	b.n	800779c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fa93 	bl	8007bda <USBD_CtlError>
        err++;
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	3301      	adds	r3, #1
 80076b8:	72fb      	strb	r3, [r7, #11]
      break;
 80076ba:	e06f      	b.n	800779c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076de:	e05d      	b.n	800779c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa79 	bl	8007bda <USBD_CtlError>
        err++;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	3301      	adds	r3, #1
 80076ec:	72fb      	strb	r3, [r7, #11]
      break;
 80076ee:	e055      	b.n	800779c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7c12      	ldrb	r2, [r2, #16]
 8007708:	f107 0108 	add.w	r1, r7, #8
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007712:	e043      	b.n	800779c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa5f 	bl	8007bda <USBD_CtlError>
        err++;
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	3301      	adds	r3, #1
 8007720:	72fb      	strb	r3, [r7, #11]
      break;
 8007722:	e03b      	b.n	800779c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	7c12      	ldrb	r2, [r2, #16]
 800773c:	f107 0108 	add.w	r1, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007746:	e029      	b.n	800779c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa45 	bl	8007bda <USBD_CtlError>
        err++;
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	3301      	adds	r3, #1
 8007754:	72fb      	strb	r3, [r7, #11]
      break;
 8007756:	e021      	b.n	800779c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7c12      	ldrb	r2, [r2, #16]
 8007770:	f107 0108 	add.w	r1, r7, #8
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800777a:	e00f      	b.n	800779c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa2b 	bl	8007bda <USBD_CtlError>
        err++;
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	3301      	adds	r3, #1
 8007788:	72fb      	strb	r3, [r7, #11]
      break;
 800778a:	e007      	b.n	800779c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa23 	bl	8007bda <USBD_CtlError>
      err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800779a:	bf00      	nop
    }
    break;
 800779c:	e037      	b.n	800780e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7c1b      	ldrb	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ae:	f107 0208 	add.w	r2, r7, #8
 80077b2:	4610      	mov	r0, r2
 80077b4:	4798      	blx	r3
 80077b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80077b8:	e029      	b.n	800780e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fa0c 	bl	8007bda <USBD_CtlError>
      err++;
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	3301      	adds	r3, #1
 80077c6:	72fb      	strb	r3, [r7, #11]
    break;
 80077c8:	e021      	b.n	800780e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7c1b      	ldrb	r3, [r3, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10d      	bne.n	80077ee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077da:	f107 0208 	add.w	r2, r7, #8
 80077de:	4610      	mov	r0, r2
 80077e0:	4798      	blx	r3
 80077e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	2207      	movs	r2, #7
 80077ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80077ec:	e00f      	b.n	800780e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f9f2 	bl	8007bda <USBD_CtlError>
      err++;
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	3301      	adds	r3, #1
 80077fa:	72fb      	strb	r3, [r7, #11]
    break;
 80077fc:	e007      	b.n	800780e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f9ea 	bl	8007bda <USBD_CtlError>
    err++;
 8007806:	7afb      	ldrb	r3, [r7, #11]
 8007808:	3301      	adds	r3, #1
 800780a:	72fb      	strb	r3, [r7, #11]
    break;
 800780c:	bf00      	nop
  }

  if (err != 0U)
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d11e      	bne.n	8007852 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d016      	beq.n	800784a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800781c:	893b      	ldrh	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00e      	beq.n	8007840 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	88da      	ldrh	r2, [r3, #6]
 8007826:	893b      	ldrh	r3, [r7, #8]
 8007828:	4293      	cmp	r3, r2
 800782a:	bf28      	it	cs
 800782c:	4613      	movcs	r3, r2
 800782e:	b29b      	uxth	r3, r3
 8007830:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007832:	893b      	ldrh	r3, [r7, #8]
 8007834:	461a      	mov	r2, r3
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa3f 	bl	8007cbc <USBD_CtlSendData>
 800783e:	e009      	b.n	8007854 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f9c9 	bl	8007bda <USBD_CtlError>
 8007848:	e004      	b.n	8007854 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa90 	bl	8007d70 <USBD_CtlSendStatus>
 8007850:	e000      	b.n	8007854 <USBD_GetDescriptor+0x320>
    return;
 8007852:	bf00      	nop
    }
  }
}
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop

0800785c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d130      	bne.n	80078d0 <USBD_SetAddress+0x74>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d12c      	bne.n	80078d0 <USBD_SetAddress+0x74>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	885b      	ldrh	r3, [r3, #2]
 800787a:	2b7f      	cmp	r3, #127	@ 0x7f
 800787c:	d828      	bhi.n	80078d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007888:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	2b03      	cmp	r3, #3
 8007892:	d104      	bne.n	800789e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f99f 	bl	8007bda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789c:	e01d      	b.n	80078da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7bfa      	ldrb	r2, [r7, #15]
 80078a2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 ff90 	bl	80087d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa5d 	bl	8007d70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c4:	e009      	b.n	80078da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	e004      	b.n	80078da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f981 	bl	8007bda <USBD_CtlError>
  }
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	4b4b      	ldr	r3, [pc, #300]	@ (8007a28 <USBD_SetConfig+0x144>)
 80078fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078fc:	4b4a      	ldr	r3, [pc, #296]	@ (8007a28 <USBD_SetConfig+0x144>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d905      	bls.n	8007910 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f967 	bl	8007bda <USBD_CtlError>
    return USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	e087      	b.n	8007a20 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007916:	2b02      	cmp	r3, #2
 8007918:	d002      	beq.n	8007920 <USBD_SetConfig+0x3c>
 800791a:	2b03      	cmp	r3, #3
 800791c:	d025      	beq.n	800796a <USBD_SetConfig+0x86>
 800791e:	e071      	b.n	8007a04 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007920:	4b41      	ldr	r3, [pc, #260]	@ (8007a28 <USBD_SetConfig+0x144>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01c      	beq.n	8007962 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007928:	4b3f      	ldr	r3, [pc, #252]	@ (8007a28 <USBD_SetConfig+0x144>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007932:	4b3d      	ldr	r3, [pc, #244]	@ (8007a28 <USBD_SetConfig+0x144>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff f96d 	bl	8006c18 <USBD_SetClassConfig>
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d004      	beq.n	8007952 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f945 	bl	8007bda <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007950:	e065      	b.n	8007a1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fa0c 	bl	8007d70 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2203      	movs	r2, #3
 800795c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 8007960:	e05d      	b.n	8007a1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fa04 	bl	8007d70 <USBD_CtlSendStatus>
    break;
 8007968:	e059      	b.n	8007a1e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800796a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a28 <USBD_SetConfig+0x144>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d112      	bne.n	8007998 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800797a:	4b2b      	ldr	r3, [pc, #172]	@ (8007a28 <USBD_SetConfig+0x144>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007984:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <USBD_SetConfig+0x144>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff f960 	bl	8006c50 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9ed 	bl	8007d70 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007996:	e042      	b.n	8007a1e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007998:	4b23      	ldr	r3, [pc, #140]	@ (8007a28 <USBD_SetConfig+0x144>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d02a      	beq.n	80079fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff f94e 	bl	8006c50 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80079b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a28 <USBD_SetConfig+0x144>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80079be:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <USBD_SetConfig+0x144>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff f927 	bl	8006c18 <USBD_SetClassConfig>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80079ce:	7bfb      	ldrb	r3, [r7, #15]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00f      	beq.n	80079f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8ff 	bl	8007bda <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff f933 	bl	8006c50 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 80079f2:	e014      	b.n	8007a1e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f9bb 	bl	8007d70 <USBD_CtlSendStatus>
    break;
 80079fa:	e010      	b.n	8007a1e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9b7 	bl	8007d70 <USBD_CtlSendStatus>
    break;
 8007a02:	e00c      	b.n	8007a1e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f8e7 	bl	8007bda <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a0c:	4b06      	ldr	r3, [pc, #24]	@ (8007a28 <USBD_SetConfig+0x144>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7ff f91c 	bl	8006c50 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a1c:	bf00      	nop
  }

  return ret;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20000380 	.word	0x20000380

08007a2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	88db      	ldrh	r3, [r3, #6]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d004      	beq.n	8007a48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f8ca 	bl	8007bda <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007a46:	e022      	b.n	8007a8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	dc02      	bgt.n	8007a58 <USBD_GetConfig+0x2c>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dc03      	bgt.n	8007a5e <USBD_GetConfig+0x32>
 8007a56:	e015      	b.n	8007a84 <USBD_GetConfig+0x58>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d00b      	beq.n	8007a74 <USBD_GetConfig+0x48>
 8007a5c:	e012      	b.n	8007a84 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3308      	adds	r3, #8
 8007a68:	2201      	movs	r2, #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f925 	bl	8007cbc <USBD_CtlSendData>
      break;
 8007a72:	e00c      	b.n	8007a8e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f91d 	bl	8007cbc <USBD_CtlSendData>
      break;
 8007a82:	e004      	b.n	8007a8e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f8a7 	bl	8007bda <USBD_CtlError>
      break;
 8007a8c:	bf00      	nop
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d81e      	bhi.n	8007aea <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d004      	beq.n	8007abe <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f88f 	bl	8007bda <USBD_CtlError>
      break;
 8007abc:	e01a      	b.n	8007af4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f043 0202 	orr.w	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	330c      	adds	r3, #12
 8007ade:	2202      	movs	r2, #2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f8ea 	bl	8007cbc <USBD_CtlSendData>
    break;
 8007ae8:	e004      	b.n	8007af4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f874 	bl	8007bda <USBD_CtlError>
    break;
 8007af2:	bf00      	nop
  }
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	885b      	ldrh	r3, [r3, #2]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d106      	bne.n	8007b1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f92a 	bl	8007d70 <USBD_CtlSendStatus>
  }
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b34:	3b01      	subs	r3, #1
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d80b      	bhi.n	8007b52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d10c      	bne.n	8007b5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f910 	bl	8007d70 <USBD_CtlSendStatus>
      }
      break;
 8007b50:	e004      	b.n	8007b5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f840 	bl	8007bda <USBD_CtlError>
      break;
 8007b5a:	e000      	b.n	8007b5e <USBD_ClrFeature+0x3a>
      break;
 8007b5c:	bf00      	nop
  }
}
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	781a      	ldrb	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff fa9a 	bl	80070ca <SWAPBYTE>
 8007b96:	4603      	mov	r3, r0
 8007b98:	461a      	mov	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f7ff fa8d 	bl	80070ca <SWAPBYTE>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f7ff fa80 	bl	80070ca <SWAPBYTE>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	461a      	mov	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	80da      	strh	r2, [r3, #6]
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007be4:	2180      	movs	r1, #128	@ 0x80
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fd5a 	bl	80086a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fd56 	bl	80086a0 <USBD_LL_StallEP>
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d036      	beq.n	8007c80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c16:	6938      	ldr	r0, [r7, #16]
 8007c18:	f000 f836 	bl	8007c88 <USBD_GetLen>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	3301      	adds	r3, #1
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	4413      	add	r3, r2
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7812      	ldrb	r2, [r2, #0]
 8007c34:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	2203      	movs	r2, #3
 8007c44:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c4c:	e013      	b.n	8007c76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	4413      	add	r3, r2
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	613b      	str	r3, [r7, #16]
    idx++;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	3301      	adds	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	3301      	adds	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e7      	bne.n	8007c4e <USBD_GetString+0x52>
 8007c7e:	e000      	b.n	8007c82 <USBD_GetString+0x86>
    return;
 8007c80:	bf00      	nop
  }
}
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c98:	e005      	b.n	8007ca6 <USBD_GetLen+0x1e>
  {
    len++;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f5      	bne.n	8007c9a <USBD_GetLen+0x12>
  }

  return len;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 fdaa 	bl	800883c <USBD_LL_Transmit>

  return USBD_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	2100      	movs	r1, #0
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 fd99 	bl	800883c <USBD_LL_Transmit>

  return USBD_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2203      	movs	r2, #3
 8007d24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fdb4 	bl	80088ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	2100      	movs	r1, #0
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 fda3 	bl	80088ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d80:	2300      	movs	r3, #0
 8007d82:	2200      	movs	r2, #0
 8007d84:	2100      	movs	r1, #0
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fd58 	bl	800883c <USBD_LL_Transmit>

  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2205      	movs	r2, #5
 8007da2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da6:	2300      	movs	r3, #0
 8007da8:	2200      	movs	r2, #0
 8007daa:	2100      	movs	r1, #0
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fd7d 	bl	80088ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4912      	ldr	r1, [pc, #72]	@ (8007e0c <MX_USB_DEVICE_Init+0x50>)
 8007dc4:	4812      	ldr	r0, [pc, #72]	@ (8007e10 <MX_USB_DEVICE_Init+0x54>)
 8007dc6:	f7fe feb9 	bl	8006b3c <USBD_Init>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dd0:	f7f8 fe02 	bl	80009d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007dd4:	490f      	ldr	r1, [pc, #60]	@ (8007e14 <MX_USB_DEVICE_Init+0x58>)
 8007dd6:	480e      	ldr	r0, [pc, #56]	@ (8007e10 <MX_USB_DEVICE_Init+0x54>)
 8007dd8:	f7fe fee0 	bl	8006b9c <USBD_RegisterClass>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007de2:	f7f8 fdf9 	bl	80009d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007de6:	490c      	ldr	r1, [pc, #48]	@ (8007e18 <MX_USB_DEVICE_Init+0x5c>)
 8007de8:	4809      	ldr	r0, [pc, #36]	@ (8007e10 <MX_USB_DEVICE_Init+0x54>)
 8007dea:	f7fe fe0b 	bl	8006a04 <USBD_CDC_RegisterInterface>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007df4:	f7f8 fdf0 	bl	80009d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007df8:	4805      	ldr	r0, [pc, #20]	@ (8007e10 <MX_USB_DEVICE_Init+0x54>)
 8007dfa:	f7fe fef6 	bl	8006bea <USBD_Start>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e04:	f7f8 fde8 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e08:	bf00      	nop
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000130 	.word	0x20000130
 8007e10:	20000384 	.word	0x20000384
 8007e14:	20000018 	.word	0x20000018
 8007e18:	2000011c 	.word	0x2000011c

08007e1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e20:	2200      	movs	r2, #0
 8007e22:	4905      	ldr	r1, [pc, #20]	@ (8007e38 <CDC_Init_FS+0x1c>)
 8007e24:	4805      	ldr	r0, [pc, #20]	@ (8007e3c <CDC_Init_FS+0x20>)
 8007e26:	f7fe fe02 	bl	8006a2e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e2a:	4905      	ldr	r1, [pc, #20]	@ (8007e40 <CDC_Init_FS+0x24>)
 8007e2c:	4803      	ldr	r0, [pc, #12]	@ (8007e3c <CDC_Init_FS+0x20>)
 8007e2e:	f7fe fe17 	bl	8006a60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000e54 	.word	0x20000e54
 8007e3c:	20000384 	.word	0x20000384
 8007e40:	20000654 	.word	0x20000654

08007e44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
 8007e60:	4613      	mov	r3, r2
 8007e62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	2b23      	cmp	r3, #35	@ 0x23
 8007e68:	d84a      	bhi.n	8007f00 <CDC_Control_FS+0xac>
 8007e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <CDC_Control_FS+0x1c>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007f01 	.word	0x08007f01
 8007e74:	08007f01 	.word	0x08007f01
 8007e78:	08007f01 	.word	0x08007f01
 8007e7c:	08007f01 	.word	0x08007f01
 8007e80:	08007f01 	.word	0x08007f01
 8007e84:	08007f01 	.word	0x08007f01
 8007e88:	08007f01 	.word	0x08007f01
 8007e8c:	08007f01 	.word	0x08007f01
 8007e90:	08007f01 	.word	0x08007f01
 8007e94:	08007f01 	.word	0x08007f01
 8007e98:	08007f01 	.word	0x08007f01
 8007e9c:	08007f01 	.word	0x08007f01
 8007ea0:	08007f01 	.word	0x08007f01
 8007ea4:	08007f01 	.word	0x08007f01
 8007ea8:	08007f01 	.word	0x08007f01
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007f01 	.word	0x08007f01
 8007eb4:	08007f01 	.word	0x08007f01
 8007eb8:	08007f01 	.word	0x08007f01
 8007ebc:	08007f01 	.word	0x08007f01
 8007ec0:	08007f01 	.word	0x08007f01
 8007ec4:	08007f01 	.word	0x08007f01
 8007ec8:	08007f01 	.word	0x08007f01
 8007ecc:	08007f01 	.word	0x08007f01
 8007ed0:	08007f01 	.word	0x08007f01
 8007ed4:	08007f01 	.word	0x08007f01
 8007ed8:	08007f01 	.word	0x08007f01
 8007edc:	08007f01 	.word	0x08007f01
 8007ee0:	08007f01 	.word	0x08007f01
 8007ee4:	08007f01 	.word	0x08007f01
 8007ee8:	08007f01 	.word	0x08007f01
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007f01 	.word	0x08007f01
 8007ef4:	08007f01 	.word	0x08007f01
 8007ef8:	08007f01 	.word	0x08007f01
 8007efc:	08007f01 	.word	0x08007f01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f00:	bf00      	nop
  }

  return (USBD_OK);
 8007f02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4805      	ldr	r0, [pc, #20]	@ (8007f34 <CDC_Receive_FS+0x24>)
 8007f1e:	f7fe fd9f 	bl	8006a60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f22:	4804      	ldr	r0, [pc, #16]	@ (8007f34 <CDC_Receive_FS+0x24>)
 8007f24:	f7fe fde0 	bl	8006ae8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000384 	.word	0x20000384

08007f38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f48:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <CDC_Transmit_FS+0x48>)
 8007f4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e00b      	b.n	8007f76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f5e:	887b      	ldrh	r3, [r7, #2]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4806      	ldr	r0, [pc, #24]	@ (8007f80 <CDC_Transmit_FS+0x48>)
 8007f66:	f7fe fd62 	bl	8006a2e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f6a:	4805      	ldr	r0, [pc, #20]	@ (8007f80 <CDC_Transmit_FS+0x48>)
 8007f6c:	f7fe fd8c 	bl	8006a88 <USBD_CDC_TransmitPacket>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000384 	.word	0x20000384

08007f84 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2212      	movs	r2, #18
 8007fb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fba:	4b03      	ldr	r3, [pc, #12]	@ (8007fc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	20000150 	.word	0x20000150

08007fcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fde:	4b03      	ldr	r3, [pc, #12]	@ (8007fec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000170 	.word	0x20000170

08007ff0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d105      	bne.n	800800e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4907      	ldr	r1, [pc, #28]	@ (8008024 <USBD_FS_ProductStrDescriptor+0x34>)
 8008006:	4808      	ldr	r0, [pc, #32]	@ (8008028 <USBD_FS_ProductStrDescriptor+0x38>)
 8008008:	f7ff fdf8 	bl	8007bfc <USBD_GetString>
 800800c:	e004      	b.n	8008018 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4904      	ldr	r1, [pc, #16]	@ (8008024 <USBD_FS_ProductStrDescriptor+0x34>)
 8008012:	4805      	ldr	r0, [pc, #20]	@ (8008028 <USBD_FS_ProductStrDescriptor+0x38>)
 8008014:	f7ff fdf2 	bl	8007bfc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008018:	4b02      	ldr	r3, [pc, #8]	@ (8008024 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20001654 	.word	0x20001654
 8008028:	08008ca4 	.word	0x08008ca4

0800802c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	4904      	ldr	r1, [pc, #16]	@ (800804c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800803c:	4804      	ldr	r0, [pc, #16]	@ (8008050 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800803e:	f7ff fddd 	bl	8007bfc <USBD_GetString>
  return USBD_StrDesc;
 8008042:	4b02      	ldr	r3, [pc, #8]	@ (800804c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20001654 	.word	0x20001654
 8008050:	08008cbc 	.word	0x08008cbc

08008054 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	221a      	movs	r2, #26
 8008064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008066:	f000 f855 	bl	8008114 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800806a:	4b02      	ldr	r3, [pc, #8]	@ (8008074 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000174 	.word	0x20000174

08008078 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	6039      	str	r1, [r7, #0]
 8008082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4907      	ldr	r1, [pc, #28]	@ (80080ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800808e:	4808      	ldr	r0, [pc, #32]	@ (80080b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008090:	f7ff fdb4 	bl	8007bfc <USBD_GetString>
 8008094:	e004      	b.n	80080a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	4904      	ldr	r1, [pc, #16]	@ (80080ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800809a:	4805      	ldr	r0, [pc, #20]	@ (80080b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800809c:	f7ff fdae 	bl	8007bfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a0:	4b02      	ldr	r3, [pc, #8]	@ (80080ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20001654 	.word	0x20001654
 80080b0:	08008cd0 	.word	0x08008cd0

080080b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4907      	ldr	r1, [pc, #28]	@ (80080e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ca:	4808      	ldr	r0, [pc, #32]	@ (80080ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080cc:	f7ff fd96 	bl	8007bfc <USBD_GetString>
 80080d0:	e004      	b.n	80080dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4904      	ldr	r1, [pc, #16]	@ (80080e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080d6:	4805      	ldr	r0, [pc, #20]	@ (80080ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080d8:	f7ff fd90 	bl	8007bfc <USBD_GetString>
  }
  return USBD_StrDesc;
 80080dc:	4b02      	ldr	r3, [pc, #8]	@ (80080e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20001654 	.word	0x20001654
 80080ec:	08008cdc 	.word	0x08008cdc

080080f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	6039      	str	r1, [r7, #0]
 80080fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	220c      	movs	r2, #12
 8008100:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008102:	4b03      	ldr	r3, [pc, #12]	@ (8008110 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	20000164 	.word	0x20000164

08008114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800811a:	4b0f      	ldr	r3, [pc, #60]	@ (8008158 <Get_SerialNum+0x44>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008120:	4b0e      	ldr	r3, [pc, #56]	@ (800815c <Get_SerialNum+0x48>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008126:	4b0e      	ldr	r3, [pc, #56]	@ (8008160 <Get_SerialNum+0x4c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4413      	add	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800813a:	2208      	movs	r2, #8
 800813c:	4909      	ldr	r1, [pc, #36]	@ (8008164 <Get_SerialNum+0x50>)
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 f814 	bl	800816c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008144:	2204      	movs	r2, #4
 8008146:	4908      	ldr	r1, [pc, #32]	@ (8008168 <Get_SerialNum+0x54>)
 8008148:	68b8      	ldr	r0, [r7, #8]
 800814a:	f000 f80f 	bl	800816c <IntToUnicode>
  }
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	1fff7590 	.word	0x1fff7590
 800815c:	1fff7594 	.word	0x1fff7594
 8008160:	1fff7598 	.word	0x1fff7598
 8008164:	20000176 	.word	0x20000176
 8008168:	20000186 	.word	0x20000186

0800816c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]
 8008182:	e027      	b.n	80081d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	0f1b      	lsrs	r3, r3, #28
 8008188:	2b09      	cmp	r3, #9
 800818a:	d80b      	bhi.n	80081a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	0f1b      	lsrs	r3, r3, #28
 8008190:	b2da      	uxtb	r2, r3
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	4619      	mov	r1, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	440b      	add	r3, r1
 800819c:	3230      	adds	r2, #48	@ 0x30
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	e00a      	b.n	80081ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	0f1b      	lsrs	r3, r3, #28
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4619      	mov	r1, r3
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	440b      	add	r3, r1
 80081b4:	3237      	adds	r2, #55	@ 0x37
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	005b      	lsls	r3, r3, #1
 80081c4:	3301      	adds	r3, #1
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	4413      	add	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	3301      	adds	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
 80081d4:	7dfa      	ldrb	r2, [r7, #23]
 80081d6:	79fb      	ldrb	r3, [r7, #7]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d3d3      	bcc.n	8008184 <IntToUnicode+0x18>
  }
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	@ 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f4:	f107 0314 	add.w	r3, r7, #20
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	605a      	str	r2, [r3, #4]
 80081fe:	609a      	str	r2, [r3, #8]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800820c:	d14e      	bne.n	80082ac <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800820e:	4b29      	ldr	r3, [pc, #164]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008212:	4a28      	ldr	r2, [pc, #160]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800821a:	4b26      	ldr	r3, [pc, #152]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 800821c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008226:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800822a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822c:	2302      	movs	r3, #2
 800822e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008234:	2303      	movs	r3, #3
 8008236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008238:	230a      	movs	r3, #10
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	4619      	mov	r1, r3
 8008242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008246:	f7f9 f81b 	bl	8001280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800824a:	4b1a      	ldr	r3, [pc, #104]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 800824c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800824e:	4a19      	ldr	r2, [pc, #100]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008256:	4b17      	ldr	r3, [pc, #92]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008262:	4b14      	ldr	r3, [pc, #80]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d114      	bne.n	8008298 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800826e:	4b11      	ldr	r3, [pc, #68]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008272:	4a10      	ldr	r2, [pc, #64]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008278:	6593      	str	r3, [r2, #88]	@ 0x58
 800827a:	4b0e      	ldr	r3, [pc, #56]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 800827c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008286:	f7fa fc11 	bl	8002aac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800828a:	4b0a      	ldr	r3, [pc, #40]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800828e:	4a09      	ldr	r2, [pc, #36]	@ (80082b4 <HAL_PCD_MspInit+0xc8>)
 8008290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008294:	6593      	str	r3, [r2, #88]	@ 0x58
 8008296:	e001      	b.n	800829c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008298:	f7fa fc08 	bl	8002aac <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800829c:	2200      	movs	r2, #0
 800829e:	2100      	movs	r1, #0
 80082a0:	2043      	movs	r0, #67	@ 0x43
 80082a2:	f7f8 ff76 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80082a6:	2043      	movs	r0, #67	@ 0x43
 80082a8:	f7f8 ff8f 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80082ac:	bf00      	nop
 80082ae:	3728      	adds	r7, #40	@ 0x28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	40021000 	.word	0x40021000

080082b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe fcd6 	bl	8006c80 <USBD_LL_SetupStage>
}
 80082d4:	bf00      	nop
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	4613      	mov	r3, r2
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	440b      	add	r3, r1
 80082fc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	4619      	mov	r1, r3
 8008306:	f7fe fd10 	bl	8006d2a <USBD_LL_DataOutStage>
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	3348      	adds	r3, #72	@ 0x48
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	4619      	mov	r1, r3
 800833a:	f7fe fd59 	bl	8006df0 <USBD_LL_DataInStage>
}
 800833e:	bf00      	nop
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fe5d 	bl	8007014 <USBD_LL_SOF>
}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800836a:	2301      	movs	r3, #1
 800836c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d001      	beq.n	800837a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008376:	f7f8 fb2f 	bl	80009d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008380:	7bfa      	ldrb	r2, [r7, #15]
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fe0a 	bl	8006f9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fdc3 	bl	8006f1c <USBD_LL_Reset>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fdf9 	bl	8006fbe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083d4:	4b04      	ldr	r3, [pc, #16]	@ (80083e8 <HAL_PCD_SuspendCallback+0x48>)
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	4a03      	ldr	r2, [pc, #12]	@ (80083e8 <HAL_PCD_SuspendCallback+0x48>)
 80083da:	f043 0306 	orr.w	r3, r3, #6
 80083de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	e000ed00 	.word	0xe000ed00

080083ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	6812      	ldr	r2, [r2, #0]
 8008402:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008406:	f023 0301 	bic.w	r3, r3, #1
 800840a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a1b      	ldr	r3, [r3, #32]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d007      	beq.n	8008424 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008414:	4b08      	ldr	r3, [pc, #32]	@ (8008438 <HAL_PCD_ResumeCallback+0x4c>)
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	4a07      	ldr	r2, [pc, #28]	@ (8008438 <HAL_PCD_ResumeCallback+0x4c>)
 800841a:	f023 0306 	bic.w	r3, r3, #6
 800841e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008420:	f000 fade 	bl	80089e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fddc 	bl	8006fe8 <USBD_LL_Resume>
}
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	e000ed00 	.word	0xe000ed00

0800843c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f7fe fe05 	bl	8007062 <USBD_LL_IsoOUTIncomplete>
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe fde6 	bl	8007048 <USBD_LL_IsoINIncomplete>
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe fdf2 	bl	800707c <USBD_LL_DevConnected>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fdef 	bl	8007092 <USBD_LL_DevDisconnected>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d13c      	bne.n	8008546 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084cc:	4a20      	ldr	r2, [pc, #128]	@ (8008550 <USBD_LL_Init+0x94>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008550 <USBD_LL_Init+0x94>)
 80084d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008550 <USBD_LL_Init+0x94>)
 80084de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80084e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008550 <USBD_LL_Init+0x94>)
 80084e6:	2206      	movs	r2, #6
 80084e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084ea:	4b19      	ldr	r3, [pc, #100]	@ (8008550 <USBD_LL_Init+0x94>)
 80084ec:	2202      	movs	r2, #2
 80084ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084f0:	4b17      	ldr	r3, [pc, #92]	@ (8008550 <USBD_LL_Init+0x94>)
 80084f2:	2202      	movs	r2, #2
 80084f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084f6:	4b16      	ldr	r3, [pc, #88]	@ (8008550 <USBD_LL_Init+0x94>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084fc:	4b14      	ldr	r3, [pc, #80]	@ (8008550 <USBD_LL_Init+0x94>)
 80084fe:	2200      	movs	r2, #0
 8008500:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008502:	4b13      	ldr	r3, [pc, #76]	@ (8008550 <USBD_LL_Init+0x94>)
 8008504:	2200      	movs	r2, #0
 8008506:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008508:	4b11      	ldr	r3, [pc, #68]	@ (8008550 <USBD_LL_Init+0x94>)
 800850a:	2200      	movs	r2, #0
 800850c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800850e:	4b10      	ldr	r3, [pc, #64]	@ (8008550 <USBD_LL_Init+0x94>)
 8008510:	2200      	movs	r2, #0
 8008512:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008514:	4b0e      	ldr	r3, [pc, #56]	@ (8008550 <USBD_LL_Init+0x94>)
 8008516:	2200      	movs	r2, #0
 8008518:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800851a:	480d      	ldr	r0, [pc, #52]	@ (8008550 <USBD_LL_Init+0x94>)
 800851c:	f7f9 f9b2 	bl	8001884 <HAL_PCD_Init>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008526:	f7f8 fa57 	bl	80009d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800852a:	2180      	movs	r1, #128	@ 0x80
 800852c:	4808      	ldr	r0, [pc, #32]	@ (8008550 <USBD_LL_Init+0x94>)
 800852e:	f7fa fa14 	bl	800295a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008532:	2240      	movs	r2, #64	@ 0x40
 8008534:	2100      	movs	r1, #0
 8008536:	4806      	ldr	r0, [pc, #24]	@ (8008550 <USBD_LL_Init+0x94>)
 8008538:	f7fa f9c8 	bl	80028cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800853c:	2280      	movs	r2, #128	@ 0x80
 800853e:	2101      	movs	r1, #1
 8008540:	4803      	ldr	r0, [pc, #12]	@ (8008550 <USBD_LL_Init+0x94>)
 8008542:	f7fa f9c3 	bl	80028cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20001854 	.word	0x20001854

08008554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800856a:	4618      	mov	r0, r3
 800856c:	f7f9 faae 	bl	8001acc <HAL_PCD_Start>
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d816      	bhi.n	80085a8 <USBD_LL_Start+0x54>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <USBD_LL_Start+0x2c>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	08008591 	.word	0x08008591
 8008584:	08008597 	.word	0x08008597
 8008588:	0800859d 	.word	0x0800859d
 800858c:	080085a3 	.word	0x080085a3
    case HAL_OK :
      usb_status = USBD_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]
    break;
 8008594:	e00b      	b.n	80085ae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008596:	2303      	movs	r3, #3
 8008598:	73fb      	strb	r3, [r7, #15]
    break;
 800859a:	e008      	b.n	80085ae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800859c:	2301      	movs	r3, #1
 800859e:	73fb      	strb	r3, [r7, #15]
    break;
 80085a0:	e005      	b.n	80085ae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085a2:	2303      	movs	r3, #3
 80085a4:	73fb      	strb	r3, [r7, #15]
    break;
 80085a6:	e002      	b.n	80085ae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	73fb      	strb	r3, [r7, #15]
    break;
 80085ac:	bf00      	nop
  }
  return usb_status;
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	4608      	mov	r0, r1
 80085c2:	4611      	mov	r1, r2
 80085c4:	461a      	mov	r2, r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	70fb      	strb	r3, [r7, #3]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70bb      	strb	r3, [r7, #2]
 80085ce:	4613      	mov	r3, r2
 80085d0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80085e0:	78bb      	ldrb	r3, [r7, #2]
 80085e2:	883a      	ldrh	r2, [r7, #0]
 80085e4:	78f9      	ldrb	r1, [r7, #3]
 80085e6:	f7f9 fe69 	bl	80022bc <HAL_PCD_EP_Open>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d817      	bhi.n	8008624 <USBD_LL_OpenEP+0x6c>
 80085f4:	a201      	add	r2, pc, #4	@ (adr r2, 80085fc <USBD_LL_OpenEP+0x44>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	0800860d 	.word	0x0800860d
 8008600:	08008613 	.word	0x08008613
 8008604:	08008619 	.word	0x08008619
 8008608:	0800861f 	.word	0x0800861f
    case HAL_OK :
      usb_status = USBD_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
    break;
 8008610:	e00b      	b.n	800862a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008612:	2303      	movs	r3, #3
 8008614:	73fb      	strb	r3, [r7, #15]
    break;
 8008616:	e008      	b.n	800862a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
    break;
 800861c:	e005      	b.n	800862a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800861e:	2303      	movs	r3, #3
 8008620:	73fb      	strb	r3, [r7, #15]
    break;
 8008622:	e002      	b.n	800862a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008624:	2303      	movs	r3, #3
 8008626:	73fb      	strb	r3, [r7, #15]
    break;
 8008628:	bf00      	nop
  }
  return usb_status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800864e:	78fa      	ldrb	r2, [r7, #3]
 8008650:	4611      	mov	r1, r2
 8008652:	4618      	mov	r0, r3
 8008654:	f7f9 fe9a 	bl	800238c <HAL_PCD_EP_Close>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b03      	cmp	r3, #3
 8008660:	d816      	bhi.n	8008690 <USBD_LL_CloseEP+0x5c>
 8008662:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <USBD_LL_CloseEP+0x34>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	08008679 	.word	0x08008679
 800866c:	0800867f 	.word	0x0800867f
 8008670:	08008685 	.word	0x08008685
 8008674:	0800868b 	.word	0x0800868b
    case HAL_OK :
      usb_status = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73fb      	strb	r3, [r7, #15]
    break;
 800867c:	e00b      	b.n	8008696 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	73fb      	strb	r3, [r7, #15]
    break;
 8008682:	e008      	b.n	8008696 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
    break;
 8008688:	e005      	b.n	8008696 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800868a:	2303      	movs	r3, #3
 800868c:	73fb      	strb	r3, [r7, #15]
    break;
 800868e:	e002      	b.n	8008696 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	73fb      	strb	r3, [r7, #15]
    break;
 8008694:	bf00      	nop
  }
  return usb_status;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f9 ff41 	bl	8002546 <HAL_PCD_EP_SetStall>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b03      	cmp	r3, #3
 80086cc:	d816      	bhi.n	80086fc <USBD_LL_StallEP+0x5c>
 80086ce:	a201      	add	r2, pc, #4	@ (adr r2, 80086d4 <USBD_LL_StallEP+0x34>)
 80086d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d4:	080086e5 	.word	0x080086e5
 80086d8:	080086eb 	.word	0x080086eb
 80086dc:	080086f1 	.word	0x080086f1
 80086e0:	080086f7 	.word	0x080086f7
    case HAL_OK :
      usb_status = USBD_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
    break;
 80086e8:	e00b      	b.n	8008702 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086ea:	2303      	movs	r3, #3
 80086ec:	73fb      	strb	r3, [r7, #15]
    break;
 80086ee:	e008      	b.n	8008702 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
    break;
 80086f4:	e005      	b.n	8008702 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086f6:	2303      	movs	r3, #3
 80086f8:	73fb      	strb	r3, [r7, #15]
    break;
 80086fa:	e002      	b.n	8008702 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80086fc:	2303      	movs	r3, #3
 80086fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008700:	bf00      	nop
  }
  return usb_status;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8008726:	78fa      	ldrb	r2, [r7, #3]
 8008728:	4611      	mov	r1, r2
 800872a:	4618      	mov	r0, r3
 800872c:	f7f9 ff6d 	bl	800260a <HAL_PCD_EP_ClrStall>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b03      	cmp	r3, #3
 8008738:	d816      	bhi.n	8008768 <USBD_LL_ClearStallEP+0x5c>
 800873a:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <USBD_LL_ClearStallEP+0x34>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008751 	.word	0x08008751
 8008744:	08008757 	.word	0x08008757
 8008748:	0800875d 	.word	0x0800875d
 800874c:	08008763 	.word	0x08008763
    case HAL_OK :
      usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e00b      	b.n	800876e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e008      	b.n	800876e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e005      	b.n	800876e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e002      	b.n	800876e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	bf00      	nop
  }
  return usb_status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800878a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800878c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008790:	2b00      	cmp	r3, #0
 8008792:	da0b      	bge.n	80087ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	333e      	adds	r3, #62	@ 0x3e
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	e00b      	b.n	80087c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087b2:	68f9      	ldr	r1, [r7, #12]
 80087b4:	4613      	mov	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80087c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80087ea:	78fa      	ldrb	r2, [r7, #3]
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f9 fd3f 	bl	8002272 <HAL_PCD_SetAddress>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d816      	bhi.n	800882c <USBD_LL_SetUSBAddress+0x5c>
 80087fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008804 <USBD_LL_SetUSBAddress+0x34>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008815 	.word	0x08008815
 8008808:	0800881b 	.word	0x0800881b
 800880c:	08008821 	.word	0x08008821
 8008810:	08008827 	.word	0x08008827
    case HAL_OK :
      usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	e00b      	b.n	8008832 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800881a:	2303      	movs	r3, #3
 800881c:	73fb      	strb	r3, [r7, #15]
    break;
 800881e:	e008      	b.n	8008832 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008820:	2301      	movs	r3, #1
 8008822:	73fb      	strb	r3, [r7, #15]
    break;
 8008824:	e005      	b.n	8008832 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008826:	2303      	movs	r3, #3
 8008828:	73fb      	strb	r3, [r7, #15]
    break;
 800882a:	e002      	b.n	8008832 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	73fb      	strb	r3, [r7, #15]
    break;
 8008830:	bf00      	nop
  }
  return usb_status;
 8008832:	7bfb      	ldrb	r3, [r7, #15]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	607a      	str	r2, [r7, #4]
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	460b      	mov	r3, r1
 800884a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800885a:	7af9      	ldrb	r1, [r7, #11]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f7f9 fe34 	bl	80024cc <HAL_PCD_EP_Transmit>
 8008864:	4603      	mov	r3, r0
 8008866:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008868:	7dbb      	ldrb	r3, [r7, #22]
 800886a:	2b03      	cmp	r3, #3
 800886c:	d816      	bhi.n	800889c <USBD_LL_Transmit+0x60>
 800886e:	a201      	add	r2, pc, #4	@ (adr r2, 8008874 <USBD_LL_Transmit+0x38>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	08008885 	.word	0x08008885
 8008878:	0800888b 	.word	0x0800888b
 800887c:	08008891 	.word	0x08008891
 8008880:	08008897 	.word	0x08008897
    case HAL_OK :
      usb_status = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	75fb      	strb	r3, [r7, #23]
    break;
 8008888:	e00b      	b.n	80088a2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	75fb      	strb	r3, [r7, #23]
    break;
 800888e:	e008      	b.n	80088a2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]
    break;
 8008894:	e005      	b.n	80088a2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008896:	2303      	movs	r3, #3
 8008898:	75fb      	strb	r3, [r7, #23]
    break;
 800889a:	e002      	b.n	80088a2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	75fb      	strb	r3, [r7, #23]
    break;
 80088a0:	bf00      	nop
  }
  return usb_status;
 80088a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	607a      	str	r2, [r7, #4]
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	460b      	mov	r3, r1
 80088ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80088ca:	7af9      	ldrb	r1, [r7, #11]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	f7f9 fda6 	bl	8002420 <HAL_PCD_EP_Receive>
 80088d4:	4603      	mov	r3, r0
 80088d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80088d8:	7dbb      	ldrb	r3, [r7, #22]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d816      	bhi.n	800890c <USBD_LL_PrepareReceive+0x60>
 80088de:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <USBD_LL_PrepareReceive+0x38>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	080088fb 	.word	0x080088fb
 80088ec:	08008901 	.word	0x08008901
 80088f0:	08008907 	.word	0x08008907
    case HAL_OK :
      usb_status = USBD_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	75fb      	strb	r3, [r7, #23]
    break;
 80088f8:	e00b      	b.n	8008912 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088fa:	2303      	movs	r3, #3
 80088fc:	75fb      	strb	r3, [r7, #23]
    break;
 80088fe:	e008      	b.n	8008912 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008900:	2301      	movs	r3, #1
 8008902:	75fb      	strb	r3, [r7, #23]
    break;
 8008904:	e005      	b.n	8008912 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008906:	2303      	movs	r3, #3
 8008908:	75fb      	strb	r3, [r7, #23]
    break;
 800890a:	e002      	b.n	8008912 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800890c:	2303      	movs	r3, #3
 800890e:	75fb      	strb	r3, [r7, #23]
    break;
 8008910:	bf00      	nop
  }
  return usb_status;
 8008912:	7dfb      	ldrb	r3, [r7, #23]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7f9 fdb2 	bl	800249c <HAL_PCD_EP_GetRxCount>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_PCDEx_LPM_Callback+0x18>
 8008956:	2b01      	cmp	r3, #1
 8008958:	d01f      	beq.n	800899a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800895a:	e03b      	b.n	80089d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d007      	beq.n	8008974 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008964:	f000 f83c 	bl	80089e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008968:	4b1c      	ldr	r3, [pc, #112]	@ (80089dc <HAL_PCDEx_LPM_Callback+0x98>)
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	4a1b      	ldr	r2, [pc, #108]	@ (80089dc <HAL_PCDEx_LPM_Callback+0x98>)
 800896e:	f023 0306 	bic.w	r3, r3, #6
 8008972:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008986:	f023 0301 	bic.w	r3, r3, #1
 800898a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe fb28 	bl	8006fe8 <USBD_LL_Resume>
    break;
 8008998:	e01c      	b.n	80089d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fb00 	bl	8006fbe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089c6:	4b05      	ldr	r3, [pc, #20]	@ (80089dc <HAL_PCDEx_LPM_Callback+0x98>)
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	4a04      	ldr	r2, [pc, #16]	@ (80089dc <HAL_PCDEx_LPM_Callback+0x98>)
 80089cc:	f043 0306 	orr.w	r3, r3, #6
 80089d0:	6113      	str	r3, [r2, #16]
    break;
 80089d2:	bf00      	nop
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	e000ed00 	.word	0xe000ed00

080089e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80089e4:	f7f7 ff5a 	bl	800089c <SystemClock_Config>
}
 80089e8:	bf00      	nop
 80089ea:	bd80      	pop	{r7, pc}

080089ec <malloc>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	@ (80089f8 <malloc+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f000 b82d 	b.w	8008a50 <_malloc_r>
 80089f6:	bf00      	nop
 80089f8:	20000190 	.word	0x20000190

080089fc <free>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	@ (8008a08 <free+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f000 b8f5 	b.w	8008bf0 <_free_r>
 8008a06:	bf00      	nop
 8008a08:	20000190 	.word	0x20000190

08008a0c <sbrk_aligned>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a4c <sbrk_aligned+0x40>)
 8008a10:	460c      	mov	r4, r1
 8008a12:	6831      	ldr	r1, [r6, #0]
 8008a14:	4605      	mov	r5, r0
 8008a16:	b911      	cbnz	r1, 8008a1e <sbrk_aligned+0x12>
 8008a18:	f000 f8ae 	bl	8008b78 <_sbrk_r>
 8008a1c:	6030      	str	r0, [r6, #0]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 f8a9 	bl	8008b78 <_sbrk_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d103      	bne.n	8008a32 <sbrk_aligned+0x26>
 8008a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a2e:	4620      	mov	r0, r4
 8008a30:	bd70      	pop	{r4, r5, r6, pc}
 8008a32:	1cc4      	adds	r4, r0, #3
 8008a34:	f024 0403 	bic.w	r4, r4, #3
 8008a38:	42a0      	cmp	r0, r4
 8008a3a:	d0f8      	beq.n	8008a2e <sbrk_aligned+0x22>
 8008a3c:	1a21      	subs	r1, r4, r0
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 f89a 	bl	8008b78 <_sbrk_r>
 8008a44:	3001      	adds	r0, #1
 8008a46:	d1f2      	bne.n	8008a2e <sbrk_aligned+0x22>
 8008a48:	e7ef      	b.n	8008a2a <sbrk_aligned+0x1e>
 8008a4a:	bf00      	nop
 8008a4c:	20001c5c 	.word	0x20001c5c

08008a50 <_malloc_r>:
 8008a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	1ccd      	adds	r5, r1, #3
 8008a56:	f025 0503 	bic.w	r5, r5, #3
 8008a5a:	3508      	adds	r5, #8
 8008a5c:	2d0c      	cmp	r5, #12
 8008a5e:	bf38      	it	cc
 8008a60:	250c      	movcc	r5, #12
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	4606      	mov	r6, r0
 8008a66:	db01      	blt.n	8008a6c <_malloc_r+0x1c>
 8008a68:	42a9      	cmp	r1, r5
 8008a6a:	d904      	bls.n	8008a76 <_malloc_r+0x26>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	6033      	str	r3, [r6, #0]
 8008a70:	2000      	movs	r0, #0
 8008a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b4c <_malloc_r+0xfc>
 8008a7a:	f000 f869 	bl	8008b50 <__malloc_lock>
 8008a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a82:	461c      	mov	r4, r3
 8008a84:	bb44      	cbnz	r4, 8008ad8 <_malloc_r+0x88>
 8008a86:	4629      	mov	r1, r5
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff ffbf 	bl	8008a0c <sbrk_aligned>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	4604      	mov	r4, r0
 8008a92:	d158      	bne.n	8008b46 <_malloc_r+0xf6>
 8008a94:	f8d8 4000 	ldr.w	r4, [r8]
 8008a98:	4627      	mov	r7, r4
 8008a9a:	2f00      	cmp	r7, #0
 8008a9c:	d143      	bne.n	8008b26 <_malloc_r+0xd6>
 8008a9e:	2c00      	cmp	r4, #0
 8008aa0:	d04b      	beq.n	8008b3a <_malloc_r+0xea>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	eb04 0903 	add.w	r9, r4, r3
 8008aac:	f000 f864 	bl	8008b78 <_sbrk_r>
 8008ab0:	4581      	cmp	r9, r0
 8008ab2:	d142      	bne.n	8008b3a <_malloc_r+0xea>
 8008ab4:	6821      	ldr	r1, [r4, #0]
 8008ab6:	1a6d      	subs	r5, r5, r1
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4630      	mov	r0, r6
 8008abc:	f7ff ffa6 	bl	8008a0c <sbrk_aligned>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d03a      	beq.n	8008b3a <_malloc_r+0xea>
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	442b      	add	r3, r5
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	f8d8 3000 	ldr.w	r3, [r8]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	bb62      	cbnz	r2, 8008b2c <_malloc_r+0xdc>
 8008ad2:	f8c8 7000 	str.w	r7, [r8]
 8008ad6:	e00f      	b.n	8008af8 <_malloc_r+0xa8>
 8008ad8:	6822      	ldr	r2, [r4, #0]
 8008ada:	1b52      	subs	r2, r2, r5
 8008adc:	d420      	bmi.n	8008b20 <_malloc_r+0xd0>
 8008ade:	2a0b      	cmp	r2, #11
 8008ae0:	d917      	bls.n	8008b12 <_malloc_r+0xc2>
 8008ae2:	1961      	adds	r1, r4, r5
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	6025      	str	r5, [r4, #0]
 8008ae8:	bf18      	it	ne
 8008aea:	6059      	strne	r1, [r3, #4]
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	bf08      	it	eq
 8008af0:	f8c8 1000 	streq.w	r1, [r8]
 8008af4:	5162      	str	r2, [r4, r5]
 8008af6:	604b      	str	r3, [r1, #4]
 8008af8:	4630      	mov	r0, r6
 8008afa:	f000 f82f 	bl	8008b5c <__malloc_unlock>
 8008afe:	f104 000b 	add.w	r0, r4, #11
 8008b02:	1d23      	adds	r3, r4, #4
 8008b04:	f020 0007 	bic.w	r0, r0, #7
 8008b08:	1ac2      	subs	r2, r0, r3
 8008b0a:	bf1c      	itt	ne
 8008b0c:	1a1b      	subne	r3, r3, r0
 8008b0e:	50a3      	strne	r3, [r4, r2]
 8008b10:	e7af      	b.n	8008a72 <_malloc_r+0x22>
 8008b12:	6862      	ldr	r2, [r4, #4]
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	bf0c      	ite	eq
 8008b18:	f8c8 2000 	streq.w	r2, [r8]
 8008b1c:	605a      	strne	r2, [r3, #4]
 8008b1e:	e7eb      	b.n	8008af8 <_malloc_r+0xa8>
 8008b20:	4623      	mov	r3, r4
 8008b22:	6864      	ldr	r4, [r4, #4]
 8008b24:	e7ae      	b.n	8008a84 <_malloc_r+0x34>
 8008b26:	463c      	mov	r4, r7
 8008b28:	687f      	ldr	r7, [r7, #4]
 8008b2a:	e7b6      	b.n	8008a9a <_malloc_r+0x4a>
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	42a3      	cmp	r3, r4
 8008b32:	d1fb      	bne.n	8008b2c <_malloc_r+0xdc>
 8008b34:	2300      	movs	r3, #0
 8008b36:	6053      	str	r3, [r2, #4]
 8008b38:	e7de      	b.n	8008af8 <_malloc_r+0xa8>
 8008b3a:	230c      	movs	r3, #12
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f000 f80c 	bl	8008b5c <__malloc_unlock>
 8008b44:	e794      	b.n	8008a70 <_malloc_r+0x20>
 8008b46:	6005      	str	r5, [r0, #0]
 8008b48:	e7d6      	b.n	8008af8 <_malloc_r+0xa8>
 8008b4a:	bf00      	nop
 8008b4c:	20001c60 	.word	0x20001c60

08008b50 <__malloc_lock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	@ (8008b58 <__malloc_lock+0x8>)
 8008b52:	f000 b84b 	b.w	8008bec <__retarget_lock_acquire_recursive>
 8008b56:	bf00      	nop
 8008b58:	20001da0 	.word	0x20001da0

08008b5c <__malloc_unlock>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	@ (8008b64 <__malloc_unlock+0x8>)
 8008b5e:	f000 b846 	b.w	8008bee <__retarget_lock_release_recursive>
 8008b62:	bf00      	nop
 8008b64:	20001da0 	.word	0x20001da0

08008b68 <memset>:
 8008b68:	4402      	add	r2, r0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d100      	bne.n	8008b72 <memset+0xa>
 8008b70:	4770      	bx	lr
 8008b72:	f803 1b01 	strb.w	r1, [r3], #1
 8008b76:	e7f9      	b.n	8008b6c <memset+0x4>

08008b78 <_sbrk_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d06      	ldr	r5, [pc, #24]	@ (8008b94 <_sbrk_r+0x1c>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7f8 f822 	bl	8000bcc <_sbrk>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_sbrk_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_sbrk_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20001d9c 	.word	0x20001d9c

08008b98 <__errno>:
 8008b98:	4b01      	ldr	r3, [pc, #4]	@ (8008ba0 <__errno+0x8>)
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000190 	.word	0x20000190

08008ba4 <__libc_init_array>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8008bdc <__libc_init_array+0x38>)
 8008ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8008be0 <__libc_init_array+0x3c>)
 8008baa:	1b64      	subs	r4, r4, r5
 8008bac:	10a4      	asrs	r4, r4, #2
 8008bae:	2600      	movs	r6, #0
 8008bb0:	42a6      	cmp	r6, r4
 8008bb2:	d109      	bne.n	8008bc8 <__libc_init_array+0x24>
 8008bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008be4 <__libc_init_array+0x40>)
 8008bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008be8 <__libc_init_array+0x44>)
 8008bb8:	f000 f864 	bl	8008c84 <_init>
 8008bbc:	1b64      	subs	r4, r4, r5
 8008bbe:	10a4      	asrs	r4, r4, #2
 8008bc0:	2600      	movs	r6, #0
 8008bc2:	42a6      	cmp	r6, r4
 8008bc4:	d105      	bne.n	8008bd2 <__libc_init_array+0x2e>
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bcc:	4798      	blx	r3
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7ee      	b.n	8008bb0 <__libc_init_array+0xc>
 8008bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd6:	4798      	blx	r3
 8008bd8:	3601      	adds	r6, #1
 8008bda:	e7f2      	b.n	8008bc2 <__libc_init_array+0x1e>
 8008bdc:	08008d3c 	.word	0x08008d3c
 8008be0:	08008d3c 	.word	0x08008d3c
 8008be4:	08008d3c 	.word	0x08008d3c
 8008be8:	08008d40 	.word	0x08008d40

08008bec <__retarget_lock_acquire_recursive>:
 8008bec:	4770      	bx	lr

08008bee <__retarget_lock_release_recursive>:
 8008bee:	4770      	bx	lr

08008bf0 <_free_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d041      	beq.n	8008c7c <_free_r+0x8c>
 8008bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfc:	1f0c      	subs	r4, r1, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfb8      	it	lt
 8008c02:	18e4      	addlt	r4, r4, r3
 8008c04:	f7ff ffa4 	bl	8008b50 <__malloc_lock>
 8008c08:	4a1d      	ldr	r2, [pc, #116]	@ (8008c80 <_free_r+0x90>)
 8008c0a:	6813      	ldr	r3, [r2, #0]
 8008c0c:	b933      	cbnz	r3, 8008c1c <_free_r+0x2c>
 8008c0e:	6063      	str	r3, [r4, #4]
 8008c10:	6014      	str	r4, [r2, #0]
 8008c12:	4628      	mov	r0, r5
 8008c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c18:	f7ff bfa0 	b.w	8008b5c <__malloc_unlock>
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	d908      	bls.n	8008c32 <_free_r+0x42>
 8008c20:	6820      	ldr	r0, [r4, #0]
 8008c22:	1821      	adds	r1, r4, r0
 8008c24:	428b      	cmp	r3, r1
 8008c26:	bf01      	itttt	eq
 8008c28:	6819      	ldreq	r1, [r3, #0]
 8008c2a:	685b      	ldreq	r3, [r3, #4]
 8008c2c:	1809      	addeq	r1, r1, r0
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	e7ed      	b.n	8008c0e <_free_r+0x1e>
 8008c32:	461a      	mov	r2, r3
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	b10b      	cbz	r3, 8008c3c <_free_r+0x4c>
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	d9fa      	bls.n	8008c32 <_free_r+0x42>
 8008c3c:	6811      	ldr	r1, [r2, #0]
 8008c3e:	1850      	adds	r0, r2, r1
 8008c40:	42a0      	cmp	r0, r4
 8008c42:	d10b      	bne.n	8008c5c <_free_r+0x6c>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	4401      	add	r1, r0
 8008c48:	1850      	adds	r0, r2, r1
 8008c4a:	4283      	cmp	r3, r0
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	d1e0      	bne.n	8008c12 <_free_r+0x22>
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	6053      	str	r3, [r2, #4]
 8008c56:	4408      	add	r0, r1
 8008c58:	6010      	str	r0, [r2, #0]
 8008c5a:	e7da      	b.n	8008c12 <_free_r+0x22>
 8008c5c:	d902      	bls.n	8008c64 <_free_r+0x74>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	e7d6      	b.n	8008c12 <_free_r+0x22>
 8008c64:	6820      	ldr	r0, [r4, #0]
 8008c66:	1821      	adds	r1, r4, r0
 8008c68:	428b      	cmp	r3, r1
 8008c6a:	bf04      	itt	eq
 8008c6c:	6819      	ldreq	r1, [r3, #0]
 8008c6e:	685b      	ldreq	r3, [r3, #4]
 8008c70:	6063      	str	r3, [r4, #4]
 8008c72:	bf04      	itt	eq
 8008c74:	1809      	addeq	r1, r1, r0
 8008c76:	6021      	streq	r1, [r4, #0]
 8008c78:	6054      	str	r4, [r2, #4]
 8008c7a:	e7ca      	b.n	8008c12 <_free_r+0x22>
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
 8008c7e:	bf00      	nop
 8008c80:	20001c60 	.word	0x20001c60

08008c84 <_init>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr

08008c90 <_fini>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr
