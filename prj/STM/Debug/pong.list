
pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eadc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000514  0800ec70  0800ec70  0000fc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f184  0800f184  000113c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f184  0800f184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f18c  0800f18c  000113c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f18c  0800f18c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f190  0800f190  00010190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c0  20000000  0800f194  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  200003c0  0800f554  000113c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002014  0800f554  00012014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021382  00000000  00000000  000113f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005779  00000000  00000000  00032772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fc8  00000000  00000000  00037ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001841  00000000  00000000  00039eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1de  00000000  00000000  0003b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281d6  00000000  00000000  000698d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101d1e  00000000  00000000  00091aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001937cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009978  00000000  00000000  00193810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0019d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003c0 	.word	0x200003c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec54 	.word	0x0800ec54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003c4 	.word	0x200003c4
 80001cc:	0800ec54 	.word	0x0800ec54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <accInit>:
 *  1) odczytuje ID akcelerometru i porównuje z oczekiwanym,
 *  2) wywołuje BSP_COMPASS_Init() do inicjalizacji sensora.
 *
 * @return Zwraca 0 przy sukcesie lub kod błędu (1 = niepoprawne ID, 2 = błąd init).
 */
uint8_t accInit(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	uint8_t idAcc = LSM303C_AccReadID();
 8001026:	f000 ff1a 	bl	8001e5e <LSM303C_AccReadID>
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	if(idAcc != LMS303C_ACC_ID){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b41      	cmp	r3, #65	@ 0x41
 8001032:	d006      	beq.n	8001042 <accInit+0x22>
		printf("ERR, acc id: 0x%X\r\n",idAcc);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4619      	mov	r1, r3
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <accInit+0x44>)
 800103a:	f00a fa0b 	bl	800b454 <iprintf>
		return 1;
 800103e:	2301      	movs	r3, #1
 8001040:	e00c      	b.n	800105c <accInit+0x3c>
	}

	COMPASS_StatusTypeDef stanAcc = BSP_COMPASS_Init();
 8001042:	f001 fad1 	bl	80025e8 <BSP_COMPASS_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	71bb      	strb	r3, [r7, #6]
	if(stanAcc == COMPASS_ERROR){
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d104      	bne.n	800105a <accInit+0x3a>
		printf("ERR acc init\r\n");
 8001050:	4805      	ldr	r0, [pc, #20]	@ (8001068 <accInit+0x48>)
 8001052:	f00a fa67 	bl	800b524 <puts>
		return 2;
 8001056:	2302      	movs	r3, #2
 8001058:	e000      	b.n	800105c <accInit+0x3c>
	}
	return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	0800ec70 	.word	0x0800ec70
 8001068:	0800ec84 	.word	0x0800ec84

0800106c <accel_calibrate>:
 *  - zapisuje wynik do bufora offset_cb[] i do wewnętrznego acc_offset[].
 *
 *  @param[in] offset_cb[3]  tablica, do której zwracane są zmierzone offsety,
 *  @param[in] samples       liczba próbek użytych do obliczenia średniej.
 */
void accel_calibrate(int16_t offset_cb[3], uint16_t samples){
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
    int32_t sum[3] = {0,0,0};
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
    int16_t buf[3];
    for(uint16_t i = 0; i < samples; ++i){
 8001084:	2300      	movs	r3, #0
 8001086:	83fb      	strh	r3, [r7, #30]
 8001088:	e019      	b.n	80010be <accel_calibrate+0x52>
        LSM303C_AccReadXYZ(buf);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4618      	mov	r0, r3
 8001090:	f000 ff28 	bl	8001ee4 <LSM303C_AccReadXYZ>
        sum[0] += buf[0];
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800109a:	4413      	add	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        sum[1] += buf[1];
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80010a4:	4413      	add	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
        sum[2] += buf[2];
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f001 fb90 	bl	80027d8 <HAL_Delay>
    for(uint16_t i = 0; i < samples; ++i){
 80010b8:	8bfb      	ldrh	r3, [r7, #30]
 80010ba:	3301      	adds	r3, #1
 80010bc:	83fb      	strh	r3, [r7, #30]
 80010be:	8bfa      	ldrh	r2, [r7, #30]
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3e1      	bcc.n	800108a <accel_calibrate+0x1e>
    }
    // średnia jako offset
    offset_cb[0] = (int16_t)(sum[0] / samples);
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
    offset_cb[1] = (int16_t)(sum[1] / samples);
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	fb92 f2f3 	sdiv	r2, r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3302      	adds	r3, #2
 80010e0:	b212      	sxth	r2, r2
 80010e2:	801a      	strh	r2, [r3, #0]
    offset_cb[2] = (int16_t)(sum[2] / samples);
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3304      	adds	r3, #4
 80010f0:	b212      	sxth	r2, r2
 80010f2:	801a      	strh	r2, [r3, #0]
    // zmienna lokalna:
    acc_offset[0] = offset_cb[0];
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <accel_calibrate+0xb0>)
 80010fc:	801a      	strh	r2, [r3, #0]
    acc_offset[1] = offset_cb[1];
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <accel_calibrate+0xb0>)
 8001106:	805a      	strh	r2, [r3, #2]
    acc_offset[2] = offset_cb[2];
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800110e:	4b03      	ldr	r3, [pc, #12]	@ (800111c <accel_calibrate+0xb0>)
 8001110:	809a      	strh	r2, [r3, #4]
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200003e4 	.word	0x200003e4

08001120 <accel_lpf_int>:
 * @param[in] in     bieżąca surowa, już wycentrowana wartość,
 * @param[in] prev   wskaźnik na poprzednią wartość filtra (i miejsce przechowywania wyniku),
 * @param[in] alpha  współczynnik filtra w skali 0–256.
 * @return prev przefiltrowana wartość
 */
int16_t accel_lpf_int(int16_t in, int16_t *prev, uint8_t alpha){
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	4613      	mov	r3, r2
 800112e:	717b      	strb	r3, [r7, #5]
    // y[n] = y[n-1] + alpha*(x[n] - y[n-1]) ; alpha w [0..256]
    int32_t diff = (int32_t)in - *prev;
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	f9b2 2000 	ldrsh.w	r2, [r2]
 800113a:	1a9b      	subs	r3, r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
    int32_t delta = (diff * alpha) >> 8;  // podziel przez 256
 800113e:	797b      	ldrb	r3, [r7, #5]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	121b      	asrs	r3, r3, #8
 8001148:	60bb      	str	r3, [r7, #8]
    *prev = (int16_t)((int32_t)*prev + delta);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	b29a      	uxth	r2, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4413      	add	r3, r2
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21a      	sxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	801a      	strh	r2, [r3, #0]
    return *prev;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <AccGetData>:
     * a następnie przepuszcza każdą oś przez integer-owy LPF.
     * Wynikiem są trzy wartości całkowite w out[3], gotowe do dalszej obróbki.
     *
     * @param[in] out tablica danych poddanych filtracji i usunięciu offsetu
     */
void AccGetData(int16_t out[3]){
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
    int16_t raw[3];
    LSM303C_AccReadXYZ(raw);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4618      	mov	r0, r3
 8001182:	f000 feaf 	bl	8001ee4 <LSM303C_AccReadXYZ>
    for(int i = 0; i < 3; ++i){
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e021      	b.n	80011d0 <AccGetData+0x5c>
        int16_t centered = raw[i] - acc_offset[i];
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	3318      	adds	r3, #24
 8001192:	443b      	add	r3, r7
 8001194:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001198:	b29a      	uxth	r2, r3
 800119a:	4911      	ldr	r1, [pc, #68]	@ (80011e0 <AccGetData+0x6c>)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	827b      	strh	r3, [r7, #18]
        out[i] = accel_lpf_int(centered, &acc_prev[i], LPF_ALPHA_I);
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <AccGetData+0x70>)
 80011b0:	1899      	adds	r1, r3, r2
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	18d4      	adds	r4, r2, r3
 80011ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011be:	227a      	movs	r2, #122	@ 0x7a
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffad 	bl	8001120 <accel_lpf_int>
 80011c6:	4603      	mov	r3, r0
 80011c8:	8023      	strh	r3, [r4, #0]
    for(int i = 0; i < 3; ++i){
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	ddda      	ble.n	800118c <AccGetData+0x18>
    }
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	200003e4 	.word	0x200003e4
 80011e4:	200003dc 	.word	0x200003dc

080011e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	@ 0x30
 80011ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	4b82      	ldr	r3, [pc, #520]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	4a81      	ldr	r2, [pc, #516]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120a:	4b7f      	ldr	r3, [pc, #508]	@ (8001408 <MX_GPIO_Init+0x220>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001216:	4b7c      	ldr	r3, [pc, #496]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121a:	4a7b      	ldr	r2, [pc, #492]	@ (8001408 <MX_GPIO_Init+0x220>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001222:	4b79      	ldr	r3, [pc, #484]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b76      	ldr	r3, [pc, #472]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	4a75      	ldr	r2, [pc, #468]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123a:	4b73      	ldr	r3, [pc, #460]	@ (8001408 <MX_GPIO_Init+0x220>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b70      	ldr	r3, [pc, #448]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	4a6f      	ldr	r2, [pc, #444]	@ (8001408 <MX_GPIO_Init+0x220>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001252:	4b6d      	ldr	r3, [pc, #436]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800125e:	4b6a      	ldr	r3, [pc, #424]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a69      	ldr	r2, [pc, #420]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001264:	f043 0310 	orr.w	r3, r3, #16
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b67      	ldr	r3, [pc, #412]	@ (8001408 <MX_GPIO_Init+0x220>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001276:	4b64      	ldr	r3, [pc, #400]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a63      	ldr	r2, [pc, #396]	@ (8001408 <MX_GPIO_Init+0x220>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b61      	ldr	r3, [pc, #388]	@ (8001408 <MX_GPIO_Init+0x220>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	f240 2101 	movw	r1, #513	@ 0x201
 8001294:	485d      	ldr	r0, [pc, #372]	@ (800140c <MX_GPIO_Init+0x224>)
 8001296:	f001 fdbf 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	210c      	movs	r1, #12
 800129e:	485c      	ldr	r0, [pc, #368]	@ (8001410 <MX_GPIO_Init+0x228>)
 80012a0:	f001 fdba 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f240 1101 	movw	r1, #257	@ 0x101
 80012aa:	485a      	ldr	r0, [pc, #360]	@ (8001414 <MX_GPIO_Init+0x22c>)
 80012ac:	f001 fdb4 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	4858      	ldr	r0, [pc, #352]	@ (8001418 <MX_GPIO_Init+0x230>)
 80012b6:	f001 fdaf 	bl	8002e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|OTG_FS_PowerSwitchOn_Pin;
 80012ba:	f240 2301 	movw	r3, #513	@ 0x201
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	484e      	ldr	r0, [pc, #312]	@ (800140c <MX_GPIO_Init+0x224>)
 80012d4:	f001 fbf6 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 80012d8:	232f      	movs	r3, #47	@ 0x2f
 80012da:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012e0:	2302      	movs	r3, #2
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ee:	f001 fbe9 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 80012f2:	2310      	movs	r3, #16
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f6:	4b49      	ldr	r3, [pc, #292]	@ (800141c <MX_GPIO_Init+0x234>)
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f001 fbdc 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 800130c:	2304      	movs	r3, #4
 800130e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	483b      	ldr	r0, [pc, #236]	@ (8001410 <MX_GPIO_Init+0x228>)
 8001324:	f001 fbce 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8001328:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4834      	ldr	r0, [pc, #208]	@ (8001414 <MX_GPIO_Init+0x22c>)
 8001342:	f001 fbbf 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800134c:	4b33      	ldr	r3, [pc, #204]	@ (800141c <MX_GPIO_Init+0x234>)
 800134e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	482c      	ldr	r0, [pc, #176]	@ (800140c <MX_GPIO_Init+0x224>)
 800135c:	f001 fbb2 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8001360:	2305      	movs	r3, #5
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_GPIO_Init+0x234>)
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4829      	ldr	r0, [pc, #164]	@ (8001418 <MX_GPIO_Init+0x230>)
 8001374:	f001 fba6 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8001378:	2380      	movs	r3, #128	@ 0x80
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4822      	ldr	r0, [pc, #136]	@ (8001418 <MX_GPIO_Init+0x230>)
 8001390:	f001 fb98 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8001394:	2308      	movs	r3, #8
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4819      	ldr	r0, [pc, #100]	@ (8001410 <MX_GPIO_Init+0x228>)
 80013ac:	f001 fb8a 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 80013b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_GPIO_Init+0x234>)
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4812      	ldr	r0, [pc, #72]	@ (8001410 <MX_GPIO_Init+0x228>)
 80013c6:	f001 fb7d 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_GPIO_Init+0x22c>)
 80013e2:	f001 fb6f 	bl	8002ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <MX_GPIO_Init+0x234>)
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4806      	ldr	r0, [pc, #24]	@ (8001414 <MX_GPIO_Init+0x22c>)
 80013fa:	f001 fb63 	bl	8002ac4 <HAL_GPIO_Init>

}
 80013fe:	bf00      	nop
 8001400:	3730      	adds	r7, #48	@ 0x30
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	48000800 	.word	0x48000800
 8001410:	48000400 	.word	0x48000400
 8001414:	48001000 	.word	0x48001000
 8001418:	48000c00 	.word	0x48000c00
 800141c:	10120000 	.word	0x10120000

08001420 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <MX_I2C1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_I2C1_Init+0x74>)
 800142c:	4a1b      	ldr	r2, [pc, #108]	@ (800149c <MX_I2C1_Init+0x7c>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001436:	4b17      	ldr	r3, [pc, #92]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001438:	2201      	movs	r2, #1
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <MX_I2C1_Init+0x74>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001448:	4b12      	ldr	r3, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145a:	480e      	ldr	r0, [pc, #56]	@ (8001494 <MX_I2C1_Init+0x74>)
 800145c:	f001 fd0e 	bl	8002e7c <HAL_I2C_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001466:	f000 f9e9 	bl	800183c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146a:	2100      	movs	r1, #0
 800146c:	4809      	ldr	r0, [pc, #36]	@ (8001494 <MX_I2C1_Init+0x74>)
 800146e:	f001 fd94 	bl	8002f9a <HAL_I2CEx_ConfigAnalogFilter>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001478:	f000 f9e0 	bl	800183c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800147c:	2100      	movs	r1, #0
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_I2C1_Init+0x74>)
 8001480:	f001 fdd6 	bl	8003030 <HAL_I2CEx_ConfigDigitalFilter>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f9d7 	bl	800183c <Error_Handler>
  }

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003ec 	.word	0x200003ec
 8001498:	40005400 	.word	0x40005400
 800149c:	10909cec 	.word	0x10909cec

080014a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08a      	sub	sp, #40	@ 0x28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a17      	ldr	r2, [pc, #92]	@ (800151c <HAL_I2C_MspInit+0x7c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d127      	bne.n	8001512 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_I2C_MspInit+0x80>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <HAL_I2C_MspInit+0x80>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_I2C_MspInit+0x80>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80014da:	23c0      	movs	r3, #192	@ 0xc0
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014de:	2312      	movs	r3, #18
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ea:	2304      	movs	r3, #4
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	480b      	ldr	r0, [pc, #44]	@ (8001524 <HAL_I2C_MspInit+0x84>)
 80014f6:	f001 fae5 	bl	8002ac4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <HAL_I2C_MspInit+0x80>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fe:	4a08      	ldr	r2, [pc, #32]	@ (8001520 <HAL_I2C_MspInit+0x80>)
 8001500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001504:	6593      	str	r3, [r2, #88]	@ 0x58
 8001506:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_I2C_MspInit+0x80>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40005400 	.word	0x40005400
 8001520:	40021000 	.word	0x40021000
 8001524:	48000400 	.word	0x48000400

08001528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152c:	f001 f8d8 	bl	80026e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001530:	f000 f838 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001534:	f7ff fe58 	bl	80011e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001538:	f7ff ff72 	bl	8001420 <MX_I2C1_Init>
  MX_SPI2_Init();
 800153c:	f000 f992 	bl	8001864 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001540:	f000 fbc4 	bl	8001ccc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001544:	f000 fb6c 	bl	8001c20 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001548:	f008 f988 	bl	800985c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  printf(" - - Start Programu - - ");
 800154c:	4811      	ldr	r0, [pc, #68]	@ (8001594 <main+0x6c>)
 800154e:	f009 ff81 	bl	800b454 <iprintf>

  if(accInit()){Error_Handler();}
 8001552:	f7ff fd65 	bl	8001020 <accInit>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <main+0x38>
 800155c:	f000 f96e 	bl	800183c <Error_Handler>

  accel_calibrate(offset, 100);
 8001560:	2164      	movs	r1, #100	@ 0x64
 8001562:	480d      	ldr	r0, [pc, #52]	@ (8001598 <main+0x70>)
 8001564:	f7ff fd82 	bl	800106c <accel_calibrate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	AccGetData(filteredAcc);
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <main+0x74>)
 800156a:	f7ff fe03 	bl	8001174 <AccGetData>
	printf("%7d;%7d;%7d\n",filteredAcc[0],filteredAcc[1],filteredAcc[2]);
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <main+0x74>)
 8001570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001574:	4619      	mov	r1, r3
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <main+0x74>)
 8001578:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800157c:	461a      	mov	r2, r3
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <main+0x74>)
 8001580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001584:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <main+0x78>)
 8001586:	f009 ff65 	bl	800b454 <iprintf>
	HAL_Delay(50);
 800158a:	2032      	movs	r0, #50	@ 0x32
 800158c:	f001 f924 	bl	80027d8 <HAL_Delay>
	AccGetData(filteredAcc);
 8001590:	bf00      	nop
 8001592:	e7e9      	b.n	8001568 <main+0x40>
 8001594:	0800ec94 	.word	0x0800ec94
 8001598:	20000440 	.word	0x20000440
 800159c:	20000438 	.word	0x20000438
 80015a0:	0800ecb0 	.word	0x0800ecb0

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0b8      	sub	sp, #224	@ 0xe0
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ae:	2244      	movs	r2, #68	@ 0x44
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00a f8b8 	bl	800b728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2288      	movs	r2, #136	@ 0x88
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00a f8aa 	bl	800b728 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015d4:	f002 fe18 	bl	8004208 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <SystemClock_Config+0x138>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015de:	4a3f      	ldr	r2, [pc, #252]	@ (80016dc <SystemClock_Config+0x138>)
 80015e0:	f023 0318 	bic.w	r3, r3, #24
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015e8:	2314      	movs	r3, #20
 80015ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001600:	2360      	movs	r3, #96	@ 0x60
 8001602:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800160c:	2301      	movs	r3, #1
 800160e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001612:	2301      	movs	r3, #1
 8001614:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001618:	2328      	movs	r3, #40	@ 0x28
 800161a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800161e:	2307      	movs	r3, #7
 8001620:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fe6b 	bl	8004310 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001640:	f000 f8fc 	bl	800183c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800164a:	2303      	movs	r3, #3
 800164c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001662:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001666:	2104      	movs	r1, #4
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fa39 	bl	8004ae0 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001674:	f000 f8e2 	bl	800183c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001678:	f242 0342 	movw	r3, #8258	@ 0x2042
 800167c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800167e:	2300      	movs	r3, #0
 8001680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001682:	2300      	movs	r3, #0
 8001684:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001686:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800168a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800168c:	2301      	movs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001690:	2301      	movs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001694:	2318      	movs	r3, #24
 8001696:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001698:	2307      	movs	r3, #7
 800169a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80016a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016a8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 fc1d 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x118>
  {
    Error_Handler();
 80016b8:	f000 f8c0 	bl	800183c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016c0:	f002 fdc0 	bl	8004244 <HAL_PWREx_ControlVoltageScaling>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80016ca:	f000 f8b7 	bl	800183c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80016ce:	f003 fef7 	bl	80054c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80016d2:	bf00      	nop
 80016d4:	37e0      	adds	r7, #224	@ 0xe0
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <computeCRC8>:

/* USER CODE BEGIN 4 */

uint8_t computeCRC8(const uint8_t* data, size_t length) {
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
    uint8_t poly = 0x07;
 80016ee:	2307      	movs	r3, #7
 80016f0:	72fb      	strb	r3, [r7, #11]

    for(size_t i = 0; i < length; ++i){
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e023      	b.n	8001740 <computeCRC8+0x60>
        crc ^= data[i];
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	4053      	eors	r3, r2
 8001704:	75fb      	strb	r3, [r7, #23]
        for(int bit = 0; bit < 8; ++bit){
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e013      	b.n	8001734 <computeCRC8+0x54>
            if(crc & 0x80){
 800170c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001710:	2b00      	cmp	r3, #0
 8001712:	da09      	bge.n	8001728 <computeCRC8+0x48>
                crc = ((crc << 1) ^ poly) & 0xFF;
 8001714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	b25a      	sxtb	r2, r3
 800171c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001720:	4053      	eors	r3, r2
 8001722:	b25b      	sxtb	r3, r3
 8001724:	75fb      	strb	r3, [r7, #23]
 8001726:	e002      	b.n	800172e <computeCRC8+0x4e>
            }else{
                crc = (crc << 1) & 0xFF;
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
        for(int bit = 0; bit < 8; ++bit){
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b07      	cmp	r3, #7
 8001738:	dde8      	ble.n	800170c <computeCRC8+0x2c>
    for(size_t i = 0; i < length; ++i){
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3301      	adds	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d3d7      	bcc.n	80016f8 <computeCRC8+0x18>
            }
        }
    }

    return crc;
 8001748:	7dfb      	ldrb	r3, [r7, #23]
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_write>:

int _write(int file, char *ptr, int len) {
 8001756:	b580      	push	{r7, lr}
 8001758:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800175c:	af00      	add	r7, sp, #0
 800175e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001762:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001766:	6018      	str	r0, [r3, #0]
 8001768:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800176c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001770:	6019      	str	r1, [r3, #0]
 8001772:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001776:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800177a:	601a      	str	r2, [r3, #0]
    uint8_t buffer[512];

    if(len + 1 > sizeof(buffer)){
 800177c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001780:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178c:	d902      	bls.n	8001794 <_write+0x3e>
        return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e04d      	b.n	8001830 <_write+0xda>
    }

    for(int i = 0; i < len; ++i){
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800179a:	e016      	b.n	80017ca <_write+0x74>
        buffer[i] = (uint8_t)ptr[i];
 800179c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80017a0:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80017a4:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	7819      	ldrb	r1, [r3, #0]
 80017ae:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017b2:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80017b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80017ba:	4413      	add	r3, r2
 80017bc:	460a      	mov	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < len; ++i){
 80017c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80017c4:	3301      	adds	r3, #1
 80017c6:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80017ca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017ce:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80017d2:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbdf      	blt.n	800179c <_write+0x46>
    }

    buffer[len] = computeCRC8(buffer, len);
 80017dc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017e0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff77 	bl	80016e0 <computeCRC8>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80017fa:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80017fe:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001802:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4413      	add	r3, r2
 800180a:	460a      	mov	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]

    CDC_Transmit_FS(buffer, len + 1);
 800180e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001812:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f008 f8d9 	bl	80099d8 <CDC_Transmit_FS>

    return len;
 8001826:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800182a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001840:	2104      	movs	r1, #4
 8001842:	4806      	ldr	r0, [pc, #24]	@ (800185c <Error_Handler+0x20>)
 8001844:	f001 fb00 	bl	8002e48 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800184c:	f000 ffc4 	bl	80027d8 <HAL_Delay>
	printf("ERR\r\n");
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <Error_Handler+0x24>)
 8001852:	f009 fe67 	bl	800b524 <puts>

  /* USER CODE END Error_Handler_Debug */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	48000400 	.word	0x48000400
 8001860:	0800ecc0 	.word	0x0800ecc0

08001864 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_SPI2_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <MX_SPI2_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_SPI2_Init+0x74>)
 8001870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_SPI2_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <MX_SPI2_Init+0x74>)
 800187e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001882:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_SPI2_Init+0x74>)
 8001886:	2202      	movs	r2, #2
 8001888:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_SPI2_Init+0x74>)
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_SPI2_Init+0x74>)
 8001892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001896:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_SPI2_Init+0x74>)
 800189a:	2220      	movs	r2, #32
 800189c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_SPI2_Init+0x74>)
 80018c4:	f003 ffde 	bl	8005884 <HAL_SPI_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f7ff ffb5 	bl	800183c <Error_Handler>
  }

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000448 	.word	0x20000448
 80018dc:	40003800 	.word	0x40003800

080018e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_SPI_MspInit+0x8c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12f      	bne.n	8001962 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_SPI_MspInit+0x90>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001906:	4a1a      	ldr	r2, [pc, #104]	@ (8001970 <HAL_SPI_MspInit+0x90>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800190c:	6593      	str	r3, [r2, #88]	@ 0x58
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <HAL_SPI_MspInit+0x90>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <HAL_SPI_MspInit+0x90>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191e:	4a14      	ldr	r2, [pc, #80]	@ (8001970 <HAL_SPI_MspInit+0x90>)
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_SPI_MspInit+0x90>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 8001932:	231a      	movs	r3, #26
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193e:	2303      	movs	r3, #3
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001942:	2305      	movs	r3, #5
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4809      	ldr	r0, [pc, #36]	@ (8001974 <HAL_SPI_MspInit+0x94>)
 800194e:	f001 f8b9 	bl	8002ac4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2024      	movs	r0, #36	@ 0x24
 8001958:	f001 f83d 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800195c:	2024      	movs	r0, #36	@ 0x24
 800195e:	f001 f856 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40003800 	.word	0x40003800
 8001970:	40021000 	.word	0x40021000
 8001974:	48000c00 	.word	0x48000c00

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_MspInit+0x44>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <HAL_MspInit+0x44>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	@ 0x60
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_MspInit+0x44>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_MspInit+0x44>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_MspInit+0x44>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_MspInit+0x44>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	bf00      	nop
 80019d4:	e7fd      	b.n	80019d2 <HardFault_Handler+0x4>

080019d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019da:	bf00      	nop
 80019dc:	e7fd      	b.n	80019da <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <BusFault_Handler+0x4>

080019e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ea:	bf00      	nop
 80019ec:	e7fd      	b.n	80019ea <UsageFault_Handler+0x4>

080019ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1c:	f000 febc 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <SPI2_IRQHandler+0x10>)
 8001a2a:	f003 ffcf 	bl	80059cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000448 	.word	0x20000448

08001a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <USART2_IRQHandler+0x10>)
 8001a3e:	f004 fab9 	bl	8005fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200004fc 	.word	0x200004fc

08001a4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <OTG_FS_IRQHandler+0x10>)
 8001a52:	f001 fc8c 	bl	800336e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20001ac0 	.word	0x20001ac0

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_kill>:

int _kill(int pid, int sig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7a:	f009 feb7 	bl	800b7ec <__errno>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
  return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_exit>:

void _exit (int status)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa2:	bf00      	nop
 8001aa4:	e7fd      	b.n	8001aa2 <_exit+0x12>

08001aa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e00a      	b.n	8001ace <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab8:	f3af 8000 	nop.w
 8001abc:	4601      	mov	r1, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	b2ca      	uxtb	r2, r1
 8001ac6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dbf0      	blt.n	8001ab8 <_read+0x12>
  }

  return len;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b08:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_isatty>:

int _isatty(int file)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b50:	4a14      	ldr	r2, [pc, #80]	@ (8001ba4 <_sbrk+0x5c>)
 8001b52:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <_sbrk+0x60>)
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <_sbrk+0x64>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <_sbrk+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d207      	bcs.n	8001b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b78:	f009 fe38 	bl	800b7ec <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	220c      	movs	r2, #12
 8001b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e009      	b.n	8001b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <_sbrk+0x64>)
 8001b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20018000 	.word	0x20018000
 8001ba8:	00000400 	.word	0x00000400
 8001bac:	200004ac 	.word	0x200004ac
 8001bb0:	20002018 	.word	0x20002018

08001bb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb8:	4b17      	ldr	r3, [pc, #92]	@ (8001c18 <SystemInit+0x64>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bbe:	4a16      	ldr	r2, [pc, #88]	@ (8001c18 <SystemInit+0x64>)
 8001bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <SystemInit+0x68>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <SystemInit+0x68>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <SystemInit+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <SystemInit+0x68>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <SystemInit+0x68>)
 8001be0:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001be4:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001be8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <SystemInit+0x68>)
 8001bec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001bf0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <SystemInit+0x68>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <SystemInit+0x68>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <SystemInit+0x68>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <SystemInit+0x64>)
 8001c06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00
 8001c1c:	40021000 	.word	0x40021000

08001c20 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001c30:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c32:	4a15      	ldr	r2, [pc, #84]	@ (8001c88 <MX_TIM6_Init+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c48:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c50:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c52:	f003 ffe8 	bl	8005c26 <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c5c:	f7ff fdee 	bl	800183c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MX_TIM6_Init+0x64>)
 8001c6e:	f004 f8cb 	bl	8005e08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c78:	f7ff fde0 	bl	800183c <Error_Handler>
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200004b0 	.word	0x200004b0
 8001c88:	40001000 	.word	0x40001000

08001c8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_TIM_Base_MspInit+0x38>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	4a09      	ldr	r2, [pc, #36]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_TIM_Base_MspInit+0x3c>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40001000 	.word	0x40001000
 8001cc8:	40021000 	.word	0x40021000

08001ccc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cd2:	4a15      	ldr	r2, [pc, #84]	@ (8001d28 <MX_USART2_UART_Init+0x5c>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cd6:	4b13      	ldr	r3, [pc, #76]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_USART2_UART_Init+0x58>)
 8001d10:	f004 f902 	bl	8005f18 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d1a:	f7ff fd8f 	bl	800183c <Error_Handler>
  }

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200004fc 	.word	0x200004fc
 8001d28:	40004400 	.word	0x40004400

08001d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1b      	ldr	r2, [pc, #108]	@ (8001db8 <HAL_UART_MspInit+0x8c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12f      	bne.n	8001dae <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d6c:	f043 0308 	orr.w	r3, r3, #8
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_UART_MspInit+0x90>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d7e:	2360      	movs	r3, #96	@ 0x60
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d8e:	2307      	movs	r3, #7
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4809      	ldr	r0, [pc, #36]	@ (8001dc0 <HAL_UART_MspInit+0x94>)
 8001d9a:	f000 fe93 	bl	8002ac4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2026      	movs	r0, #38	@ 0x26
 8001da4:	f000 fe17 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001da8:	2026      	movs	r0, #38	@ 0x26
 8001daa:	f000 fe30 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000c00 	.word	0x48000c00

08001dc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dfc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc8:	f7ff fef4 	bl	8001bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001dcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dce:	e003      	b.n	8001dd8 <LoopCopyDataInit>

08001dd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001dd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dd6:	3104      	adds	r1, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001dd8:	480a      	ldr	r0, [pc, #40]	@ (8001e04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ddc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001dde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001de0:	d3f6      	bcc.n	8001dd0 <CopyDataInit>
	ldr	r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001de4:	e002      	b.n	8001dec <LoopFillZerobss>

08001de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001de6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001de8:	f842 3b04 	str.w	r3, [r2], #4

08001dec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <LoopForever+0x16>)
	cmp	r2, r3
 8001dee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001df0:	d3f9      	bcc.n	8001de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df2:	f009 fd01 	bl	800b7f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001df6:	f7ff fb97 	bl	8001528 <main>

08001dfa <LoopForever>:

LoopForever:
    b LoopForever
 8001dfa:	e7fe      	b.n	8001dfa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dfc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001e00:	0800f194 	.word	0x0800f194
	ldr	r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e08:	200003c0 	.word	0x200003c0
	ldr	r2, =_sbss
 8001e0c:	200003c0 	.word	0x200003c0
	ldr	r3, = _ebss
 8001e10:	20002014 	.word	0x20002014

08001e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC1_2_IRQHandler>

08001e16 <LSM303C_AccInit>:
  * @brief  Set LSM303C Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303C_AccInit(uint16_t InitStruct)
{  
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  ACCELERO_IO_Init();
 8001e24:	f000 fa9c 	bl	8002360 <ACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	2020      	movs	r0, #32
 8001e32:	f000 fac1 	bl	80023b8 <ACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, ctrl);
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	4619      	mov	r1, r3
 8001e42:	2023      	movs	r0, #35	@ 0x23
 8001e44:	f000 fab8 	bl	80023b8 <ACCELERO_IO_Write>
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <LSM303C_AccDeInit>:
  * @brief  LSM303C Accelerometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_AccDeInit(void)
{  
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LSM303C_AccReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_AccReadID(void)
{  
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001e64:	2300      	movs	r3, #0
 8001e66:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  ACCELERO_IO_Init();
 8001e68:	f000 fa7a 	bl	8002360 <ACCELERO_IO_Init>
  
  /* Enabled SPI/I2C read communication */
  ACCELERO_IO_Write(LSM303C_CTRL_REG4_A, 0x5);
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	2023      	movs	r0, #35	@ 0x23
 8001e70:	f000 faa2 	bl	80023b8 <ACCELERO_IO_Write>
  
  /* Read value at Who am I register address */
  ctrl = ACCELERO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 8001e74:	200f      	movs	r0, #15
 8001e76:	f000 fad1 	bl	800241c <ACCELERO_IO_Read>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <LSM303C_AccLowPower>:
  * @param  Mode equal to LSM303C_ACC_ODR_OFF means enable Low Power Mode, otherwise Output data rate is set.
  *         This parameter can be a value of @ref Acc_OutPut_DataRate_Selection
  * @retval None 
  */
void LSM303C_AccLowPower(uint16_t Mode)
{  
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = ACCELERO_IO_Read(LSM303C_CTRL_REG1_A);
 8001e96:	2020      	movs	r0, #32
 8001e98:	f000 fac0 	bl	800241c <ACCELERO_IO_Read>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_ACC_ODR_BITPOSITION);
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea6:	73fb      	strb	r3, [r7, #15]

  /* Set Power down */
  ctrl |= (uint8_t)Mode;
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG1_A, ctrl);
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	2020      	movs	r0, #32
 8001eb8:	f000 fa7e 	bl	80023b8 <ACCELERO_IO_Write>
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <LSM303C_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303C_AccFilterConfig(uint8_t FilterStruct) 
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  
//  /* Read CTRL_REG2 register */
//  tmpreg = ACCELERO_IO_Read(LSM303C_CTRL_REG2_A);
//  
//  tmpreg &= 0x0C;
  tmpreg = FilterStruct;
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(LSM303C_CTRL_REG2_A, tmpreg);
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	2021      	movs	r0, #33	@ 0x21
 8001ed8:	f000 fa6e 	bl	80023b8 <ACCELERO_IO_Write>
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <LSM303C_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_AccReadXYZ(int16_t* pData)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001eec:	2300      	movs	r3, #0
 8001eee:	82bb      	strh	r3, [r7, #20]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = ACCELERO_IO_Read(LSM303C_CTRL_REG4_A);
 8001ef8:	2023      	movs	r0, #35	@ 0x23
 8001efa:	f000 fa8f 	bl	800241c <ACCELERO_IO_Read>
 8001efe:	4603      	mov	r3, r0
 8001f00:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = ACCELERO_IO_Read(LSM303C_CTRL_REG5_A);
 8001f02:	2024      	movs	r0, #36	@ 0x24
 8001f04:	f000 fa8a 	bl	800241c <ACCELERO_IO_Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = ACCELERO_IO_Read(LSM303C_OUT_X_L_A); 
 8001f0c:	2028      	movs	r0, #40	@ 0x28
 8001f0e:	f000 fa85 	bl	800241c <ACCELERO_IO_Read>
 8001f12:	4603      	mov	r3, r0
 8001f14:	733b      	strb	r3, [r7, #12]
  buffer[1] = ACCELERO_IO_Read(LSM303C_OUT_X_H_A);
 8001f16:	2029      	movs	r0, #41	@ 0x29
 8001f18:	f000 fa80 	bl	800241c <ACCELERO_IO_Read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	737b      	strb	r3, [r7, #13]
  buffer[2] = ACCELERO_IO_Read(LSM303C_OUT_Y_L_A);
 8001f20:	202a      	movs	r0, #42	@ 0x2a
 8001f22:	f000 fa7b 	bl	800241c <ACCELERO_IO_Read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73bb      	strb	r3, [r7, #14]
  buffer[3] = ACCELERO_IO_Read(LSM303C_OUT_Y_H_A);
 8001f2a:	202b      	movs	r0, #43	@ 0x2b
 8001f2c:	f000 fa76 	bl	800241c <ACCELERO_IO_Read>
 8001f30:	4603      	mov	r3, r0
 8001f32:	73fb      	strb	r3, [r7, #15]
  buffer[4] = ACCELERO_IO_Read(LSM303C_OUT_Z_L_A);
 8001f34:	202c      	movs	r0, #44	@ 0x2c
 8001f36:	f000 fa71 	bl	800241c <ACCELERO_IO_Read>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	743b      	strb	r3, [r7, #16]
  buffer[5] = ACCELERO_IO_Read(LSM303C_OUT_Z_H_A);
 8001f3e:	202d      	movs	r0, #45	@ 0x2d
 8001f40:	f000 fa6c 	bl	800241c <ACCELERO_IO_Read>
 8001f44:	4603      	mov	r3, r0
 8001f46:	747b      	strb	r3, [r7, #17]
  
  for(i=0; i<3; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
 8001f4c:	e01a      	b.n	8001f84 <LSM303C_AccReadXYZ+0xa0>
  {
    pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	3301      	adds	r3, #1
 8001f54:	3320      	adds	r3, #32
 8001f56:	443b      	add	r3, r7
 8001f58:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	7ffa      	ldrb	r2, [r7, #31]
 8001f62:	0052      	lsls	r2, r2, #1
 8001f64:	3220      	adds	r2, #32
 8001f66:	443a      	add	r2, r7
 8001f68:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	7ffb      	ldrb	r3, [r7, #31]
 8001f72:	b212      	sxth	r2, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	3320      	adds	r3, #32
 8001f78:	443b      	add	r3, r7
 8001f7a:	f823 2c08 	strh.w	r2, [r3, #-8]
  for(i=0; i<3; i++)
 8001f7e:	7ffb      	ldrb	r3, [r7, #31]
 8001f80:	3301      	adds	r3, #1
 8001f82:	77fb      	strb	r3, [r7, #31]
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d9e1      	bls.n	8001f4e <LSM303C_AccReadXYZ+0x6a>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303C_ACC_FULLSCALE_8G)
 8001f8a:	7d3b      	ldrb	r3, [r7, #20]
 8001f8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001f90:	2b30      	cmp	r3, #48	@ 0x30
 8001f92:	d00c      	beq.n	8001fae <LSM303C_AccReadXYZ+0xca>
 8001f94:	2b30      	cmp	r3, #48	@ 0x30
 8001f96:	dc0d      	bgt.n	8001fb4 <LSM303C_AccReadXYZ+0xd0>
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <LSM303C_AccReadXYZ+0xbe>
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d003      	beq.n	8001fa8 <LSM303C_AccReadXYZ+0xc4>
 8001fa0:	e008      	b.n	8001fb4 <LSM303C_AccReadXYZ+0xd0>
  {
  case LSM303C_ACC_FULLSCALE_2G:
    sensitivity = LSM303C_ACC_SENSITIVITY_2G;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	77bb      	strb	r3, [r7, #30]
    break;
 8001fa6:	e005      	b.n	8001fb4 <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_4G:
    sensitivity = LSM303C_ACC_SENSITIVITY_4G;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	77bb      	strb	r3, [r7, #30]
    break;
 8001fac:	e002      	b.n	8001fb4 <LSM303C_AccReadXYZ+0xd0>
  case LSM303C_ACC_FULLSCALE_8G:
    sensitivity = LSM303C_ACC_SENSITIVITY_8G;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	77bb      	strb	r3, [r7, #30]
    break;
 8001fb2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
 8001fb8:	e014      	b.n	8001fe4 <LSM303C_AccReadXYZ+0x100>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	3320      	adds	r3, #32
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	7fbb      	ldrb	r3, [r7, #30]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	fb12 f303 	smulbb	r3, r2, r3
 8001fd0:	b299      	uxth	r1, r3
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	b20a      	sxth	r2, r1
 8001fdc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	77fb      	strb	r3, [r7, #31]
 8001fe4:	7ffb      	ldrb	r3, [r7, #31]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d9e7      	bls.n	8001fba <LSM303C_AccReadXYZ+0xd6>
  }
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <LSM303C_MagInit>:
  * @param  LSM303C_InitStruct: pointer to a LSM303C_MagInitTypeDef structure 
  *         that contains the configuration setting for the LSM303C.
  * @retval None
  */
void LSM303C_MagInit(MAGNETO_InitTypeDef LSM303C_InitStruct)
{  
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	e883 0003 	stmia.w	r3, {r0, r1}
  MAGNETO_IO_Write(LSM303C_CTRL_REG1_M, LSM303C_InitStruct.Register1);
 8002000:	783b      	ldrb	r3, [r7, #0]
 8002002:	4619      	mov	r1, r3
 8002004:	2020      	movs	r0, #32
 8002006:	f000 fa79 	bl	80024fc <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG2_M, LSM303C_InitStruct.Register2);
 800200a:	787b      	ldrb	r3, [r7, #1]
 800200c:	4619      	mov	r1, r3
 800200e:	2021      	movs	r0, #33	@ 0x21
 8002010:	f000 fa74 	bl	80024fc <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, LSM303C_InitStruct.Register3);
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	4619      	mov	r1, r3
 8002018:	2022      	movs	r0, #34	@ 0x22
 800201a:	f000 fa6f 	bl	80024fc <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG4_M, LSM303C_InitStruct.Register4);
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	4619      	mov	r1, r3
 8002022:	2023      	movs	r0, #35	@ 0x23
 8002024:	f000 fa6a 	bl	80024fc <MAGNETO_IO_Write>
  MAGNETO_IO_Write(LSM303C_CTRL_REG5_M, LSM303C_InitStruct.Register5);
 8002028:	793b      	ldrb	r3, [r7, #4]
 800202a:	4619      	mov	r1, r3
 800202c:	2024      	movs	r0, #36	@ 0x24
 800202e:	f000 fa65 	bl	80024fc <MAGNETO_IO_Write>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <LSM303C_MagDeInit>:
  * @brief  LSM303C Magnetometer De-initialization.
  * @param  None
  * @retval None
  */
void LSM303C_MagDeInit(void)
{  
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LSM303C_MagReadID>:
  * @brief  Read LSM303C ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303C_MagReadID(void)
{  
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Low level init */
  MAGNETO_IO_Init();
 800204c:	f000 fa2a 	bl	80024a4 <MAGNETO_IO_Init>
  
  /* Enabled the SPI/I2C read operation */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, 0x84);
 8002050:	2184      	movs	r1, #132	@ 0x84
 8002052:	2022      	movs	r0, #34	@ 0x22
 8002054:	f000 fa52 	bl	80024fc <MAGNETO_IO_Write>
  
  /* Read value at Who am I register address */
  return MAGNETO_IO_Read(LSM303C_WHO_AM_I_ADDR);
 8002058:	200f      	movs	r0, #15
 800205a:	f000 fa81 	bl	8002560 <MAGNETO_IO_Read>
 800205e:	4603      	mov	r3, r0
}
 8002060:	4618      	mov	r0, r3
 8002062:	bd80      	pop	{r7, pc}

08002064 <LSM303C_MagLowPower>:
  * @param  Mode equal to LSM303C_MAG_POWERDOWN2_MODE means enable deepest Low Power Mode, otherwise other mode is set.
  *         This parameter can be a value of @ref Mag_Operation_Mode
  * @retval None 
  */
void LSM303C_MagLowPower(uint16_t Mode)
{  
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = MAGNETO_IO_Read(LSM303C_CTRL_REG3_M);
 8002072:	2022      	movs	r0, #34	@ 0x22
 8002074:	f000 fa74 	bl	8002560 <MAGNETO_IO_Read>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]

  /* Clear ODR bits */
  ctrl &= ~(LSM303C_MAG_SELECTION_MODE);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	73fb      	strb	r3, [r7, #15]

  /* Set mode */
  ctrl |= (uint8_t)Mode;
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	4313      	orrs	r3, r2
 800208c:	73fb      	strb	r3, [r7, #15]
  
  /* write back control register */
  MAGNETO_IO_Write(LSM303C_CTRL_REG3_M, ctrl);
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	4619      	mov	r1, r3
 8002092:	2022      	movs	r0, #34	@ 0x22
 8002094:	f000 fa32 	bl	80024fc <MAGNETO_IO_Write>
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <LSM303C_MagReadXYZ>:
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303C_MagReadXYZ(int16_t* pData)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint8_t ctrlx;
  uint8_t buffer[6];
  uint8_t i=0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  /* Read the magnetometer control register content */
  ctrlx = MAGNETO_IO_Read(LSM303C_CTRL_REG4_M);
 80020ac:	2023      	movs	r0, #35	@ 0x23
 80020ae:	f000 fa57 	bl	8002560 <MAGNETO_IO_Read>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73bb      	strb	r3, [r7, #14]

  /* Read output register X, Y & Z magnetometer */
  buffer[0] = MAGNETO_IO_Read(LSM303C_OUT_X_L_M); 
 80020b6:	2028      	movs	r0, #40	@ 0x28
 80020b8:	f000 fa52 	bl	8002560 <MAGNETO_IO_Read>
 80020bc:	4603      	mov	r3, r0
 80020be:	723b      	strb	r3, [r7, #8]
  buffer[1] = MAGNETO_IO_Read(LSM303C_OUT_X_H_M);
 80020c0:	2029      	movs	r0, #41	@ 0x29
 80020c2:	f000 fa4d 	bl	8002560 <MAGNETO_IO_Read>
 80020c6:	4603      	mov	r3, r0
 80020c8:	727b      	strb	r3, [r7, #9]
  buffer[2] = MAGNETO_IO_Read(LSM303C_OUT_Y_L_M);
 80020ca:	202a      	movs	r0, #42	@ 0x2a
 80020cc:	f000 fa48 	bl	8002560 <MAGNETO_IO_Read>
 80020d0:	4603      	mov	r3, r0
 80020d2:	72bb      	strb	r3, [r7, #10]
  buffer[3] = MAGNETO_IO_Read(LSM303C_OUT_Y_H_M);
 80020d4:	202b      	movs	r0, #43	@ 0x2b
 80020d6:	f000 fa43 	bl	8002560 <MAGNETO_IO_Read>
 80020da:	4603      	mov	r3, r0
 80020dc:	72fb      	strb	r3, [r7, #11]
  buffer[4] = MAGNETO_IO_Read(LSM303C_OUT_Z_L_M);
 80020de:	202c      	movs	r0, #44	@ 0x2c
 80020e0:	f000 fa3e 	bl	8002560 <MAGNETO_IO_Read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	733b      	strb	r3, [r7, #12]
  buffer[5] = MAGNETO_IO_Read(LSM303C_OUT_Z_H_M);
 80020e8:	202d      	movs	r0, #45	@ 0x2d
 80020ea:	f000 fa39 	bl	8002560 <MAGNETO_IO_Read>
 80020ee:	4603      	mov	r3, r0
 80020f0:	737b      	strb	r3, [r7, #13]
  
  /* Check in the control register4 the data alignment*/
  if((ctrlx & LSM303C_MAG_BLE_MSB)) 
 80020f2:	7bbb      	ldrb	r3, [r7, #14]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <LSM303C_MagReadXYZ+0x9e>
  {
    for(i=0; i<3; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e019      	b.n	8002136 <LSM303C_MagReadXYZ+0x96>
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	3310      	adds	r3, #16
 8002108:	443b      	add	r3, r7
 800210a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	0052      	lsls	r2, r2, #1
 8002116:	3201      	adds	r2, #1
 8002118:	3210      	adds	r2, #16
 800211a:	443a      	add	r2, r7
 800211c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002120:	4413      	add	r3, r2
 8002122:	b299      	uxth	r1, r3
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	b20a      	sxth	r2, r1
 800212e:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	3301      	adds	r3, #1
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d9e2      	bls.n	8002102 <LSM303C_MagReadXYZ+0x62>
    for(i=0; i<3; i++)
    {
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
    }
  }
}
 800213c:	e01f      	b.n	800217e <LSM303C_MagReadXYZ+0xde>
    for(i=0; i<3; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e019      	b.n	8002178 <LSM303C_MagReadXYZ+0xd8>
      pData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	3301      	adds	r3, #1
 800214a:	3310      	adds	r3, #16
 800214c:	443b      	add	r3, r7
 800214e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	0052      	lsls	r2, r2, #1
 800215a:	3210      	adds	r2, #16
 800215c:	443a      	add	r2, r7
 800215e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002162:	4413      	add	r3, r2
 8002164:	b299      	uxth	r1, r3
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	b20a      	sxth	r2, r1
 8002170:	801a      	strh	r2, [r3, #0]
    for(i=0; i<3; i++)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3301      	adds	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d9e2      	bls.n	8002144 <LSM303C_MagReadXYZ+0xa4>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800218c:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <SPIx_Init+0x70>)
 800218e:	f003 fd27 	bl	8005be0 <HAL_SPI_GetState>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d12c      	bne.n	80021f2 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002198:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <SPIx_Init+0x70>)
 800219a:	4a18      	ldr	r2, [pc, #96]	@ (80021fc <SPIx_Init+0x74>)
 800219c:	601a      	str	r2, [r3, #0]
    /* SPI baudrate is set to 10 MHz (PCLK1/SPI_BaudRatePrescaler = 80/8 = 10 MHz)
      to verify these constraints:
      lsm303c SPI interface max baudrate is 10MHz for write/read
      PCLK1 max frequency is set to 80 MHz
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <SPIx_Init+0x70>)
 80021a0:	2210      	movs	r2, #16
 80021a2:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <SPIx_Init+0x70>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <SPIx_Init+0x70>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b0:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <SPIx_Init+0x70>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <SPIx_Init+0x70>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <SPIx_Init+0x70>)
 80021be:	2207      	movs	r2, #7
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <SPIx_Init+0x70>)
 80021c4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80021c8:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <SPIx_Init+0x70>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80021d0:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <SPIx_Init+0x70>)
 80021d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d6:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <SPIx_Init+0x70>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <SPIx_Init+0x70>)
 80021e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021e4:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80021e6:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <SPIx_Init+0x70>)
 80021e8:	f000 f80a 	bl	8002200 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <SPIx_Init+0x70>)
 80021ee:	f003 fb49 	bl	8005884 <HAL_SPI_Init>
  }
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000057c 	.word	0x2000057c
 80021fc:	40003800 	.word	0x40003800

08002200 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8002208:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <SPIx_MspInit+0x60>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <SPIx_MspInit+0x60>)
 800220e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002212:	6593      	str	r3, [r2, #88]	@ 0x58
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <SPIx_MspInit+0x60>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]

  /* enable SPIx gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002220:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <SPIx_MspInit+0x60>)
 8002222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002224:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <SPIx_MspInit+0x60>)
 8002226:	f043 0308 	orr.w	r3, r3, #8
 800222a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <SPIx_MspInit+0x60>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]

  /* configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002238:	231a      	movs	r3, #26
 800223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; // GPIO_PULLDOWN;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002244:	2302      	movs	r3, #2
 8002246:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002248:	2305      	movs	r3, #5
 800224a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	4804      	ldr	r0, [pc, #16]	@ (8002264 <SPIx_MspInit+0x64>)
 8002254:	f000 fc36 	bl	8002ac4 <HAL_GPIO_Init>
}
 8002258:	bf00      	nop
 800225a:	3728      	adds	r7, #40	@ 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	48000c00 	.word	0x48000c00

08002268 <SPIx_Write>:
  * @brief  Sends a Byte through the SPI interface.
  * @param  Byte : Byte to send.
  * @retval none.
  */
static void SPIx_Write(uint8_t Byte)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  /* Enable the SPI */
  __HAL_SPI_ENABLE(&SpiHandle);
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <SPIx_Write+0x60>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <SPIx_Write+0x60>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]
  /* check TXE flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8002282:	bf00      	nop
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <SPIx_Write+0x60>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d1f8      	bne.n	8002284 <SPIx_Write+0x1c>

  /* Write the data */
  *((__IO uint8_t *)&SpiHandle.Instance->DR) = Byte;
 8002292:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <SPIx_Write+0x60>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	79fa      	ldrb	r2, [r7, #7]
 800229a:	701a      	strb	r2, [r3, #0]

  /* Wait BSY flag */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800229c:	bf00      	nop
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <SPIx_Write+0x60>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a8:	2b80      	cmp	r3, #128	@ 0x80
 80022aa:	d0f8      	beq.n	800229e <SPIx_Write+0x36>

  /* disable the SPI */
  __HAL_SPI_DISABLE(&SpiHandle);
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SPIx_Write+0x60>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <SPIx_Write+0x60>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	2000057c 	.word	0x2000057c

080022cc <SPIx_Read>:
/**
  * @brief  Receives a Byte from the SPI bus.
  * @retval The received byte value
  */
static uint8_t SPIx_Read(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  uint8_t receivedbyte;

  __HAL_SPI_ENABLE(&SpiHandle);
 80022d2:	4b22      	ldr	r3, [pc, #136]	@ (800235c <SPIx_Read+0x90>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b20      	ldr	r3, [pc, #128]	@ (800235c <SPIx_Read+0x90>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022e0:	601a      	str	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022e2:	f3bf 8f4f 	dsb	sy
}
 80022e6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80022e8:	f3bf 8f4f 	dsb	sy
}
 80022ec:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80022ee:	f3bf 8f4f 	dsb	sy
}
 80022f2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80022f4:	f3bf 8f4f 	dsb	sy
}
 80022f8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80022fa:	f3bf 8f4f 	dsb	sy
}
 80022fe:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002300:	f3bf 8f4f 	dsb	sy
}
 8002304:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8002306:	f3bf 8f4f 	dsb	sy
}
 800230a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800230c:	f3bf 8f4f 	dsb	sy
}
 8002310:	bf00      	nop
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __DSB();
  __HAL_SPI_DISABLE(&SpiHandle);
 8002312:	4b12      	ldr	r3, [pc, #72]	@ (800235c <SPIx_Read+0x90>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <SPIx_Read+0x90>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002320:	601a      	str	r2, [r3, #0]

  while ((SpiHandle.Instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 8002322:	bf00      	nop
 8002324:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <SPIx_Read+0x90>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d1f8      	bne.n	8002324 <SPIx_Read+0x58>
  /* read the received data */
  receivedbyte = *(__IO uint8_t *)&SpiHandle.Instance->DR;
 8002332:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <SPIx_Read+0x90>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	71fb      	strb	r3, [r7, #7]

  /* Wait for the BSY flag reset */
  while ((SpiHandle.Instance->SR & SPI_FLAG_BSY) == SPI_FLAG_BSY);
 800233c:	bf00      	nop
 800233e:	4b07      	ldr	r3, [pc, #28]	@ (800235c <SPIx_Read+0x90>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002348:	2b80      	cmp	r3, #128	@ 0x80
 800234a:	d0f8      	beq.n	800233e <SPIx_Read+0x72>


  return receivedbyte;
 800234c:	79fb      	ldrb	r3, [r7, #7]
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	2000057c 	.word	0x2000057c

08002360 <ACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS/ACCELEROMETER io interface.
  * @retval None
  */
void ACCELERO_IO_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <ACCELERO_IO_Init+0x50>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <ACCELERO_IO_Init+0x50>)
 800236c:	f043 0310 	orr.w	r3, r3, #16
 8002370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002372:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <ACCELERO_IO_Init+0x50>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800237e:	2301      	movs	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002382:	2301      	movs	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4808      	ldr	r0, [pc, #32]	@ (80023b4 <ACCELERO_IO_Init+0x54>)
 8002394:	f000 fb96 	bl	8002ac4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  ACCELERO_CS_HIGH();
 8002398:	2201      	movs	r2, #1
 800239a:	2101      	movs	r1, #1
 800239c:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <ACCELERO_IO_Init+0x54>)
 800239e:	f000 fd3b 	bl	8002e18 <HAL_GPIO_WritePin>

  SPIx_Init();
 80023a2:	f7ff fef1 	bl	8002188 <SPIx_Init>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48001000 	.word	0x48001000

080023b8 <ACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void ACCELERO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	460a      	mov	r2, r1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71bb      	strb	r3, [r7, #6]
  ACCELERO_CS_LOW();
 80023c8:	2200      	movs	r2, #0
 80023ca:	2101      	movs	r1, #1
 80023cc:	4811      	ldr	r0, [pc, #68]	@ (8002414 <ACCELERO_IO_Write+0x5c>)
 80023ce:	f000 fd23 	bl	8002e18 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <ACCELERO_IO_Write+0x60>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <ACCELERO_IO_Write+0x60>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <ACCELERO_IO_Write+0x60>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <ACCELERO_IO_Write+0x60>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80023f0:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff37 	bl	8002268 <SPIx_Write>
  SPIx_Write(Value);
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff33 	bl	8002268 <SPIx_Write>
  ACCELERO_CS_HIGH();
 8002402:	2201      	movs	r2, #1
 8002404:	2101      	movs	r1, #1
 8002406:	4803      	ldr	r0, [pc, #12]	@ (8002414 <ACCELERO_IO_Write+0x5c>)
 8002408:	f000 fd06 	bl	8002e18 <HAL_GPIO_WritePin>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	48001000 	.word	0x48001000
 8002418:	2000057c 	.word	0x2000057c

0800241c <ACCELERO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS / ACCELEROMETER.
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t ACCELERO_IO_Read(uint8_t RegisterAddr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  RegisterAddr = RegisterAddr | ((uint8_t)0x80);
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800242c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_CS_LOW();
 800242e:	2200      	movs	r2, #0
 8002430:	2101      	movs	r1, #1
 8002432:	481a      	ldr	r0, [pc, #104]	@ (800249c <ACCELERO_IO_Read+0x80>)
 8002434:	f000 fcf0 	bl	8002e18 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002456:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff04 	bl	8002268 <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <ACCELERO_IO_Read+0x84>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800247e:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 8002480:	f7ff ff24 	bl	80022cc <SPIx_Read>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]
  ACCELERO_CS_HIGH();
 8002488:	2201      	movs	r2, #1
 800248a:	2101      	movs	r1, #1
 800248c:	4803      	ldr	r0, [pc, #12]	@ (800249c <ACCELERO_IO_Read+0x80>)
 800248e:	f000 fcc3 	bl	8002e18 <HAL_GPIO_WritePin>
  return val;
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	48001000 	.word	0x48001000
 80024a0:	2000057c 	.word	0x2000057c

080024a4 <MAGNETO_IO_Init>:
/**
  * @brief  Configures COMPASS/MAGNETO SPI interface.
  * @retval None
  */
void MAGNETO_IO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */
  MAGNETO_CS_GPIO_CLK_ENABLE();
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <MAGNETO_IO_Init+0x50>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a11      	ldr	r2, [pc, #68]	@ (80024f4 <MAGNETO_IO_Init+0x50>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b6:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <MAGNETO_IO_Init+0x50>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
  GPIO_InitStructure.Pin = MAGNETO_CS_PIN;
 80024c2:	2301      	movs	r3, #1
 80024c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80024c6:	2301      	movs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MAGNETO_CS_GPIO_PORT, &GPIO_InitStructure);
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4808      	ldr	r0, [pc, #32]	@ (80024f8 <MAGNETO_IO_Init+0x54>)
 80024d8:	f000 faf4 	bl	8002ac4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  MAGNETO_CS_HIGH();
 80024dc:	2201      	movs	r2, #1
 80024de:	2101      	movs	r1, #1
 80024e0:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <MAGNETO_IO_Init+0x54>)
 80024e2:	f000 fc99 	bl	8002e18 <HAL_GPIO_WritePin>

  SPIx_Init();
 80024e6:	f7ff fe4f 	bl	8002188 <SPIx_Init>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	48000800 	.word	0x48000800

080024fc <MAGNETO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS/MAGNETO register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void MAGNETO_IO_Write(uint8_t RegisterAddr, uint8_t Value)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	460a      	mov	r2, r1
 8002506:	71fb      	strb	r3, [r7, #7]
 8002508:	4613      	mov	r3, r2
 800250a:	71bb      	strb	r3, [r7, #6]
  MAGNETO_CS_LOW();
 800250c:	2200      	movs	r2, #0
 800250e:	2101      	movs	r1, #1
 8002510:	4811      	ldr	r0, [pc, #68]	@ (8002558 <MAGNETO_IO_Write+0x5c>)
 8002512:	f000 fc81 	bl	8002e18 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <MAGNETO_IO_Write+0x60>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <MAGNETO_IO_Write+0x60>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <MAGNETO_IO_Write+0x60>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <MAGNETO_IO_Write+0x60>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002534:	601a      	str	r2, [r3, #0]
  /* call SPI Read data bus function */
  SPIx_Write(RegisterAddr);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fe95 	bl	8002268 <SPIx_Write>
  SPIx_Write(Value);
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fe91 	bl	8002268 <SPIx_Write>
  MAGNETO_CS_HIGH();
 8002546:	2201      	movs	r2, #1
 8002548:	2101      	movs	r1, #1
 800254a:	4803      	ldr	r0, [pc, #12]	@ (8002558 <MAGNETO_IO_Write+0x5c>)
 800254c:	f000 fc64 	bl	8002e18 <HAL_GPIO_WritePin>
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	48000800 	.word	0x48000800
 800255c:	2000057c 	.word	0x2000057c

08002560 <MAGNETO_IO_Read>:
  * @brief  Reads a block of data from the COMPASS/MAGNETO.
  * @param  RegisterAddr : specifies the COMPASS/MAGNETO internal address register to read from
  * @retval ACCELEROMETER register value
  */
uint8_t MAGNETO_IO_Read(uint8_t RegisterAddr)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  MAGNETO_CS_LOW();
 800256a:	2200      	movs	r2, #0
 800256c:	2101      	movs	r1, #1
 800256e:	481c      	ldr	r0, [pc, #112]	@ (80025e0 <MAGNETO_IO_Read+0x80>)
 8002570:	f000 fc52 	bl	8002e18 <HAL_GPIO_WritePin>
  __SPI_DIRECTION_1LINE_TX(&SpiHandle);
 8002574:	4b1b      	ldr	r3, [pc, #108]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002592:	601a      	str	r2, [r3, #0]
  SPIx_Write(RegisterAddr | 0x80);
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800259a:	b2db      	uxtb	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fe63 	bl	8002268 <SPIx_Write>
  __SPI_DIRECTION_1LINE_RX(&SpiHandle);
 80025a2:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 4244 	bic.w	r2, r2, #50176	@ 0xc400
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <MAGNETO_IO_Read+0x84>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025c0:	601a      	str	r2, [r3, #0]
  uint8_t val = SPIx_Read();
 80025c2:	f7ff fe83 	bl	80022cc <SPIx_Read>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
  MAGNETO_CS_HIGH();
 80025ca:	2201      	movs	r2, #1
 80025cc:	2101      	movs	r1, #1
 80025ce:	4804      	ldr	r0, [pc, #16]	@ (80025e0 <MAGNETO_IO_Read+0x80>)
 80025d0:	f000 fc22 	bl	8002e18 <HAL_GPIO_WritePin>
  return val;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	48000800 	.word	0x48000800
 80025e4:	2000057c 	.word	0x2000057c

080025e8 <BSP_COMPASS_Init>:
/**
  * @brief  Initialize the COMPASS.
  * @retval COMPASS_OK or COMPASS_ERROR
  */
COMPASS_StatusTypeDef BSP_COMPASS_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
  COMPASS_StatusTypeDef ret = COMPASS_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	77fb      	strb	r3, [r7, #31]
  uint16_t ctrl = 0x0000;
 80025f2:	2300      	movs	r3, #0
 80025f4:	83bb      	strh	r3, [r7, #28]
  ACCELERO_InitTypeDef LSM303C_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303C_FilterStructure;
  MAGNETO_InitTypeDef LSM303C_InitStructureMag;

  if (Lsm303cDrv_accelero.ReadID() != LMS303C_ACC_ID)
 80025f6:	4b36      	ldr	r3, [pc, #216]	@ (80026d0 <BSP_COMPASS_Init+0xe8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4798      	blx	r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b41      	cmp	r3, #65	@ 0x41
 8002600:	d002      	beq.n	8002608 <BSP_COMPASS_Init+0x20>
  {
    ret = COMPASS_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]
 8002606:	e040      	b.n	800268a <BSP_COMPASS_Init+0xa2>
  }
  else
  {
    /* Initialize the COMPASS accelerometer driver structure */
    AccelerometerDrv = &Lsm303cDrv_accelero;
 8002608:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <BSP_COMPASS_Init+0xec>)
 800260a:	4a31      	ldr	r2, [pc, #196]	@ (80026d0 <BSP_COMPASS_Init+0xe8>)
 800260c:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS accelerometer structure */
    LSM303C_InitStructure.AccOutput_DataRate = LSM303C_ACC_ODR_50_HZ;
 800260e:	2320      	movs	r3, #32
 8002610:	757b      	strb	r3, [r7, #21]
    LSM303C_InitStructure.Axes_Enable = LSM303C_ACC_AXES_ENABLE;
 8002612:	2307      	movs	r3, #7
 8002614:	75bb      	strb	r3, [r7, #22]
    LSM303C_InitStructure.AccFull_Scale = LSM303C_ACC_FULLSCALE_2G;
 8002616:	2300      	movs	r3, #0
 8002618:	76bb      	strb	r3, [r7, #26]
    LSM303C_InitStructure.BlockData_Update = LSM303C_ACC_BDU_CONTINUOUS;
 800261a:	2300      	movs	r3, #0
 800261c:	763b      	strb	r3, [r7, #24]
    LSM303C_InitStructure.High_Resolution = LSM303C_ACC_HR_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    LSM303C_InitStructure.Communication_Mode = LSM303C_ACC_SPI_MODE;
 8002622:	2301      	movs	r3, #1
 8002624:	76fb      	strb	r3, [r7, #27]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002626:	7dfa      	ldrb	r2, [r7, #23]
 8002628:	7d7b      	ldrb	r3, [r7, #21]
 800262a:	4313      	orrs	r3, r2
 800262c:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 800262e:	7dbb      	ldrb	r3, [r7, #22]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002630:	4313      	orrs	r3, r2
 8002632:	b2da      	uxtb	r2, r3
            LSM303C_InitStructure.Axes_Enable | LSM303C_InitStructure.BlockData_Update);
 8002634:	7e3b      	ldrb	r3, [r7, #24]
    ctrl = (LSM303C_InitStructure.High_Resolution | LSM303C_InitStructure.AccOutput_DataRate | \
 8002636:	4313      	orrs	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	83bb      	strh	r3, [r7, #28]

    ctrl |= (LSM303C_InitStructure.AccFull_Scale | LSM303C_InitStructure.Communication_Mode) << 8;
 800263c:	7eba      	ldrb	r2, [r7, #26]
 800263e:	7efb      	ldrb	r3, [r7, #27]
 8002640:	4313      	orrs	r3, r2
 8002642:	b2db      	uxtb	r3, r3
 8002644:	b21b      	sxth	r3, r3
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800264e:	4313      	orrs	r3, r2
 8002650:	b21b      	sxth	r3, r3
 8002652:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <BSP_COMPASS_Init+0xec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	8bba      	ldrh	r2, [r7, #28]
 800265c:	4610      	mov	r0, r2
 800265e:	4798      	blx	r3

    /* Fill the COMPASS accelerometer HPF structure */
    LSM303C_FilterStructure.HighPassFilter_Mode_Selection = LSM303C_ACC_HPM_NORMAL_MODE;
 8002660:	2300      	movs	r3, #0
 8002662:	733b      	strb	r3, [r7, #12]
    LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303C_ACC_DFC1_ODRDIV50;
 8002664:	2300      	movs	r3, #0
 8002666:	737b      	strb	r3, [r7, #13]
    LSM303C_FilterStructure.HighPassFilter_Stat = LSM303C_ACC_HPI2S_INT1_DISABLE | LSM303C_ACC_HPI2S_INT2_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	747b      	strb	r3, [r7, #17]

    /* Configure MEMS: mode, cutoff frequency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 800266c:	7b3a      	ldrb	r2, [r7, #12]
                     LSM303C_FilterStructure.HighPassFilter_CutOff_Frequency | \
 800266e:	7b7b      	ldrb	r3, [r7, #13]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002670:	4313      	orrs	r3, r2
 8002672:	b2da      	uxtb	r2, r3
                     LSM303C_FilterStructure.HighPassFilter_Stat);
 8002674:	7c7b      	ldrb	r3, [r7, #17]
    ctrl = (uint8_t)(LSM303C_FilterStructure.HighPassFilter_Mode_Selection | \
 8002676:	4313      	orrs	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	83bb      	strh	r3, [r7, #28]

    /* Configure the COMPASS accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800267c:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <BSP_COMPASS_Init+0xec>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002682:	8bba      	ldrh	r2, [r7, #28]
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	4610      	mov	r0, r2
 8002688:	4798      	blx	r3
  }

  if (Lsm303cDrv_magneto.ReadID() != LMS303C_MAG_ID)
 800268a:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <BSP_COMPASS_Init+0xf0>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4798      	blx	r3
 8002690:	4603      	mov	r3, r0
 8002692:	2b3d      	cmp	r3, #61	@ 0x3d
 8002694:	d002      	beq.n	800269c <BSP_COMPASS_Init+0xb4>
  {
    ret = COMPASS_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]
 800269a:	e013      	b.n	80026c4 <BSP_COMPASS_Init+0xdc>
  }
  else
  {
    /* Initialize the COMPASS magnetometer driver structure */
    MagnetoDrv = &Lsm303cDrv_magneto;
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <BSP_COMPASS_Init+0xf4>)
 800269e:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <BSP_COMPASS_Init+0xf0>)
 80026a0:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the COMPASS magnetometer structure */
    LSM303C_InitStructureMag.Register1 = LSM303C_MAG_TEMPSENSOR_DISABLE | LSM303C_MAG_OM_XY_ULTRAHIGH | LSM303C_MAG_ODR_40_HZ;
 80026a2:	2378      	movs	r3, #120	@ 0x78
 80026a4:	713b      	strb	r3, [r7, #4]
    LSM303C_InitStructureMag.Register2 = LSM303C_MAG_FS_16_GA | LSM303C_MAG_REBOOT_DEFAULT | LSM303C_MAG_SOFT_RESET_DEFAULT;
 80026a6:	2360      	movs	r3, #96	@ 0x60
 80026a8:	717b      	strb	r3, [r7, #5]
    LSM303C_InitStructureMag.Register3 = LSM303C_MAG_SPI_MODE | LSM303C_MAG_CONFIG_NORMAL_MODE | LSM303C_MAG_CONTINUOUS_MODE;
 80026aa:	2304      	movs	r3, #4
 80026ac:	71bb      	strb	r3, [r7, #6]
    LSM303C_InitStructureMag.Register4 = LSM303C_MAG_OM_Z_ULTRAHIGH | LSM303C_MAG_BLE_LSB;
 80026ae:	230c      	movs	r3, #12
 80026b0:	71fb      	strb	r3, [r7, #7]
    LSM303C_InitStructureMag.Register5 = LSM303C_MAG_BDU_CONTINUOUS;
 80026b2:	2300      	movs	r3, #0
 80026b4:	723b      	strb	r3, [r7, #8]
    /* Configure the COMPASS magnetometer main parameters */
    MagnetoDrv->Init(LSM303C_InitStructureMag);
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <BSP_COMPASS_Init+0xf4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1d3a      	adds	r2, r7, #4
 80026be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026c2:	4798      	blx	r3
  }

  return ret;
 80026c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000004 	.word	0x20000004
 80026d4:	200005e0 	.word	0x200005e0
 80026d8:	20000038 	.word	0x20000038
 80026dc:	200005e4 	.word	0x200005e4

080026e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ea:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_Init+0x3c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a0b      	ldr	r2, [pc, #44]	@ (800271c <HAL_Init+0x3c>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f6:	2003      	movs	r0, #3
 80026f8:	f000 f962 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026fc:	2000      	movs	r0, #0
 80026fe:	f000 f80f 	bl	8002720 <HAL_InitTick>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	71fb      	strb	r3, [r7, #7]
 800270c:	e001      	b.n	8002712 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800270e:	f7ff f933 	bl	8001978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002712:	79fb      	ldrb	r3, [r7, #7]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40022000 	.word	0x40022000

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800272c:	4b17      	ldr	r3, [pc, #92]	@ (800278c <HAL_InitTick+0x6c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002734:	4b16      	ldr	r3, [pc, #88]	@ (8002790 <HAL_InitTick+0x70>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <HAL_InitTick+0x6c>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002742:	fbb3 f3f1 	udiv	r3, r3, r1
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f96d 	bl	8002a2a <HAL_SYSTICK_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10f      	bne.n	8002776 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d809      	bhi.n	8002770 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275c:	2200      	movs	r2, #0
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f000 f937 	bl	80029d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002768:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <HAL_InitTick+0x74>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	e007      	b.n	8002780 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e004      	b.n	8002780 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e001      	b.n	8002780 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000070 	.word	0x20000070
 8002790:	20000000 	.word	0x20000000
 8002794:	2000006c 	.word	0x2000006c

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	@ (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000070 	.word	0x20000070
 80027bc:	200005e8 	.word	0x200005e8

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	@ (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200005e8 	.word	0x200005e8

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000070 	.word	0x20000070

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	@ (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	@ (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	@ (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	@ 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	@ 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff8e 	bl	80028c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff29 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff3e 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff8e 	bl	8002914 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5d 	bl	80028c0 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff31 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa2 	bl	800297c <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d005      	beq.n	8002a66 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e029      	b.n	8002aba <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 020e 	bic.w	r2, r2, #14
 8002a74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f003 021c 	and.w	r2, r3, #28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
    }
  }
  return status;
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	e17f      	b.n	8002dd4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8171 	beq.w	8002dce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d00b      	beq.n	8002b0c <HAL_GPIO_Init+0x48>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d007      	beq.n	8002b0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b00:	2b11      	cmp	r3, #17
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b12      	cmp	r3, #18
 8002b0a:	d130      	bne.n	8002b6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2203      	movs	r2, #3
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b42:	2201      	movs	r2, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 0201 	and.w	r2, r3, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d118      	bne.n	8002bac <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b80:	2201      	movs	r2, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f003 0201 	and.w	r2, r3, #1
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x128>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b12      	cmp	r3, #18
 8002bea:	d123      	bne.n	8002c34 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3208      	adds	r2, #8
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80ac 	beq.w	8002dce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	4b5f      	ldr	r3, [pc, #380]	@ (8002df4 <HAL_GPIO_Init+0x330>)
 8002c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002df4 <HAL_GPIO_Init+0x330>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c82:	4b5c      	ldr	r3, [pc, #368]	@ (8002df4 <HAL_GPIO_Init+0x330>)
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	3302      	adds	r3, #2
 8002c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cb8:	d025      	beq.n	8002d06 <HAL_GPIO_Init+0x242>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4f      	ldr	r2, [pc, #316]	@ (8002dfc <HAL_GPIO_Init+0x338>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01f      	beq.n	8002d02 <HAL_GPIO_Init+0x23e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002e00 <HAL_GPIO_Init+0x33c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d019      	beq.n	8002cfe <HAL_GPIO_Init+0x23a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	@ (8002e04 <HAL_GPIO_Init+0x340>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_GPIO_Init+0x236>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002e08 <HAL_GPIO_Init+0x344>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_GPIO_Init+0x232>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8002e0c <HAL_GPIO_Init+0x348>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d007      	beq.n	8002cf2 <HAL_GPIO_Init+0x22e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e10 <HAL_GPIO_Init+0x34c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_GPIO_Init+0x22a>
 8002cea:	2306      	movs	r3, #6
 8002cec:	e00c      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00a      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x244>
 8002d06:	2300      	movs	r3, #0
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d18:	4937      	ldr	r1, [pc, #220]	@ (8002df8 <HAL_GPIO_Init+0x334>)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d26:	4b3b      	ldr	r3, [pc, #236]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d4a:	4a32      	ldr	r2, [pc, #200]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d50:	4b30      	ldr	r3, [pc, #192]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d74:	4a27      	ldr	r2, [pc, #156]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d7a:	4b26      	ldr	r3, [pc, #152]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dc8:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <HAL_GPIO_Init+0x350>)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f47f ae78 	bne.w	8002ad4 <HAL_GPIO_Init+0x10>
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	48000400 	.word	0x48000400
 8002e00:	48000800 	.word	0x48000800
 8002e04:	48000c00 	.word	0x48000c00
 8002e08:	48001000 	.word	0x48001000
 8002e0c:	48001400 	.word	0x48001400
 8002e10:	48001800 	.word	0x48001800
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
 8002e24:	4613      	mov	r3, r2
 8002e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e28:	787b      	ldrb	r3, [r7, #1]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e34:	e002      	b.n	8002e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	041a      	lsls	r2, r3, #16
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	43d9      	mvns	r1, r3
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	400b      	ands	r3, r1
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	619a      	str	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e081      	b.n	8002f92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe fafc 	bl	80014a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	@ 0x24
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e006      	b.n	8002f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d104      	bne.n	8002f16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	ea42 0103 	orr.w	r1, r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69d9      	ldr	r1, [r3, #28]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d138      	bne.n	8003022 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e032      	b.n	8003024 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2224      	movs	r2, #36	@ 0x24
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	d139      	bne.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003050:	2302      	movs	r3, #2
 8003052:	e033      	b.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003082:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030b6:	2300      	movs	r3, #0
 80030b8:	e000      	b.n	80030bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
  }
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ca:	b08f      	sub	sp, #60	@ 0x3c
 80030cc:	af0a      	add	r7, sp, #40	@ 0x28
 80030ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e116      	b.n	8003308 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f006 fdc9 	bl	8009c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2203      	movs	r2, #3
 80030fe:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fe1a 	bl	8006d52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	687e      	ldr	r6, [r7, #4]
 8003126:	466d      	mov	r5, sp
 8003128:	f106 0410 	add.w	r4, r6, #16
 800312c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800312e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003134:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003138:	e885 0003 	stmia.w	r5, {r0, r1}
 800313c:	1d33      	adds	r3, r6, #4
 800313e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003140:	6838      	ldr	r0, [r7, #0]
 8003142:	f003 fd06 	bl	8006b52 <USB_CoreInit>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0d7      	b.n	8003308 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f003 fe08 	bl	8006d74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e04a      	b.n	8003200 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	333d      	adds	r3, #61	@ 0x3d
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	333c      	adds	r3, #60	@ 0x3c
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	b298      	uxth	r0, r3
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3342      	adds	r3, #66	@ 0x42
 80031a6:	4602      	mov	r2, r0
 80031a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031aa:	7bfa      	ldrb	r2, [r7, #15]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	333f      	adds	r3, #63	@ 0x3f
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3344      	adds	r3, #68	@ 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3348      	adds	r3, #72	@ 0x48
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3350      	adds	r3, #80	@ 0x50
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3301      	adds	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3af      	bcc.n	800316a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
 800320e:	e044      	b.n	800329a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	1a9b      	subs	r3, r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003268:	7bfa      	ldrb	r2, [r7, #15]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	3301      	adds	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d3b5      	bcc.n	8003210 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	687e      	ldr	r6, [r7, #4]
 80032ac:	466d      	mov	r5, sp
 80032ae:	f106 0410 	add.w	r4, r6, #16
 80032b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032be:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c2:	1d33      	adds	r3, r6, #4
 80032c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c6:	6838      	ldr	r0, [r7, #0]
 80032c8:	f003 fd7e 	bl	8006dc8 <USB_DevInit>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e014      	b.n	8003308 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 ff62 	bl	80041c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fd00 	bl	8007d06 <USB_DevDisconnect>

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003310 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_PCD_Start+0x1c>
 8003328:	2302      	movs	r3, #2
 800332a:	e01c      	b.n	8003366 <HAL_PCD_Start+0x56>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fcef 	bl	8006d30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f004 fcb4 	bl	8007cc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800336e:	b590      	push	{r4, r7, lr}
 8003370:	b08d      	sub	sp, #52	@ 0x34
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f004 fd72 	bl	8007e6e <USB_GetMode>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f040 838f 	bne.w	8003ab0 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f004 fcd6 	bl	8007d48 <USB_ReadInterrupts>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8385 	beq.w	8003aae <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fccd 	bl	8007d48 <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d107      	bne.n	80033c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f002 0202 	and.w	r2, r2, #2
 80033c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 fcbb 	bl	8007d48 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d161      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0210 	bic.w	r2, r2, #16
 80033ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	f003 020f 	and.w	r2, r3, #15
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	3304      	adds	r3, #4
 800340a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003416:	d124      	bne.n	8003462 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d035      	beq.n	8003490 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800342e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a38      	ldr	r0, [r7, #32]
 8003438:	f004 fb21 	bl	8007a7e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003448:	441a      	add	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345a:	441a      	add	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	619a      	str	r2, [r3, #24]
 8003460:	e016      	b.n	8003490 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003468:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800346c:	d110      	bne.n	8003490 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003474:	2208      	movs	r2, #8
 8003476:	4619      	mov	r1, r3
 8003478:	6a38      	ldr	r0, [r7, #32]
 800347a:	f004 fb00 	bl	8007a7e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348a:	441a      	add	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0210 	orr.w	r2, r2, #16
 800349e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 fc4f 	bl	8007d48 <USB_ReadInterrupts>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034b4:	d16e      	bne.n	8003594 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 fc55 	bl	8007d6e <USB_ReadDevAllOutEpInterrupt>
 80034c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034c6:	e062      	b.n	800358e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d057      	beq.n	8003582 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f004 fc7a 	bl	8007dd6 <USB_ReadDevOutEPInterrupt>
 80034e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034fa:	461a      	mov	r2, r3
 80034fc:	2301      	movs	r3, #1
 80034fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fd82 	bl	800400c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351e:	461a      	mov	r2, r3
 8003520:	2308      	movs	r3, #8
 8003522:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003524:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fdbe 	bl	80040a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	2310      	movs	r3, #16
 8003546:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	2320      	movs	r3, #32
 8003562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800357a:	461a      	mov	r2, r3
 800357c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003580:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	3301      	adds	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d199      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f004 fbd5 	bl	8007d48 <USB_ReadInterrupts>
 800359e:	4603      	mov	r3, r0
 80035a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035a8:	f040 8087 	bne.w	80036ba <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 fbf6 	bl	8007da2 <USB_ReadDevAllInEpInterrupt>
 80035b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80035bc:	e07a      	b.n	80036b4 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d06f      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 fc1d 	bl	8007e12 <USB_ReadDevInEPInterrupt>
 80035d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d020      	beq.n	8003626 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	2201      	movs	r2, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69f9      	ldr	r1, [r7, #28]
 8003600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003604:	4013      	ands	r3, r2
 8003606:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003614:	461a      	mov	r2, r3
 8003616:	2301      	movs	r3, #1
 8003618:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f006 fbc6 	bl	8009db2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363c:	461a      	mov	r2, r3
 800363e:	2308      	movs	r3, #8
 8003640:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003658:	461a      	mov	r2, r3
 800365a:	2310      	movs	r3, #16
 800365c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003674:	461a      	mov	r2, r3
 8003676:	2340      	movs	r3, #64	@ 0x40
 8003678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	4413      	add	r3, r2
 800368c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003690:	461a      	mov	r2, r3
 8003692:	2302      	movs	r3, #2
 8003694:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 fc29 	bl	8003efa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	3301      	adds	r3, #1
 80036ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d181      	bne.n	80035be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 fb42 	bl	8007d48 <USB_ReadInterrupts>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036ce:	d122      	bne.n	8003716 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036f6:	2100      	movs	r1, #0
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f006 fe73 	bl	800a3e4 <HAL_PCDEx_LPM_Callback>
 80036fe:	e002      	b.n	8003706 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f006 fbc3 	bl	8009e8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f004 fb14 	bl	8007d48 <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800372a:	d112      	bne.n	8003752 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d102      	bne.n	8003742 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f006 fb7f 	bl	8009e40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003750:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 faf6 	bl	8007d48 <USB_ReadInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003762:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003766:	d121      	bne.n	80037ac <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003776:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	@ 0x3f4
 800377e:	2b00      	cmp	r3, #0
 8003780:	d111      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	f003 020f 	and.w	r2, r3, #15
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800379c:	2101      	movs	r1, #1
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f006 fe20 	bl	800a3e4 <HAL_PCDEx_LPM_Callback>
 80037a4:	e002      	b.n	80037ac <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f006 fb4a 	bl	8009e40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f004 fac9 	bl	8007d48 <USB_ReadInterrupts>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c0:	f040 80c5 	bne.w	800394e <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2110      	movs	r1, #16
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fc3e 	bl	8007060 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e8:	e056      	b.n	8003898 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f6:	461a      	mov	r2, r3
 80037f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800380e:	0151      	lsls	r1, r2, #5
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	440a      	add	r2, r1
 8003814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003818:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800381c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382e:	0151      	lsls	r1, r2, #5
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	440a      	add	r2, r1
 8003834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003838:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800383c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384a:	461a      	mov	r2, r3
 800384c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003850:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800386c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800388c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003890:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	3301      	adds	r3, #1
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800389e:	429a      	cmp	r2, r3
 80038a0:	d3a3      	bcc.n	80037ea <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80038b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ce:	f043 030b 	orr.w	r3, r3, #11
 80038d2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038e4:	f043 030b 	orr.w	r3, r3, #11
 80038e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ea:	e015      	b.n	8003918 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038fe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003902:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003912:	f043 030b 	orr.w	r3, r3, #11
 8003916:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003926:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800392a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f004 fac9 	bl	8007ed0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800394c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f004 f9f8 	bl	8007d48 <USB_ReadInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800395e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003962:	d124      	bne.n	80039ae <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f004 fa8e 	bl	8007e8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f003 fbd5 	bl	8007122 <USB_GetDevSpeed>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681c      	ldr	r4, [r3, #0]
 8003984:	f001 fa1a 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8003988:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	4620      	mov	r0, r4
 8003994:	f003 f930 	bl	8006bf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f006 fa32 	bl	8009e02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80039ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 f9c8 	bl	8007d48 <USB_ReadInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d10a      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f006 fa0f 	bl	8009de6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f002 0208 	and.w	r2, r2, #8
 80039d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 f9b3 	bl	8007d48 <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ec:	d10f      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	4619      	mov	r1, r3
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f006 fa81 	bl	8009f00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 f998 	bl	8007d48 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a22:	d10f      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f006 fa54 	bl	8009edc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 f97d 	bl	8007d48 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a58:	d10a      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f006 fa62 	bl	8009f24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 f967 	bl	8007d48 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d115      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f006 fa52 	bl	8009f40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	e000      	b.n	8003ab0 <HAL_PCD_IRQHandler+0x742>
      return;
 8003aae:	bf00      	nop
    }
  }
}
 8003ab0:	3734      	adds	r7, #52	@ 0x34
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd90      	pop	{r4, r7, pc}

08003ab6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_PCD_SetAddress+0x1a>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e013      	b.n	8003af8 <HAL_PCD_SetAddress+0x42>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  hpcd->USB_Address = address;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 f8c5 	bl	8007c78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	70fb      	strb	r3, [r7, #3]
 8003b12:	460b      	mov	r3, r1
 8003b14:	803b      	strh	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	da0f      	bge.n	8003b46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	3338      	adds	r3, #56	@ 0x38
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	705a      	strb	r2, [r3, #1]
 8003b44:	e00f      	b.n	8003b66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b72:	883a      	ldrh	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	78ba      	ldrb	r2, [r7, #2]
 8003b7c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	785b      	ldrb	r3, [r3, #1]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b90:	78bb      	ldrb	r3, [r7, #2]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d102      	bne.n	8003b9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_PCD_EP_Open+0xaa>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e00e      	b.n	8003bc8 <HAL_PCD_EP_Open+0xc8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fad1 	bl	8007160 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return ret;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	da0f      	bge.n	8003c04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 020f 	and.w	r2, r3, #15
 8003bea:	4613      	mov	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	3338      	adds	r3, #56	@ 0x38
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	705a      	strb	r2, [r3, #1]
 8003c02:	e00f      	b.n	8003c24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_PCD_EP_Close+0x6e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e00e      	b.n	8003c5c <HAL_PCD_EP_Close+0x8c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68f9      	ldr	r1, [r7, #12]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 fb0f 	bl	8007270 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	460b      	mov	r3, r1
 8003c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cb2:	7afb      	ldrb	r3, [r7, #11]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6979      	ldr	r1, [r7, #20]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fd8c 	bl	80077e0 <USB_EP0StartXfer>
 8003cc8:	e005      	b.n	8003cd6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 fba9 	bl	8007428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 020f 	and.w	r2, r3, #15
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 020f 	and.w	r2, r3, #15
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	3338      	adds	r3, #56	@ 0x38
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	2200      	movs	r2, #0
 8003d48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6979      	ldr	r1, [r7, #20]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 fd37 	bl	80077e0 <USB_EP0StartXfer>
 8003d72:	e005      	b.n	8003d80 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 fb54 	bl	8007428 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d901      	bls.n	8003da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e04e      	b.n	8003e46 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da0f      	bge.n	8003dd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 020f 	and.w	r2, r3, #15
 8003db6:	4613      	mov	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	3338      	adds	r3, #56	@ 0x38
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	705a      	strb	r2, [r3, #1]
 8003dce:	e00d      	b.n	8003dec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dd0:	78fa      	ldrb	r2, [r7, #3]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	3304      	adds	r3, #4
 8003de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2201      	movs	r2, #1
 8003df0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_PCD_EP_SetStall+0x82>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e01c      	b.n	8003e46 <HAL_PCD_EP_SetStall+0xbc>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f003 fe58 	bl	8007ad0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d108      	bne.n	8003e3c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f004 f84a 	bl	8007ed0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	460b      	mov	r3, r1
 8003e58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d901      	bls.n	8003e6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e042      	b.n	8003ef2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da0f      	bge.n	8003e94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	3338      	adds	r3, #56	@ 0x38
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	3304      	adds	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	705a      	strb	r2, [r3, #1]
 8003e92:	e00f      	b.n	8003eb4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 33bc 	ldrb.w	r3, [r3, #956]	@ 0x3bc
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_PCD_EP_ClrStall+0x86>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e00e      	b.n	8003ef2 <HAL_PCD_EP_ClrStall+0xa4>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68f9      	ldr	r1, [r7, #12]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f003 fe62 	bl	8007bac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b088      	sub	sp, #32
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	3338      	adds	r3, #56	@ 0x38
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3304      	adds	r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d901      	bls.n	8003f32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e067      	b.n	8004002 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d902      	bls.n	8003f4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3303      	adds	r3, #3
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f56:	e026      	b.n	8003fa6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d902      	bls.n	8003f74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	3303      	adds	r3, #3
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68d9      	ldr	r1, [r3, #12]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	6978      	ldr	r0, [r7, #20]
 8003f8a:	f003 fd47 	bl	8007a1c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	441a      	add	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	441a      	add	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d809      	bhi.n	8003fd0 <PCD_WriteEmptyTxFifo+0xd6>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d203      	bcs.n	8003fd0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1c3      	bne.n	8003f58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d811      	bhi.n	8004000 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	6939      	ldr	r1, [r7, #16]
 8003ff8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	333c      	adds	r3, #60	@ 0x3c
 8004024:	3304      	adds	r3, #4
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <PCD_EP_OutXfrComplete_int+0x98>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d124      	bne.n	800408c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004058:	461a      	mov	r2, r3
 800405a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800405e:	6093      	str	r3, [r2, #8]
 8004060:	e01a      	b.n	8004098 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004078:	461a      	mov	r2, r3
 800407a:	2320      	movs	r3, #32
 800407c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f005 fe79 	bl	8009d7c <HAL_PCD_DataOutStageCallback>
 800408a:	e005      	b.n	8004098 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f005 fe72 	bl	8009d7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	4f54310a 	.word	0x4f54310a

080040a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	333c      	adds	r3, #60	@ 0x3c
 80040c0:	3304      	adds	r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	@ (800410c <PCD_EP_OutSetupPacket_int+0x64>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d90e      	bls.n	80040fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f005 fe2b 	bl	8009d58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	4f54300a 	.word	0x4f54300a

08004110 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
 800411c:	4613      	mov	r3, r2
 800411e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800412e:	883b      	ldrh	r3, [r7, #0]
 8004130:	0419      	lsls	r1, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	430a      	orrs	r2, r1
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28
 800413c:	e028      	b.n	8004190 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e00d      	b.n	800416e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	3340      	adds	r3, #64	@ 0x40
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	3301      	adds	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	3b01      	subs	r3, #1
 8004174:	429a      	cmp	r2, r3
 8004176:	d3ec      	bcc.n	8004152 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004178:	883b      	ldrh	r3, [r7, #0]
 800417a:	0418      	lsls	r0, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6819      	ldr	r1, [r3, #0]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	3b01      	subs	r3, #1
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4302      	orrs	r2, r0
 8004188:	3340      	adds	r3, #64	@ 0x40
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	f043 0303 	orr.w	r3, r3, #3
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800420c:	4b05      	ldr	r3, [pc, #20]	@ (8004224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a04      	ldr	r2, [pc, #16]	@ (8004224 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40007000 	.word	0x40007000

08004228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800422c:	4b04      	ldr	r3, [pc, #16]	@ (8004240 <HAL_PWREx_GetVoltageRange+0x18>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000

08004244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004252:	d130      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004254:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800425c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004260:	d038      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800426a:	4a1e      	ldr	r2, [pc, #120]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004272:	4b1d      	ldr	r3, [pc, #116]	@ (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2232      	movs	r2, #50	@ 0x32
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0c9b      	lsrs	r3, r3, #18
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004288:	e002      	b.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004290:	4b14      	ldr	r3, [pc, #80]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800429c:	d102      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f2      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b0:	d110      	bne.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00f      	b.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c2:	d007      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c4:	4b07      	ldr	r3, [pc, #28]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042cc:	4a05      	ldr	r2, [pc, #20]	@ (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000
 80042e8:	20000000 	.word	0x20000000
 80042ec:	431bde83 	.word	0x431bde83

080042f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80042f4:	4b05      	ldr	r3, [pc, #20]	@ (800430c <HAL_PWREx_EnableVddUSB+0x1c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a04      	ldr	r2, [pc, #16]	@ (800430c <HAL_PWREx_EnableVddUSB+0x1c>)
 80042fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042fe:	6053      	str	r3, [r2, #4]
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40007000 	.word	0x40007000

08004310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e3d8      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004322:	4b97      	ldr	r3, [pc, #604]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800432c:	4b94      	ldr	r3, [pc, #592]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80e4 	beq.w	800450c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <HAL_RCC_OscConfig+0x4a>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	f040 808b 	bne.w	8004468 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 8087 	bne.w	8004468 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800435a:	4b89      	ldr	r3, [pc, #548]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_RCC_OscConfig+0x62>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e3b0      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	4b82      	ldr	r3, [pc, #520]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d004      	beq.n	800438c <HAL_RCC_OscConfig+0x7c>
 8004382:	4b7f      	ldr	r3, [pc, #508]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800438a:	e005      	b.n	8004398 <HAL_RCC_OscConfig+0x88>
 800438c:	4b7c      	ldr	r3, [pc, #496]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004398:	4293      	cmp	r3, r2
 800439a:	d223      	bcs.n	80043e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fd43 	bl	8004e2c <RCC_SetFlashLatencyFromMSIRange>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e391      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b0:	4b73      	ldr	r3, [pc, #460]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a72      	ldr	r2, [pc, #456]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043b6:	f043 0308 	orr.w	r3, r3, #8
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b70      	ldr	r3, [pc, #448]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	496d      	ldr	r1, [pc, #436]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	4968      	ldr	r1, [pc, #416]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	604b      	str	r3, [r1, #4]
 80043e2:	e025      	b.n	8004430 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e4:	4b66      	ldr	r3, [pc, #408]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a65      	ldr	r2, [pc, #404]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043ea:	f043 0308 	orr.w	r3, r3, #8
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b63      	ldr	r3, [pc, #396]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4960      	ldr	r1, [pc, #384]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004402:	4b5f      	ldr	r3, [pc, #380]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	495b      	ldr	r1, [pc, #364]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd03 	bl	8004e2c <RCC_SetFlashLatencyFromMSIRange>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e351      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004430:	f000 fc38 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b52      	ldr	r3, [pc, #328]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	4950      	ldr	r1, [pc, #320]	@ (8004584 <HAL_RCC_OscConfig+0x274>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a4e      	ldr	r2, [pc, #312]	@ (8004588 <HAL_RCC_OscConfig+0x278>)
 800444e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004450:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_OscConfig+0x27c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fe f963 	bl	8002720 <HAL_InitTick>
 800445a:	4603      	mov	r3, r0
 800445c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d052      	beq.n	800450a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	e335      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d032      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004470:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a42      	ldr	r2, [pc, #264]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800447c:	f7fe f9a0 	bl	80027c0 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004484:	f7fe f99c 	bl	80027c0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e31e      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004496:	4b3a      	ldr	r3, [pc, #232]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a36      	ldr	r2, [pc, #216]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4931      	ldr	r1, [pc, #196]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	021b      	lsls	r3, r3, #8
 80044ce:	492c      	ldr	r1, [pc, #176]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	604b      	str	r3, [r1, #4]
 80044d4:	e01a      	b.n	800450c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a29      	ldr	r2, [pc, #164]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044e2:	f7fe f96d 	bl	80027c0 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ea:	f7fe f969 	bl	80027c0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e2eb      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044fc:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1f0      	bne.n	80044ea <HAL_RCC_OscConfig+0x1da>
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d074      	beq.n	8004602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	2b08      	cmp	r3, #8
 800451c:	d005      	beq.n	800452a <HAL_RCC_OscConfig+0x21a>
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d10e      	bne.n	8004542 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d10b      	bne.n	8004542 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d064      	beq.n	8004600 <HAL_RCC_OscConfig+0x2f0>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d160      	bne.n	8004600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e2c8      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454a:	d106      	bne.n	800455a <HAL_RCC_OscConfig+0x24a>
 800454c:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0b      	ldr	r2, [pc, #44]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e026      	b.n	80045a8 <HAL_RCC_OscConfig+0x298>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004562:	d115      	bne.n	8004590 <HAL_RCC_OscConfig+0x280>
 8004564:	4b06      	ldr	r3, [pc, #24]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a05      	ldr	r2, [pc, #20]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 800456a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b03      	ldr	r3, [pc, #12]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a02      	ldr	r2, [pc, #8]	@ (8004580 <HAL_RCC_OscConfig+0x270>)
 8004576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e014      	b.n	80045a8 <HAL_RCC_OscConfig+0x298>
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	0800ed10 	.word	0x0800ed10
 8004588:	20000000 	.word	0x20000000
 800458c:	2000006c 	.word	0x2000006c
 8004590:	4ba0      	ldr	r3, [pc, #640]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a9f      	ldr	r2, [pc, #636]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b9d      	ldr	r3, [pc, #628]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a9c      	ldr	r2, [pc, #624]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fe f906 	bl	80027c0 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe f902 	bl	80027c0 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e284      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b92      	ldr	r3, [pc, #584]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2a8>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe f8f2 	bl	80027c0 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e0:	f7fe f8ee 	bl	80027c0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b64      	cmp	r3, #100	@ 0x64
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e270      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f2:	4b88      	ldr	r3, [pc, #544]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f0      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2d0>
 80045fe:	e000      	b.n	8004602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d060      	beq.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d005      	beq.n	8004620 <HAL_RCC_OscConfig+0x310>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d119      	bne.n	800464e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d116      	bne.n	800464e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	4b7c      	ldr	r3, [pc, #496]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_OscConfig+0x328>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e24d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004638:	4b76      	ldr	r3, [pc, #472]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	4973      	ldr	r1, [pc, #460]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800464c:	e040      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d023      	beq.n	800469e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004656:	4b6f      	ldr	r3, [pc, #444]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fe f8ad 	bl	80027c0 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466a:	f7fe f8a9 	bl	80027c0 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e22b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800467c:	4b65      	ldr	r3, [pc, #404]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b62      	ldr	r3, [pc, #392]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	495f      	ldr	r1, [pc, #380]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	e018      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b5d      	ldr	r3, [pc, #372]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fe f889 	bl	80027c0 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fe f885 	bl	80027c0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e207      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046c4:	4b53      	ldr	r3, [pc, #332]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03c      	beq.n	8004756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01c      	beq.n	800471e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fe f864 	bl	80027c0 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fc:	f7fe f860 	bl	80027c0 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1e2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800470e:	4b41      	ldr	r3, [pc, #260]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <HAL_RCC_OscConfig+0x3ec>
 800471c:	e01b      	b.n	8004756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800471e:	4b3d      	ldr	r3, [pc, #244]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004724:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe f847 	bl	80027c0 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004736:	f7fe f843 	bl	80027c0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e1c5      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004748:	4b32      	ldr	r3, [pc, #200]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ef      	bne.n	8004736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 80a6 	beq.w	80048b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004768:	4b2a      	ldr	r3, [pc, #168]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b27      	ldr	r3, [pc, #156]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	4a26      	ldr	r2, [pc, #152]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004780:	4b24      	ldr	r3, [pc, #144]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004790:	4b21      	ldr	r3, [pc, #132]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d118      	bne.n	80047ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800479c:	4b1e      	ldr	r3, [pc, #120]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a8:	f7fe f80a 	bl	80027c0 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fe f806 	bl	80027c0 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e188      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c2:	4b15      	ldr	r3, [pc, #84]	@ (8004818 <HAL_RCC_OscConfig+0x508>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <HAL_RCC_OscConfig+0x4d8>
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047e6:	e029      	b.n	800483c <HAL_RCC_OscConfig+0x52c>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d115      	bne.n	800481c <HAL_RCC_OscConfig+0x50c>
 80047f0:	4b08      	ldr	r3, [pc, #32]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f6:	4a07      	ldr	r2, [pc, #28]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004800:	4b04      	ldr	r3, [pc, #16]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	4a03      	ldr	r2, [pc, #12]	@ (8004814 <HAL_RCC_OscConfig+0x504>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004810:	e014      	b.n	800483c <HAL_RCC_OscConfig+0x52c>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
 800481c:	4b91      	ldr	r3, [pc, #580]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	4a90      	ldr	r2, [pc, #576]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800482c:	4b8d      	ldr	r3, [pc, #564]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	4a8c      	ldr	r2, [pc, #560]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d016      	beq.n	8004872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd ffbc 	bl	80027c0 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fd ffb8 	bl	80027c0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e138      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004862:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0ed      	beq.n	800484c <HAL_RCC_OscConfig+0x53c>
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004872:	f7fd ffa5 	bl	80027c0 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004878:	e00a      	b.n	8004890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fd ffa1 	bl	80027c0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004888:	4293      	cmp	r3, r2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e121      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004890:	4b74      	ldr	r3, [pc, #464]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1ed      	bne.n	800487a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800489e:	7ffb      	ldrb	r3, [r7, #31]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 810c 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	2b02      	cmp	r3, #2
 80048c0:	f040 80d4 	bne.w	8004a6c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048c4:	4b67      	ldr	r3, [pc, #412]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f003 0203 	and.w	r2, r3, #3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d130      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	3b01      	subs	r3, #1
 80048e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d127      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d11f      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004904:	2a07      	cmp	r2, #7
 8004906:	bf14      	ite	ne
 8004908:	2201      	movne	r2, #1
 800490a:	2200      	moveq	r2, #0
 800490c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d109      	bne.n	800493a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	3b01      	subs	r3, #1
 8004934:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d06e      	beq.n	8004a18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d069      	beq.n	8004a14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004940:	4b48      	ldr	r3, [pc, #288]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800494c:	4b45      	ldr	r3, [pc, #276]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0bb      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800495c:	4b41      	ldr	r3, [pc, #260]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a40      	ldr	r2, [pc, #256]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004968:	f7fd ff2a 	bl	80027c0 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd ff26 	bl	80027c0 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e0a8      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004982:	4b38      	ldr	r3, [pc, #224]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800498e:	4b35      	ldr	r3, [pc, #212]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	4b35      	ldr	r3, [pc, #212]	@ (8004a68 <HAL_RCC_OscConfig+0x758>)
 8004994:	4013      	ands	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800499e:	3a01      	subs	r2, #1
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049a8:	0212      	lsls	r2, r2, #8
 80049aa:	4311      	orrs	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049b0:	0852      	lsrs	r2, r2, #1
 80049b2:	3a01      	subs	r2, #1
 80049b4:	0552      	lsls	r2, r2, #21
 80049b6:	4311      	orrs	r1, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049bc:	0852      	lsrs	r2, r2, #1
 80049be:	3a01      	subs	r2, #1
 80049c0:	0652      	lsls	r2, r2, #25
 80049c2:	4311      	orrs	r1, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049c8:	0912      	lsrs	r2, r2, #4
 80049ca:	0452      	lsls	r2, r2, #17
 80049cc:	430a      	orrs	r2, r1
 80049ce:	4925      	ldr	r1, [pc, #148]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049d4:	4b23      	ldr	r3, [pc, #140]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a22      	ldr	r2, [pc, #136]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80049da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e0:	4b20      	ldr	r3, [pc, #128]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ec:	f7fd fee8 	bl	80027c0 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f4:	f7fd fee4 	bl	80027c0 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e066      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a06:	4b17      	ldr	r3, [pc, #92]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a12:	e05e      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e05d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a18:	4b12      	ldr	r3, [pc, #72]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d156      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a24:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0e      	ldr	r2, [pc, #56]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a30:	4b0c      	ldr	r3, [pc, #48]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a3c:	f7fd fec0 	bl	80027c0 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd febc 	bl	80027c0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e03e      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <HAL_RCC_OscConfig+0x754>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x734>
 8004a62:	e036      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
 8004a64:	40021000 	.word	0x40021000
 8004a68:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d02d      	beq.n	8004ace <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a19      	ldr	r2, [pc, #100]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a7e:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a8a:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a13      	ldr	r2, [pc, #76]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a90:	f023 0303 	bic.w	r3, r3, #3
 8004a94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a96:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a10      	ldr	r2, [pc, #64]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004a9c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fd fe8b 	bl	80027c0 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd fe87 	bl	80027c0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e009      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_OscConfig+0x7cc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x79e>
 8004acc:	e001      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0c8      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b66      	ldr	r3, [pc, #408]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d910      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b63      	ldr	r3, [pc, #396]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 0207 	bic.w	r2, r3, #7
 8004b0a:	4961      	ldr	r1, [pc, #388]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b5f      	ldr	r3, [pc, #380]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b0      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d04c      	beq.n	8004bca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b38:	4b56      	ldr	r3, [pc, #344]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d121      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e09e      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b50:	4b50      	ldr	r3, [pc, #320]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d115      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e092      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b68:	4b4a      	ldr	r3, [pc, #296]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e086      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b78:	4b46      	ldr	r3, [pc, #280]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e07e      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b88:	4b42      	ldr	r3, [pc, #264]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 0203 	bic.w	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	493f      	ldr	r1, [pc, #252]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9a:	f7fd fe11 	bl	80027c0 <HAL_GetTick>
 8004b9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba2:	f7fd fe0d 	bl	80027c0 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e066      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb8:	4b36      	ldr	r3, [pc, #216]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 020c 	and.w	r2, r3, #12
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d1eb      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	492c      	ldr	r1, [pc, #176]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004be8:	4b29      	ldr	r3, [pc, #164]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d210      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b26      	ldr	r3, [pc, #152]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4924      	ldr	r1, [pc, #144]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b22      	ldr	r3, [pc, #136]	@ (8004c90 <HAL_RCC_ClockConfig+0x1b0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e036      	b.n	8004c86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4918      	ldr	r1, [pc, #96]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c42:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4910      	ldr	r1, [pc, #64]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c56:	f000 f825 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <HAL_RCC_ClockConfig+0x1b4>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490c      	ldr	r1, [pc, #48]	@ (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	4a0a      	ldr	r2, [pc, #40]	@ (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fd fd50 	bl	8002720 <HAL_InitTick>
 8004c80:	4603      	mov	r3, r0
 8004c82:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c84:	7afb      	ldrb	r3, [r7, #11]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40022000 	.word	0x40022000
 8004c94:	40021000 	.word	0x40021000
 8004c98:	0800ed10 	.word	0x0800ed10
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	2000006c 	.word	0x2000006c

08004ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b089      	sub	sp, #36	@ 0x24
 8004ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 030c 	and.w	r3, r3, #12
 8004cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d121      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d11e      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cd8:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ce4:	4b31      	ldr	r3, [pc, #196]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	e005      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 030f 	and.w	r3, r3, #15
 8004cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d00:	4a2b      	ldr	r2, [pc, #172]	@ (8004db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d102      	bne.n	8004d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d1c:	4b25      	ldr	r3, [pc, #148]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e004      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d101      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d28:	4b23      	ldr	r3, [pc, #140]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d134      	bne.n	8004d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d32:	4b1e      	ldr	r3, [pc, #120]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d003      	beq.n	8004d50 <HAL_RCC_GetSysClockFreq+0xac>
 8004d48:	e005      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d4c:	617b      	str	r3, [r7, #20]
      break;
 8004d4e:	e005      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d50:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d52:	617b      	str	r3, [r7, #20]
      break;
 8004d54:	e002      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	617b      	str	r3, [r7, #20]
      break;
 8004d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d5c:	4b13      	ldr	r3, [pc, #76]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	3301      	adds	r3, #1
 8004d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	0a1b      	lsrs	r3, r3, #8
 8004d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	fb03 f202 	mul.w	r2, r3, r2
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	0e5b      	lsrs	r3, r3, #25
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3724      	adds	r7, #36	@ 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	0800ed28 	.word	0x0800ed28
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	007a1200 	.word	0x007a1200

08004dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	@ (8004dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000000 	.word	0x20000000

08004dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004dd8:	f7ff fff0 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0a1b      	lsrs	r3, r3, #8
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4904      	ldr	r1, [pc, #16]	@ (8004dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	0800ed20 	.word	0x0800ed20

08004e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e04:	f7ff ffda 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	0adb      	lsrs	r3, r3, #11
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	4904      	ldr	r1, [pc, #16]	@ (8004e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	0800ed20 	.word	0x0800ed20

08004e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e38:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e44:	f7ff f9f0 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e48:	6178      	str	r0, [r7, #20]
 8004e4a:	e014      	b.n	8004e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e50:	4a24      	ldr	r2, [pc, #144]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e58:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e64:	f7ff f9e0 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7c:	d10b      	bne.n	8004e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b80      	cmp	r3, #128	@ 0x80
 8004e82:	d919      	bls.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e88:	d902      	bls.n	8004e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	e013      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e90:	2301      	movs	r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	e010      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b80      	cmp	r3, #128	@ 0x80
 8004e9a:	d902      	bls.n	8004ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	e00a      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b80      	cmp	r3, #128	@ 0x80
 8004ea6:	d102      	bne.n	8004eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	e004      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b70      	cmp	r3, #112	@ 0x70
 8004eb2:	d101      	bne.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 0207 	bic.w	r2, r3, #7
 8004ec0:	4909      	ldr	r1, [pc, #36]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ec8:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d001      	beq.n	8004eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40022000 	.word	0x40022000

08004eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ef8:	2300      	movs	r3, #0
 8004efa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d041      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f10:	d02a      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f16:	d824      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f1c:	d008      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f22:	d81e      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f2c:	d010      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f2e:	e018      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f30:	4b86      	ldr	r3, [pc, #536]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a85      	ldr	r2, [pc, #532]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f3c:	e015      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3304      	adds	r3, #4
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 facb 	bl	80054e0 <RCCEx_PLLSAI1_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f4e:	e00c      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3320      	adds	r3, #32
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fbb6 	bl	80056c8 <RCCEx_PLLSAI2_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f60:	e003      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	74fb      	strb	r3, [r7, #19]
      break;
 8004f66:	e000      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f6a:	7cfb      	ldrb	r3, [r7, #19]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f70:	4b76      	ldr	r3, [pc, #472]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f7e:	4973      	ldr	r1, [pc, #460]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f86:	e001      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d041      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fa0:	d02a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004fa2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004fa6:	d824      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fac:	d008      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004fae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fb2:	d81e      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00a      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fbe:	e018      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fc0:	4b62      	ldr	r3, [pc, #392]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4a61      	ldr	r2, [pc, #388]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fcc:	e015      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fa83 	bl	80054e0 <RCCEx_PLLSAI1_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fde:	e00c      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3320      	adds	r3, #32
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fb6e 	bl	80056c8 <RCCEx_PLLSAI2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ff0:	e003      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ff6:	e000      	b.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005000:	4b52      	ldr	r3, [pc, #328]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005006:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500e:	494f      	ldr	r1, [pc, #316]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005016:	e001      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a0 	beq.w	800516a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800502e:	4b47      	ldr	r3, [pc, #284]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005044:	4b41      	ldr	r3, [pc, #260]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005048:	4a40      	ldr	r2, [pc, #256]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800504e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005050:	4b3e      	ldr	r3, [pc, #248]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505c:	2301      	movs	r3, #1
 800505e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005060:	4b3b      	ldr	r3, [pc, #236]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a3a      	ldr	r2, [pc, #232]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800506a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800506c:	f7fd fba8 	bl	80027c0 <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005072:	e009      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005074:	f7fd fba4 	bl	80027c0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d902      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	74fb      	strb	r3, [r7, #19]
        break;
 8005086:	e005      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005088:	4b31      	ldr	r3, [pc, #196]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ef      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d15c      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800509a:	4b2c      	ldr	r3, [pc, #176]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01f      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d019      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050b8:	4b24      	ldr	r3, [pc, #144]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050c4:	4b21      	ldr	r3, [pc, #132]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ca:	4a20      	ldr	r2, [pc, #128]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050d4:	4b1d      	ldr	r3, [pc, #116]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050da:	4a1c      	ldr	r2, [pc, #112]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050e4:	4a19      	ldr	r2, [pc, #100]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d016      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fd fb63 	bl	80027c0 <HAL_GetTick>
 80050fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050fc:	e00b      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fd fb5f 	bl	80027c0 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d902      	bls.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	74fb      	strb	r3, [r7, #19]
            break;
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ec      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10c      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800512a:	4b08      	ldr	r3, [pc, #32]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513a:	4904      	ldr	r1, [pc, #16]	@ (800514c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005142:	e009      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005144:	7cfb      	ldrb	r3, [r7, #19]
 8005146:	74bb      	strb	r3, [r7, #18]
 8005148:	e006      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7cfb      	ldrb	r3, [r7, #19]
 8005156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005158:	7c7b      	ldrb	r3, [r7, #17]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d105      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515e:	4b9e      	ldr	r3, [pc, #632]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005162:	4a9d      	ldr	r2, [pc, #628]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005168:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005176:	4b98      	ldr	r3, [pc, #608]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517c:	f023 0203 	bic.w	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005184:	4994      	ldr	r1, [pc, #592]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005198:	4b8f      	ldr	r3, [pc, #572]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519e:	f023 020c 	bic.w	r2, r3, #12
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	498c      	ldr	r1, [pc, #560]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051ba:	4b87      	ldr	r3, [pc, #540]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	4983      	ldr	r1, [pc, #524]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051dc:	4b7e      	ldr	r3, [pc, #504]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ea:	497b      	ldr	r1, [pc, #492]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051fe:	4b76      	ldr	r3, [pc, #472]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800520c:	4972      	ldr	r1, [pc, #456]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005220:	4b6d      	ldr	r3, [pc, #436]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	496a      	ldr	r1, [pc, #424]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005242:	4b65      	ldr	r3, [pc, #404]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005248:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	4961      	ldr	r1, [pc, #388]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005264:	4b5c      	ldr	r3, [pc, #368]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005272:	4959      	ldr	r1, [pc, #356]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005286:	4b54      	ldr	r3, [pc, #336]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005294:	4950      	ldr	r1, [pc, #320]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052a8:	4b4b      	ldr	r3, [pc, #300]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b6:	4948      	ldr	r1, [pc, #288]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052ca:	4b43      	ldr	r3, [pc, #268]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	493f      	ldr	r1, [pc, #252]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d028      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052fa:	4937      	ldr	r1, [pc, #220]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800530a:	d106      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800530c:	4b32      	ldr	r3, [pc, #200]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4a31      	ldr	r2, [pc, #196]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005316:	60d3      	str	r3, [r2, #12]
 8005318:	e011      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800531e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005322:	d10c      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f8d8 	bl	80054e0 <RCCEx_PLLSAI1_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005334:	7cfb      	ldrb	r3, [r7, #19]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800533a:	7cfb      	ldrb	r3, [r7, #19]
 800533c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d028      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800534a:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	491f      	ldr	r1, [pc, #124]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005368:	d106      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536a:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	4a1a      	ldr	r2, [pc, #104]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005374:	60d3      	str	r3, [r2, #12]
 8005376:	e011      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005380:	d10c      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3304      	adds	r3, #4
 8005386:	2101      	movs	r1, #1
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f8a9 	bl	80054e0 <RCCEx_PLLSAI1_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005398:	7cfb      	ldrb	r3, [r7, #19]
 800539a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d02b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b6:	4908      	ldr	r1, [pc, #32]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c6:	d109      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c8:	4b03      	ldr	r3, [pc, #12]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a02      	ldr	r2, [pc, #8]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d2:	60d3      	str	r3, [r2, #12]
 80053d4:	e014      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f877 	bl	80054e0 <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02f      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800540c:	4b2b      	ldr	r3, [pc, #172]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800541a:	4928      	ldr	r1, [pc, #160]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542a:	d10d      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f854 	bl	80054e0 <RCCEx_PLLSAI1_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d014      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	74bb      	strb	r3, [r7, #18]
 8005446:	e011      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800544c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005450:	d10c      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3320      	adds	r3, #32
 8005456:	2102      	movs	r1, #2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f935 	bl	80056c8 <RCCEx_PLLSAI2_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005462:	7cfb      	ldrb	r3, [r7, #19]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005478:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005486:	490d      	ldr	r1, [pc, #52]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800549a:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054aa:	4904      	ldr	r1, [pc, #16]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40021000 	.word	0x40021000

080054c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80054c4:	4b05      	ldr	r3, [pc, #20]	@ (80054dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a04      	ldr	r2, [pc, #16]	@ (80054dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80054ca:	f043 0304 	orr.w	r3, r3, #4
 80054ce:	6013      	str	r3, [r2, #0]
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000

080054e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ee:	4b75      	ldr	r3, [pc, #468]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054fa:	4b72      	ldr	r3, [pc, #456]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f003 0203 	and.w	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d10d      	bne.n	8005526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
       ||
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005512:	4b6c      	ldr	r3, [pc, #432]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	091b      	lsrs	r3, r3, #4
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
       ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d047      	beq.n	80055b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
 800552a:	e044      	b.n	80055b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d018      	beq.n	8005566 <RCCEx_PLLSAI1_Config+0x86>
 8005534:	2b03      	cmp	r3, #3
 8005536:	d825      	bhi.n	8005584 <RCCEx_PLLSAI1_Config+0xa4>
 8005538:	2b01      	cmp	r3, #1
 800553a:	d002      	beq.n	8005542 <RCCEx_PLLSAI1_Config+0x62>
 800553c:	2b02      	cmp	r3, #2
 800553e:	d009      	beq.n	8005554 <RCCEx_PLLSAI1_Config+0x74>
 8005540:	e020      	b.n	8005584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005542:	4b60      	ldr	r3, [pc, #384]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11d      	bne.n	800558a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005552:	e01a      	b.n	800558a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005554:	4b5b      	ldr	r3, [pc, #364]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555c:	2b00      	cmp	r3, #0
 800555e:	d116      	bne.n	800558e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005564:	e013      	b.n	800558e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005566:	4b57      	ldr	r3, [pc, #348]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005572:	4b54      	ldr	r3, [pc, #336]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005582:	e006      	b.n	8005592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      break;
 8005588:	e004      	b.n	8005594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005592:	bf00      	nop
    }

    if(status == HAL_OK)
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10d      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800559a:	4b4a      	ldr	r3, [pc, #296]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6819      	ldr	r1, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	3b01      	subs	r3, #1
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	430b      	orrs	r3, r1
 80055b0:	4944      	ldr	r1, [pc, #272]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d17d      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055bc:	4b41      	ldr	r3, [pc, #260]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a40      	ldr	r2, [pc, #256]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c8:	f7fd f8fa 	bl	80027c0 <HAL_GetTick>
 80055cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055ce:	e009      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055d0:	f7fd f8f6 	bl	80027c0 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d902      	bls.n	80055e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	73fb      	strb	r3, [r7, #15]
        break;
 80055e2:	e005      	b.n	80055f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055e4:	4b37      	ldr	r3, [pc, #220]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1ef      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d160      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d111      	bne.n	8005620 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055fc:	4b31      	ldr	r3, [pc, #196]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	0211      	lsls	r1, r2, #8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68d2      	ldr	r2, [r2, #12]
 8005612:	0912      	lsrs	r2, r2, #4
 8005614:	0452      	lsls	r2, r2, #17
 8005616:	430a      	orrs	r2, r1
 8005618:	492a      	ldr	r1, [pc, #168]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	610b      	str	r3, [r1, #16]
 800561e:	e027      	b.n	8005670 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d112      	bne.n	800564c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005626:	4b27      	ldr	r3, [pc, #156]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800562e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6892      	ldr	r2, [r2, #8]
 8005636:	0211      	lsls	r1, r2, #8
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6912      	ldr	r2, [r2, #16]
 800563c:	0852      	lsrs	r2, r2, #1
 800563e:	3a01      	subs	r2, #1
 8005640:	0552      	lsls	r2, r2, #21
 8005642:	430a      	orrs	r2, r1
 8005644:	491f      	ldr	r1, [pc, #124]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	610b      	str	r3, [r1, #16]
 800564a:	e011      	b.n	8005670 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800564c:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005654:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6892      	ldr	r2, [r2, #8]
 800565c:	0211      	lsls	r1, r2, #8
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6952      	ldr	r2, [r2, #20]
 8005662:	0852      	lsrs	r2, r2, #1
 8005664:	3a01      	subs	r2, #1
 8005666:	0652      	lsls	r2, r2, #25
 8005668:	430a      	orrs	r2, r1
 800566a:	4916      	ldr	r1, [pc, #88]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566c:	4313      	orrs	r3, r2
 800566e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005670:	4b14      	ldr	r3, [pc, #80]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a13      	ldr	r2, [pc, #76]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800567a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fd f8a0 	bl	80027c0 <HAL_GetTick>
 8005680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005682:	e009      	b.n	8005698 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005684:	f7fd f89c 	bl	80027c0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d902      	bls.n	8005698 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	73fb      	strb	r3, [r7, #15]
          break;
 8005696:	e005      	b.n	80056a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0ef      	beq.n	8005684 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056aa:	4b06      	ldr	r3, [pc, #24]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4904      	ldr	r1, [pc, #16]	@ (80056c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40021000 	.word	0x40021000

080056c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056e2:	4b67      	ldr	r3, [pc, #412]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f003 0203 	and.w	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d10d      	bne.n	800570e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
       ||
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056fa:	4b61      	ldr	r3, [pc, #388]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	091b      	lsrs	r3, r3, #4
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
       ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d047      	beq.n	800579e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	73fb      	strb	r3, [r7, #15]
 8005712:	e044      	b.n	800579e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d018      	beq.n	800574e <RCCEx_PLLSAI2_Config+0x86>
 800571c:	2b03      	cmp	r3, #3
 800571e:	d825      	bhi.n	800576c <RCCEx_PLLSAI2_Config+0xa4>
 8005720:	2b01      	cmp	r3, #1
 8005722:	d002      	beq.n	800572a <RCCEx_PLLSAI2_Config+0x62>
 8005724:	2b02      	cmp	r3, #2
 8005726:	d009      	beq.n	800573c <RCCEx_PLLSAI2_Config+0x74>
 8005728:	e020      	b.n	800576c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800572a:	4b55      	ldr	r3, [pc, #340]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d11d      	bne.n	8005772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800573a:	e01a      	b.n	8005772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800573c:	4b50      	ldr	r3, [pc, #320]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005744:	2b00      	cmp	r3, #0
 8005746:	d116      	bne.n	8005776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800574c:	e013      	b.n	8005776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800574e:	4b4c      	ldr	r3, [pc, #304]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10f      	bne.n	800577a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800575a:	4b49      	ldr	r3, [pc, #292]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800576a:	e006      	b.n	800577a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	e004      	b.n	800577c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005772:	bf00      	nop
 8005774:	e002      	b.n	800577c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005776:	bf00      	nop
 8005778:	e000      	b.n	800577c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800577a:	bf00      	nop
    }

    if(status == HAL_OK)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10d      	bne.n	800579e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005782:	4b3f      	ldr	r3, [pc, #252]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6819      	ldr	r1, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	3b01      	subs	r3, #1
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	430b      	orrs	r3, r1
 8005798:	4939      	ldr	r1, [pc, #228]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579a:	4313      	orrs	r3, r2
 800579c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d167      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057a4:	4b36      	ldr	r3, [pc, #216]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a35      	ldr	r2, [pc, #212]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b0:	f7fd f806 	bl	80027c0 <HAL_GetTick>
 80057b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057b6:	e009      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b8:	f7fd f802 	bl	80027c0 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d902      	bls.n	80057cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	73fb      	strb	r3, [r7, #15]
        break;
 80057ca:	e005      	b.n	80057d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1ef      	bne.n	80057b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d14a      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d111      	bne.n	8005808 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057e4:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80057ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6892      	ldr	r2, [r2, #8]
 80057f4:	0211      	lsls	r1, r2, #8
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68d2      	ldr	r2, [r2, #12]
 80057fa:	0912      	lsrs	r2, r2, #4
 80057fc:	0452      	lsls	r2, r2, #17
 80057fe:	430a      	orrs	r2, r1
 8005800:	491f      	ldr	r1, [pc, #124]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005802:	4313      	orrs	r3, r2
 8005804:	614b      	str	r3, [r1, #20]
 8005806:	e011      	b.n	800582c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005808:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6892      	ldr	r2, [r2, #8]
 8005818:	0211      	lsls	r1, r2, #8
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6912      	ldr	r2, [r2, #16]
 800581e:	0852      	lsrs	r2, r2, #1
 8005820:	3a01      	subs	r2, #1
 8005822:	0652      	lsls	r2, r2, #25
 8005824:	430a      	orrs	r2, r1
 8005826:	4916      	ldr	r1, [pc, #88]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005828:	4313      	orrs	r3, r2
 800582a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800582c:	4b14      	ldr	r3, [pc, #80]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a13      	ldr	r2, [pc, #76]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fc ffc2 	bl	80027c0 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800583e:	e009      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005840:	f7fc ffbe 	bl	80027c0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d902      	bls.n	8005854 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	73fb      	strb	r3, [r7, #15]
          break;
 8005852:	e005      	b.n	8005860 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005854:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ef      	beq.n	8005840 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005866:	4b06      	ldr	r3, [pc, #24]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4904      	ldr	r1, [pc, #16]	@ (8005880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005870:	4313      	orrs	r3, r2
 8005872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000

08005884 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e095      	b.n	80059c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589a:	2b00      	cmp	r3, #0
 800589c:	d108      	bne.n	80058b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a6:	d009      	beq.n	80058bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	61da      	str	r2, [r3, #28]
 80058ae:	e005      	b.n	80058bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fc f802 	bl	80018e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058fc:	d902      	bls.n	8005904 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e002      	b.n	800590a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005908:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005912:	d007      	beq.n	8005924 <HAL_SPI_Init+0xa0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800591c:	d002      	beq.n	8005924 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005966:	ea42 0103 	orr.w	r1, r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	f003 0204 	and.w	r2, r3, #4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	431a      	orrs	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80059a0:	ea42 0103 	orr.w	r1, r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10f      	bne.n	8005a10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	099b      	lsrs	r3, r3, #6
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
    return;
 8005a0e:	e0d7      	b.n	8005bc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_SPI_IRQHandler+0x66>
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	09db      	lsrs	r3, r3, #7
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
    return;
 8005a30:	e0c6      	b.n	8005bc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_SPI_IRQHandler+0x8c>
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	099b      	lsrs	r3, r3, #6
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80b4 	beq.w	8005bc0 <HAL_SPI_IRQHandler+0x1f4>
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80ad 	beq.w	8005bc0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d011      	beq.n	8005aa2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a82:	f043 0204 	orr.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	617b      	str	r3, [r7, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	e00b      	b.n	8005aba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	693b      	ldr	r3, [r7, #16]
        return;
 8005ab8:	e082      	b.n	8005bc0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d014      	beq.n	8005af0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00c      	beq.n	8005b16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b00:	f043 0208 	orr.w	r2, r3, #8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60bb      	str	r3, [r7, #8]
 8005b14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d04f      	beq.n	8005bbe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <HAL_SPI_IRQHandler+0x17e>
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d034      	beq.n	8005bb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0203 	bic.w	r2, r2, #3
 8005b58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d011      	beq.n	8005b86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b66:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <HAL_SPI_IRQHandler+0x1fc>)
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fc ff67 	bl	8002a42 <HAL_DMA_Abort_IT>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d005      	beq.n	8005b86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b92:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <HAL_SPI_IRQHandler+0x1fc>)
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fc ff51 	bl	8002a42 <HAL_DMA_Abort_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005baa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005bb2:	e003      	b.n	8005bbc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f809 	bl	8005bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005bba:	e000      	b.n	8005bbe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005bbc:	bf00      	nop
    return;
 8005bbe:	bf00      	nop
  }
}
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	08005bfd 	.word	0x08005bfd

08005bcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bee:	b2db      	uxtb	r3, r3
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f7ff ffd7 	bl	8005bcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e049      	b.n	8005ccc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fc f81d 	bl	8001c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4610      	mov	r0, r2
 8005c66:	f000 f835 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a40      	ldr	r2, [pc, #256]	@ (8005de8 <TIM_Base_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8005dec <TIM_Base_SetConfig+0x118>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3b      	ldr	r2, [pc, #236]	@ (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2f      	ldr	r2, [pc, #188]	@ (8005de8 <TIM_Base_SetConfig+0x114>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01f      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d34:	d01b      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <TIM_Base_SetConfig+0x118>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d017      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	@ (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	@ (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a29      	ldr	r2, [pc, #164]	@ (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a28      	ldr	r2, [pc, #160]	@ (8005dfc <TIM_Base_SetConfig+0x128>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a27      	ldr	r2, [pc, #156]	@ (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a26      	ldr	r2, [pc, #152]	@ (8005e04 <TIM_Base_SetConfig+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d108      	bne.n	8005d80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a10      	ldr	r2, [pc, #64]	@ (8005de8 <TIM_Base_SetConfig+0x114>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00f      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a12      	ldr	r2, [pc, #72]	@ (8005df8 <TIM_Base_SetConfig+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a11      	ldr	r2, [pc, #68]	@ (8005dfc <TIM_Base_SetConfig+0x128>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a10      	ldr	r2, [pc, #64]	@ (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e04 <TIM_Base_SetConfig+0x130>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d103      	bne.n	8005dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	615a      	str	r2, [r3, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e068      	b.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2e      	ldr	r2, [pc, #184]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d108      	bne.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1e      	ldr	r2, [pc, #120]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d01d      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e92:	d018      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1b      	ldr	r2, [pc, #108]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a18      	ldr	r2, [pc, #96]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a13      	ldr	r2, [pc, #76]	@ (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a14      	ldr	r2, [pc, #80]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40013400 	.word	0x40013400
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40014000 	.word	0x40014000

08005f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e040      	b.n	8005fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb fef6 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2224      	movs	r2, #36	@ 0x24
 8005f44:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f986 	bl	8006268 <UART_SetConfig>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e022      	b.n	8005fac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fc34 	bl	80067dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0201 	orr.w	r2, r2, #1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fcbb 	bl	8006920 <UART_CheckIdleState>
 8005faa:	4603      	mov	r3, r0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d113      	bne.n	800600c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8113 	beq.w	8006228 <HAL_UART_IRQHandler+0x274>
      {
        huart->RxISR(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      }
      return;
 800600a:	e10d      	b.n	8006228 <HAL_UART_IRQHandler+0x274>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80d6 	beq.w	80061c0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4b85      	ldr	r3, [pc, #532]	@ (8006238 <HAL_UART_IRQHandler+0x284>)
 8006022:	4013      	ands	r3, r2
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80cb 	beq.w	80061c0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00e      	beq.n	8006052 <HAL_UART_IRQHandler+0x9e>
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800604a:	f043 0201 	orr.w	r2, r3, #1
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <HAL_UART_IRQHandler+0xc6>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2202      	movs	r2, #2
 800606c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <HAL_UART_IRQHandler+0xee>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2204      	movs	r2, #4
 8006094:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	67da      	str	r2, [r3, #124]	@ 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2208      	movs	r2, #8
 80060c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060cc:	f043 0208 	orr.w	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00f      	beq.n	80060fe <HAL_UART_IRQHandler+0x14a>
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f6:	f043 0220 	orr.w	r2, r3, #32
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8092 	beq.w	800622c <HAL_UART_IRQHandler+0x278>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006130:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d004      	beq.n	800614a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006146:	2b00      	cmp	r3, #0
 8006148:	d031      	beq.n	80061ae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fca8 	bl	8006aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615a:	2b40      	cmp	r3, #64	@ 0x40
 800615c:	d123      	bne.n	80061a6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d013      	beq.n	800619e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800617a:	4a30      	ldr	r2, [pc, #192]	@ (800623c <HAL_UART_IRQHandler+0x288>)
 800617c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006182:	4618      	mov	r0, r3
 8006184:	f7fc fc5d 	bl	8002a42 <HAL_DMA_Abort_IT>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006198:	4610      	mov	r0, r2
 800619a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	e00e      	b.n	80061bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f858 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	e00a      	b.n	80061bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f854 	bl	8006254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	e006      	b.n	80061bc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f850 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 80061ba:	e037      	b.n	800622c <HAL_UART_IRQHandler+0x278>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061bc:	bf00      	nop
    return;
 80061be:	e035      	b.n	800622c <HAL_UART_IRQHandler+0x278>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <HAL_UART_IRQHandler+0x232>
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80061dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fcad 	bl	8006b3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061e4:	e025      	b.n	8006232 <HAL_UART_IRQHandler+0x27e>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d016      	beq.n	8006230 <HAL_UART_IRQHandler+0x27c>
    {
      huart->TxISR(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
    }
    return;
 800620a:	e011      	b.n	8006230 <HAL_UART_IRQHandler+0x27c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <HAL_UART_IRQHandler+0x27e>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_UART_IRQHandler+0x27e>
  {
    UART_EndTransmit_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc73 	bl	8006b0c <UART_EndTransmit_IT>
    return;
 8006226:	e004      	b.n	8006232 <HAL_UART_IRQHandler+0x27e>
      return;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_UART_IRQHandler+0x27e>
    return;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_UART_IRQHandler+0x27e>
    return;
 8006230:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	04000120 	.word	0x04000120
 800623c:	08006ae1 	.word	0x08006ae1

08006240 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800626c:	b08a      	sub	sp, #40	@ 0x28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	4313      	orrs	r3, r2
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4ba4      	ldr	r3, [pc, #656]	@ (8006528 <UART_SetConfig+0x2c0>)
 8006298:	4013      	ands	r3, r2
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	6812      	ldr	r2, [r2, #0]
 800629e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a99      	ldr	r2, [pc, #612]	@ (800652c <UART_SetConfig+0x2c4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	4313      	orrs	r3, r2
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	430a      	orrs	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a90      	ldr	r2, [pc, #576]	@ (8006530 <UART_SetConfig+0x2c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d126      	bne.n	8006340 <UART_SetConfig+0xd8>
 80062f2:	4b90      	ldr	r3, [pc, #576]	@ (8006534 <UART_SetConfig+0x2cc>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d81b      	bhi.n	8006338 <UART_SetConfig+0xd0>
 8006300:	a201      	add	r2, pc, #4	@ (adr r2, 8006308 <UART_SetConfig+0xa0>)
 8006302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006306:	bf00      	nop
 8006308:	08006319 	.word	0x08006319
 800630c:	08006329 	.word	0x08006329
 8006310:	08006321 	.word	0x08006321
 8006314:	08006331 	.word	0x08006331
 8006318:	2301      	movs	r3, #1
 800631a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800631e:	e116      	b.n	800654e <UART_SetConfig+0x2e6>
 8006320:	2302      	movs	r3, #2
 8006322:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006326:	e112      	b.n	800654e <UART_SetConfig+0x2e6>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800632e:	e10e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006336:	e10a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800633e:	e106      	b.n	800654e <UART_SetConfig+0x2e6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a7c      	ldr	r2, [pc, #496]	@ (8006538 <UART_SetConfig+0x2d0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d138      	bne.n	80063bc <UART_SetConfig+0x154>
 800634a:	4b7a      	ldr	r3, [pc, #488]	@ (8006534 <UART_SetConfig+0x2cc>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	d82d      	bhi.n	80063b4 <UART_SetConfig+0x14c>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0xf8>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006395 	.word	0x08006395
 8006364:	080063b5 	.word	0x080063b5
 8006368:	080063b5 	.word	0x080063b5
 800636c:	080063b5 	.word	0x080063b5
 8006370:	080063a5 	.word	0x080063a5
 8006374:	080063b5 	.word	0x080063b5
 8006378:	080063b5 	.word	0x080063b5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	0800639d 	.word	0x0800639d
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063ad 	.word	0x080063ad
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800639a:	e0d8      	b.n	800654e <UART_SetConfig+0x2e6>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063a2:	e0d4      	b.n	800654e <UART_SetConfig+0x2e6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063aa:	e0d0      	b.n	800654e <UART_SetConfig+0x2e6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b2:	e0cc      	b.n	800654e <UART_SetConfig+0x2e6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ba:	e0c8      	b.n	800654e <UART_SetConfig+0x2e6>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5e      	ldr	r2, [pc, #376]	@ (800653c <UART_SetConfig+0x2d4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d125      	bne.n	8006412 <UART_SetConfig+0x1aa>
 80063c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <UART_SetConfig+0x2cc>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063d0:	2b30      	cmp	r3, #48	@ 0x30
 80063d2:	d016      	beq.n	8006402 <UART_SetConfig+0x19a>
 80063d4:	2b30      	cmp	r3, #48	@ 0x30
 80063d6:	d818      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d00a      	beq.n	80063f2 <UART_SetConfig+0x18a>
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d814      	bhi.n	800640a <UART_SetConfig+0x1a2>
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <UART_SetConfig+0x182>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d008      	beq.n	80063fa <UART_SetConfig+0x192>
 80063e8:	e00f      	b.n	800640a <UART_SetConfig+0x1a2>
 80063ea:	2300      	movs	r3, #0
 80063ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f0:	e0ad      	b.n	800654e <UART_SetConfig+0x2e6>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063f8:	e0a9      	b.n	800654e <UART_SetConfig+0x2e6>
 80063fa:	2304      	movs	r3, #4
 80063fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006400:	e0a5      	b.n	800654e <UART_SetConfig+0x2e6>
 8006402:	2308      	movs	r3, #8
 8006404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006408:	e0a1      	b.n	800654e <UART_SetConfig+0x2e6>
 800640a:	2310      	movs	r3, #16
 800640c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006410:	e09d      	b.n	800654e <UART_SetConfig+0x2e6>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4a      	ldr	r2, [pc, #296]	@ (8006540 <UART_SetConfig+0x2d8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d125      	bne.n	8006468 <UART_SetConfig+0x200>
 800641c:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006422:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006426:	2bc0      	cmp	r3, #192	@ 0xc0
 8006428:	d016      	beq.n	8006458 <UART_SetConfig+0x1f0>
 800642a:	2bc0      	cmp	r3, #192	@ 0xc0
 800642c:	d818      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 800642e:	2b80      	cmp	r3, #128	@ 0x80
 8006430:	d00a      	beq.n	8006448 <UART_SetConfig+0x1e0>
 8006432:	2b80      	cmp	r3, #128	@ 0x80
 8006434:	d814      	bhi.n	8006460 <UART_SetConfig+0x1f8>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x1d8>
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d008      	beq.n	8006450 <UART_SetConfig+0x1e8>
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x1f8>
 8006440:	2300      	movs	r3, #0
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e082      	b.n	800654e <UART_SetConfig+0x2e6>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e07e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006456:	e07a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645e:	e076      	b.n	800654e <UART_SetConfig+0x2e6>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006466:	e072      	b.n	800654e <UART_SetConfig+0x2e6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a35      	ldr	r2, [pc, #212]	@ (8006544 <UART_SetConfig+0x2dc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d12a      	bne.n	80064c8 <UART_SetConfig+0x260>
 8006472:	4b30      	ldr	r3, [pc, #192]	@ (8006534 <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006480:	d01a      	beq.n	80064b8 <UART_SetConfig+0x250>
 8006482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006486:	d81b      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800648c:	d00c      	beq.n	80064a8 <UART_SetConfig+0x240>
 800648e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006492:	d815      	bhi.n	80064c0 <UART_SetConfig+0x258>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <UART_SetConfig+0x238>
 8006498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800649c:	d008      	beq.n	80064b0 <UART_SetConfig+0x248>
 800649e:	e00f      	b.n	80064c0 <UART_SetConfig+0x258>
 80064a0:	2300      	movs	r3, #0
 80064a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a6:	e052      	b.n	800654e <UART_SetConfig+0x2e6>
 80064a8:	2302      	movs	r3, #2
 80064aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ae:	e04e      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b0:	2304      	movs	r3, #4
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064b6:	e04a      	b.n	800654e <UART_SetConfig+0x2e6>
 80064b8:	2308      	movs	r3, #8
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064be:	e046      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c6:	e042      	b.n	800654e <UART_SetConfig+0x2e6>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a17      	ldr	r2, [pc, #92]	@ (800652c <UART_SetConfig+0x2c4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d13a      	bne.n	8006548 <UART_SetConfig+0x2e0>
 80064d2:	4b18      	ldr	r3, [pc, #96]	@ (8006534 <UART_SetConfig+0x2cc>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80064dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e0:	d01a      	beq.n	8006518 <UART_SetConfig+0x2b0>
 80064e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80064e6:	d81b      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ec:	d00c      	beq.n	8006508 <UART_SetConfig+0x2a0>
 80064ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064f2:	d815      	bhi.n	8006520 <UART_SetConfig+0x2b8>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <UART_SetConfig+0x298>
 80064f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064fc:	d008      	beq.n	8006510 <UART_SetConfig+0x2a8>
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x2b8>
 8006500:	2300      	movs	r3, #0
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e022      	b.n	800654e <UART_SetConfig+0x2e6>
 8006508:	2302      	movs	r3, #2
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e01e      	b.n	800654e <UART_SetConfig+0x2e6>
 8006510:	2304      	movs	r3, #4
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e01a      	b.n	800654e <UART_SetConfig+0x2e6>
 8006518:	2308      	movs	r3, #8
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e016      	b.n	800654e <UART_SetConfig+0x2e6>
 8006520:	2310      	movs	r3, #16
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e012      	b.n	800654e <UART_SetConfig+0x2e6>
 8006528:	efff69f3 	.word	0xefff69f3
 800652c:	40008000 	.word	0x40008000
 8006530:	40013800 	.word	0x40013800
 8006534:	40021000 	.word	0x40021000
 8006538:	40004400 	.word	0x40004400
 800653c:	40004800 	.word	0x40004800
 8006540:	40004c00 	.word	0x40004c00
 8006544:	40005000 	.word	0x40005000
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4aa0      	ldr	r2, [pc, #640]	@ (80067d4 <UART_SetConfig+0x56c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d17a      	bne.n	800664e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800655c:	2b08      	cmp	r3, #8
 800655e:	d824      	bhi.n	80065aa <UART_SetConfig+0x342>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <UART_SetConfig+0x300>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	0800658d 	.word	0x0800658d
 800656c:	080065ab 	.word	0x080065ab
 8006570:	08006595 	.word	0x08006595
 8006574:	080065ab 	.word	0x080065ab
 8006578:	0800659b 	.word	0x0800659b
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065ab 	.word	0x080065ab
 8006588:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800658c:	f7fe fc22 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 8006590:	61f8      	str	r0, [r7, #28]
        break;
 8006592:	e010      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b90      	ldr	r3, [pc, #576]	@ (80067d8 <UART_SetConfig+0x570>)
 8006596:	61fb      	str	r3, [r7, #28]
        break;
 8006598:	e00d      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fe fb83 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 800659e:	61f8      	str	r0, [r7, #28]
        break;
 80065a0:	e009      	b.n	80065b6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	61fb      	str	r3, [r7, #28]
        break;
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80fd 	beq.w	80067b8 <UART_SetConfig+0x550>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d305      	bcc.n	80065da <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d903      	bls.n	80065e2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065e0:	e0ea      	b.n	80067b8 <UART_SetConfig+0x550>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2200      	movs	r2, #0
 80065e6:	461c      	mov	r4, r3
 80065e8:	4615      	mov	r5, r2
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	022b      	lsls	r3, r5, #8
 80065f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065f8:	0222      	lsls	r2, r4, #8
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	6849      	ldr	r1, [r1, #4]
 80065fe:	0849      	lsrs	r1, r1, #1
 8006600:	2000      	movs	r0, #0
 8006602:	4688      	mov	r8, r1
 8006604:	4681      	mov	r9, r0
 8006606:	eb12 0a08 	adds.w	sl, r2, r8
 800660a:	eb43 0b09 	adc.w	fp, r3, r9
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	f7fa fb32 	bl	8000c88 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4613      	mov	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006632:	d308      	bcc.n	8006646 <UART_SetConfig+0x3de>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800663a:	d204      	bcs.n	8006646 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	60da      	str	r2, [r3, #12]
 8006644:	e0b8      	b.n	80067b8 <UART_SetConfig+0x550>
        }
        else
        {
          ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800664c:	e0b4      	b.n	80067b8 <UART_SetConfig+0x550>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006656:	d15f      	bne.n	8006718 <UART_SetConfig+0x4b0>
  {
    switch (clocksource)
 8006658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800665c:	2b08      	cmp	r3, #8
 800665e:	d828      	bhi.n	80066b2 <UART_SetConfig+0x44a>
 8006660:	a201      	add	r2, pc, #4	@ (adr r2, 8006668 <UART_SetConfig+0x400>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066b3 	.word	0x080066b3
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066b3 	.word	0x080066b3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fe fba2 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 8006690:	61f8      	str	r0, [r7, #28]
        break;
 8006692:	e014      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fe fbb4 	bl	8004e00 <HAL_RCC_GetPCLK2Freq>
 8006698:	61f8      	str	r0, [r7, #28]
        break;
 800669a:	e010      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b4e      	ldr	r3, [pc, #312]	@ (80067d8 <UART_SetConfig+0x570>)
 800669e:	61fb      	str	r3, [r7, #28]
        break;
 80066a0:	e00d      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fe faff 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 80066a6:	61f8      	str	r0, [r7, #28]
        break;
 80066a8:	e009      	b.n	80066be <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ae:	61fb      	str	r3, [r7, #28]
        break;
 80066b0:	e005      	b.n	80066be <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d079      	beq.n	80067b8 <UART_SetConfig+0x550>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005a      	lsls	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	441a      	add	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d8:	b29b      	uxth	r3, r3
 80066da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b0f      	cmp	r3, #15
 80066e0:	d916      	bls.n	8006710 <UART_SetConfig+0x4a8>
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066e8:	d212      	bcs.n	8006710 <UART_SetConfig+0x4a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f023 030f 	bic.w	r3, r3, #15
 80066f2:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	b29a      	uxth	r2, r3
 8006700:	8afb      	ldrh	r3, [r7, #22]
 8006702:	4313      	orrs	r3, r2
 8006704:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	8afa      	ldrh	r2, [r7, #22]
 800670c:	60da      	str	r2, [r3, #12]
 800670e:	e053      	b.n	80067b8 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006716:	e04f      	b.n	80067b8 <UART_SetConfig+0x550>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006718:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800671c:	2b08      	cmp	r3, #8
 800671e:	d828      	bhi.n	8006772 <UART_SetConfig+0x50a>
 8006720:	a201      	add	r2, pc, #4	@ (adr r2, 8006728 <UART_SetConfig+0x4c0>)
 8006722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006726:	bf00      	nop
 8006728:	0800674d 	.word	0x0800674d
 800672c:	08006755 	.word	0x08006755
 8006730:	0800675d 	.word	0x0800675d
 8006734:	08006773 	.word	0x08006773
 8006738:	08006763 	.word	0x08006763
 800673c:	08006773 	.word	0x08006773
 8006740:	08006773 	.word	0x08006773
 8006744:	08006773 	.word	0x08006773
 8006748:	0800676b 	.word	0x0800676b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674c:	f7fe fb42 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 8006750:	61f8      	str	r0, [r7, #28]
        break;
 8006752:	e014      	b.n	800677e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006754:	f7fe fb54 	bl	8004e00 <HAL_RCC_GetPCLK2Freq>
 8006758:	61f8      	str	r0, [r7, #28]
        break;
 800675a:	e010      	b.n	800677e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800675c:	4b1e      	ldr	r3, [pc, #120]	@ (80067d8 <UART_SetConfig+0x570>)
 800675e:	61fb      	str	r3, [r7, #28]
        break;
 8006760:	e00d      	b.n	800677e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006762:	f7fe fa9f 	bl	8004ca4 <HAL_RCC_GetSysClockFreq>
 8006766:	61f8      	str	r0, [r7, #28]
        break;
 8006768:	e009      	b.n	800677e <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800676a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800676e:	61fb      	str	r3, [r7, #28]
        break;
 8006770:	e005      	b.n	800677e <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800677c:	bf00      	nop
    }

    if (pclk != 0U)
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d019      	beq.n	80067b8 <UART_SetConfig+0x550>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	085a      	lsrs	r2, r3, #1
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	441a      	add	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	fbb2 f3f3 	udiv	r3, r2, r3
 8006796:	b29b      	uxth	r3, r3
 8006798:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b0f      	cmp	r3, #15
 800679e:	d908      	bls.n	80067b2 <UART_SetConfig+0x54a>
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a6:	d204      	bcs.n	80067b2 <UART_SetConfig+0x54a>
      {
        huart->Instance->BRR = usartdiv;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	60da      	str	r2, [r3, #12]
 80067b0:	e002      	b.n	80067b8 <UART_SetConfig+0x550>
      }
      else
      {
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 80067c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	@ 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d2:	bf00      	nop
 80067d4:	40008000 	.word	0x40008000
 80067d8:	00f42400 	.word	0x00f42400

080067dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	f003 0310 	and.w	r3, r3, #16
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068da:	d10a      	bne.n	80068f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af02      	add	r7, sp, #8
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800692e:	f7fb ff47 	bl	80027c0 <HAL_GetTick>
 8006932:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b08      	cmp	r3, #8
 8006940:	d10e      	bne.n	8006960 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006942:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f82a 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e020      	b.n	80069a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d10e      	bne.n	800698c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f814 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e00a      	b.n	80069a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ba:	e05d      	b.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d059      	beq.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c4:	f7fb fefc 	bl	80027c0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d302      	bcc.n	80069da <UART_WaitOnFlagUntilTimeout+0x30>
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d11b      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80069e8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0201 	bic.w	r2, r2, #1
 80069f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e042      	b.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02b      	beq.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2e:	d123      	bne.n	8006a78 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a38:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8006a48:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2220      	movs	r2, #32
 8006a64:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	67da      	str	r2, [r3, #124]	@ 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

          return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e00f      	b.n	8006a98 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69da      	ldr	r2, [r3, #28]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4013      	ands	r3, r2
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d092      	beq.n	80069bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8006ab6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689a      	ldr	r2, [r3, #8]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 0201 	bic.w	r2, r2, #1
 8006ac6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fba8 	bl	8006254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b22:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff fb85 	bl	8006240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b46:	bf00      	nop
 8006b48:	370c      	adds	r7, #12
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b52:	b084      	sub	sp, #16
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	f107 001c 	add.w	r0, r7, #28
 8006b60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d122      	bne.n	8006bb0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d105      	bne.n	8006ba4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f9db 	bl	8007f60 <USB_CoreReset>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]
 8006bae:	e01a      	b.n	8006be6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f9cf 	bl	8007f60 <USB_CoreReset>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bd8:	e005      	b.n	8006be6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf2:	b004      	add	sp, #16
 8006bf4:	4770      	bx	lr
	...

08006bf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d165      	bne.n	8006cd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8006d08 <USB_SetTurnaroundTime+0x110>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d906      	bls.n	8006c22 <USB_SetTurnaroundTime+0x2a>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4a3d      	ldr	r2, [pc, #244]	@ (8006d0c <USB_SetTurnaroundTime+0x114>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d202      	bcs.n	8006c22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c1c:	230f      	movs	r3, #15
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e05c      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4a39      	ldr	r2, [pc, #228]	@ (8006d0c <USB_SetTurnaroundTime+0x114>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d306      	bcc.n	8006c38 <USB_SetTurnaroundTime+0x40>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a38      	ldr	r2, [pc, #224]	@ (8006d10 <USB_SetTurnaroundTime+0x118>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d202      	bcs.n	8006c38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c32:	230e      	movs	r3, #14
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e051      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4a35      	ldr	r2, [pc, #212]	@ (8006d10 <USB_SetTurnaroundTime+0x118>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d306      	bcc.n	8006c4e <USB_SetTurnaroundTime+0x56>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4a34      	ldr	r2, [pc, #208]	@ (8006d14 <USB_SetTurnaroundTime+0x11c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d202      	bcs.n	8006c4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c48:	230d      	movs	r3, #13
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e046      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <USB_SetTurnaroundTime+0x11c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d306      	bcc.n	8006c64 <USB_SetTurnaroundTime+0x6c>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a2f      	ldr	r2, [pc, #188]	@ (8006d18 <USB_SetTurnaroundTime+0x120>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d802      	bhi.n	8006c64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c5e:	230c      	movs	r3, #12
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e03b      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4a2c      	ldr	r2, [pc, #176]	@ (8006d18 <USB_SetTurnaroundTime+0x120>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d906      	bls.n	8006c7a <USB_SetTurnaroundTime+0x82>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006d1c <USB_SetTurnaroundTime+0x124>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d802      	bhi.n	8006c7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c74:	230b      	movs	r3, #11
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e030      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4a27      	ldr	r2, [pc, #156]	@ (8006d1c <USB_SetTurnaroundTime+0x124>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d906      	bls.n	8006c90 <USB_SetTurnaroundTime+0x98>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a26      	ldr	r2, [pc, #152]	@ (8006d20 <USB_SetTurnaroundTime+0x128>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d802      	bhi.n	8006c90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e025      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4a23      	ldr	r2, [pc, #140]	@ (8006d20 <USB_SetTurnaroundTime+0x128>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d906      	bls.n	8006ca6 <USB_SetTurnaroundTime+0xae>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4a22      	ldr	r2, [pc, #136]	@ (8006d24 <USB_SetTurnaroundTime+0x12c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d202      	bcs.n	8006ca6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ca0:	2309      	movs	r3, #9
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e01a      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d24 <USB_SetTurnaroundTime+0x12c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d306      	bcc.n	8006cbc <USB_SetTurnaroundTime+0xc4>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <USB_SetTurnaroundTime+0x130>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d802      	bhi.n	8006cbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e00f      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8006d28 <USB_SetTurnaroundTime+0x130>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d906      	bls.n	8006cd2 <USB_SetTurnaroundTime+0xda>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4a19      	ldr	r2, [pc, #100]	@ (8006d2c <USB_SetTurnaroundTime+0x134>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d202      	bcs.n	8006cd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ccc:	2307      	movs	r3, #7
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e004      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e001      	b.n	8006cdc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006cd8:	2309      	movs	r3, #9
 8006cda:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	029b      	lsls	r3, r3, #10
 8006cf0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	00d8acbf 	.word	0x00d8acbf
 8006d0c:	00e4e1c0 	.word	0x00e4e1c0
 8006d10:	00f42400 	.word	0x00f42400
 8006d14:	01067380 	.word	0x01067380
 8006d18:	011a499f 	.word	0x011a499f
 8006d1c:	01312cff 	.word	0x01312cff
 8006d20:	014ca43f 	.word	0x014ca43f
 8006d24:	016e3600 	.word	0x016e3600
 8006d28:	01a6ab1f 	.word	0x01a6ab1f
 8006d2c:	01e84800 	.word	0x01e84800

08006d30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f043 0201 	orr.w	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 0201 	bic.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d106      	bne.n	8006da0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60da      	str	r2, [r3, #12]
 8006d9e:	e00b      	b.n	8006db8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	e001      	b.n	8006db8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e003      	b.n	8006dc0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006db8:	2032      	movs	r0, #50	@ 0x32
 8006dba:	f7fb fd0d 	bl	80027d8 <HAL_Delay>

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006dc8:	b084      	sub	sp, #16
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b086      	sub	sp, #24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e009      	b.n	8006dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	3340      	adds	r3, #64	@ 0x40
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	2200      	movs	r2, #0
 8006df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b0e      	cmp	r3, #14
 8006e00:	d9f2      	bls.n	8006de8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11c      	bne.n	8006e42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e16:	f043 0302 	orr.w	r3, r3, #2
 8006e1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e20:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e005      	b.n	8006e4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e60:	4619      	mov	r1, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e68:	461a      	mov	r2, r3
 8006e6a:	680b      	ldr	r3, [r1, #0]
 8006e6c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e6e:	2103      	movs	r1, #3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f93d 	bl	80070f0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e76:	2110      	movs	r1, #16
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f8f1 	bl	8007060 <USB_FlushTxFifo>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f90f 	bl	80070ac <USB_FlushRxFifo>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	e043      	b.n	8006f4a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ed8:	d118      	bne.n	8006f0c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eec:	461a      	mov	r2, r3
 8006eee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	e013      	b.n	8006f1e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f02:	461a      	mov	r2, r3
 8006f04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e008      	b.n	8006f1e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f18:	461a      	mov	r2, r3
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	3301      	adds	r3, #1
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d3b7      	bcc.n	8006ec2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	e043      	b.n	8006fe0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f6e:	d118      	bne.n	8006fa2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	e013      	b.n	8006fb4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	e008      	b.n	8006fb4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d3b7      	bcc.n	8006f58 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ff6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ffa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007008:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f043 0210 	orr.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	4b10      	ldr	r3, [pc, #64]	@ (800705c <USB_DevInit+0x294>)
 800701c:	4313      	orrs	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	f043 0208 	orr.w	r2, r3, #8
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007036:	2b01      	cmp	r3, #1
 8007038:	d107      	bne.n	800704a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007042:	f043 0304 	orr.w	r3, r3, #4
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800704a:	7dfb      	ldrb	r3, [r7, #23]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007056:	b004      	add	sp, #16
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	803c3800 	.word	0x803c3800

08007060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	019b      	lsls	r3, r3, #6
 8007072:	f043 0220 	orr.w	r2, r3, #32
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4a09      	ldr	r2, [pc, #36]	@ (80070a8 <USB_FlushTxFifo+0x48>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d901      	bls.n	800708c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e006      	b.n	800709a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b20      	cmp	r3, #32
 8007096:	d0f0      	beq.n	800707a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	00030d40 	.word	0x00030d40

080070ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2210      	movs	r2, #16
 80070bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <USB_FlushRxFifo+0x40>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d901      	bls.n	80070d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e006      	b.n	80070de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b10      	cmp	r3, #16
 80070da:	d0f0      	beq.n	80070be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	00030d40 	.word	0x00030d40

080070f0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007110:	4313      	orrs	r3, r2
 8007112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0306 	and.w	r3, r3, #6
 800713a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b02      	cmp	r3, #2
 8007140:	d002      	beq.n	8007148 <USB_GetDevSpeed+0x26>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b06      	cmp	r3, #6
 8007146:	d102      	bne.n	800714e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007148:	2302      	movs	r3, #2
 800714a:	75fb      	strb	r3, [r7, #23]
 800714c:	e001      	b.n	8007152 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800714e:	230f      	movs	r3, #15
 8007150:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	785b      	ldrb	r3, [r3, #1]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d13a      	bne.n	80071f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	b29b      	uxth	r3, r3
 8007194:	68f9      	ldr	r1, [r7, #12]
 8007196:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800719a:	4313      	orrs	r3, r2
 800719c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d155      	bne.n	8007260 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	78db      	ldrb	r3, [r3, #3]
 80071ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	059b      	lsls	r3, r3, #22
 80071d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071d8:	4313      	orrs	r3, r2
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	0151      	lsls	r1, r2, #5
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	440a      	add	r2, r1
 80071e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	e036      	b.n	8007260 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f8:	69da      	ldr	r2, [r3, #28]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	2101      	movs	r1, #1
 8007204:	fa01 f303 	lsl.w	r3, r1, r3
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	68f9      	ldr	r1, [r7, #12]
 800720c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007210:	4313      	orrs	r3, r2
 8007212:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d11a      	bne.n	8007260 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	78db      	ldrb	r3, [r3, #3]
 8007244:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007246:	430b      	orrs	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800725a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800725e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d161      	bne.n	8007350 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800729e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a2:	d11f      	bne.n	80072e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	2101      	movs	r1, #1
 80072f6:	fa01 f303 	lsl.w	r3, r1, r3
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	43db      	mvns	r3, r3
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007304:	4013      	ands	r3, r2
 8007306:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	2101      	movs	r1, #1
 800731a:	fa01 f303 	lsl.w	r3, r1, r3
 800731e:	b29b      	uxth	r3, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	68f9      	ldr	r1, [r7, #12]
 8007324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007328:	4013      	ands	r3, r2
 800732a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	0159      	lsls	r1, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	440b      	add	r3, r1
 8007342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007346:	4619      	mov	r1, r3
 8007348:	4b35      	ldr	r3, [pc, #212]	@ (8007420 <USB_DeactivateEndpoint+0x1b0>)
 800734a:	4013      	ands	r3, r2
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	e060      	b.n	8007412 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007366:	d11f      	bne.n	80073a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007382:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007386:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	2101      	movs	r1, #1
 80073ba:	fa01 f303 	lsl.w	r3, r1, r3
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	43db      	mvns	r3, r3
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073c8:	4013      	ands	r3, r2
 80073ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	2101      	movs	r1, #1
 80073de:	fa01 f303 	lsl.w	r3, r1, r3
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	43db      	mvns	r3, r3
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ec:	4013      	ands	r3, r2
 80073ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	0159      	lsls	r1, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	440b      	add	r3, r1
 8007406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800740a:	4619      	mov	r1, r3
 800740c:	4b05      	ldr	r3, [pc, #20]	@ (8007424 <USB_DeactivateEndpoint+0x1b4>)
 800740e:	4013      	ands	r3, r2
 8007410:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	ec337800 	.word	0xec337800
 8007424:	eff37800 	.word	0xeff37800

08007428 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b01      	cmp	r3, #1
 8007442:	f040 810a 	bne.w	800765a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d132      	bne.n	80074b4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	0151      	lsls	r1, r2, #5
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	440a      	add	r2, r1
 8007464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007468:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800746c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800748c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	0151      	lsls	r1, r2, #5
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	440a      	add	r2, r1
 80074a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ac:	0cdb      	lsrs	r3, r3, #19
 80074ae:	04db      	lsls	r3, r3, #19
 80074b0:	6113      	str	r3, [r2, #16]
 80074b2:	e074      	b.n	800759e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ce:	0cdb      	lsrs	r3, r3, #19
 80074d0:	04db      	lsls	r3, r3, #19
 80074d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6959      	ldr	r1, [r3, #20]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	440b      	add	r3, r1
 8007510:	1e59      	subs	r1, r3, #1
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	fbb1 f3f3 	udiv	r3, r1, r3
 800751a:	04d9      	lsls	r1, r3, #19
 800751c:	4baf      	ldr	r3, [pc, #700]	@ (80077dc <USB_EPStartXfer+0x3b4>)
 800751e:	400b      	ands	r3, r1
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	0148      	lsls	r0, r1, #5
 8007524:	6979      	ldr	r1, [r7, #20]
 8007526:	4401      	add	r1, r0
 8007528:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800752c:	4313      	orrs	r3, r2
 800752e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007546:	6939      	ldr	r1, [r7, #16]
 8007548:	0148      	lsls	r0, r1, #5
 800754a:	6979      	ldr	r1, [r7, #20]
 800754c:	4401      	add	r1, r0
 800754e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007552:	4313      	orrs	r3, r2
 8007554:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	78db      	ldrb	r3, [r3, #3]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d11f      	bne.n	800759e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	4413      	add	r3, r2
 8007566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	440a      	add	r2, r1
 8007574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007578:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800757c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	0151      	lsls	r1, r2, #5
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	440a      	add	r2, r1
 8007594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007598:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800759c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075bc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d015      	beq.n	80075f2 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 8100 	beq.w	80077d0 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	2101      	movs	r1, #1
 80075e2:	fa01 f303 	lsl.w	r3, r1, r3
 80075e6:	6979      	ldr	r1, [r7, #20]
 80075e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075ec:	4313      	orrs	r3, r2
 80075ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80075f0:	e0ee      	b.n	80077d0 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d110      	bne.n	8007624 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800761c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	e00f      	b.n	8007644 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800763e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007642:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68d9      	ldr	r1, [r3, #12]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	b29b      	uxth	r3, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f9e2 	bl	8007a1c <USB_WritePacket>
 8007658:	e0ba      	b.n	80077d0 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	015a      	lsls	r2, r3, #5
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	4413      	add	r3, r2
 8007662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	0151      	lsls	r1, r2, #5
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	440a      	add	r2, r1
 8007670:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007674:	0cdb      	lsrs	r3, r3, #19
 8007676:	04db      	lsls	r3, r3, #19
 8007678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	0151      	lsls	r1, r2, #5
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	440a      	add	r2, r1
 8007690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007694:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007698:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800769c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d123      	bne.n	80076ee <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076bc:	6939      	ldr	r1, [r7, #16]
 80076be:	0148      	lsls	r0, r1, #5
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	4401      	add	r1, r0
 80076c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076c8:	4313      	orrs	r3, r2
 80076ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076ea:	6113      	str	r3, [r2, #16]
 80076ec:	e033      	b.n	8007756 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695a      	ldr	r2, [r3, #20]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4413      	add	r3, r2
 80076f8:	1e5a      	subs	r2, r3, #1
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	89fb      	ldrh	r3, [r7, #14]
 8007714:	04d9      	lsls	r1, r3, #19
 8007716:	4b31      	ldr	r3, [pc, #196]	@ (80077dc <USB_EPStartXfer+0x3b4>)
 8007718:	400b      	ands	r3, r1
 800771a:	6939      	ldr	r1, [r7, #16]
 800771c:	0148      	lsls	r0, r1, #5
 800771e:	6979      	ldr	r1, [r7, #20]
 8007720:	4401      	add	r1, r0
 8007722:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007726:	4313      	orrs	r3, r2
 8007728:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	89f9      	ldrh	r1, [r7, #14]
 800773e:	fb01 f303 	mul.w	r3, r1, r3
 8007742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007746:	6939      	ldr	r1, [r7, #16]
 8007748:	0148      	lsls	r0, r1, #5
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	4401      	add	r1, r0
 800774e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007752:	4313      	orrs	r3, r2
 8007754:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	78db      	ldrb	r3, [r3, #3]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d128      	bne.n	80077b0 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800776a:	2b00      	cmp	r3, #0
 800776c:	d110      	bne.n	8007790 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	0151      	lsls	r1, r2, #5
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	440a      	add	r2, r1
 8007784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007788:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e00f      	b.n	80077b0 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	1ff80000 	.word	0x1ff80000

080077e0 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	f040 80ab 	bne.w	8007954 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d132      	bne.n	800786c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007820:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007824:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007828:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007844:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007848:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	440a      	add	r2, r1
 8007860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007864:	0cdb      	lsrs	r3, r3, #19
 8007866:	04db      	lsls	r3, r3, #19
 8007868:	6113      	str	r3, [r2, #16]
 800786a:	e04e      	b.n	800790a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007886:	0cdb      	lsrs	r3, r3, #19
 8007888:	04db      	lsls	r3, r3, #19
 800788a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695a      	ldr	r2, [r3, #20]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d903      	bls.n	80078c4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f0:	691a      	ldr	r2, [r3, #16]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	0148      	lsls	r0, r1, #5
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	4401      	add	r1, r0
 8007902:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007906:	4313      	orrs	r3, r2
 8007908:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007924:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007928:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d06d      	beq.n	8007a0e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	2101      	movs	r1, #1
 8007944:	fa01 f303 	lsl.w	r3, r1, r3
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800794e:	4313      	orrs	r3, r2
 8007950:	634b      	str	r3, [r1, #52]	@ 0x34
 8007952:	e05c      	b.n	8007a0e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	440a      	add	r2, r1
 800796a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800796e:	0cdb      	lsrs	r3, r3, #19
 8007970:	04db      	lsls	r3, r3, #19
 8007972:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800798e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007992:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007996:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	0151      	lsls	r1, r2, #5
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	440a      	add	r2, r1
 80079be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	0148      	lsls	r0, r1, #5
 80079e2:	68f9      	ldr	r1, [r7, #12]
 80079e4:	4401      	add	r1, r0
 80079e6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079ea:	4313      	orrs	r3, r2
 80079ec:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b089      	sub	sp, #36	@ 0x24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4611      	mov	r1, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	71fb      	strb	r3, [r7, #7]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007a3a:	88bb      	ldrh	r3, [r7, #4]
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007a42:	2300      	movs	r3, #0
 8007a44:	61bb      	str	r3, [r7, #24]
 8007a46:	e00f      	b.n	8007a68 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	031a      	lsls	r2, r3, #12
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a54:	461a      	mov	r2, r3
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	3301      	adds	r3, #1
 8007a66:	61bb      	str	r3, [r7, #24]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d3eb      	bcc.n	8007a48 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3724      	adds	r7, #36	@ 0x24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b089      	sub	sp, #36	@ 0x24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	60b9      	str	r1, [r7, #8]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	3303      	adds	r3, #3
 8007a98:	089b      	lsrs	r3, r3, #2
 8007a9a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61bb      	str	r3, [r7, #24]
 8007aa0:	e00b      	b.n	8007aba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	601a      	str	r2, [r3, #0]
    pDest++;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d3ef      	bcc.n	8007aa2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ac2:	69fb      	ldr	r3, [r7, #28]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3724      	adds	r7, #36	@ 0x24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d12c      	bne.n	8007b46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	db12      	blt.n	8007b24 <USB_EPSetStall+0x54>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00f      	beq.n	8007b24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	0151      	lsls	r1, r2, #5
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	440a      	add	r2, r1
 8007b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e02b      	b.n	8007b9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	db12      	blt.n	8007b7e <USB_EPSetStall+0xae>
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00f      	beq.n	8007b7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	015a      	lsls	r2, r3, #5
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785b      	ldrb	r3, [r3, #1]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d128      	bne.n	8007c1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007be6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	78db      	ldrb	r3, [r3, #3]
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d003      	beq.n	8007bf8 <USB_EPClearStall+0x4c>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	78db      	ldrb	r3, [r3, #3]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d138      	bne.n	8007c6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	0151      	lsls	r1, r2, #5
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	440a      	add	r2, r1
 8007c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	e027      	b.n	8007c6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	78db      	ldrb	r3, [r3, #3]
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d003      	beq.n	8007c4a <USB_EPClearStall+0x9e>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	78db      	ldrb	r3, [r3, #3]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d10f      	bne.n	8007c6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007c9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	011b      	lsls	r3, r3, #4
 8007ca8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007cac:	68f9      	ldr	r1, [r7, #12]
 8007cae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cf2:	f023 0302 	bic.w	r3, r3, #2
 8007cf6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d20:	f023 0303 	bic.w	r3, r3, #3
 8007d24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d34:	f043 0302 	orr.w	r3, r3, #2
 8007d38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d60:	68fb      	ldr	r3, [r7, #12]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	0c1b      	lsrs	r3, r3, #16
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b085      	sub	sp, #20
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	b29b      	uxth	r3, r3
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	4013      	ands	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e04:	68bb      	ldr	r3, [r7, #8]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	01db      	lsls	r3, r3, #7
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e60:	68bb      	ldr	r3, [r7, #8]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ea4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ea8:	f023 0307 	bic.w	r3, r3, #7
 8007eac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	333c      	adds	r3, #60	@ 0x3c
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4a1c      	ldr	r2, [pc, #112]	@ (8007f5c <USB_EP0_OutStart+0x8c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d90a      	bls.n	8007f06 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007efc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f00:	d101      	bne.n	8007f06 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e024      	b.n	8007f50 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f34:	f043 0318 	orr.w	r3, r3, #24
 8007f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f48:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007f4c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	4f54300a 	.word	0x4f54300a

08007f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4a13      	ldr	r2, [pc, #76]	@ (8007fc4 <USB_CoreReset+0x64>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d901      	bls.n	8007f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e01b      	b.n	8007fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	daf2      	bge.n	8007f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f043 0201 	orr.w	r2, r3, #1
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4a09      	ldr	r2, [pc, #36]	@ (8007fc4 <USB_CoreReset+0x64>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d901      	bls.n	8007fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e006      	b.n	8007fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d0f0      	beq.n	8007f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	00030d40 	.word	0x00030d40

08007fc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fd4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007fd8:	f002 fa58 	bl	800a48c <malloc>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d105      	bne.n	8007ff2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8007fee:	2302      	movs	r3, #2
 8007ff0:	e066      	b.n	80080c0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	7c1b      	ldrb	r3, [r3, #16]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d119      	bne.n	8008036 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008006:	2202      	movs	r2, #2
 8008008:	2181      	movs	r1, #129	@ 0x81
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f002 f824 	bl	800a058 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800801a:	2202      	movs	r2, #2
 800801c:	2101      	movs	r1, #1
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f002 f81a 	bl	800a058 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2210      	movs	r2, #16
 8008030:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008034:	e016      	b.n	8008064 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008036:	2340      	movs	r3, #64	@ 0x40
 8008038:	2202      	movs	r2, #2
 800803a:	2181      	movs	r1, #129	@ 0x81
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f002 f80b 	bl	800a058 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008048:	2340      	movs	r3, #64	@ 0x40
 800804a:	2202      	movs	r2, #2
 800804c:	2101      	movs	r1, #1
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f002 f802 	bl	800a058 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2210      	movs	r2, #16
 8008060:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008064:	2308      	movs	r3, #8
 8008066:	2203      	movs	r2, #3
 8008068:	2182      	movs	r1, #130	@ 0x82
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f001 fff4 	bl	800a058 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7c1b      	ldrb	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080a4:	2101      	movs	r1, #1
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f002 f950 	bl	800a34c <USBD_LL_PrepareReceive>
 80080ac:	e007      	b.n	80080be <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080b4:	2340      	movs	r3, #64	@ 0x40
 80080b6:	2101      	movs	r1, #1
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f002 f947 	bl	800a34c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080d4:	2181      	movs	r1, #129	@ 0x81
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f001 fffc 	bl	800a0d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080e2:	2101      	movs	r1, #1
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 fff5 	bl	800a0d4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080f2:	2182      	movs	r1, #130	@ 0x82
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 ffed 	bl	800a0d4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00e      	beq.n	8008132 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008124:	4618      	mov	r0, r3
 8008126:	f002 f9b9 	bl	800a49c <free>
    pdev->pClassData = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800814c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008152:	2300      	movs	r3, #0
 8008154:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008162:	2b00      	cmp	r3, #0
 8008164:	d03a      	beq.n	80081dc <USBD_CDC_Setup+0xa0>
 8008166:	2b20      	cmp	r3, #32
 8008168:	f040 8097 	bne.w	800829a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	88db      	ldrh	r3, [r3, #6]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d029      	beq.n	80081c8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	b25b      	sxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	da11      	bge.n	80081a2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800818a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	88d2      	ldrh	r2, [r2, #6]
 8008190:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008192:	6939      	ldr	r1, [r7, #16]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	88db      	ldrh	r3, [r3, #6]
 8008198:	461a      	mov	r2, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 fade 	bl	800975c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80081a0:	e082      	b.n	80082a8 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	785a      	ldrb	r2, [r3, #1]
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	88db      	ldrh	r3, [r3, #6]
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80081b8:	6939      	ldr	r1, [r7, #16]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	88db      	ldrh	r3, [r3, #6]
 80081be:	461a      	mov	r2, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 faf7 	bl	80097b4 <USBD_CtlPrepareRx>
      break;
 80081c6:	e06f      	b.n	80082a8 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	7850      	ldrb	r0, [r2, #1]
 80081d4:	2200      	movs	r2, #0
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	4798      	blx	r3
      break;
 80081da:	e065      	b.n	80082a8 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	2b0b      	cmp	r3, #11
 80081e2:	d84f      	bhi.n	8008284 <USBD_CDC_Setup+0x148>
 80081e4:	a201      	add	r2, pc, #4	@ (adr r2, 80081ec <USBD_CDC_Setup+0xb0>)
 80081e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ea:	bf00      	nop
 80081ec:	0800821d 	.word	0x0800821d
 80081f0:	08008293 	.word	0x08008293
 80081f4:	08008285 	.word	0x08008285
 80081f8:	08008285 	.word	0x08008285
 80081fc:	08008285 	.word	0x08008285
 8008200:	08008285 	.word	0x08008285
 8008204:	08008285 	.word	0x08008285
 8008208:	08008285 	.word	0x08008285
 800820c:	08008285 	.word	0x08008285
 8008210:	08008285 	.word	0x08008285
 8008214:	08008245 	.word	0x08008245
 8008218:	0800826d 	.word	0x0800826d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008222:	2b03      	cmp	r3, #3
 8008224:	d107      	bne.n	8008236 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008226:	f107 030c 	add.w	r3, r7, #12
 800822a:	2202      	movs	r2, #2
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fa94 	bl	800975c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008234:	e030      	b.n	8008298 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fa1e 	bl	800967a <USBD_CtlError>
            ret = USBD_FAIL;
 800823e:	2303      	movs	r3, #3
 8008240:	75fb      	strb	r3, [r7, #23]
          break;
 8008242:	e029      	b.n	8008298 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800824a:	2b03      	cmp	r3, #3
 800824c:	d107      	bne.n	800825e <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800824e:	f107 030f 	add.w	r3, r7, #15
 8008252:	2201      	movs	r2, #1
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f001 fa80 	bl	800975c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800825c:	e01c      	b.n	8008298 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fa0a 	bl	800967a <USBD_CtlError>
            ret = USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	75fb      	strb	r3, [r7, #23]
          break;
 800826a:	e015      	b.n	8008298 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008272:	2b03      	cmp	r3, #3
 8008274:	d00f      	beq.n	8008296 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f9fe 	bl	800967a <USBD_CtlError>
            ret = USBD_FAIL;
 800827e:	2303      	movs	r3, #3
 8008280:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008282:	e008      	b.n	8008296 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f9f7 	bl	800967a <USBD_CtlError>
          ret = USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	75fb      	strb	r3, [r7, #23]
          break;
 8008290:	e002      	b.n	8008298 <USBD_CDC_Setup+0x15c>
          break;
 8008292:	bf00      	nop
 8008294:	e008      	b.n	80082a8 <USBD_CDC_Setup+0x16c>
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e006      	b.n	80082a8 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 f9ec 	bl	800967a <USBD_CtlError>
      ret = USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	75fb      	strb	r3, [r7, #23]
      break;
 80082a6:	bf00      	nop
  }

  return (uint8_t)ret;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80082c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e04f      	b.n	8008376 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	6879      	ldr	r1, [r7, #4]
 80082e2:	4613      	mov	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	3318      	adds	r3, #24
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d029      	beq.n	8008348 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80082f4:	78fa      	ldrb	r2, [r7, #3]
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	3318      	adds	r3, #24
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	78f9      	ldrb	r1, [r7, #3]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	460b      	mov	r3, r1
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	1a5b      	subs	r3, r3, r1
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4403      	add	r3, r0
 8008314:	3344      	adds	r3, #68	@ 0x44
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	fbb2 f1f3 	udiv	r1, r2, r3
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008322:	2b00      	cmp	r3, #0
 8008324:	d110      	bne.n	8008348 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	3318      	adds	r3, #24
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800833a:	78f9      	ldrb	r1, [r7, #3]
 800833c:	2300      	movs	r3, #0
 800833e:	2200      	movs	r2, #0
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 ffcb 	bl	800a2dc <USBD_LL_Transmit>
 8008346:	e015      	b.n	8008374 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008370:	78fa      	ldrb	r2, [r7, #3]
 8008372:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	460b      	mov	r3, r1
 8008388:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008390:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800839c:	2303      	movs	r3, #3
 800839e:	e015      	b.n	80083cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f002 f809 	bl	800a3bc <USBD_LL_GetRxDataSize>
 80083aa:	4602      	mov	r2, r0
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80083c6:	4611      	mov	r1, r2
 80083c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083e2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d014      	beq.n	8008418 <USBD_CDC_EP0_RxReady+0x44>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80083f4:	2bff      	cmp	r3, #255	@ 0xff
 80083f6:	d00f      	beq.n	8008418 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8008406:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800840e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	22ff      	movs	r2, #255	@ 0xff
 8008414:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2243      	movs	r2, #67	@ 0x43
 8008430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008432:	4b03      	ldr	r3, [pc, #12]	@ (8008440 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	200000fc 	.word	0x200000fc

08008444 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2243      	movs	r2, #67	@ 0x43
 8008450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008452:	4b03      	ldr	r3, [pc, #12]	@ (8008460 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	200000b8 	.word	0x200000b8

08008464 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2243      	movs	r2, #67	@ 0x43
 8008470:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000140 	.word	0x20000140

08008484 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	220a      	movs	r2, #10
 8008490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008492:	4b03      	ldr	r3, [pc, #12]	@ (80084a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	20000074 	.word	0x20000074

080084a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e004      	b.n	80084c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b087      	sub	sp, #28
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	60f8      	str	r0, [r7, #12]
 80084d6:	60b9      	str	r1, [r7, #8]
 80084d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	371c      	adds	r7, #28
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008510:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008536:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	e01a      	b.n	8008580 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008550:	2b00      	cmp	r3, #0
 8008552:	d114      	bne.n	800857e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2201      	movs	r2, #1
 8008558:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008572:	2181      	movs	r1, #129	@ 0x81
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 feb1 	bl	800a2dc <USBD_LL_Transmit>

    ret = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008596:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e016      	b.n	80085d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	7c1b      	ldrb	r3, [r3, #16]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d109      	bne.n	80085c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80085b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085b8:	2101      	movs	r1, #1
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fec6 	bl	800a34c <USBD_LL_PrepareReceive>
 80085c0:	e007      	b.n	80085d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80085c8:	2340      	movs	r3, #64	@ 0x40
 80085ca:	2101      	movs	r1, #1
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 febd 	bl	800a34c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4613      	mov	r3, r2
 80085e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e01f      	b.n	8008634 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	79fa      	ldrb	r2, [r7, #7]
 8008626:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f001 fc97 	bl	8009f5c <USBD_LL_Init>
 800862e:	4603      	mov	r3, r0
 8008630:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008632:	7dfb      	ldrb	r3, [r7, #23]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3718      	adds	r7, #24
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008650:	2303      	movs	r3, #3
 8008652:	e016      	b.n	8008682 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800866e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008670:	f107 020e 	add.w	r2, r7, #14
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	4602      	mov	r2, r0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f001 fcae 	bl	8009ff4 <USBD_LL_Start>
 8008698:	4603      	mov	r3, r0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086c4:	2303      	movs	r3, #3
 80086c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	4611      	mov	r1, r2
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	4611      	mov	r1, r2
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
  }

  return USBD_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 ff67 	bl	8009606 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008746:	461a      	mov	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	2b02      	cmp	r3, #2
 800875a:	d01a      	beq.n	8008792 <USBD_LL_SetupStage+0x72>
 800875c:	2b02      	cmp	r3, #2
 800875e:	d822      	bhi.n	80087a6 <USBD_LL_SetupStage+0x86>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <USBD_LL_SetupStage+0x4a>
 8008764:	2b01      	cmp	r3, #1
 8008766:	d00a      	beq.n	800877e <USBD_LL_SetupStage+0x5e>
 8008768:	e01d      	b.n	80087a6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa18 	bl	8008ba8 <USBD_StdDevReq>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
      break;
 800877c:	e020      	b.n	80087c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa7c 	bl	8008c84 <USBD_StdItfReq>
 800878c:	4603      	mov	r3, r0
 800878e:	73fb      	strb	r3, [r7, #15]
      break;
 8008790:	e016      	b.n	80087c0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 faba 	bl	8008d14 <USBD_StdEPReq>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
      break;
 80087a4:	e00c      	b.n	80087c0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fcc3 	bl	800a140 <USBD_LL_StallEP>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
      break;
 80087be:	bf00      	nop
  }

  return ret;
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b086      	sub	sp, #24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	460b      	mov	r3, r1
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087d8:	7afb      	ldrb	r3, [r7, #11]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d137      	bne.n	800884e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d14a      	bne.n	8008886 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d913      	bls.n	8008824 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	1ad2      	subs	r2, r2, r3
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	4293      	cmp	r3, r2
 8008814:	bf28      	it	cs
 8008816:	4613      	movcs	r3, r2
 8008818:	461a      	mov	r2, r3
 800881a:	6879      	ldr	r1, [r7, #4]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 ffe6 	bl	80097ee <USBD_CtlContinueRx>
 8008822:	e030      	b.n	8008886 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008836:	2b03      	cmp	r3, #3
 8008838:	d105      	bne.n	8008846 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 ffe2 	bl	8009810 <USBD_CtlSendStatus>
 800884c:	e01b      	b.n	8008886 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d013      	beq.n	8008882 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008860:	2b03      	cmp	r3, #3
 8008862:	d10e      	bne.n	8008882 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	7afa      	ldrb	r2, [r7, #11]
 800886e:	4611      	mov	r1, r2
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	4798      	blx	r3
 8008874:	4603      	mov	r3, r0
 8008876:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008878:	7dfb      	ldrb	r3, [r7, #23]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	e002      	b.n	8008888 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008882:	2303      	movs	r3, #3
 8008884:	e000      	b.n	8008888 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	460b      	mov	r3, r1
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d16a      	bne.n	800897a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3314      	adds	r3, #20
 80088a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d155      	bne.n	8008960 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d914      	bls.n	80088ea <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	689a      	ldr	r2, [r3, #8]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	1ad2      	subs	r2, r2, r3
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	461a      	mov	r2, r3
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 ff5b 	bl	8009792 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088dc:	2300      	movs	r3, #0
 80088de:	2200      	movs	r2, #0
 80088e0:	2100      	movs	r1, #0
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f001 fd32 	bl	800a34c <USBD_LL_PrepareReceive>
 80088e8:	e03a      	b.n	8008960 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d11c      	bne.n	8008930 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088fe:	429a      	cmp	r2, r3
 8008900:	d316      	bcc.n	8008930 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800890c:	429a      	cmp	r2, r3
 800890e:	d20f      	bcs.n	8008930 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008910:	2200      	movs	r2, #0
 8008912:	2100      	movs	r1, #0
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 ff3c 	bl	8009792 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008922:	2300      	movs	r3, #0
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f001 fd0f 	bl	800a34c <USBD_LL_PrepareReceive>
 800892e:	e017      	b.n	8008960 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00a      	beq.n	8008952 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008942:	2b03      	cmp	r3, #3
 8008944:	d105      	bne.n	8008952 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008952:	2180      	movs	r1, #128	@ 0x80
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f001 fbf3 	bl	800a140 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 ff6b 	bl	8009836 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008966:	2b01      	cmp	r3, #1
 8008968:	d123      	bne.n	80089b2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f7ff fe99 	bl	80086a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008978:	e01b      	b.n	80089b2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d013      	beq.n	80089ae <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800898c:	2b03      	cmp	r3, #3
 800898e:	d10e      	bne.n	80089ae <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	7afa      	ldrb	r2, [r7, #11]
 800899a:	4611      	mov	r1, r2
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	4798      	blx	r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	e002      	b.n	80089b4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089ae:	2303      	movs	r3, #3
 80089b0:	e000      	b.n	80089b4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	6852      	ldr	r2, [r2, #4]
 80089f8:	b2d2      	uxtb	r2, r2
 80089fa:	4611      	mov	r1, r2
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a00:	2340      	movs	r3, #64	@ 0x40
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fb26 	bl	800a058 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2240      	movs	r2, #64	@ 0x40
 8008a18:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2180      	movs	r1, #128	@ 0x80
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fb18 	bl	800a058 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2240      	movs	r2, #64	@ 0x40
 8008a32:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	78fa      	ldrb	r2, [r7, #3]
 8008a4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2204      	movs	r2, #4
 8008a76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d105      	bne.n	8008aa6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d10b      	bne.n	8008ade <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	460b      	mov	r3, r1
 8008af2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6852      	ldr	r2, [r2, #4]
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	4798      	blx	r3
  }

  return USBD_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b087      	sub	sp, #28
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b88:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	b21a      	sxth	r2, r3
 8008b90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	b21b      	sxth	r3, r3
 8008b98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bbe:	2b40      	cmp	r3, #64	@ 0x40
 8008bc0:	d005      	beq.n	8008bce <USBD_StdDevReq+0x26>
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d853      	bhi.n	8008c6e <USBD_StdDevReq+0xc6>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00b      	beq.n	8008be2 <USBD_StdDevReq+0x3a>
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	d14f      	bne.n	8008c6e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]
    break;
 8008be0:	e04a      	b.n	8008c78 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d83b      	bhi.n	8008c62 <USBD_StdDevReq+0xba>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <USBD_StdDevReq+0x48>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c45 	.word	0x08008c45
 8008bf4:	08008c59 	.word	0x08008c59
 8008bf8:	08008c63 	.word	0x08008c63
 8008bfc:	08008c4f 	.word	0x08008c4f
 8008c00:	08008c63 	.word	0x08008c63
 8008c04:	08008c23 	.word	0x08008c23
 8008c08:	08008c19 	.word	0x08008c19
 8008c0c:	08008c63 	.word	0x08008c63
 8008c10:	08008c3b 	.word	0x08008c3b
 8008c14:	08008c2d 	.word	0x08008c2d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f9da 	bl	8008fd4 <USBD_GetDescriptor>
      break;
 8008c20:	e024      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fb69 	bl	80092fc <USBD_SetAddress>
      break;
 8008c2a:	e01f      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fba8 	bl	8009384 <USBD_SetConfig>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
      break;
 8008c38:	e018      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fc45 	bl	80094cc <USBD_GetConfig>
      break;
 8008c42:	e013      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc75 	bl	8009536 <USBD_GetStatus>
      break;
 8008c4c:	e00e      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008c4e:	6839      	ldr	r1, [r7, #0]
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fca3 	bl	800959c <USBD_SetFeature>
      break;
 8008c56:	e009      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fcb2 	bl	80095c4 <USBD_ClrFeature>
      break;
 8008c60:	e004      	b.n	8008c6c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fd08 	bl	800967a <USBD_CtlError>
      break;
 8008c6a:	bf00      	nop
    }
    break;
 8008c6c:	e004      	b.n	8008c78 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fd02 	bl	800967a <USBD_CtlError>
    break;
 8008c76:	bf00      	nop
  }

  return ret;
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop

08008c84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d005      	beq.n	8008caa <USBD_StdItfReq+0x26>
 8008c9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ca0:	d82e      	bhi.n	8008d00 <USBD_StdItfReq+0x7c>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <USBD_StdItfReq+0x26>
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d12a      	bne.n	8008d00 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d81d      	bhi.n	8008cf2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	889b      	ldrh	r3, [r3, #4]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d813      	bhi.n	8008ce8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	88db      	ldrh	r3, [r3, #6]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d110      	bne.n	8008cfc <USBD_StdItfReq+0x78>
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10d      	bne.n	8008cfc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fd95 	bl	8009810 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008ce6:	e009      	b.n	8008cfc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fcc5 	bl	800967a <USBD_CtlError>
      break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fcc0 	bl	800967a <USBD_CtlError>
      break;
 8008cfa:	e000      	b.n	8008cfe <USBD_StdItfReq+0x7a>
      break;
 8008cfc:	bf00      	nop
    }
    break;
 8008cfe:	e004      	b.n	8008d0a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fcb9 	bl	800967a <USBD_CtlError>
    break;
 8008d08:	bf00      	nop
  }

  return ret;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	889b      	ldrh	r3, [r3, #4]
 8008d26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d30:	2b40      	cmp	r3, #64	@ 0x40
 8008d32:	d007      	beq.n	8008d44 <USBD_StdEPReq+0x30>
 8008d34:	2b40      	cmp	r3, #64	@ 0x40
 8008d36:	f200 8142 	bhi.w	8008fbe <USBD_StdEPReq+0x2aa>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00c      	beq.n	8008d58 <USBD_StdEPReq+0x44>
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	f040 813d 	bne.w	8008fbe <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]
    break;
 8008d56:	e137      	b.n	8008fc8 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d007      	beq.n	8008d70 <USBD_StdEPReq+0x5c>
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	f300 8126 	bgt.w	8008fb2 <USBD_StdEPReq+0x29e>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d07d      	beq.n	8008e66 <USBD_StdEPReq+0x152>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d03b      	beq.n	8008de6 <USBD_StdEPReq+0xd2>
 8008d6e:	e120      	b.n	8008fb2 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d002      	beq.n	8008d80 <USBD_StdEPReq+0x6c>
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d016      	beq.n	8008dac <USBD_StdEPReq+0x98>
 8008d7e:	e02c      	b.n	8008dda <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00d      	beq.n	8008da2 <USBD_StdEPReq+0x8e>
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b80      	cmp	r3, #128	@ 0x80
 8008d8a:	d00a      	beq.n	8008da2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 f9d5 	bl	800a140 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d96:	2180      	movs	r1, #128	@ 0x80
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 f9d1 	bl	800a140 <USBD_LL_StallEP>
 8008d9e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008da0:	e020      	b.n	8008de4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fc68 	bl	800967a <USBD_CtlError>
        break;
 8008daa:	e01b      	b.n	8008de4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	885b      	ldrh	r3, [r3, #2]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10e      	bne.n	8008dd2 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <USBD_StdEPReq+0xbe>
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b80      	cmp	r3, #128	@ 0x80
 8008dbe:	d008      	beq.n	8008dd2 <USBD_StdEPReq+0xbe>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	88db      	ldrh	r3, [r3, #6]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 f9b7 	bl	800a140 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fd1c 	bl	8009810 <USBD_CtlSendStatus>

        break;
 8008dd8:	e004      	b.n	8008de4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc4c 	bl	800967a <USBD_CtlError>
        break;
 8008de2:	bf00      	nop
      }
      break;
 8008de4:	e0ea      	b.n	8008fbc <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d002      	beq.n	8008df6 <USBD_StdEPReq+0xe2>
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d016      	beq.n	8008e22 <USBD_StdEPReq+0x10e>
 8008df4:	e030      	b.n	8008e58 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00d      	beq.n	8008e18 <USBD_StdEPReq+0x104>
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b80      	cmp	r3, #128	@ 0x80
 8008e00:	d00a      	beq.n	8008e18 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 f99a 	bl	800a140 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0c:	2180      	movs	r1, #128	@ 0x80
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f001 f996 	bl	800a140 <USBD_LL_StallEP>
 8008e14:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008e16:	e025      	b.n	8008e64 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 8008e18:	6839      	ldr	r1, [r7, #0]
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fc2d 	bl	800967a <USBD_CtlError>
        break;
 8008e20:	e020      	b.n	8008e64 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d11b      	bne.n	8008e62 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d004      	beq.n	8008e3e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 f9b7 	bl	800a1ac <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fce6 	bl	8009810 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e56:	e004      	b.n	8008e62 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc0d 	bl	800967a <USBD_CtlError>
        break;
 8008e60:	e000      	b.n	8008e64 <USBD_StdEPReq+0x150>
        break;
 8008e62:	bf00      	nop
      }
      break;
 8008e64:	e0aa      	b.n	8008fbc <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d002      	beq.n	8008e76 <USBD_StdEPReq+0x162>
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d032      	beq.n	8008eda <USBD_StdEPReq+0x1c6>
 8008e74:	e097      	b.n	8008fa6 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d007      	beq.n	8008e8c <USBD_StdEPReq+0x178>
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b80      	cmp	r3, #128	@ 0x80
 8008e80:	d004      	beq.n	8008e8c <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fbf8 	bl	800967a <USBD_CtlError>
          break;
 8008e8a:	e091      	b.n	8008fb0 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da0b      	bge.n	8008eac <USBD_StdEPReq+0x198>
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	3310      	adds	r3, #16
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	e00b      	b.n	8008ec4 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fc42 	bl	800975c <USBD_CtlSendData>
        break;
 8008ed8:	e06a      	b.n	8008fb0 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da11      	bge.n	8008f06 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	f003 020f 	and.w	r2, r3, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	3324      	adds	r3, #36	@ 0x24
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d117      	bne.n	8008f2c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fbbb 	bl	800967a <USBD_CtlError>
            break;
 8008f04:	e054      	b.n	8008fb0 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	f003 020f 	and.w	r2, r3, #15
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fba8 	bl	800967a <USBD_CtlError>
            break;
 8008f2a:	e041      	b.n	8008fb0 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da0b      	bge.n	8008f4c <USBD_StdEPReq+0x238>
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	3310      	adds	r3, #16
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4413      	add	r3, r2
 8008f48:	3304      	adds	r3, #4
 8008f4a:	e00b      	b.n	8008f64 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	3304      	adds	r3, #4
 8008f64:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <USBD_StdEPReq+0x25e>
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b80      	cmp	r3, #128	@ 0x80
 8008f70:	d103      	bne.n	8008f7a <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]
 8008f78:	e00e      	b.n	8008f98 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 f94a 	bl	800a218 <USBD_LL_IsStallEP>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e002      	b.n	8008f98 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fbdc 	bl	800975c <USBD_CtlSendData>
          break;
 8008fa4:	e004      	b.n	8008fb0 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fb66 	bl	800967a <USBD_CtlError>
        break;
 8008fae:	bf00      	nop
      }
      break;
 8008fb0:	e004      	b.n	8008fbc <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb60 	bl	800967a <USBD_CtlError>
      break;
 8008fba:	bf00      	nop
    }
    break;
 8008fbc:	e004      	b.n	8008fc8 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fb5a 	bl	800967a <USBD_CtlError>
    break;
 8008fc6:	bf00      	nop
  }

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
	...

08008fd4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	885b      	ldrh	r3, [r3, #2]
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	2b0e      	cmp	r3, #14
 8008ff6:	f200 8152 	bhi.w	800929e <USBD_GetDescriptor+0x2ca>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <USBD_GetDescriptor+0x2c>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009071 	.word	0x08009071
 8009004:	08009089 	.word	0x08009089
 8009008:	080090c9 	.word	0x080090c9
 800900c:	0800929f 	.word	0x0800929f
 8009010:	0800929f 	.word	0x0800929f
 8009014:	0800923f 	.word	0x0800923f
 8009018:	0800926b 	.word	0x0800926b
 800901c:	0800929f 	.word	0x0800929f
 8009020:	0800929f 	.word	0x0800929f
 8009024:	0800929f 	.word	0x0800929f
 8009028:	0800929f 	.word	0x0800929f
 800902c:	0800929f 	.word	0x0800929f
 8009030:	0800929f 	.word	0x0800929f
 8009034:	0800929f 	.word	0x0800929f
 8009038:	0800903d 	.word	0x0800903d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800905e:	e126      	b.n	80092ae <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fb09 	bl	800967a <USBD_CtlError>
      err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
    break;
 800906e:	e11e      	b.n	80092ae <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7c12      	ldrb	r2, [r2, #16]
 800907c:	f107 0108 	add.w	r1, r7, #8
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	60f8      	str	r0, [r7, #12]
    break;
 8009086:	e112      	b.n	80092ae <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	7c1b      	ldrb	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10d      	bne.n	80090ac <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009098:	f107 0208 	add.w	r2, r7, #8
 800909c:	4610      	mov	r0, r2
 800909e:	4798      	blx	r3
 80090a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	3301      	adds	r3, #1
 80090a6:	2202      	movs	r2, #2
 80090a8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80090aa:	e100      	b.n	80092ae <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	f107 0208 	add.w	r2, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3301      	adds	r3, #1
 80090c2:	2202      	movs	r2, #2
 80090c4:	701a      	strb	r2, [r3, #0]
    break;
 80090c6:	e0f2      	b.n	80092ae <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	885b      	ldrh	r3, [r3, #2]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	2b05      	cmp	r3, #5
 80090d0:	f200 80ac 	bhi.w	800922c <USBD_GetDescriptor+0x258>
 80090d4:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <USBD_GetDescriptor+0x108>)
 80090d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090da:	bf00      	nop
 80090dc:	080090f5 	.word	0x080090f5
 80090e0:	08009129 	.word	0x08009129
 80090e4:	0800915d 	.word	0x0800915d
 80090e8:	08009191 	.word	0x08009191
 80090ec:	080091c5 	.word	0x080091c5
 80090f0:	080091f9 	.word	0x080091f9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	7c12      	ldrb	r2, [r2, #16]
 800910c:	f107 0108 	add.w	r1, r7, #8
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009116:	e091      	b.n	800923c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 faad 	bl	800967a <USBD_CtlError>
        err++;
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	3301      	adds	r3, #1
 8009124:	72fb      	strb	r3, [r7, #11]
      break;
 8009126:	e089      	b.n	800923c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	7c12      	ldrb	r2, [r2, #16]
 8009140:	f107 0108 	add.w	r1, r7, #8
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
 8009148:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800914a:	e077      	b.n	800923c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa93 	bl	800967a <USBD_CtlError>
        err++;
 8009154:	7afb      	ldrb	r3, [r7, #11]
 8009156:	3301      	adds	r3, #1
 8009158:	72fb      	strb	r3, [r7, #11]
      break;
 800915a:	e06f      	b.n	800923c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7c12      	ldrb	r2, [r2, #16]
 8009174:	f107 0108 	add.w	r1, r7, #8
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
 800917c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800917e:	e05d      	b.n	800923c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa79 	bl	800967a <USBD_CtlError>
        err++;
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	3301      	adds	r3, #1
 800918c:	72fb      	strb	r3, [r7, #11]
      break;
 800918e:	e055      	b.n	800923c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	7c12      	ldrb	r2, [r2, #16]
 80091a8:	f107 0108 	add.w	r1, r7, #8
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b2:	e043      	b.n	800923c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa5f 	bl	800967a <USBD_CtlError>
        err++;
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	3301      	adds	r3, #1
 80091c0:	72fb      	strb	r3, [r7, #11]
      break;
 80091c2:	e03b      	b.n	800923c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	7c12      	ldrb	r2, [r2, #16]
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
 80091e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e6:	e029      	b.n	800923c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa45 	bl	800967a <USBD_CtlError>
        err++;
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	3301      	adds	r3, #1
 80091f4:	72fb      	strb	r3, [r7, #11]
      break;
 80091f6:	e021      	b.n	800923c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	7c12      	ldrb	r2, [r2, #16]
 8009210:	f107 0108 	add.w	r1, r7, #8
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
 8009218:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800921a:	e00f      	b.n	800923c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fa2b 	bl	800967a <USBD_CtlError>
        err++;
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	3301      	adds	r3, #1
 8009228:	72fb      	strb	r3, [r7, #11]
      break;
 800922a:	e007      	b.n	800923c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa23 	bl	800967a <USBD_CtlError>
      err++;
 8009234:	7afb      	ldrb	r3, [r7, #11]
 8009236:	3301      	adds	r3, #1
 8009238:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800923a:	bf00      	nop
    }
    break;
 800923c:	e037      	b.n	80092ae <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7c1b      	ldrb	r3, [r3, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d109      	bne.n	800925a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800924c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800924e:	f107 0208 	add.w	r2, r7, #8
 8009252:	4610      	mov	r0, r2
 8009254:	4798      	blx	r3
 8009256:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009258:	e029      	b.n	80092ae <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fa0c 	bl	800967a <USBD_CtlError>
      err++;
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	3301      	adds	r3, #1
 8009266:	72fb      	strb	r3, [r7, #11]
    break;
 8009268:	e021      	b.n	80092ae <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	7c1b      	ldrb	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927a:	f107 0208 	add.w	r2, r7, #8
 800927e:	4610      	mov	r0, r2
 8009280:	4798      	blx	r3
 8009282:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	2207      	movs	r2, #7
 800928a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800928c:	e00f      	b.n	80092ae <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f9f2 	bl	800967a <USBD_CtlError>
      err++;
 8009296:	7afb      	ldrb	r3, [r7, #11]
 8009298:	3301      	adds	r3, #1
 800929a:	72fb      	strb	r3, [r7, #11]
    break;
 800929c:	e007      	b.n	80092ae <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9ea 	bl	800967a <USBD_CtlError>
    err++;
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	3301      	adds	r3, #1
 80092aa:	72fb      	strb	r3, [r7, #11]
    break;
 80092ac:	bf00      	nop
  }

  if (err != 0U)
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d11e      	bne.n	80092f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	88db      	ldrh	r3, [r3, #6]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d016      	beq.n	80092ea <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80092bc:	893b      	ldrh	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00e      	beq.n	80092e0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88da      	ldrh	r2, [r3, #6]
 80092c6:	893b      	ldrh	r3, [r7, #8]
 80092c8:	4293      	cmp	r3, r2
 80092ca:	bf28      	it	cs
 80092cc:	4613      	movcs	r3, r2
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80092d2:	893b      	ldrh	r3, [r7, #8]
 80092d4:	461a      	mov	r2, r3
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa3f 	bl	800975c <USBD_CtlSendData>
 80092de:	e009      	b.n	80092f4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9c9 	bl	800967a <USBD_CtlError>
 80092e8:	e004      	b.n	80092f4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fa90 	bl	8009810 <USBD_CtlSendStatus>
 80092f0:	e000      	b.n	80092f4 <USBD_GetDescriptor+0x320>
    return;
 80092f2:	bf00      	nop
    }
  }
}
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop

080092fc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	889b      	ldrh	r3, [r3, #4]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d130      	bne.n	8009370 <USBD_SetAddress+0x74>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	88db      	ldrh	r3, [r3, #6]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d12c      	bne.n	8009370 <USBD_SetAddress+0x74>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	885b      	ldrh	r3, [r3, #2]
 800931a:	2b7f      	cmp	r3, #127	@ 0x7f
 800931c:	d828      	bhi.n	8009370 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	885b      	ldrh	r3, [r3, #2]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009328:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009330:	2b03      	cmp	r3, #3
 8009332:	d104      	bne.n	800933e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f99f 	bl	800967a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933c:	e01d      	b.n	800937a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7bfa      	ldrb	r2, [r7, #15]
 8009342:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	4619      	mov	r1, r3
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 ff90 	bl	800a270 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa5d 	bl	8009810 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d004      	beq.n	8009366 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009364:	e009      	b.n	800937a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936e:	e004      	b.n	800937a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f981 	bl	800967a <USBD_CtlError>
  }
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	b2da      	uxtb	r2, r3
 8009398:	4b4b      	ldr	r3, [pc, #300]	@ (80094c8 <USBD_SetConfig+0x144>)
 800939a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800939c:	4b4a      	ldr	r3, [pc, #296]	@ (80094c8 <USBD_SetConfig+0x144>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d905      	bls.n	80093b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f967 	bl	800967a <USBD_CtlError>
    return USBD_FAIL;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e087      	b.n	80094c0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d002      	beq.n	80093c0 <USBD_SetConfig+0x3c>
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d025      	beq.n	800940a <USBD_SetConfig+0x86>
 80093be:	e071      	b.n	80094a4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80093c0:	4b41      	ldr	r3, [pc, #260]	@ (80094c8 <USBD_SetConfig+0x144>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01c      	beq.n	8009402 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80093c8:	4b3f      	ldr	r3, [pc, #252]	@ (80094c8 <USBD_SetConfig+0x144>)
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80093d2:	4b3d      	ldr	r3, [pc, #244]	@ (80094c8 <USBD_SetConfig+0x144>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7ff f96d 	bl	80086b8 <USBD_SetClassConfig>
 80093de:	4603      	mov	r3, r0
 80093e0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d004      	beq.n	80093f2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f945 	bl	800967a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80093f0:	e065      	b.n	80094be <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa0c 	bl	8009810 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2203      	movs	r2, #3
 80093fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 8009400:	e05d      	b.n	80094be <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fa04 	bl	8009810 <USBD_CtlSendStatus>
    break;
 8009408:	e059      	b.n	80094be <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800940a:	4b2f      	ldr	r3, [pc, #188]	@ (80094c8 <USBD_SetConfig+0x144>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d112      	bne.n	8009438 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2202      	movs	r2, #2
 8009416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      pdev->dev_config = cfgidx;
 800941a:	4b2b      	ldr	r3, [pc, #172]	@ (80094c8 <USBD_SetConfig+0x144>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009424:	4b28      	ldr	r3, [pc, #160]	@ (80094c8 <USBD_SetConfig+0x144>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff f960 	bl	80086f0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f9ed 	bl	8009810 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009436:	e042      	b.n	80094be <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009438:	4b23      	ldr	r3, [pc, #140]	@ (80094c8 <USBD_SetConfig+0x144>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	461a      	mov	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d02a      	beq.n	800949c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	b2db      	uxtb	r3, r3
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff f94e 	bl	80086f0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009454:	4b1c      	ldr	r3, [pc, #112]	@ (80094c8 <USBD_SetConfig+0x144>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800945e:	4b1a      	ldr	r3, [pc, #104]	@ (80094c8 <USBD_SetConfig+0x144>)
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7ff f927 	bl	80086b8 <USBD_SetClassConfig>
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00f      	beq.n	8009494 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f8ff 	bl	800967a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff f933 	bl	80086f0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2202      	movs	r2, #2
 800948e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    break;
 8009492:	e014      	b.n	80094be <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f9bb 	bl	8009810 <USBD_CtlSendStatus>
    break;
 800949a:	e010      	b.n	80094be <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f9b7 	bl	8009810 <USBD_CtlSendStatus>
    break;
 80094a2:	e00c      	b.n	80094be <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f8e7 	bl	800967a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ac:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <USBD_SetConfig+0x144>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff f91c 	bl	80086f0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80094b8:	2303      	movs	r3, #3
 80094ba:	73fb      	strb	r3, [r7, #15]
    break;
 80094bc:	bf00      	nop
  }

  return ret;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	200005ec 	.word	0x200005ec

080094cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d004      	beq.n	80094e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f8ca 	bl	800967a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80094e6:	e022      	b.n	800952e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	dc02      	bgt.n	80094f8 <USBD_GetConfig+0x2c>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dc03      	bgt.n	80094fe <USBD_GetConfig+0x32>
 80094f6:	e015      	b.n	8009524 <USBD_GetConfig+0x58>
 80094f8:	2b03      	cmp	r3, #3
 80094fa:	d00b      	beq.n	8009514 <USBD_GetConfig+0x48>
 80094fc:	e012      	b.n	8009524 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3308      	adds	r3, #8
 8009508:	2201      	movs	r2, #1
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f925 	bl	800975c <USBD_CtlSendData>
      break;
 8009512:	e00c      	b.n	800952e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	3304      	adds	r3, #4
 8009518:	2201      	movs	r2, #1
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f91d 	bl	800975c <USBD_CtlSendData>
      break;
 8009522:	e004      	b.n	800952e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f8a7 	bl	800967a <USBD_CtlError>
      break;
 800952c:	bf00      	nop
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009546:	3b01      	subs	r3, #1
 8009548:	2b02      	cmp	r3, #2
 800954a:	d81e      	bhi.n	800958a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	88db      	ldrh	r3, [r3, #6]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d004      	beq.n	800955e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f88f 	bl	800967a <USBD_CtlError>
      break;
 800955c:	e01a      	b.n	8009594 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f043 0202 	orr.w	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	330c      	adds	r3, #12
 800957e:	2202      	movs	r2, #2
 8009580:	4619      	mov	r1, r3
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f8ea 	bl	800975c <USBD_CtlSendData>
    break;
 8009588:	e004      	b.n	8009594 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f874 	bl	800967a <USBD_CtlError>
    break;
 8009592:	bf00      	nop
  }
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	885b      	ldrh	r3, [r3, #2]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d106      	bne.n	80095bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f92a 	bl	8009810 <USBD_CtlSendStatus>
  }
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d4:	3b01      	subs	r3, #1
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d80b      	bhi.n	80095f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	885b      	ldrh	r3, [r3, #2]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d10c      	bne.n	80095fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f910 	bl	8009810 <USBD_CtlSendStatus>
      }
      break;
 80095f0:	e004      	b.n	80095fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f840 	bl	800967a <USBD_CtlError>
      break;
 80095fa:	e000      	b.n	80095fe <USBD_ClrFeature+0x3a>
      break;
 80095fc:	bf00      	nop
  }
}
 80095fe:	bf00      	nop
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	781a      	ldrb	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3301      	adds	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	781a      	ldrb	r2, [r3, #0]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3301      	adds	r3, #1
 800962e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f7ff fa9a 	bl	8008b6a <SWAPBYTE>
 8009636:	4603      	mov	r3, r0
 8009638:	461a      	mov	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3301      	adds	r3, #1
 8009648:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f7ff fa8d 	bl	8008b6a <SWAPBYTE>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fa80 	bl	8008b6a <SWAPBYTE>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	80da      	strh	r2, [r3, #6]
}
 8009672:	bf00      	nop
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009684:	2180      	movs	r1, #128	@ 0x80
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fd5a 	bl	800a140 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800968c:	2100      	movs	r1, #0
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fd56 	bl	800a140 <USBD_LL_StallEP>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d036      	beq.n	8009720 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80096b6:	6938      	ldr	r0, [r7, #16]
 80096b8:	f000 f836 	bl	8009728 <USBD_GetLen>
 80096bc:	4603      	mov	r3, r0
 80096be:	3301      	adds	r3, #1
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	4413      	add	r3, r2
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7812      	ldrb	r2, [r2, #0]
 80096d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	3301      	adds	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	4413      	add	r3, r2
 80096e2:	2203      	movs	r2, #3
 80096e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	3301      	adds	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80096ec:	e013      	b.n	8009716 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80096ee:	7dfb      	ldrb	r3, [r7, #23]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	4413      	add	r3, r2
 80096f4:	693a      	ldr	r2, [r7, #16]
 80096f6:	7812      	ldrb	r2, [r2, #0]
 80096f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	3301      	adds	r3, #1
 80096fe:	613b      	str	r3, [r7, #16]
    idx++;
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	3301      	adds	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	4413      	add	r3, r2
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	3301      	adds	r3, #1
 8009714:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1e7      	bne.n	80096ee <USBD_GetString+0x52>
 800971e:	e000      	b.n	8009722 <USBD_GetString+0x86>
    return;
 8009720:	bf00      	nop
  }
}
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009738:	e005      	b.n	8009746 <USBD_GetLen+0x1e>
  {
    len++;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
 800973c:	3301      	adds	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	3301      	adds	r3, #1
 8009744:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f5      	bne.n	800973a <USBD_GetLen+0x12>
  }

  return len;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2202      	movs	r2, #2
 800976c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	2100      	movs	r1, #0
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 fdaa 	bl	800a2dc <USBD_LL_Transmit>

  return USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	2100      	movs	r1, #0
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 fd99 	bl	800a2dc <USBD_LL_Transmit>

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2203      	movs	r2, #3
 80097c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
  pdev->ep_out[0].rem_length = len;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	2100      	movs	r1, #0
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 fdb4 	bl	800a34c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	2100      	movs	r1, #0
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 fda3 	bl	800a34c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2204      	movs	r2, #4
 800981c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009820:	2300      	movs	r3, #0
 8009822:	2200      	movs	r2, #0
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fd58 	bl	800a2dc <USBD_LL_Transmit>

  return USBD_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2205      	movs	r2, #5
 8009842:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009846:	2300      	movs	r3, #0
 8009848:	2200      	movs	r2, #0
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fd7d 	bl	800a34c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009860:	2200      	movs	r2, #0
 8009862:	4912      	ldr	r1, [pc, #72]	@ (80098ac <MX_USB_DEVICE_Init+0x50>)
 8009864:	4812      	ldr	r0, [pc, #72]	@ (80098b0 <MX_USB_DEVICE_Init+0x54>)
 8009866:	f7fe feb9 	bl	80085dc <USBD_Init>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009870:	f7f7 ffe4 	bl	800183c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009874:	490f      	ldr	r1, [pc, #60]	@ (80098b4 <MX_USB_DEVICE_Init+0x58>)
 8009876:	480e      	ldr	r0, [pc, #56]	@ (80098b0 <MX_USB_DEVICE_Init+0x54>)
 8009878:	f7fe fee0 	bl	800863c <USBD_RegisterClass>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009882:	f7f7 ffdb 	bl	800183c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009886:	490c      	ldr	r1, [pc, #48]	@ (80098b8 <MX_USB_DEVICE_Init+0x5c>)
 8009888:	4809      	ldr	r0, [pc, #36]	@ (80098b0 <MX_USB_DEVICE_Init+0x54>)
 800988a:	f7fe fe0b 	bl	80084a4 <USBD_CDC_RegisterInterface>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009894:	f7f7 ffd2 	bl	800183c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009898:	4805      	ldr	r0, [pc, #20]	@ (80098b0 <MX_USB_DEVICE_Init+0x54>)
 800989a:	f7fe fef6 	bl	800868a <USBD_Start>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098a4:	f7f7 ffca 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098a8:	bf00      	nop
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20000198 	.word	0x20000198
 80098b0:	200005f0 	.word	0x200005f0
 80098b4:	20000080 	.word	0x20000080
 80098b8:	20000184 	.word	0x20000184

080098bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098c0:	2200      	movs	r2, #0
 80098c2:	4905      	ldr	r1, [pc, #20]	@ (80098d8 <CDC_Init_FS+0x1c>)
 80098c4:	4805      	ldr	r0, [pc, #20]	@ (80098dc <CDC_Init_FS+0x20>)
 80098c6:	f7fe fe02 	bl	80084ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098ca:	4905      	ldr	r1, [pc, #20]	@ (80098e0 <CDC_Init_FS+0x24>)
 80098cc:	4803      	ldr	r0, [pc, #12]	@ (80098dc <CDC_Init_FS+0x20>)
 80098ce:	f7fe fe17 	bl	8008500 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80098d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	200010c0 	.word	0x200010c0
 80098dc:	200005f0 	.word	0x200005f0
 80098e0:	200008c0 	.word	0x200008c0

080098e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	6039      	str	r1, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
 8009900:	4613      	mov	r3, r2
 8009902:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b23      	cmp	r3, #35	@ 0x23
 8009908:	d84a      	bhi.n	80099a0 <CDC_Control_FS+0xac>
 800990a:	a201      	add	r2, pc, #4	@ (adr r2, 8009910 <CDC_Control_FS+0x1c>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	080099a1 	.word	0x080099a1
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099a1 	.word	0x080099a1
 800991c:	080099a1 	.word	0x080099a1
 8009920:	080099a1 	.word	0x080099a1
 8009924:	080099a1 	.word	0x080099a1
 8009928:	080099a1 	.word	0x080099a1
 800992c:	080099a1 	.word	0x080099a1
 8009930:	080099a1 	.word	0x080099a1
 8009934:	080099a1 	.word	0x080099a1
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099a1 	.word	0x080099a1
 8009940:	080099a1 	.word	0x080099a1
 8009944:	080099a1 	.word	0x080099a1
 8009948:	080099a1 	.word	0x080099a1
 800994c:	080099a1 	.word	0x080099a1
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099a1 	.word	0x080099a1
 8009958:	080099a1 	.word	0x080099a1
 800995c:	080099a1 	.word	0x080099a1
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
 8009968:	080099a1 	.word	0x080099a1
 800996c:	080099a1 	.word	0x080099a1
 8009970:	080099a1 	.word	0x080099a1
 8009974:	080099a1 	.word	0x080099a1
 8009978:	080099a1 	.word	0x080099a1
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a1 	.word	0x080099a1
 8009984:	080099a1 	.word	0x080099a1
 8009988:	080099a1 	.word	0x080099a1
 800998c:	080099a1 	.word	0x080099a1
 8009990:	080099a1 	.word	0x080099a1
 8009994:	080099a1 	.word	0x080099a1
 8009998:	080099a1 	.word	0x080099a1
 800999c:	080099a1 	.word	0x080099a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099a0:	bf00      	nop
  }

  return (USBD_OK);
 80099a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099ba:	6879      	ldr	r1, [r7, #4]
 80099bc:	4805      	ldr	r0, [pc, #20]	@ (80099d4 <CDC_Receive_FS+0x24>)
 80099be:	f7fe fd9f 	bl	8008500 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099c2:	4804      	ldr	r0, [pc, #16]	@ (80099d4 <CDC_Receive_FS+0x24>)
 80099c4:	f7fe fde0 	bl	8008588 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	200005f0 	.word	0x200005f0

080099d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009a20 <CDC_Transmit_FS+0x48>)
 80099ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80099ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e00b      	b.n	8009a16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099fe:	887b      	ldrh	r3, [r7, #2]
 8009a00:	461a      	mov	r2, r3
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	4806      	ldr	r0, [pc, #24]	@ (8009a20 <CDC_Transmit_FS+0x48>)
 8009a06:	f7fe fd62 	bl	80084ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a0a:	4805      	ldr	r0, [pc, #20]	@ (8009a20 <CDC_Transmit_FS+0x48>)
 8009a0c:	f7fe fd8c 	bl	8008528 <USBD_CDC_TransmitPacket>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200005f0 	.word	0x200005f0

08009a24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
	...

08009a48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2212      	movs	r2, #18
 8009a58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a5a:	4b03      	ldr	r3, [pc, #12]	@ (8009a68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr
 8009a68:	200001b8 	.word	0x200001b8

08009a6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2204      	movs	r2, #4
 8009a7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a7e:	4b03      	ldr	r3, [pc, #12]	@ (8009a8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	200001d8 	.word	0x200001d8

08009a90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	4907      	ldr	r1, [pc, #28]	@ (8009ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009aa6:	4808      	ldr	r0, [pc, #32]	@ (8009ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009aa8:	f7ff fdf8 	bl	800969c <USBD_GetString>
 8009aac:	e004      	b.n	8009ab8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	4904      	ldr	r1, [pc, #16]	@ (8009ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ab2:	4805      	ldr	r0, [pc, #20]	@ (8009ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ab4:	f7ff fdf2 	bl	800969c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ab8:	4b02      	ldr	r3, [pc, #8]	@ (8009ac4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200018c0 	.word	0x200018c0
 8009ac8:	0800ecc8 	.word	0x0800ecc8

08009acc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	6039      	str	r1, [r7, #0]
 8009ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	4904      	ldr	r1, [pc, #16]	@ (8009aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009adc:	4804      	ldr	r0, [pc, #16]	@ (8009af0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ade:	f7ff fddd 	bl	800969c <USBD_GetString>
  return USBD_StrDesc;
 8009ae2:	4b02      	ldr	r3, [pc, #8]	@ (8009aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	200018c0 	.word	0x200018c0
 8009af0:	0800ece0 	.word	0x0800ece0

08009af4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	221a      	movs	r2, #26
 8009b04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b06:	f000 f855 	bl	8009bb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b0a:	4b02      	ldr	r3, [pc, #8]	@ (8009b14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	200001dc 	.word	0x200001dc

08009b18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	6039      	str	r1, [r7, #0]
 8009b22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	4907      	ldr	r1, [pc, #28]	@ (8009b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b2e:	4808      	ldr	r0, [pc, #32]	@ (8009b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b30:	f7ff fdb4 	bl	800969c <USBD_GetString>
 8009b34:	e004      	b.n	8009b40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4904      	ldr	r1, [pc, #16]	@ (8009b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b3a:	4805      	ldr	r0, [pc, #20]	@ (8009b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b3c:	f7ff fdae 	bl	800969c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b40:	4b02      	ldr	r3, [pc, #8]	@ (8009b4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	200018c0 	.word	0x200018c0
 8009b50:	0800ecf4 	.word	0x0800ecf4

08009b54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	6039      	str	r1, [r7, #0]
 8009b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b60:	79fb      	ldrb	r3, [r7, #7]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	4907      	ldr	r1, [pc, #28]	@ (8009b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b6a:	4808      	ldr	r0, [pc, #32]	@ (8009b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b6c:	f7ff fd96 	bl	800969c <USBD_GetString>
 8009b70:	e004      	b.n	8009b7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	4904      	ldr	r1, [pc, #16]	@ (8009b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b76:	4805      	ldr	r0, [pc, #20]	@ (8009b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b78:	f7ff fd90 	bl	800969c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b7c:	4b02      	ldr	r3, [pc, #8]	@ (8009b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	200018c0 	.word	0x200018c0
 8009b8c:	0800ed00 	.word	0x0800ed00

08009b90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	4603      	mov	r3, r0
 8009b98:	6039      	str	r1, [r7, #0]
 8009b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	220c      	movs	r2, #12
 8009ba0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009ba2:	4b03      	ldr	r3, [pc, #12]	@ (8009bb0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	200001cc 	.word	0x200001cc

08009bb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bba:	4b0f      	ldr	r3, [pc, #60]	@ (8009bf8 <Get_SerialNum+0x44>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8009bfc <Get_SerialNum+0x48>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8009c00 <Get_SerialNum+0x4c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bcc:	68fa      	ldr	r2, [r7, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bda:	2208      	movs	r2, #8
 8009bdc:	4909      	ldr	r1, [pc, #36]	@ (8009c04 <Get_SerialNum+0x50>)
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 f814 	bl	8009c0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009be4:	2204      	movs	r2, #4
 8009be6:	4908      	ldr	r1, [pc, #32]	@ (8009c08 <Get_SerialNum+0x54>)
 8009be8:	68b8      	ldr	r0, [r7, #8]
 8009bea:	f000 f80f 	bl	8009c0c <IntToUnicode>
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	1fff7590 	.word	0x1fff7590
 8009bfc:	1fff7594 	.word	0x1fff7594
 8009c00:	1fff7598 	.word	0x1fff7598
 8009c04:	200001de 	.word	0x200001de
 8009c08:	200001ee 	.word	0x200001ee

08009c0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	75fb      	strb	r3, [r7, #23]
 8009c22:	e027      	b.n	8009c74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	0f1b      	lsrs	r3, r3, #28
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d80b      	bhi.n	8009c44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	0f1b      	lsrs	r3, r3, #28
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	4619      	mov	r1, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3230      	adds	r2, #48	@ 0x30
 8009c3e:	b2d2      	uxtb	r2, r2
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	e00a      	b.n	8009c5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	0f1b      	lsrs	r3, r3, #28
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	440b      	add	r3, r1
 8009c54:	3237      	adds	r2, #55	@ 0x37
 8009c56:	b2d2      	uxtb	r2, r2
 8009c58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	011b      	lsls	r3, r3, #4
 8009c5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	3301      	adds	r3, #1
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	4413      	add	r3, r2
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	3301      	adds	r3, #1
 8009c72:	75fb      	strb	r3, [r7, #23]
 8009c74:	7dfa      	ldrb	r2, [r7, #23]
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d3d3      	bcc.n	8009c24 <IntToUnicode+0x18>
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr
	...

08009c8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	@ 0x28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c94:	f107 0314 	add.w	r3, r7, #20
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	605a      	str	r2, [r3, #4]
 8009c9e:	609a      	str	r2, [r3, #8]
 8009ca0:	60da      	str	r2, [r3, #12]
 8009ca2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cac:	d14e      	bne.n	8009d4c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cae:	4b29      	ldr	r3, [pc, #164]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cb2:	4a28      	ldr	r2, [pc, #160]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009cb4:	f043 0301 	orr.w	r3, r3, #1
 8009cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009cba:	4b26      	ldr	r3, [pc, #152]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	613b      	str	r3, [r7, #16]
 8009cc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009cc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009cd8:	230a      	movs	r3, #10
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cdc:	f107 0314 	add.w	r3, r7, #20
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ce6:	f7f8 feed 	bl	8002ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cea:	4b1a      	ldr	r3, [pc, #104]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cee:	4a19      	ldr	r2, [pc, #100]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009cf6:	4b17      	ldr	r3, [pc, #92]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d02:	4b14      	ldr	r3, [pc, #80]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d114      	bne.n	8009d38 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d0e:	4b11      	ldr	r3, [pc, #68]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d12:	4a10      	ldr	r2, [pc, #64]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d22:	60bb      	str	r3, [r7, #8]
 8009d24:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009d26:	f7fa fae3 	bl	80042f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d2e:	4a09      	ldr	r2, [pc, #36]	@ (8009d54 <HAL_PCD_MspInit+0xc8>)
 8009d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d36:	e001      	b.n	8009d3c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009d38:	f7fa fada 	bl	80042f0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2100      	movs	r1, #0
 8009d40:	2043      	movs	r0, #67	@ 0x43
 8009d42:	f7f8 fe48 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d46:	2043      	movs	r0, #67	@ 0x43
 8009d48:	f7f8 fe61 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d4c:	bf00      	nop
 8009d4e:	3728      	adds	r7, #40	@ 0x28
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	40021000 	.word	0x40021000

08009d58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f503 7371 	add.w	r3, r3, #964	@ 0x3c4
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f7fe fcd6 	bl	8008720 <USBD_LL_SetupStage>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	4613      	mov	r3, r2
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	78fb      	ldrb	r3, [r7, #3]
 8009da4:	4619      	mov	r1, r3
 8009da6:	f7fe fd10 	bl	80087ca <USBD_LL_DataOutStage>
}
 8009daa:	bf00      	nop
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
 8009dc4:	78fa      	ldrb	r2, [r7, #3]
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	00db      	lsls	r3, r3, #3
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	440b      	add	r3, r1
 8009dd2:	3348      	adds	r3, #72	@ 0x48
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f7fe fd59 	bl	8008890 <USBD_LL_DataInStage>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b082      	sub	sp, #8
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe fe5d 	bl	8008ab4 <USBD_LL_SOF>
}
 8009dfa:	bf00      	nop
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d001      	beq.n	8009e1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e16:	f7f7 fd11 	bl	800183c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009e20:	7bfa      	ldrb	r2, [r7, #15]
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fe0a 	bl	8008a3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fdc3 	bl	80089bc <USBD_LL_Reset>
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6812      	ldr	r2, [r2, #0]
 8009e56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fdf9 	bl	8008a5e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e74:	4b04      	ldr	r3, [pc, #16]	@ (8009e88 <HAL_PCD_SuspendCallback+0x48>)
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	4a03      	ldr	r2, [pc, #12]	@ (8009e88 <HAL_PCD_SuspendCallback+0x48>)
 8009e7a:	f043 0306 	orr.w	r3, r3, #6
 8009e7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed00 	.word	0xe000ed00

08009e8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6812      	ldr	r2, [r2, #0]
 8009ea2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ea6:	f023 0301 	bic.w	r3, r3, #1
 8009eaa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d007      	beq.n	8009ec4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009eb4:	4b08      	ldr	r3, [pc, #32]	@ (8009ed8 <HAL_PCD_ResumeCallback+0x4c>)
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	4a07      	ldr	r2, [pc, #28]	@ (8009ed8 <HAL_PCD_ResumeCallback+0x4c>)
 8009eba:	f023 0306 	bic.w	r3, r3, #6
 8009ebe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ec0:	f000 fade 	bl	800a480 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fddc 	bl	8008a88 <USBD_LL_Resume>
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	e000ed00 	.word	0xe000ed00

08009edc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fe05 	bl	8008b02 <USBD_LL_IsoOUTIncomplete>
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fde6 	bl	8008ae8 <USBD_LL_IsoINIncomplete>
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fdf2 	bl	8008b1c <USBD_LL_DevConnected>
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fdef 	bl	8008b32 <USBD_LL_DevDisconnected>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d13c      	bne.n	8009fe6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f6c:	4a20      	ldr	r2, [pc, #128]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8c2 3404 	str.w	r3, [r2, #1028]	@ 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f78:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009f82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009f84:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f86:	2206      	movs	r2, #6
 8009f88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f8a:	4b19      	ldr	r3, [pc, #100]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f90:	4b17      	ldr	r3, [pc, #92]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f92:	2202      	movs	r2, #2
 8009f94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f96:	4b16      	ldr	r3, [pc, #88]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f9c:	4b14      	ldr	r3, [pc, #80]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009fa2:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009fa8:	4b11      	ldr	r3, [pc, #68]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009fae:	4b10      	ldr	r3, [pc, #64]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009fba:	480d      	ldr	r0, [pc, #52]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fbc:	f7f9 f884 	bl	80030c8 <HAL_PCD_Init>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009fc6:	f7f7 fc39 	bl	800183c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009fca:	2180      	movs	r1, #128	@ 0x80
 8009fcc:	4808      	ldr	r0, [pc, #32]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fce:	f7fa f8e6 	bl	800419e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009fd2:	2240      	movs	r2, #64	@ 0x40
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4806      	ldr	r0, [pc, #24]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fd8:	f7fa f89a 	bl	8004110 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fdc:	2280      	movs	r2, #128	@ 0x80
 8009fde:	2101      	movs	r1, #1
 8009fe0:	4803      	ldr	r0, [pc, #12]	@ (8009ff0 <USBD_LL_Init+0x94>)
 8009fe2:	f7fa f895 	bl	8004110 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20001ac0 	.word	0x20001ac0

08009ff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f9 f980 	bl	8003310 <HAL_PCD_Start>
 800a010:	4603      	mov	r3, r0
 800a012:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a014:	7bbb      	ldrb	r3, [r7, #14]
 800a016:	2b03      	cmp	r3, #3
 800a018:	d816      	bhi.n	800a048 <USBD_LL_Start+0x54>
 800a01a:	a201      	add	r2, pc, #4	@ (adr r2, 800a020 <USBD_LL_Start+0x2c>)
 800a01c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a037 	.word	0x0800a037
 800a028:	0800a03d 	.word	0x0800a03d
 800a02c:	0800a043 	.word	0x0800a043
    case HAL_OK :
      usb_status = USBD_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	73fb      	strb	r3, [r7, #15]
    break;
 800a034:	e00b      	b.n	800a04e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a036:	2303      	movs	r3, #3
 800a038:	73fb      	strb	r3, [r7, #15]
    break;
 800a03a:	e008      	b.n	800a04e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
    break;
 800a040:	e005      	b.n	800a04e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a042:	2303      	movs	r3, #3
 800a044:	73fb      	strb	r3, [r7, #15]
    break;
 800a046:	e002      	b.n	800a04e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a048:	2303      	movs	r3, #3
 800a04a:	73fb      	strb	r3, [r7, #15]
    break;
 800a04c:	bf00      	nop
  }
  return usb_status;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	4608      	mov	r0, r1
 800a062:	4611      	mov	r1, r2
 800a064:	461a      	mov	r2, r3
 800a066:	4603      	mov	r3, r0
 800a068:	70fb      	strb	r3, [r7, #3]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70bb      	strb	r3, [r7, #2]
 800a06e:	4613      	mov	r3, r2
 800a070:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a080:	78bb      	ldrb	r3, [r7, #2]
 800a082:	883a      	ldrh	r2, [r7, #0]
 800a084:	78f9      	ldrb	r1, [r7, #3]
 800a086:	f7f9 fd3b 	bl	8003b00 <HAL_PCD_EP_Open>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
 800a090:	2b03      	cmp	r3, #3
 800a092:	d817      	bhi.n	800a0c4 <USBD_LL_OpenEP+0x6c>
 800a094:	a201      	add	r2, pc, #4	@ (adr r2, 800a09c <USBD_LL_OpenEP+0x44>)
 800a096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a0ad 	.word	0x0800a0ad
 800a0a0:	0800a0b3 	.word	0x0800a0b3
 800a0a4:	0800a0b9 	.word	0x0800a0b9
 800a0a8:	0800a0bf 	.word	0x0800a0bf
    case HAL_OK :
      usb_status = USBD_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b0:	e00b      	b.n	800a0ca <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b6:	e008      	b.n	800a0ca <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a0bc:	e005      	b.n	800a0ca <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c2:	e002      	b.n	800a0ca <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c8:	bf00      	nop
  }
  return usb_status;
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7f9 fd6c 	bl	8003bd0 <HAL_PCD_EP_Close>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0fc:	7bbb      	ldrb	r3, [r7, #14]
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d816      	bhi.n	800a130 <USBD_LL_CloseEP+0x5c>
 800a102:	a201      	add	r2, pc, #4	@ (adr r2, 800a108 <USBD_LL_CloseEP+0x34>)
 800a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a108:	0800a119 	.word	0x0800a119
 800a10c:	0800a11f 	.word	0x0800a11f
 800a110:	0800a125 	.word	0x0800a125
 800a114:	0800a12b 	.word	0x0800a12b
    case HAL_OK :
      usb_status = USBD_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
    break;
 800a11c:	e00b      	b.n	800a136 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a11e:	2303      	movs	r3, #3
 800a120:	73fb      	strb	r3, [r7, #15]
    break;
 800a122:	e008      	b.n	800a136 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a124:	2301      	movs	r3, #1
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	e005      	b.n	800a136 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a12a:	2303      	movs	r3, #3
 800a12c:	73fb      	strb	r3, [r7, #15]
    break;
 800a12e:	e002      	b.n	800a136 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a130:	2303      	movs	r3, #3
 800a132:	73fb      	strb	r3, [r7, #15]
    break;
 800a134:	bf00      	nop
  }
  return usb_status;
 800a136:	7bfb      	ldrb	r3, [r7, #15]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	460b      	mov	r3, r1
 800a14a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a15a:	78fa      	ldrb	r2, [r7, #3]
 800a15c:	4611      	mov	r1, r2
 800a15e:	4618      	mov	r0, r3
 800a160:	f7f9 fe13 	bl	8003d8a <HAL_PCD_EP_SetStall>
 800a164:	4603      	mov	r3, r0
 800a166:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a168:	7bbb      	ldrb	r3, [r7, #14]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	d816      	bhi.n	800a19c <USBD_LL_StallEP+0x5c>
 800a16e:	a201      	add	r2, pc, #4	@ (adr r2, 800a174 <USBD_LL_StallEP+0x34>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a185 	.word	0x0800a185
 800a178:	0800a18b 	.word	0x0800a18b
 800a17c:	0800a191 	.word	0x0800a191
 800a180:	0800a197 	.word	0x0800a197
    case HAL_OK :
      usb_status = USBD_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
    break;
 800a188:	e00b      	b.n	800a1a2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	73fb      	strb	r3, [r7, #15]
    break;
 800a18e:	e008      	b.n	800a1a2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a190:	2301      	movs	r3, #1
 800a192:	73fb      	strb	r3, [r7, #15]
    break;
 800a194:	e005      	b.n	800a1a2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a196:	2303      	movs	r3, #3
 800a198:	73fb      	strb	r3, [r7, #15]
    break;
 800a19a:	e002      	b.n	800a1a2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a19c:	2303      	movs	r3, #3
 800a19e:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a0:	bf00      	nop
  }
  return usb_status;
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a1c6:	78fa      	ldrb	r2, [r7, #3]
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7f9 fe3f 	bl	8003e4e <HAL_PCD_EP_ClrStall>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a1d4:	7bbb      	ldrb	r3, [r7, #14]
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d816      	bhi.n	800a208 <USBD_LL_ClearStallEP+0x5c>
 800a1da:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e0 <USBD_LL_ClearStallEP+0x34>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a1f7 	.word	0x0800a1f7
 800a1e8:	0800a1fd 	.word	0x0800a1fd
 800a1ec:	0800a203 	.word	0x0800a203
    case HAL_OK :
      usb_status = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f4:	e00b      	b.n	800a20e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fa:	e008      	b.n	800a20e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a200:	e005      	b.n	800a20e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a202:	2303      	movs	r3, #3
 800a204:	73fb      	strb	r3, [r7, #15]
    break;
 800a206:	e002      	b.n	800a20e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a208:	2303      	movs	r3, #3
 800a20a:	73fb      	strb	r3, [r7, #15]
    break;
 800a20c:	bf00      	nop
  }
  return usb_status;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a22a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a22c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a230:	2b00      	cmp	r3, #0
 800a232:	da0b      	bge.n	800a24c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a23a:	68f9      	ldr	r1, [r7, #12]
 800a23c:	4613      	mov	r3, r2
 800a23e:	00db      	lsls	r3, r3, #3
 800a240:	1a9b      	subs	r3, r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	333e      	adds	r3, #62	@ 0x3e
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	e00b      	b.n	800a264 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a24c:	78fb      	ldrb	r3, [r7, #3]
 800a24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	4613      	mov	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	1a9b      	subs	r3, r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a262:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	460b      	mov	r3, r1
 800a27a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a28a:	78fa      	ldrb	r2, [r7, #3]
 800a28c:	4611      	mov	r1, r2
 800a28e:	4618      	mov	r0, r3
 800a290:	f7f9 fc11 	bl	8003ab6 <HAL_PCD_SetAddress>
 800a294:	4603      	mov	r3, r0
 800a296:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d816      	bhi.n	800a2cc <USBD_LL_SetUSBAddress+0x5c>
 800a29e:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a4 <USBD_LL_SetUSBAddress+0x34>)
 800a2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a4:	0800a2b5 	.word	0x0800a2b5
 800a2a8:	0800a2bb 	.word	0x0800a2bb
 800a2ac:	0800a2c1 	.word	0x0800a2c1
 800a2b0:	0800a2c7 	.word	0x0800a2c7
    case HAL_OK :
      usb_status = USBD_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b8:	e00b      	b.n	800a2d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a2be:	e008      	b.n	800a2d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c4:	e005      	b.n	800a2d2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ca:	e002      	b.n	800a2d2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a2d0:	bf00      	nop
  }
  return usb_status;
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a2fa:	7af9      	ldrb	r1, [r7, #11]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	f7f9 fd06 	bl	8003d10 <HAL_PCD_EP_Transmit>
 800a304:	4603      	mov	r3, r0
 800a306:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a308:	7dbb      	ldrb	r3, [r7, #22]
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d816      	bhi.n	800a33c <USBD_LL_Transmit+0x60>
 800a30e:	a201      	add	r2, pc, #4	@ (adr r2, 800a314 <USBD_LL_Transmit+0x38>)
 800a310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a314:	0800a325 	.word	0x0800a325
 800a318:	0800a32b 	.word	0x0800a32b
 800a31c:	0800a331 	.word	0x0800a331
 800a320:	0800a337 	.word	0x0800a337
    case HAL_OK :
      usb_status = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	75fb      	strb	r3, [r7, #23]
    break;
 800a328:	e00b      	b.n	800a342 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a32a:	2303      	movs	r3, #3
 800a32c:	75fb      	strb	r3, [r7, #23]
    break;
 800a32e:	e008      	b.n	800a342 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a330:	2301      	movs	r3, #1
 800a332:	75fb      	strb	r3, [r7, #23]
    break;
 800a334:	e005      	b.n	800a342 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a336:	2303      	movs	r3, #3
 800a338:	75fb      	strb	r3, [r7, #23]
    break;
 800a33a:	e002      	b.n	800a342 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a33c:	2303      	movs	r3, #3
 800a33e:	75fb      	strb	r3, [r7, #23]
    break;
 800a340:	bf00      	nop
  }
  return usb_status;
 800a342:	7dfb      	ldrb	r3, [r7, #23]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	607a      	str	r2, [r7, #4]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	460b      	mov	r3, r1
 800a35a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800a36a:	7af9      	ldrb	r1, [r7, #11]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	f7f9 fc78 	bl	8003c64 <HAL_PCD_EP_Receive>
 800a374:	4603      	mov	r3, r0
 800a376:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a378:	7dbb      	ldrb	r3, [r7, #22]
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d816      	bhi.n	800a3ac <USBD_LL_PrepareReceive+0x60>
 800a37e:	a201      	add	r2, pc, #4	@ (adr r2, 800a384 <USBD_LL_PrepareReceive+0x38>)
 800a380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a384:	0800a395 	.word	0x0800a395
 800a388:	0800a39b 	.word	0x0800a39b
 800a38c:	0800a3a1 	.word	0x0800a3a1
 800a390:	0800a3a7 	.word	0x0800a3a7
    case HAL_OK :
      usb_status = USBD_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	75fb      	strb	r3, [r7, #23]
    break;
 800a398:	e00b      	b.n	800a3b2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a39a:	2303      	movs	r3, #3
 800a39c:	75fb      	strb	r3, [r7, #23]
    break;
 800a39e:	e008      	b.n	800a3b2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	75fb      	strb	r3, [r7, #23]
    break;
 800a3a4:	e005      	b.n	800a3b2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	75fb      	strb	r3, [r7, #23]
    break;
 800a3aa:	e002      	b.n	800a3b2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	75fb      	strb	r3, [r7, #23]
    break;
 800a3b0:	bf00      	nop
  }
  return usb_status;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a3ce:	78fa      	ldrb	r2, [r7, #3]
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7f9 fc84 	bl	8003ce0 <HAL_PCD_EP_GetRxCount>
 800a3d8:	4603      	mov	r3, r0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <HAL_PCDEx_LPM_Callback+0x18>
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d01f      	beq.n	800a43a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a3fa:	e03b      	b.n	800a474 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a1b      	ldr	r3, [r3, #32]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d007      	beq.n	800a414 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a404:	f000 f83c 	bl	800a480 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a408:	4b1c      	ldr	r3, [pc, #112]	@ (800a47c <HAL_PCDEx_LPM_Callback+0x98>)
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	4a1b      	ldr	r2, [pc, #108]	@ (800a47c <HAL_PCDEx_LPM_Callback+0x98>)
 800a40e:	f023 0306 	bic.w	r3, r3, #6
 800a412:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a426:	f023 0301 	bic.w	r3, r3, #1
 800a42a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fb28 	bl	8008a88 <USBD_LL_Resume>
    break;
 800a438:	e01c      	b.n	800a474 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	6812      	ldr	r2, [r2, #0]
 800a448:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe fb00 	bl	8008a5e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a466:	4b05      	ldr	r3, [pc, #20]	@ (800a47c <HAL_PCDEx_LPM_Callback+0x98>)
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	4a04      	ldr	r2, [pc, #16]	@ (800a47c <HAL_PCDEx_LPM_Callback+0x98>)
 800a46c:	f043 0306 	orr.w	r3, r3, #6
 800a470:	6113      	str	r3, [r2, #16]
    break;
 800a472:	bf00      	nop
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	e000ed00 	.word	0xe000ed00

0800a480 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a484:	f7f7 f88e 	bl	80015a4 <SystemClock_Config>
}
 800a488:	bf00      	nop
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <malloc>:
 800a48c:	4b02      	ldr	r3, [pc, #8]	@ (800a498 <malloc+0xc>)
 800a48e:	4601      	mov	r1, r0
 800a490:	6818      	ldr	r0, [r3, #0]
 800a492:	f000 b82d 	b.w	800a4f0 <_malloc_r>
 800a496:	bf00      	nop
 800a498:	20000204 	.word	0x20000204

0800a49c <free>:
 800a49c:	4b02      	ldr	r3, [pc, #8]	@ (800a4a8 <free+0xc>)
 800a49e:	4601      	mov	r1, r0
 800a4a0:	6818      	ldr	r0, [r3, #0]
 800a4a2:	f002 b831 	b.w	800c508 <_free_r>
 800a4a6:	bf00      	nop
 800a4a8:	20000204 	.word	0x20000204

0800a4ac <sbrk_aligned>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a4ec <sbrk_aligned+0x40>)
 800a4b0:	460c      	mov	r4, r1
 800a4b2:	6831      	ldr	r1, [r6, #0]
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	b911      	cbnz	r1, 800a4be <sbrk_aligned+0x12>
 800a4b8:	f001 f976 	bl	800b7a8 <_sbrk_r>
 800a4bc:	6030      	str	r0, [r6, #0]
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f001 f971 	bl	800b7a8 <_sbrk_r>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d103      	bne.n	800a4d2 <sbrk_aligned+0x26>
 800a4ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	1cc4      	adds	r4, r0, #3
 800a4d4:	f024 0403 	bic.w	r4, r4, #3
 800a4d8:	42a0      	cmp	r0, r4
 800a4da:	d0f8      	beq.n	800a4ce <sbrk_aligned+0x22>
 800a4dc:	1a21      	subs	r1, r4, r0
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f001 f962 	bl	800b7a8 <_sbrk_r>
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d1f2      	bne.n	800a4ce <sbrk_aligned+0x22>
 800a4e8:	e7ef      	b.n	800a4ca <sbrk_aligned+0x1e>
 800a4ea:	bf00      	nop
 800a4ec:	20001ec8 	.word	0x20001ec8

0800a4f0 <_malloc_r>:
 800a4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f4:	1ccd      	adds	r5, r1, #3
 800a4f6:	f025 0503 	bic.w	r5, r5, #3
 800a4fa:	3508      	adds	r5, #8
 800a4fc:	2d0c      	cmp	r5, #12
 800a4fe:	bf38      	it	cc
 800a500:	250c      	movcc	r5, #12
 800a502:	2d00      	cmp	r5, #0
 800a504:	4606      	mov	r6, r0
 800a506:	db01      	blt.n	800a50c <_malloc_r+0x1c>
 800a508:	42a9      	cmp	r1, r5
 800a50a:	d904      	bls.n	800a516 <_malloc_r+0x26>
 800a50c:	230c      	movs	r3, #12
 800a50e:	6033      	str	r3, [r6, #0]
 800a510:	2000      	movs	r0, #0
 800a512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5ec <_malloc_r+0xfc>
 800a51a:	f000 f869 	bl	800a5f0 <__malloc_lock>
 800a51e:	f8d8 3000 	ldr.w	r3, [r8]
 800a522:	461c      	mov	r4, r3
 800a524:	bb44      	cbnz	r4, 800a578 <_malloc_r+0x88>
 800a526:	4629      	mov	r1, r5
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff ffbf 	bl	800a4ac <sbrk_aligned>
 800a52e:	1c43      	adds	r3, r0, #1
 800a530:	4604      	mov	r4, r0
 800a532:	d158      	bne.n	800a5e6 <_malloc_r+0xf6>
 800a534:	f8d8 4000 	ldr.w	r4, [r8]
 800a538:	4627      	mov	r7, r4
 800a53a:	2f00      	cmp	r7, #0
 800a53c:	d143      	bne.n	800a5c6 <_malloc_r+0xd6>
 800a53e:	2c00      	cmp	r4, #0
 800a540:	d04b      	beq.n	800a5da <_malloc_r+0xea>
 800a542:	6823      	ldr	r3, [r4, #0]
 800a544:	4639      	mov	r1, r7
 800a546:	4630      	mov	r0, r6
 800a548:	eb04 0903 	add.w	r9, r4, r3
 800a54c:	f001 f92c 	bl	800b7a8 <_sbrk_r>
 800a550:	4581      	cmp	r9, r0
 800a552:	d142      	bne.n	800a5da <_malloc_r+0xea>
 800a554:	6821      	ldr	r1, [r4, #0]
 800a556:	1a6d      	subs	r5, r5, r1
 800a558:	4629      	mov	r1, r5
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7ff ffa6 	bl	800a4ac <sbrk_aligned>
 800a560:	3001      	adds	r0, #1
 800a562:	d03a      	beq.n	800a5da <_malloc_r+0xea>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	442b      	add	r3, r5
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	f8d8 3000 	ldr.w	r3, [r8]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	bb62      	cbnz	r2, 800a5cc <_malloc_r+0xdc>
 800a572:	f8c8 7000 	str.w	r7, [r8]
 800a576:	e00f      	b.n	800a598 <_malloc_r+0xa8>
 800a578:	6822      	ldr	r2, [r4, #0]
 800a57a:	1b52      	subs	r2, r2, r5
 800a57c:	d420      	bmi.n	800a5c0 <_malloc_r+0xd0>
 800a57e:	2a0b      	cmp	r2, #11
 800a580:	d917      	bls.n	800a5b2 <_malloc_r+0xc2>
 800a582:	1961      	adds	r1, r4, r5
 800a584:	42a3      	cmp	r3, r4
 800a586:	6025      	str	r5, [r4, #0]
 800a588:	bf18      	it	ne
 800a58a:	6059      	strne	r1, [r3, #4]
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	bf08      	it	eq
 800a590:	f8c8 1000 	streq.w	r1, [r8]
 800a594:	5162      	str	r2, [r4, r5]
 800a596:	604b      	str	r3, [r1, #4]
 800a598:	4630      	mov	r0, r6
 800a59a:	f000 f82f 	bl	800a5fc <__malloc_unlock>
 800a59e:	f104 000b 	add.w	r0, r4, #11
 800a5a2:	1d23      	adds	r3, r4, #4
 800a5a4:	f020 0007 	bic.w	r0, r0, #7
 800a5a8:	1ac2      	subs	r2, r0, r3
 800a5aa:	bf1c      	itt	ne
 800a5ac:	1a1b      	subne	r3, r3, r0
 800a5ae:	50a3      	strne	r3, [r4, r2]
 800a5b0:	e7af      	b.n	800a512 <_malloc_r+0x22>
 800a5b2:	6862      	ldr	r2, [r4, #4]
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	bf0c      	ite	eq
 800a5b8:	f8c8 2000 	streq.w	r2, [r8]
 800a5bc:	605a      	strne	r2, [r3, #4]
 800a5be:	e7eb      	b.n	800a598 <_malloc_r+0xa8>
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	6864      	ldr	r4, [r4, #4]
 800a5c4:	e7ae      	b.n	800a524 <_malloc_r+0x34>
 800a5c6:	463c      	mov	r4, r7
 800a5c8:	687f      	ldr	r7, [r7, #4]
 800a5ca:	e7b6      	b.n	800a53a <_malloc_r+0x4a>
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	d1fb      	bne.n	800a5cc <_malloc_r+0xdc>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	6053      	str	r3, [r2, #4]
 800a5d8:	e7de      	b.n	800a598 <_malloc_r+0xa8>
 800a5da:	230c      	movs	r3, #12
 800a5dc:	6033      	str	r3, [r6, #0]
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f000 f80c 	bl	800a5fc <__malloc_unlock>
 800a5e4:	e794      	b.n	800a510 <_malloc_r+0x20>
 800a5e6:	6005      	str	r5, [r0, #0]
 800a5e8:	e7d6      	b.n	800a598 <_malloc_r+0xa8>
 800a5ea:	bf00      	nop
 800a5ec:	20001ecc 	.word	0x20001ecc

0800a5f0 <__malloc_lock>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	@ (800a5f8 <__malloc_lock+0x8>)
 800a5f2:	f001 b926 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	20002010 	.word	0x20002010

0800a5fc <__malloc_unlock>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	@ (800a604 <__malloc_unlock+0x8>)
 800a5fe:	f001 b921 	b.w	800b844 <__retarget_lock_release_recursive>
 800a602:	bf00      	nop
 800a604:	20002010 	.word	0x20002010

0800a608 <__cvt>:
 800a608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	ec57 6b10 	vmov	r6, r7, d0
 800a610:	2f00      	cmp	r7, #0
 800a612:	460c      	mov	r4, r1
 800a614:	4619      	mov	r1, r3
 800a616:	463b      	mov	r3, r7
 800a618:	bfbb      	ittet	lt
 800a61a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a61e:	461f      	movlt	r7, r3
 800a620:	2300      	movge	r3, #0
 800a622:	232d      	movlt	r3, #45	@ 0x2d
 800a624:	700b      	strb	r3, [r1, #0]
 800a626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a628:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a62c:	4691      	mov	r9, r2
 800a62e:	f023 0820 	bic.w	r8, r3, #32
 800a632:	bfbc      	itt	lt
 800a634:	4632      	movlt	r2, r6
 800a636:	4616      	movlt	r6, r2
 800a638:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a63c:	d005      	beq.n	800a64a <__cvt+0x42>
 800a63e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a642:	d100      	bne.n	800a646 <__cvt+0x3e>
 800a644:	3401      	adds	r4, #1
 800a646:	2102      	movs	r1, #2
 800a648:	e000      	b.n	800a64c <__cvt+0x44>
 800a64a:	2103      	movs	r1, #3
 800a64c:	ab03      	add	r3, sp, #12
 800a64e:	9301      	str	r3, [sp, #4]
 800a650:	ab02      	add	r3, sp, #8
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	ec47 6b10 	vmov	d0, r6, r7
 800a658:	4653      	mov	r3, sl
 800a65a:	4622      	mov	r2, r4
 800a65c:	f001 f984 	bl	800b968 <_dtoa_r>
 800a660:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a664:	4605      	mov	r5, r0
 800a666:	d119      	bne.n	800a69c <__cvt+0x94>
 800a668:	f019 0f01 	tst.w	r9, #1
 800a66c:	d00e      	beq.n	800a68c <__cvt+0x84>
 800a66e:	eb00 0904 	add.w	r9, r0, r4
 800a672:	2200      	movs	r2, #0
 800a674:	2300      	movs	r3, #0
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f6 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a67e:	b108      	cbz	r0, 800a684 <__cvt+0x7c>
 800a680:	f8cd 900c 	str.w	r9, [sp, #12]
 800a684:	2230      	movs	r2, #48	@ 0x30
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	454b      	cmp	r3, r9
 800a68a:	d31e      	bcc.n	800a6ca <__cvt+0xc2>
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a690:	1b5b      	subs	r3, r3, r5
 800a692:	4628      	mov	r0, r5
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	b004      	add	sp, #16
 800a698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6a0:	eb00 0904 	add.w	r9, r0, r4
 800a6a4:	d1e5      	bne.n	800a672 <__cvt+0x6a>
 800a6a6:	7803      	ldrb	r3, [r0, #0]
 800a6a8:	2b30      	cmp	r3, #48	@ 0x30
 800a6aa:	d10a      	bne.n	800a6c2 <__cvt+0xba>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f7f6 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b8:	b918      	cbnz	r0, 800a6c2 <__cvt+0xba>
 800a6ba:	f1c4 0401 	rsb	r4, r4, #1
 800a6be:	f8ca 4000 	str.w	r4, [sl]
 800a6c2:	f8da 3000 	ldr.w	r3, [sl]
 800a6c6:	4499      	add	r9, r3
 800a6c8:	e7d3      	b.n	800a672 <__cvt+0x6a>
 800a6ca:	1c59      	adds	r1, r3, #1
 800a6cc:	9103      	str	r1, [sp, #12]
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	e7d9      	b.n	800a686 <__cvt+0x7e>

0800a6d2 <__exponent>:
 800a6d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	bfba      	itte	lt
 800a6d8:	4249      	neglt	r1, r1
 800a6da:	232d      	movlt	r3, #45	@ 0x2d
 800a6dc:	232b      	movge	r3, #43	@ 0x2b
 800a6de:	2909      	cmp	r1, #9
 800a6e0:	7002      	strb	r2, [r0, #0]
 800a6e2:	7043      	strb	r3, [r0, #1]
 800a6e4:	dd29      	ble.n	800a73a <__exponent+0x68>
 800a6e6:	f10d 0307 	add.w	r3, sp, #7
 800a6ea:	461d      	mov	r5, r3
 800a6ec:	270a      	movs	r7, #10
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6f4:	fb07 1416 	mls	r4, r7, r6, r1
 800a6f8:	3430      	adds	r4, #48	@ 0x30
 800a6fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a6fe:	460c      	mov	r4, r1
 800a700:	2c63      	cmp	r4, #99	@ 0x63
 800a702:	f103 33ff 	add.w	r3, r3, #4294967295
 800a706:	4631      	mov	r1, r6
 800a708:	dcf1      	bgt.n	800a6ee <__exponent+0x1c>
 800a70a:	3130      	adds	r1, #48	@ 0x30
 800a70c:	1e94      	subs	r4, r2, #2
 800a70e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a712:	1c41      	adds	r1, r0, #1
 800a714:	4623      	mov	r3, r4
 800a716:	42ab      	cmp	r3, r5
 800a718:	d30a      	bcc.n	800a730 <__exponent+0x5e>
 800a71a:	f10d 0309 	add.w	r3, sp, #9
 800a71e:	1a9b      	subs	r3, r3, r2
 800a720:	42ac      	cmp	r4, r5
 800a722:	bf88      	it	hi
 800a724:	2300      	movhi	r3, #0
 800a726:	3302      	adds	r3, #2
 800a728:	4403      	add	r3, r0
 800a72a:	1a18      	subs	r0, r3, r0
 800a72c:	b003      	add	sp, #12
 800a72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a730:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a734:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a738:	e7ed      	b.n	800a716 <__exponent+0x44>
 800a73a:	2330      	movs	r3, #48	@ 0x30
 800a73c:	3130      	adds	r1, #48	@ 0x30
 800a73e:	7083      	strb	r3, [r0, #2]
 800a740:	70c1      	strb	r1, [r0, #3]
 800a742:	1d03      	adds	r3, r0, #4
 800a744:	e7f1      	b.n	800a72a <__exponent+0x58>
	...

0800a748 <_printf_float>:
 800a748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74c:	b08d      	sub	sp, #52	@ 0x34
 800a74e:	460c      	mov	r4, r1
 800a750:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a754:	4616      	mov	r6, r2
 800a756:	461f      	mov	r7, r3
 800a758:	4605      	mov	r5, r0
 800a75a:	f000 ffed 	bl	800b738 <_localeconv_r>
 800a75e:	6803      	ldr	r3, [r0, #0]
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	4618      	mov	r0, r3
 800a764:	f7f5 fd84 	bl	8000270 <strlen>
 800a768:	2300      	movs	r3, #0
 800a76a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	9005      	str	r0, [sp, #20]
 800a772:	3307      	adds	r3, #7
 800a774:	f023 0307 	bic.w	r3, r3, #7
 800a778:	f103 0208 	add.w	r2, r3, #8
 800a77c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a780:	f8d4 b000 	ldr.w	fp, [r4]
 800a784:	f8c8 2000 	str.w	r2, [r8]
 800a788:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a78c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a790:	9307      	str	r3, [sp, #28]
 800a792:	f8cd 8018 	str.w	r8, [sp, #24]
 800a796:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a79a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a79e:	4b9c      	ldr	r3, [pc, #624]	@ (800aa10 <_printf_float+0x2c8>)
 800a7a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a4:	f7f6 f9c2 	bl	8000b2c <__aeabi_dcmpun>
 800a7a8:	bb70      	cbnz	r0, 800a808 <_printf_float+0xc0>
 800a7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ae:	4b98      	ldr	r3, [pc, #608]	@ (800aa10 <_printf_float+0x2c8>)
 800a7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b4:	f7f6 f99c 	bl	8000af0 <__aeabi_dcmple>
 800a7b8:	bb30      	cbnz	r0, 800a808 <_printf_float+0xc0>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4640      	mov	r0, r8
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	f7f6 f98b 	bl	8000adc <__aeabi_dcmplt>
 800a7c6:	b110      	cbz	r0, 800a7ce <_printf_float+0x86>
 800a7c8:	232d      	movs	r3, #45	@ 0x2d
 800a7ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7ce:	4a91      	ldr	r2, [pc, #580]	@ (800aa14 <_printf_float+0x2cc>)
 800a7d0:	4b91      	ldr	r3, [pc, #580]	@ (800aa18 <_printf_float+0x2d0>)
 800a7d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a7d6:	bf8c      	ite	hi
 800a7d8:	4690      	movhi	r8, r2
 800a7da:	4698      	movls	r8, r3
 800a7dc:	2303      	movs	r3, #3
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	f02b 0304 	bic.w	r3, fp, #4
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	9700      	str	r7, [sp, #0]
 800a7ec:	4633      	mov	r3, r6
 800a7ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7f0:	4621      	mov	r1, r4
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 f9d2 	bl	800ab9c <_printf_common>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f040 808d 	bne.w	800a918 <_printf_float+0x1d0>
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	b00d      	add	sp, #52	@ 0x34
 800a804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	4649      	mov	r1, r9
 800a810:	f7f6 f98c 	bl	8000b2c <__aeabi_dcmpun>
 800a814:	b140      	cbz	r0, 800a828 <_printf_float+0xe0>
 800a816:	464b      	mov	r3, r9
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbc      	itt	lt
 800a81c:	232d      	movlt	r3, #45	@ 0x2d
 800a81e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a822:	4a7e      	ldr	r2, [pc, #504]	@ (800aa1c <_printf_float+0x2d4>)
 800a824:	4b7e      	ldr	r3, [pc, #504]	@ (800aa20 <_printf_float+0x2d8>)
 800a826:	e7d4      	b.n	800a7d2 <_printf_float+0x8a>
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a82e:	9206      	str	r2, [sp, #24]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	d13b      	bne.n	800a8ac <_printf_float+0x164>
 800a834:	2306      	movs	r3, #6
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a83c:	2300      	movs	r3, #0
 800a83e:	6022      	str	r2, [r4, #0]
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	ab0a      	add	r3, sp, #40	@ 0x28
 800a844:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a848:	ab09      	add	r3, sp, #36	@ 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	6861      	ldr	r1, [r4, #4]
 800a84e:	ec49 8b10 	vmov	d0, r8, r9
 800a852:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a856:	4628      	mov	r0, r5
 800a858:	f7ff fed6 	bl	800a608 <__cvt>
 800a85c:	9b06      	ldr	r3, [sp, #24]
 800a85e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a860:	2b47      	cmp	r3, #71	@ 0x47
 800a862:	4680      	mov	r8, r0
 800a864:	d129      	bne.n	800a8ba <_printf_float+0x172>
 800a866:	1cc8      	adds	r0, r1, #3
 800a868:	db02      	blt.n	800a870 <_printf_float+0x128>
 800a86a:	6863      	ldr	r3, [r4, #4]
 800a86c:	4299      	cmp	r1, r3
 800a86e:	dd41      	ble.n	800a8f4 <_printf_float+0x1ac>
 800a870:	f1aa 0a02 	sub.w	sl, sl, #2
 800a874:	fa5f fa8a 	uxtb.w	sl, sl
 800a878:	3901      	subs	r1, #1
 800a87a:	4652      	mov	r2, sl
 800a87c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a880:	9109      	str	r1, [sp, #36]	@ 0x24
 800a882:	f7ff ff26 	bl	800a6d2 <__exponent>
 800a886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a888:	1813      	adds	r3, r2, r0
 800a88a:	2a01      	cmp	r2, #1
 800a88c:	4681      	mov	r9, r0
 800a88e:	6123      	str	r3, [r4, #16]
 800a890:	dc02      	bgt.n	800a898 <_printf_float+0x150>
 800a892:	6822      	ldr	r2, [r4, #0]
 800a894:	07d2      	lsls	r2, r2, #31
 800a896:	d501      	bpl.n	800a89c <_printf_float+0x154>
 800a898:	3301      	adds	r3, #1
 800a89a:	6123      	str	r3, [r4, #16]
 800a89c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0a2      	beq.n	800a7ea <_printf_float+0xa2>
 800a8a4:	232d      	movs	r3, #45	@ 0x2d
 800a8a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8aa:	e79e      	b.n	800a7ea <_printf_float+0xa2>
 800a8ac:	9a06      	ldr	r2, [sp, #24]
 800a8ae:	2a47      	cmp	r2, #71	@ 0x47
 800a8b0:	d1c2      	bne.n	800a838 <_printf_float+0xf0>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1c0      	bne.n	800a838 <_printf_float+0xf0>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7bd      	b.n	800a836 <_printf_float+0xee>
 800a8ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8be:	d9db      	bls.n	800a878 <_printf_float+0x130>
 800a8c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a8c4:	d118      	bne.n	800a8f8 <_printf_float+0x1b0>
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	6863      	ldr	r3, [r4, #4]
 800a8ca:	dd0b      	ble.n	800a8e4 <_printf_float+0x19c>
 800a8cc:	6121      	str	r1, [r4, #16]
 800a8ce:	b913      	cbnz	r3, 800a8d6 <_printf_float+0x18e>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	07d0      	lsls	r0, r2, #31
 800a8d4:	d502      	bpl.n	800a8dc <_printf_float+0x194>
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	440b      	add	r3, r1
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8de:	f04f 0900 	mov.w	r9, #0
 800a8e2:	e7db      	b.n	800a89c <_printf_float+0x154>
 800a8e4:	b913      	cbnz	r3, 800a8ec <_printf_float+0x1a4>
 800a8e6:	6822      	ldr	r2, [r4, #0]
 800a8e8:	07d2      	lsls	r2, r2, #31
 800a8ea:	d501      	bpl.n	800a8f0 <_printf_float+0x1a8>
 800a8ec:	3302      	adds	r3, #2
 800a8ee:	e7f4      	b.n	800a8da <_printf_float+0x192>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7f2      	b.n	800a8da <_printf_float+0x192>
 800a8f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8fa:	4299      	cmp	r1, r3
 800a8fc:	db05      	blt.n	800a90a <_printf_float+0x1c2>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	6121      	str	r1, [r4, #16]
 800a902:	07d8      	lsls	r0, r3, #31
 800a904:	d5ea      	bpl.n	800a8dc <_printf_float+0x194>
 800a906:	1c4b      	adds	r3, r1, #1
 800a908:	e7e7      	b.n	800a8da <_printf_float+0x192>
 800a90a:	2900      	cmp	r1, #0
 800a90c:	bfd4      	ite	le
 800a90e:	f1c1 0202 	rsble	r2, r1, #2
 800a912:	2201      	movgt	r2, #1
 800a914:	4413      	add	r3, r2
 800a916:	e7e0      	b.n	800a8da <_printf_float+0x192>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	055a      	lsls	r2, r3, #21
 800a91c:	d407      	bmi.n	800a92e <_printf_float+0x1e6>
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	4642      	mov	r2, r8
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	d12b      	bne.n	800a984 <_printf_float+0x23c>
 800a92c:	e767      	b.n	800a7fe <_printf_float+0xb6>
 800a92e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a932:	f240 80dd 	bls.w	800aaf0 <_printf_float+0x3a8>
 800a936:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a93a:	2200      	movs	r2, #0
 800a93c:	2300      	movs	r3, #0
 800a93e:	f7f6 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a942:	2800      	cmp	r0, #0
 800a944:	d033      	beq.n	800a9ae <_printf_float+0x266>
 800a946:	4a37      	ldr	r2, [pc, #220]	@ (800aa24 <_printf_float+0x2dc>)
 800a948:	2301      	movs	r3, #1
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f af54 	beq.w	800a7fe <_printf_float+0xb6>
 800a956:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a95a:	4543      	cmp	r3, r8
 800a95c:	db02      	blt.n	800a964 <_printf_float+0x21c>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	07d8      	lsls	r0, r3, #31
 800a962:	d50f      	bpl.n	800a984 <_printf_float+0x23c>
 800a964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	f43f af45 	beq.w	800a7fe <_printf_float+0xb6>
 800a974:	f04f 0900 	mov.w	r9, #0
 800a978:	f108 38ff 	add.w	r8, r8, #4294967295
 800a97c:	f104 0a1a 	add.w	sl, r4, #26
 800a980:	45c8      	cmp	r8, r9
 800a982:	dc09      	bgt.n	800a998 <_printf_float+0x250>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	079b      	lsls	r3, r3, #30
 800a988:	f100 8103 	bmi.w	800ab92 <_printf_float+0x44a>
 800a98c:	68e0      	ldr	r0, [r4, #12]
 800a98e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a990:	4298      	cmp	r0, r3
 800a992:	bfb8      	it	lt
 800a994:	4618      	movlt	r0, r3
 800a996:	e734      	b.n	800a802 <_printf_float+0xba>
 800a998:	2301      	movs	r3, #1
 800a99a:	4652      	mov	r2, sl
 800a99c:	4631      	mov	r1, r6
 800a99e:	4628      	mov	r0, r5
 800a9a0:	47b8      	blx	r7
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	f43f af2b 	beq.w	800a7fe <_printf_float+0xb6>
 800a9a8:	f109 0901 	add.w	r9, r9, #1
 800a9ac:	e7e8      	b.n	800a980 <_printf_float+0x238>
 800a9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dc39      	bgt.n	800aa28 <_printf_float+0x2e0>
 800a9b4:	4a1b      	ldr	r2, [pc, #108]	@ (800aa24 <_printf_float+0x2dc>)
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b8      	blx	r7
 800a9be:	3001      	adds	r0, #1
 800a9c0:	f43f af1d 	beq.w	800a7fe <_printf_float+0xb6>
 800a9c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a9c8:	ea59 0303 	orrs.w	r3, r9, r3
 800a9cc:	d102      	bne.n	800a9d4 <_printf_float+0x28c>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	07d9      	lsls	r1, r3, #31
 800a9d2:	d5d7      	bpl.n	800a984 <_printf_float+0x23c>
 800a9d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4628      	mov	r0, r5
 800a9dc:	47b8      	blx	r7
 800a9de:	3001      	adds	r0, #1
 800a9e0:	f43f af0d 	beq.w	800a7fe <_printf_float+0xb6>
 800a9e4:	f04f 0a00 	mov.w	sl, #0
 800a9e8:	f104 0b1a 	add.w	fp, r4, #26
 800a9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ee:	425b      	negs	r3, r3
 800a9f0:	4553      	cmp	r3, sl
 800a9f2:	dc01      	bgt.n	800a9f8 <_printf_float+0x2b0>
 800a9f4:	464b      	mov	r3, r9
 800a9f6:	e793      	b.n	800a920 <_printf_float+0x1d8>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	465a      	mov	r2, fp
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f aefb 	beq.w	800a7fe <_printf_float+0xb6>
 800aa08:	f10a 0a01 	add.w	sl, sl, #1
 800aa0c:	e7ee      	b.n	800a9ec <_printf_float+0x2a4>
 800aa0e:	bf00      	nop
 800aa10:	7fefffff 	.word	0x7fefffff
 800aa14:	0800ed5c 	.word	0x0800ed5c
 800aa18:	0800ed58 	.word	0x0800ed58
 800aa1c:	0800ed64 	.word	0x0800ed64
 800aa20:	0800ed60 	.word	0x0800ed60
 800aa24:	0800ed68 	.word	0x0800ed68
 800aa28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa2e:	4553      	cmp	r3, sl
 800aa30:	bfa8      	it	ge
 800aa32:	4653      	movge	r3, sl
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	4699      	mov	r9, r3
 800aa38:	dc36      	bgt.n	800aaa8 <_printf_float+0x360>
 800aa3a:	f04f 0b00 	mov.w	fp, #0
 800aa3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa42:	f104 021a 	add.w	r2, r4, #26
 800aa46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa48:	9306      	str	r3, [sp, #24]
 800aa4a:	eba3 0309 	sub.w	r3, r3, r9
 800aa4e:	455b      	cmp	r3, fp
 800aa50:	dc31      	bgt.n	800aab6 <_printf_float+0x36e>
 800aa52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa54:	459a      	cmp	sl, r3
 800aa56:	dc3a      	bgt.n	800aace <_printf_float+0x386>
 800aa58:	6823      	ldr	r3, [r4, #0]
 800aa5a:	07da      	lsls	r2, r3, #31
 800aa5c:	d437      	bmi.n	800aace <_printf_float+0x386>
 800aa5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa60:	ebaa 0903 	sub.w	r9, sl, r3
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	ebaa 0303 	sub.w	r3, sl, r3
 800aa6a:	4599      	cmp	r9, r3
 800aa6c:	bfa8      	it	ge
 800aa6e:	4699      	movge	r9, r3
 800aa70:	f1b9 0f00 	cmp.w	r9, #0
 800aa74:	dc33      	bgt.n	800aade <_printf_float+0x396>
 800aa76:	f04f 0800 	mov.w	r8, #0
 800aa7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa7e:	f104 0b1a 	add.w	fp, r4, #26
 800aa82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa84:	ebaa 0303 	sub.w	r3, sl, r3
 800aa88:	eba3 0309 	sub.w	r3, r3, r9
 800aa8c:	4543      	cmp	r3, r8
 800aa8e:	f77f af79 	ble.w	800a984 <_printf_float+0x23c>
 800aa92:	2301      	movs	r3, #1
 800aa94:	465a      	mov	r2, fp
 800aa96:	4631      	mov	r1, r6
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b8      	blx	r7
 800aa9c:	3001      	adds	r0, #1
 800aa9e:	f43f aeae 	beq.w	800a7fe <_printf_float+0xb6>
 800aaa2:	f108 0801 	add.w	r8, r8, #1
 800aaa6:	e7ec      	b.n	800aa82 <_printf_float+0x33a>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b8      	blx	r7
 800aab0:	3001      	adds	r0, #1
 800aab2:	d1c2      	bne.n	800aa3a <_printf_float+0x2f2>
 800aab4:	e6a3      	b.n	800a7fe <_printf_float+0xb6>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4631      	mov	r1, r6
 800aaba:	4628      	mov	r0, r5
 800aabc:	9206      	str	r2, [sp, #24]
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae9c 	beq.w	800a7fe <_printf_float+0xb6>
 800aac6:	9a06      	ldr	r2, [sp, #24]
 800aac8:	f10b 0b01 	add.w	fp, fp, #1
 800aacc:	e7bb      	b.n	800aa46 <_printf_float+0x2fe>
 800aace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aad2:	4631      	mov	r1, r6
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b8      	blx	r7
 800aad8:	3001      	adds	r0, #1
 800aada:	d1c0      	bne.n	800aa5e <_printf_float+0x316>
 800aadc:	e68f      	b.n	800a7fe <_printf_float+0xb6>
 800aade:	9a06      	ldr	r2, [sp, #24]
 800aae0:	464b      	mov	r3, r9
 800aae2:	4442      	add	r2, r8
 800aae4:	4631      	mov	r1, r6
 800aae6:	4628      	mov	r0, r5
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	d1c3      	bne.n	800aa76 <_printf_float+0x32e>
 800aaee:	e686      	b.n	800a7fe <_printf_float+0xb6>
 800aaf0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaf4:	f1ba 0f01 	cmp.w	sl, #1
 800aaf8:	dc01      	bgt.n	800aafe <_printf_float+0x3b6>
 800aafa:	07db      	lsls	r3, r3, #31
 800aafc:	d536      	bpl.n	800ab6c <_printf_float+0x424>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4642      	mov	r2, r8
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b8      	blx	r7
 800ab08:	3001      	adds	r0, #1
 800ab0a:	f43f ae78 	beq.w	800a7fe <_printf_float+0xb6>
 800ab0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f ae70 	beq.w	800a7fe <_printf_float+0xb6>
 800ab1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab22:	2200      	movs	r2, #0
 800ab24:	2300      	movs	r3, #0
 800ab26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2a:	f7f5 ffcd 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab2e:	b9c0      	cbnz	r0, 800ab62 <_printf_float+0x41a>
 800ab30:	4653      	mov	r3, sl
 800ab32:	f108 0201 	add.w	r2, r8, #1
 800ab36:	4631      	mov	r1, r6
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d10c      	bne.n	800ab5a <_printf_float+0x412>
 800ab40:	e65d      	b.n	800a7fe <_printf_float+0xb6>
 800ab42:	2301      	movs	r3, #1
 800ab44:	465a      	mov	r2, fp
 800ab46:	4631      	mov	r1, r6
 800ab48:	4628      	mov	r0, r5
 800ab4a:	47b8      	blx	r7
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f43f ae56 	beq.w	800a7fe <_printf_float+0xb6>
 800ab52:	f108 0801 	add.w	r8, r8, #1
 800ab56:	45d0      	cmp	r8, sl
 800ab58:	dbf3      	blt.n	800ab42 <_printf_float+0x3fa>
 800ab5a:	464b      	mov	r3, r9
 800ab5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab60:	e6df      	b.n	800a922 <_printf_float+0x1da>
 800ab62:	f04f 0800 	mov.w	r8, #0
 800ab66:	f104 0b1a 	add.w	fp, r4, #26
 800ab6a:	e7f4      	b.n	800ab56 <_printf_float+0x40e>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	4642      	mov	r2, r8
 800ab70:	e7e1      	b.n	800ab36 <_printf_float+0x3ee>
 800ab72:	2301      	movs	r3, #1
 800ab74:	464a      	mov	r2, r9
 800ab76:	4631      	mov	r1, r6
 800ab78:	4628      	mov	r0, r5
 800ab7a:	47b8      	blx	r7
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	f43f ae3e 	beq.w	800a7fe <_printf_float+0xb6>
 800ab82:	f108 0801 	add.w	r8, r8, #1
 800ab86:	68e3      	ldr	r3, [r4, #12]
 800ab88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab8a:	1a5b      	subs	r3, r3, r1
 800ab8c:	4543      	cmp	r3, r8
 800ab8e:	dcf0      	bgt.n	800ab72 <_printf_float+0x42a>
 800ab90:	e6fc      	b.n	800a98c <_printf_float+0x244>
 800ab92:	f04f 0800 	mov.w	r8, #0
 800ab96:	f104 0919 	add.w	r9, r4, #25
 800ab9a:	e7f4      	b.n	800ab86 <_printf_float+0x43e>

0800ab9c <_printf_common>:
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba0:	4616      	mov	r6, r2
 800aba2:	4698      	mov	r8, r3
 800aba4:	688a      	ldr	r2, [r1, #8]
 800aba6:	690b      	ldr	r3, [r1, #16]
 800aba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abac:	4293      	cmp	r3, r2
 800abae:	bfb8      	it	lt
 800abb0:	4613      	movlt	r3, r2
 800abb2:	6033      	str	r3, [r6, #0]
 800abb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800abb8:	4607      	mov	r7, r0
 800abba:	460c      	mov	r4, r1
 800abbc:	b10a      	cbz	r2, 800abc2 <_printf_common+0x26>
 800abbe:	3301      	adds	r3, #1
 800abc0:	6033      	str	r3, [r6, #0]
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	0699      	lsls	r1, r3, #26
 800abc6:	bf42      	ittt	mi
 800abc8:	6833      	ldrmi	r3, [r6, #0]
 800abca:	3302      	addmi	r3, #2
 800abcc:	6033      	strmi	r3, [r6, #0]
 800abce:	6825      	ldr	r5, [r4, #0]
 800abd0:	f015 0506 	ands.w	r5, r5, #6
 800abd4:	d106      	bne.n	800abe4 <_printf_common+0x48>
 800abd6:	f104 0a19 	add.w	sl, r4, #25
 800abda:	68e3      	ldr	r3, [r4, #12]
 800abdc:	6832      	ldr	r2, [r6, #0]
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	42ab      	cmp	r3, r5
 800abe2:	dc26      	bgt.n	800ac32 <_printf_common+0x96>
 800abe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abe8:	6822      	ldr	r2, [r4, #0]
 800abea:	3b00      	subs	r3, #0
 800abec:	bf18      	it	ne
 800abee:	2301      	movne	r3, #1
 800abf0:	0692      	lsls	r2, r2, #26
 800abf2:	d42b      	bmi.n	800ac4c <_printf_common+0xb0>
 800abf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abf8:	4641      	mov	r1, r8
 800abfa:	4638      	mov	r0, r7
 800abfc:	47c8      	blx	r9
 800abfe:	3001      	adds	r0, #1
 800ac00:	d01e      	beq.n	800ac40 <_printf_common+0xa4>
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	6922      	ldr	r2, [r4, #16]
 800ac06:	f003 0306 	and.w	r3, r3, #6
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	bf02      	ittt	eq
 800ac0e:	68e5      	ldreq	r5, [r4, #12]
 800ac10:	6833      	ldreq	r3, [r6, #0]
 800ac12:	1aed      	subeq	r5, r5, r3
 800ac14:	68a3      	ldr	r3, [r4, #8]
 800ac16:	bf0c      	ite	eq
 800ac18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac1c:	2500      	movne	r5, #0
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	bfc4      	itt	gt
 800ac22:	1a9b      	subgt	r3, r3, r2
 800ac24:	18ed      	addgt	r5, r5, r3
 800ac26:	2600      	movs	r6, #0
 800ac28:	341a      	adds	r4, #26
 800ac2a:	42b5      	cmp	r5, r6
 800ac2c:	d11a      	bne.n	800ac64 <_printf_common+0xc8>
 800ac2e:	2000      	movs	r0, #0
 800ac30:	e008      	b.n	800ac44 <_printf_common+0xa8>
 800ac32:	2301      	movs	r3, #1
 800ac34:	4652      	mov	r2, sl
 800ac36:	4641      	mov	r1, r8
 800ac38:	4638      	mov	r0, r7
 800ac3a:	47c8      	blx	r9
 800ac3c:	3001      	adds	r0, #1
 800ac3e:	d103      	bne.n	800ac48 <_printf_common+0xac>
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac48:	3501      	adds	r5, #1
 800ac4a:	e7c6      	b.n	800abda <_printf_common+0x3e>
 800ac4c:	18e1      	adds	r1, r4, r3
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	2030      	movs	r0, #48	@ 0x30
 800ac52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac56:	4422      	add	r2, r4
 800ac58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac60:	3302      	adds	r3, #2
 800ac62:	e7c7      	b.n	800abf4 <_printf_common+0x58>
 800ac64:	2301      	movs	r3, #1
 800ac66:	4622      	mov	r2, r4
 800ac68:	4641      	mov	r1, r8
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	47c8      	blx	r9
 800ac6e:	3001      	adds	r0, #1
 800ac70:	d0e6      	beq.n	800ac40 <_printf_common+0xa4>
 800ac72:	3601      	adds	r6, #1
 800ac74:	e7d9      	b.n	800ac2a <_printf_common+0x8e>
	...

0800ac78 <_printf_i>:
 800ac78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac7c:	7e0f      	ldrb	r7, [r1, #24]
 800ac7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac80:	2f78      	cmp	r7, #120	@ 0x78
 800ac82:	4691      	mov	r9, r2
 800ac84:	4680      	mov	r8, r0
 800ac86:	460c      	mov	r4, r1
 800ac88:	469a      	mov	sl, r3
 800ac8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac8e:	d807      	bhi.n	800aca0 <_printf_i+0x28>
 800ac90:	2f62      	cmp	r7, #98	@ 0x62
 800ac92:	d80a      	bhi.n	800acaa <_printf_i+0x32>
 800ac94:	2f00      	cmp	r7, #0
 800ac96:	f000 80d1 	beq.w	800ae3c <_printf_i+0x1c4>
 800ac9a:	2f58      	cmp	r7, #88	@ 0x58
 800ac9c:	f000 80b8 	beq.w	800ae10 <_printf_i+0x198>
 800aca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aca8:	e03a      	b.n	800ad20 <_printf_i+0xa8>
 800acaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800acae:	2b15      	cmp	r3, #21
 800acb0:	d8f6      	bhi.n	800aca0 <_printf_i+0x28>
 800acb2:	a101      	add	r1, pc, #4	@ (adr r1, 800acb8 <_printf_i+0x40>)
 800acb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800acb8:	0800ad11 	.word	0x0800ad11
 800acbc:	0800ad25 	.word	0x0800ad25
 800acc0:	0800aca1 	.word	0x0800aca1
 800acc4:	0800aca1 	.word	0x0800aca1
 800acc8:	0800aca1 	.word	0x0800aca1
 800accc:	0800aca1 	.word	0x0800aca1
 800acd0:	0800ad25 	.word	0x0800ad25
 800acd4:	0800aca1 	.word	0x0800aca1
 800acd8:	0800aca1 	.word	0x0800aca1
 800acdc:	0800aca1 	.word	0x0800aca1
 800ace0:	0800aca1 	.word	0x0800aca1
 800ace4:	0800ae23 	.word	0x0800ae23
 800ace8:	0800ad4f 	.word	0x0800ad4f
 800acec:	0800addd 	.word	0x0800addd
 800acf0:	0800aca1 	.word	0x0800aca1
 800acf4:	0800aca1 	.word	0x0800aca1
 800acf8:	0800ae45 	.word	0x0800ae45
 800acfc:	0800aca1 	.word	0x0800aca1
 800ad00:	0800ad4f 	.word	0x0800ad4f
 800ad04:	0800aca1 	.word	0x0800aca1
 800ad08:	0800aca1 	.word	0x0800aca1
 800ad0c:	0800ade5 	.word	0x0800ade5
 800ad10:	6833      	ldr	r3, [r6, #0]
 800ad12:	1d1a      	adds	r2, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6032      	str	r2, [r6, #0]
 800ad18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad20:	2301      	movs	r3, #1
 800ad22:	e09c      	b.n	800ae5e <_printf_i+0x1e6>
 800ad24:	6833      	ldr	r3, [r6, #0]
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	1d19      	adds	r1, r3, #4
 800ad2a:	6031      	str	r1, [r6, #0]
 800ad2c:	0606      	lsls	r6, r0, #24
 800ad2e:	d501      	bpl.n	800ad34 <_printf_i+0xbc>
 800ad30:	681d      	ldr	r5, [r3, #0]
 800ad32:	e003      	b.n	800ad3c <_printf_i+0xc4>
 800ad34:	0645      	lsls	r5, r0, #25
 800ad36:	d5fb      	bpl.n	800ad30 <_printf_i+0xb8>
 800ad38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	da03      	bge.n	800ad48 <_printf_i+0xd0>
 800ad40:	232d      	movs	r3, #45	@ 0x2d
 800ad42:	426d      	negs	r5, r5
 800ad44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad48:	4858      	ldr	r0, [pc, #352]	@ (800aeac <_printf_i+0x234>)
 800ad4a:	230a      	movs	r3, #10
 800ad4c:	e011      	b.n	800ad72 <_printf_i+0xfa>
 800ad4e:	6821      	ldr	r1, [r4, #0]
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	0608      	lsls	r0, r1, #24
 800ad54:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad58:	d402      	bmi.n	800ad60 <_printf_i+0xe8>
 800ad5a:	0649      	lsls	r1, r1, #25
 800ad5c:	bf48      	it	mi
 800ad5e:	b2ad      	uxthmi	r5, r5
 800ad60:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad62:	4852      	ldr	r0, [pc, #328]	@ (800aeac <_printf_i+0x234>)
 800ad64:	6033      	str	r3, [r6, #0]
 800ad66:	bf14      	ite	ne
 800ad68:	230a      	movne	r3, #10
 800ad6a:	2308      	moveq	r3, #8
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad72:	6866      	ldr	r6, [r4, #4]
 800ad74:	60a6      	str	r6, [r4, #8]
 800ad76:	2e00      	cmp	r6, #0
 800ad78:	db05      	blt.n	800ad86 <_printf_i+0x10e>
 800ad7a:	6821      	ldr	r1, [r4, #0]
 800ad7c:	432e      	orrs	r6, r5
 800ad7e:	f021 0104 	bic.w	r1, r1, #4
 800ad82:	6021      	str	r1, [r4, #0]
 800ad84:	d04b      	beq.n	800ae1e <_printf_i+0x1a6>
 800ad86:	4616      	mov	r6, r2
 800ad88:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad8c:	fb03 5711 	mls	r7, r3, r1, r5
 800ad90:	5dc7      	ldrb	r7, [r0, r7]
 800ad92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad96:	462f      	mov	r7, r5
 800ad98:	42bb      	cmp	r3, r7
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	d9f4      	bls.n	800ad88 <_printf_i+0x110>
 800ad9e:	2b08      	cmp	r3, #8
 800ada0:	d10b      	bne.n	800adba <_printf_i+0x142>
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	07df      	lsls	r7, r3, #31
 800ada6:	d508      	bpl.n	800adba <_printf_i+0x142>
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	6861      	ldr	r1, [r4, #4]
 800adac:	4299      	cmp	r1, r3
 800adae:	bfde      	ittt	le
 800adb0:	2330      	movle	r3, #48	@ 0x30
 800adb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adba:	1b92      	subs	r2, r2, r6
 800adbc:	6122      	str	r2, [r4, #16]
 800adbe:	f8cd a000 	str.w	sl, [sp]
 800adc2:	464b      	mov	r3, r9
 800adc4:	aa03      	add	r2, sp, #12
 800adc6:	4621      	mov	r1, r4
 800adc8:	4640      	mov	r0, r8
 800adca:	f7ff fee7 	bl	800ab9c <_printf_common>
 800adce:	3001      	adds	r0, #1
 800add0:	d14a      	bne.n	800ae68 <_printf_i+0x1f0>
 800add2:	f04f 30ff 	mov.w	r0, #4294967295
 800add6:	b004      	add	sp, #16
 800add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f043 0320 	orr.w	r3, r3, #32
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	4832      	ldr	r0, [pc, #200]	@ (800aeb0 <_printf_i+0x238>)
 800ade6:	2778      	movs	r7, #120	@ 0x78
 800ade8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	6831      	ldr	r1, [r6, #0]
 800adf0:	061f      	lsls	r7, r3, #24
 800adf2:	f851 5b04 	ldr.w	r5, [r1], #4
 800adf6:	d402      	bmi.n	800adfe <_printf_i+0x186>
 800adf8:	065f      	lsls	r7, r3, #25
 800adfa:	bf48      	it	mi
 800adfc:	b2ad      	uxthmi	r5, r5
 800adfe:	6031      	str	r1, [r6, #0]
 800ae00:	07d9      	lsls	r1, r3, #31
 800ae02:	bf44      	itt	mi
 800ae04:	f043 0320 	orrmi.w	r3, r3, #32
 800ae08:	6023      	strmi	r3, [r4, #0]
 800ae0a:	b11d      	cbz	r5, 800ae14 <_printf_i+0x19c>
 800ae0c:	2310      	movs	r3, #16
 800ae0e:	e7ad      	b.n	800ad6c <_printf_i+0xf4>
 800ae10:	4826      	ldr	r0, [pc, #152]	@ (800aeac <_printf_i+0x234>)
 800ae12:	e7e9      	b.n	800ade8 <_printf_i+0x170>
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	f023 0320 	bic.w	r3, r3, #32
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	e7f6      	b.n	800ae0c <_printf_i+0x194>
 800ae1e:	4616      	mov	r6, r2
 800ae20:	e7bd      	b.n	800ad9e <_printf_i+0x126>
 800ae22:	6833      	ldr	r3, [r6, #0]
 800ae24:	6825      	ldr	r5, [r4, #0]
 800ae26:	6961      	ldr	r1, [r4, #20]
 800ae28:	1d18      	adds	r0, r3, #4
 800ae2a:	6030      	str	r0, [r6, #0]
 800ae2c:	062e      	lsls	r6, r5, #24
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	d501      	bpl.n	800ae36 <_printf_i+0x1be>
 800ae32:	6019      	str	r1, [r3, #0]
 800ae34:	e002      	b.n	800ae3c <_printf_i+0x1c4>
 800ae36:	0668      	lsls	r0, r5, #25
 800ae38:	d5fb      	bpl.n	800ae32 <_printf_i+0x1ba>
 800ae3a:	8019      	strh	r1, [r3, #0]
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	4616      	mov	r6, r2
 800ae42:	e7bc      	b.n	800adbe <_printf_i+0x146>
 800ae44:	6833      	ldr	r3, [r6, #0]
 800ae46:	1d1a      	adds	r2, r3, #4
 800ae48:	6032      	str	r2, [r6, #0]
 800ae4a:	681e      	ldr	r6, [r3, #0]
 800ae4c:	6862      	ldr	r2, [r4, #4]
 800ae4e:	2100      	movs	r1, #0
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7f5 f9bd 	bl	80001d0 <memchr>
 800ae56:	b108      	cbz	r0, 800ae5c <_printf_i+0x1e4>
 800ae58:	1b80      	subs	r0, r0, r6
 800ae5a:	6060      	str	r0, [r4, #4]
 800ae5c:	6863      	ldr	r3, [r4, #4]
 800ae5e:	6123      	str	r3, [r4, #16]
 800ae60:	2300      	movs	r3, #0
 800ae62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae66:	e7aa      	b.n	800adbe <_printf_i+0x146>
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	4640      	mov	r0, r8
 800ae70:	47d0      	blx	sl
 800ae72:	3001      	adds	r0, #1
 800ae74:	d0ad      	beq.n	800add2 <_printf_i+0x15a>
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	079b      	lsls	r3, r3, #30
 800ae7a:	d413      	bmi.n	800aea4 <_printf_i+0x22c>
 800ae7c:	68e0      	ldr	r0, [r4, #12]
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	4298      	cmp	r0, r3
 800ae82:	bfb8      	it	lt
 800ae84:	4618      	movlt	r0, r3
 800ae86:	e7a6      	b.n	800add6 <_printf_i+0x15e>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	4649      	mov	r1, r9
 800ae8e:	4640      	mov	r0, r8
 800ae90:	47d0      	blx	sl
 800ae92:	3001      	adds	r0, #1
 800ae94:	d09d      	beq.n	800add2 <_printf_i+0x15a>
 800ae96:	3501      	adds	r5, #1
 800ae98:	68e3      	ldr	r3, [r4, #12]
 800ae9a:	9903      	ldr	r1, [sp, #12]
 800ae9c:	1a5b      	subs	r3, r3, r1
 800ae9e:	42ab      	cmp	r3, r5
 800aea0:	dcf2      	bgt.n	800ae88 <_printf_i+0x210>
 800aea2:	e7eb      	b.n	800ae7c <_printf_i+0x204>
 800aea4:	2500      	movs	r5, #0
 800aea6:	f104 0619 	add.w	r6, r4, #25
 800aeaa:	e7f5      	b.n	800ae98 <_printf_i+0x220>
 800aeac:	0800ed6a 	.word	0x0800ed6a
 800aeb0:	0800ed7b 	.word	0x0800ed7b

0800aeb4 <_scanf_float>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	b087      	sub	sp, #28
 800aeba:	4691      	mov	r9, r2
 800aebc:	9303      	str	r3, [sp, #12]
 800aebe:	688b      	ldr	r3, [r1, #8]
 800aec0:	1e5a      	subs	r2, r3, #1
 800aec2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aec6:	bf81      	itttt	hi
 800aec8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aecc:	eb03 0b05 	addhi.w	fp, r3, r5
 800aed0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aed4:	608b      	strhi	r3, [r1, #8]
 800aed6:	680b      	ldr	r3, [r1, #0]
 800aed8:	460a      	mov	r2, r1
 800aeda:	f04f 0500 	mov.w	r5, #0
 800aede:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aee2:	f842 3b1c 	str.w	r3, [r2], #28
 800aee6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aeea:	4680      	mov	r8, r0
 800aeec:	460c      	mov	r4, r1
 800aeee:	bf98      	it	ls
 800aef0:	f04f 0b00 	movls.w	fp, #0
 800aef4:	9201      	str	r2, [sp, #4]
 800aef6:	4616      	mov	r6, r2
 800aef8:	46aa      	mov	sl, r5
 800aefa:	462f      	mov	r7, r5
 800aefc:	9502      	str	r5, [sp, #8]
 800aefe:	68a2      	ldr	r2, [r4, #8]
 800af00:	b15a      	cbz	r2, 800af1a <_scanf_float+0x66>
 800af02:	f8d9 3000 	ldr.w	r3, [r9]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b4e      	cmp	r3, #78	@ 0x4e
 800af0a:	d863      	bhi.n	800afd4 <_scanf_float+0x120>
 800af0c:	2b40      	cmp	r3, #64	@ 0x40
 800af0e:	d83b      	bhi.n	800af88 <_scanf_float+0xd4>
 800af10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af14:	b2c8      	uxtb	r0, r1
 800af16:	280e      	cmp	r0, #14
 800af18:	d939      	bls.n	800af8e <_scanf_float+0xda>
 800af1a:	b11f      	cbz	r7, 800af24 <_scanf_float+0x70>
 800af1c:	6823      	ldr	r3, [r4, #0]
 800af1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af22:	6023      	str	r3, [r4, #0]
 800af24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af28:	f1ba 0f01 	cmp.w	sl, #1
 800af2c:	f200 8114 	bhi.w	800b158 <_scanf_float+0x2a4>
 800af30:	9b01      	ldr	r3, [sp, #4]
 800af32:	429e      	cmp	r6, r3
 800af34:	f200 8105 	bhi.w	800b142 <_scanf_float+0x28e>
 800af38:	2001      	movs	r0, #1
 800af3a:	b007      	add	sp, #28
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800af44:	2a0d      	cmp	r2, #13
 800af46:	d8e8      	bhi.n	800af1a <_scanf_float+0x66>
 800af48:	a101      	add	r1, pc, #4	@ (adr r1, 800af50 <_scanf_float+0x9c>)
 800af4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800af4e:	bf00      	nop
 800af50:	0800b099 	.word	0x0800b099
 800af54:	0800af1b 	.word	0x0800af1b
 800af58:	0800af1b 	.word	0x0800af1b
 800af5c:	0800af1b 	.word	0x0800af1b
 800af60:	0800b0f5 	.word	0x0800b0f5
 800af64:	0800b0cf 	.word	0x0800b0cf
 800af68:	0800af1b 	.word	0x0800af1b
 800af6c:	0800af1b 	.word	0x0800af1b
 800af70:	0800b0a7 	.word	0x0800b0a7
 800af74:	0800af1b 	.word	0x0800af1b
 800af78:	0800af1b 	.word	0x0800af1b
 800af7c:	0800af1b 	.word	0x0800af1b
 800af80:	0800af1b 	.word	0x0800af1b
 800af84:	0800b063 	.word	0x0800b063
 800af88:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800af8c:	e7da      	b.n	800af44 <_scanf_float+0x90>
 800af8e:	290e      	cmp	r1, #14
 800af90:	d8c3      	bhi.n	800af1a <_scanf_float+0x66>
 800af92:	a001      	add	r0, pc, #4	@ (adr r0, 800af98 <_scanf_float+0xe4>)
 800af94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800af98:	0800b053 	.word	0x0800b053
 800af9c:	0800af1b 	.word	0x0800af1b
 800afa0:	0800b053 	.word	0x0800b053
 800afa4:	0800b0e3 	.word	0x0800b0e3
 800afa8:	0800af1b 	.word	0x0800af1b
 800afac:	0800aff5 	.word	0x0800aff5
 800afb0:	0800b039 	.word	0x0800b039
 800afb4:	0800b039 	.word	0x0800b039
 800afb8:	0800b039 	.word	0x0800b039
 800afbc:	0800b039 	.word	0x0800b039
 800afc0:	0800b039 	.word	0x0800b039
 800afc4:	0800b039 	.word	0x0800b039
 800afc8:	0800b039 	.word	0x0800b039
 800afcc:	0800b039 	.word	0x0800b039
 800afd0:	0800b039 	.word	0x0800b039
 800afd4:	2b6e      	cmp	r3, #110	@ 0x6e
 800afd6:	d809      	bhi.n	800afec <_scanf_float+0x138>
 800afd8:	2b60      	cmp	r3, #96	@ 0x60
 800afda:	d8b1      	bhi.n	800af40 <_scanf_float+0x8c>
 800afdc:	2b54      	cmp	r3, #84	@ 0x54
 800afde:	d07b      	beq.n	800b0d8 <_scanf_float+0x224>
 800afe0:	2b59      	cmp	r3, #89	@ 0x59
 800afe2:	d19a      	bne.n	800af1a <_scanf_float+0x66>
 800afe4:	2d07      	cmp	r5, #7
 800afe6:	d198      	bne.n	800af1a <_scanf_float+0x66>
 800afe8:	2508      	movs	r5, #8
 800afea:	e02f      	b.n	800b04c <_scanf_float+0x198>
 800afec:	2b74      	cmp	r3, #116	@ 0x74
 800afee:	d073      	beq.n	800b0d8 <_scanf_float+0x224>
 800aff0:	2b79      	cmp	r3, #121	@ 0x79
 800aff2:	e7f6      	b.n	800afe2 <_scanf_float+0x12e>
 800aff4:	6821      	ldr	r1, [r4, #0]
 800aff6:	05c8      	lsls	r0, r1, #23
 800aff8:	d51e      	bpl.n	800b038 <_scanf_float+0x184>
 800affa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800affe:	6021      	str	r1, [r4, #0]
 800b000:	3701      	adds	r7, #1
 800b002:	f1bb 0f00 	cmp.w	fp, #0
 800b006:	d003      	beq.n	800b010 <_scanf_float+0x15c>
 800b008:	3201      	adds	r2, #1
 800b00a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b00e:	60a2      	str	r2, [r4, #8]
 800b010:	68a3      	ldr	r3, [r4, #8]
 800b012:	3b01      	subs	r3, #1
 800b014:	60a3      	str	r3, [r4, #8]
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	3301      	adds	r3, #1
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b020:	3b01      	subs	r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	f8c9 3004 	str.w	r3, [r9, #4]
 800b028:	f340 8082 	ble.w	800b130 <_scanf_float+0x27c>
 800b02c:	f8d9 3000 	ldr.w	r3, [r9]
 800b030:	3301      	adds	r3, #1
 800b032:	f8c9 3000 	str.w	r3, [r9]
 800b036:	e762      	b.n	800aefe <_scanf_float+0x4a>
 800b038:	eb1a 0105 	adds.w	r1, sl, r5
 800b03c:	f47f af6d 	bne.w	800af1a <_scanf_float+0x66>
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b046:	6022      	str	r2, [r4, #0]
 800b048:	460d      	mov	r5, r1
 800b04a:	468a      	mov	sl, r1
 800b04c:	f806 3b01 	strb.w	r3, [r6], #1
 800b050:	e7de      	b.n	800b010 <_scanf_float+0x15c>
 800b052:	6822      	ldr	r2, [r4, #0]
 800b054:	0610      	lsls	r0, r2, #24
 800b056:	f57f af60 	bpl.w	800af1a <_scanf_float+0x66>
 800b05a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b05e:	6022      	str	r2, [r4, #0]
 800b060:	e7f4      	b.n	800b04c <_scanf_float+0x198>
 800b062:	f1ba 0f00 	cmp.w	sl, #0
 800b066:	d10c      	bne.n	800b082 <_scanf_float+0x1ce>
 800b068:	b977      	cbnz	r7, 800b088 <_scanf_float+0x1d4>
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b070:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b074:	d108      	bne.n	800b088 <_scanf_float+0x1d4>
 800b076:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b07a:	6022      	str	r2, [r4, #0]
 800b07c:	f04f 0a01 	mov.w	sl, #1
 800b080:	e7e4      	b.n	800b04c <_scanf_float+0x198>
 800b082:	f1ba 0f02 	cmp.w	sl, #2
 800b086:	d050      	beq.n	800b12a <_scanf_float+0x276>
 800b088:	2d01      	cmp	r5, #1
 800b08a:	d002      	beq.n	800b092 <_scanf_float+0x1de>
 800b08c:	2d04      	cmp	r5, #4
 800b08e:	f47f af44 	bne.w	800af1a <_scanf_float+0x66>
 800b092:	3501      	adds	r5, #1
 800b094:	b2ed      	uxtb	r5, r5
 800b096:	e7d9      	b.n	800b04c <_scanf_float+0x198>
 800b098:	f1ba 0f01 	cmp.w	sl, #1
 800b09c:	f47f af3d 	bne.w	800af1a <_scanf_float+0x66>
 800b0a0:	f04f 0a02 	mov.w	sl, #2
 800b0a4:	e7d2      	b.n	800b04c <_scanf_float+0x198>
 800b0a6:	b975      	cbnz	r5, 800b0c6 <_scanf_float+0x212>
 800b0a8:	2f00      	cmp	r7, #0
 800b0aa:	f47f af37 	bne.w	800af1c <_scanf_float+0x68>
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0b8:	f040 8103 	bne.w	800b2c2 <_scanf_float+0x40e>
 800b0bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0c0:	6022      	str	r2, [r4, #0]
 800b0c2:	2501      	movs	r5, #1
 800b0c4:	e7c2      	b.n	800b04c <_scanf_float+0x198>
 800b0c6:	2d03      	cmp	r5, #3
 800b0c8:	d0e3      	beq.n	800b092 <_scanf_float+0x1de>
 800b0ca:	2d05      	cmp	r5, #5
 800b0cc:	e7df      	b.n	800b08e <_scanf_float+0x1da>
 800b0ce:	2d02      	cmp	r5, #2
 800b0d0:	f47f af23 	bne.w	800af1a <_scanf_float+0x66>
 800b0d4:	2503      	movs	r5, #3
 800b0d6:	e7b9      	b.n	800b04c <_scanf_float+0x198>
 800b0d8:	2d06      	cmp	r5, #6
 800b0da:	f47f af1e 	bne.w	800af1a <_scanf_float+0x66>
 800b0de:	2507      	movs	r5, #7
 800b0e0:	e7b4      	b.n	800b04c <_scanf_float+0x198>
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	0591      	lsls	r1, r2, #22
 800b0e6:	f57f af18 	bpl.w	800af1a <_scanf_float+0x66>
 800b0ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b0ee:	6022      	str	r2, [r4, #0]
 800b0f0:	9702      	str	r7, [sp, #8]
 800b0f2:	e7ab      	b.n	800b04c <_scanf_float+0x198>
 800b0f4:	6822      	ldr	r2, [r4, #0]
 800b0f6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b0fa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b0fe:	d005      	beq.n	800b10c <_scanf_float+0x258>
 800b100:	0550      	lsls	r0, r2, #21
 800b102:	f57f af0a 	bpl.w	800af1a <_scanf_float+0x66>
 800b106:	2f00      	cmp	r7, #0
 800b108:	f000 80db 	beq.w	800b2c2 <_scanf_float+0x40e>
 800b10c:	0591      	lsls	r1, r2, #22
 800b10e:	bf58      	it	pl
 800b110:	9902      	ldrpl	r1, [sp, #8]
 800b112:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b116:	bf58      	it	pl
 800b118:	1a79      	subpl	r1, r7, r1
 800b11a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b11e:	bf58      	it	pl
 800b120:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b124:	6022      	str	r2, [r4, #0]
 800b126:	2700      	movs	r7, #0
 800b128:	e790      	b.n	800b04c <_scanf_float+0x198>
 800b12a:	f04f 0a03 	mov.w	sl, #3
 800b12e:	e78d      	b.n	800b04c <_scanf_float+0x198>
 800b130:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b134:	4649      	mov	r1, r9
 800b136:	4640      	mov	r0, r8
 800b138:	4798      	blx	r3
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f43f aedf 	beq.w	800aefe <_scanf_float+0x4a>
 800b140:	e6eb      	b.n	800af1a <_scanf_float+0x66>
 800b142:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b14a:	464a      	mov	r2, r9
 800b14c:	4640      	mov	r0, r8
 800b14e:	4798      	blx	r3
 800b150:	6923      	ldr	r3, [r4, #16]
 800b152:	3b01      	subs	r3, #1
 800b154:	6123      	str	r3, [r4, #16]
 800b156:	e6eb      	b.n	800af30 <_scanf_float+0x7c>
 800b158:	1e6b      	subs	r3, r5, #1
 800b15a:	2b06      	cmp	r3, #6
 800b15c:	d824      	bhi.n	800b1a8 <_scanf_float+0x2f4>
 800b15e:	2d02      	cmp	r5, #2
 800b160:	d836      	bhi.n	800b1d0 <_scanf_float+0x31c>
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	429e      	cmp	r6, r3
 800b166:	f67f aee7 	bls.w	800af38 <_scanf_float+0x84>
 800b16a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b16e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b172:	464a      	mov	r2, r9
 800b174:	4640      	mov	r0, r8
 800b176:	4798      	blx	r3
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	e7f0      	b.n	800b162 <_scanf_float+0x2ae>
 800b180:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b184:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b188:	464a      	mov	r2, r9
 800b18a:	4640      	mov	r0, r8
 800b18c:	4798      	blx	r3
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	3b01      	subs	r3, #1
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b198:	fa5f fa8a 	uxtb.w	sl, sl
 800b19c:	f1ba 0f02 	cmp.w	sl, #2
 800b1a0:	d1ee      	bne.n	800b180 <_scanf_float+0x2cc>
 800b1a2:	3d03      	subs	r5, #3
 800b1a4:	b2ed      	uxtb	r5, r5
 800b1a6:	1b76      	subs	r6, r6, r5
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	05da      	lsls	r2, r3, #23
 800b1ac:	d530      	bpl.n	800b210 <_scanf_float+0x35c>
 800b1ae:	055b      	lsls	r3, r3, #21
 800b1b0:	d511      	bpl.n	800b1d6 <_scanf_float+0x322>
 800b1b2:	9b01      	ldr	r3, [sp, #4]
 800b1b4:	429e      	cmp	r6, r3
 800b1b6:	f67f aebf 	bls.w	800af38 <_scanf_float+0x84>
 800b1ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1c2:	464a      	mov	r2, r9
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4798      	blx	r3
 800b1c8:	6923      	ldr	r3, [r4, #16]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	6123      	str	r3, [r4, #16]
 800b1ce:	e7f0      	b.n	800b1b2 <_scanf_float+0x2fe>
 800b1d0:	46aa      	mov	sl, r5
 800b1d2:	46b3      	mov	fp, r6
 800b1d4:	e7de      	b.n	800b194 <_scanf_float+0x2e0>
 800b1d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	2965      	cmp	r1, #101	@ 0x65
 800b1de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b1e6:	6123      	str	r3, [r4, #16]
 800b1e8:	d00c      	beq.n	800b204 <_scanf_float+0x350>
 800b1ea:	2945      	cmp	r1, #69	@ 0x45
 800b1ec:	d00a      	beq.n	800b204 <_scanf_float+0x350>
 800b1ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f2:	464a      	mov	r2, r9
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4798      	blx	r3
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	1eb5      	subs	r5, r6, #2
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b208:	464a      	mov	r2, r9
 800b20a:	4640      	mov	r0, r8
 800b20c:	4798      	blx	r3
 800b20e:	462e      	mov	r6, r5
 800b210:	6822      	ldr	r2, [r4, #0]
 800b212:	f012 0210 	ands.w	r2, r2, #16
 800b216:	d001      	beq.n	800b21c <_scanf_float+0x368>
 800b218:	2000      	movs	r0, #0
 800b21a:	e68e      	b.n	800af3a <_scanf_float+0x86>
 800b21c:	7032      	strb	r2, [r6, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b228:	d125      	bne.n	800b276 <_scanf_float+0x3c2>
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	429f      	cmp	r7, r3
 800b22e:	d00a      	beq.n	800b246 <_scanf_float+0x392>
 800b230:	1bda      	subs	r2, r3, r7
 800b232:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b236:	429e      	cmp	r6, r3
 800b238:	bf28      	it	cs
 800b23a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b23e:	4922      	ldr	r1, [pc, #136]	@ (800b2c8 <_scanf_float+0x414>)
 800b240:	4630      	mov	r0, r6
 800b242:	f000 f977 	bl	800b534 <siprintf>
 800b246:	9901      	ldr	r1, [sp, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	4640      	mov	r0, r8
 800b24c:	f002 fc54 	bl	800daf8 <_strtod_r>
 800b250:	9b03      	ldr	r3, [sp, #12]
 800b252:	6821      	ldr	r1, [r4, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f011 0f02 	tst.w	r1, #2
 800b25a:	ec57 6b10 	vmov	r6, r7, d0
 800b25e:	f103 0204 	add.w	r2, r3, #4
 800b262:	d015      	beq.n	800b290 <_scanf_float+0x3dc>
 800b264:	9903      	ldr	r1, [sp, #12]
 800b266:	600a      	str	r2, [r1, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	e9c3 6700 	strd	r6, r7, [r3]
 800b26e:	68e3      	ldr	r3, [r4, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	60e3      	str	r3, [r4, #12]
 800b274:	e7d0      	b.n	800b218 <_scanf_float+0x364>
 800b276:	9b04      	ldr	r3, [sp, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0e4      	beq.n	800b246 <_scanf_float+0x392>
 800b27c:	9905      	ldr	r1, [sp, #20]
 800b27e:	230a      	movs	r3, #10
 800b280:	3101      	adds	r1, #1
 800b282:	4640      	mov	r0, r8
 800b284:	f002 fcb8 	bl	800dbf8 <_strtol_r>
 800b288:	9b04      	ldr	r3, [sp, #16]
 800b28a:	9e05      	ldr	r6, [sp, #20]
 800b28c:	1ac2      	subs	r2, r0, r3
 800b28e:	e7d0      	b.n	800b232 <_scanf_float+0x37e>
 800b290:	f011 0f04 	tst.w	r1, #4
 800b294:	9903      	ldr	r1, [sp, #12]
 800b296:	600a      	str	r2, [r1, #0]
 800b298:	d1e6      	bne.n	800b268 <_scanf_float+0x3b4>
 800b29a:	681d      	ldr	r5, [r3, #0]
 800b29c:	4632      	mov	r2, r6
 800b29e:	463b      	mov	r3, r7
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f5 fc42 	bl	8000b2c <__aeabi_dcmpun>
 800b2a8:	b128      	cbz	r0, 800b2b6 <_scanf_float+0x402>
 800b2aa:	4808      	ldr	r0, [pc, #32]	@ (800b2cc <_scanf_float+0x418>)
 800b2ac:	f000 facc 	bl	800b848 <nanf>
 800b2b0:	ed85 0a00 	vstr	s0, [r5]
 800b2b4:	e7db      	b.n	800b26e <_scanf_float+0x3ba>
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f5 fc95 	bl	8000be8 <__aeabi_d2f>
 800b2be:	6028      	str	r0, [r5, #0]
 800b2c0:	e7d5      	b.n	800b26e <_scanf_float+0x3ba>
 800b2c2:	2700      	movs	r7, #0
 800b2c4:	e62e      	b.n	800af24 <_scanf_float+0x70>
 800b2c6:	bf00      	nop
 800b2c8:	0800ed8c 	.word	0x0800ed8c
 800b2cc:	0800eecd 	.word	0x0800eecd

0800b2d0 <std>:
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	b510      	push	{r4, lr}
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	e9c0 3300 	strd	r3, r3, [r0]
 800b2da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2de:	6083      	str	r3, [r0, #8]
 800b2e0:	8181      	strh	r1, [r0, #12]
 800b2e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2e4:	81c2      	strh	r2, [r0, #14]
 800b2e6:	6183      	str	r3, [r0, #24]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	305c      	adds	r0, #92	@ 0x5c
 800b2ee:	f000 fa1b 	bl	800b728 <memset>
 800b2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b328 <std+0x58>)
 800b2f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b32c <std+0x5c>)
 800b2f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b330 <std+0x60>)
 800b2fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b334 <std+0x64>)
 800b300:	6323      	str	r3, [r4, #48]	@ 0x30
 800b302:	4b0d      	ldr	r3, [pc, #52]	@ (800b338 <std+0x68>)
 800b304:	6224      	str	r4, [r4, #32]
 800b306:	429c      	cmp	r4, r3
 800b308:	d006      	beq.n	800b318 <std+0x48>
 800b30a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b30e:	4294      	cmp	r4, r2
 800b310:	d002      	beq.n	800b318 <std+0x48>
 800b312:	33d0      	adds	r3, #208	@ 0xd0
 800b314:	429c      	cmp	r4, r3
 800b316:	d105      	bne.n	800b324 <std+0x54>
 800b318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b320:	f000 ba8e 	b.w	800b840 <__retarget_lock_init_recursive>
 800b324:	bd10      	pop	{r4, pc}
 800b326:	bf00      	nop
 800b328:	0800b579 	.word	0x0800b579
 800b32c:	0800b59b 	.word	0x0800b59b
 800b330:	0800b5d3 	.word	0x0800b5d3
 800b334:	0800b5f7 	.word	0x0800b5f7
 800b338:	20001ed0 	.word	0x20001ed0

0800b33c <stdio_exit_handler>:
 800b33c:	4a02      	ldr	r2, [pc, #8]	@ (800b348 <stdio_exit_handler+0xc>)
 800b33e:	4903      	ldr	r1, [pc, #12]	@ (800b34c <stdio_exit_handler+0x10>)
 800b340:	4803      	ldr	r0, [pc, #12]	@ (800b350 <stdio_exit_handler+0x14>)
 800b342:	f000 b869 	b.w	800b418 <_fwalk_sglue>
 800b346:	bf00      	nop
 800b348:	200001f8 	.word	0x200001f8
 800b34c:	0800e239 	.word	0x0800e239
 800b350:	20000208 	.word	0x20000208

0800b354 <cleanup_stdio>:
 800b354:	6841      	ldr	r1, [r0, #4]
 800b356:	4b0c      	ldr	r3, [pc, #48]	@ (800b388 <cleanup_stdio+0x34>)
 800b358:	4299      	cmp	r1, r3
 800b35a:	b510      	push	{r4, lr}
 800b35c:	4604      	mov	r4, r0
 800b35e:	d001      	beq.n	800b364 <cleanup_stdio+0x10>
 800b360:	f002 ff6a 	bl	800e238 <_fflush_r>
 800b364:	68a1      	ldr	r1, [r4, #8]
 800b366:	4b09      	ldr	r3, [pc, #36]	@ (800b38c <cleanup_stdio+0x38>)
 800b368:	4299      	cmp	r1, r3
 800b36a:	d002      	beq.n	800b372 <cleanup_stdio+0x1e>
 800b36c:	4620      	mov	r0, r4
 800b36e:	f002 ff63 	bl	800e238 <_fflush_r>
 800b372:	68e1      	ldr	r1, [r4, #12]
 800b374:	4b06      	ldr	r3, [pc, #24]	@ (800b390 <cleanup_stdio+0x3c>)
 800b376:	4299      	cmp	r1, r3
 800b378:	d004      	beq.n	800b384 <cleanup_stdio+0x30>
 800b37a:	4620      	mov	r0, r4
 800b37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b380:	f002 bf5a 	b.w	800e238 <_fflush_r>
 800b384:	bd10      	pop	{r4, pc}
 800b386:	bf00      	nop
 800b388:	20001ed0 	.word	0x20001ed0
 800b38c:	20001f38 	.word	0x20001f38
 800b390:	20001fa0 	.word	0x20001fa0

0800b394 <global_stdio_init.part.0>:
 800b394:	b510      	push	{r4, lr}
 800b396:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c4 <global_stdio_init.part.0+0x30>)
 800b398:	4c0b      	ldr	r4, [pc, #44]	@ (800b3c8 <global_stdio_init.part.0+0x34>)
 800b39a:	4a0c      	ldr	r2, [pc, #48]	@ (800b3cc <global_stdio_init.part.0+0x38>)
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2104      	movs	r1, #4
 800b3a4:	f7ff ff94 	bl	800b2d0 <std>
 800b3a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	2109      	movs	r1, #9
 800b3b0:	f7ff ff8e 	bl	800b2d0 <std>
 800b3b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3be:	2112      	movs	r1, #18
 800b3c0:	f7ff bf86 	b.w	800b2d0 <std>
 800b3c4:	20002008 	.word	0x20002008
 800b3c8:	20001ed0 	.word	0x20001ed0
 800b3cc:	0800b33d 	.word	0x0800b33d

0800b3d0 <__sfp_lock_acquire>:
 800b3d0:	4801      	ldr	r0, [pc, #4]	@ (800b3d8 <__sfp_lock_acquire+0x8>)
 800b3d2:	f000 ba36 	b.w	800b842 <__retarget_lock_acquire_recursive>
 800b3d6:	bf00      	nop
 800b3d8:	20002011 	.word	0x20002011

0800b3dc <__sfp_lock_release>:
 800b3dc:	4801      	ldr	r0, [pc, #4]	@ (800b3e4 <__sfp_lock_release+0x8>)
 800b3de:	f000 ba31 	b.w	800b844 <__retarget_lock_release_recursive>
 800b3e2:	bf00      	nop
 800b3e4:	20002011 	.word	0x20002011

0800b3e8 <__sinit>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	f7ff fff0 	bl	800b3d0 <__sfp_lock_acquire>
 800b3f0:	6a23      	ldr	r3, [r4, #32]
 800b3f2:	b11b      	cbz	r3, 800b3fc <__sinit+0x14>
 800b3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3f8:	f7ff bff0 	b.w	800b3dc <__sfp_lock_release>
 800b3fc:	4b04      	ldr	r3, [pc, #16]	@ (800b410 <__sinit+0x28>)
 800b3fe:	6223      	str	r3, [r4, #32]
 800b400:	4b04      	ldr	r3, [pc, #16]	@ (800b414 <__sinit+0x2c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1f5      	bne.n	800b3f4 <__sinit+0xc>
 800b408:	f7ff ffc4 	bl	800b394 <global_stdio_init.part.0>
 800b40c:	e7f2      	b.n	800b3f4 <__sinit+0xc>
 800b40e:	bf00      	nop
 800b410:	0800b355 	.word	0x0800b355
 800b414:	20002008 	.word	0x20002008

0800b418 <_fwalk_sglue>:
 800b418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b41c:	4607      	mov	r7, r0
 800b41e:	4688      	mov	r8, r1
 800b420:	4614      	mov	r4, r2
 800b422:	2600      	movs	r6, #0
 800b424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b428:	f1b9 0901 	subs.w	r9, r9, #1
 800b42c:	d505      	bpl.n	800b43a <_fwalk_sglue+0x22>
 800b42e:	6824      	ldr	r4, [r4, #0]
 800b430:	2c00      	cmp	r4, #0
 800b432:	d1f7      	bne.n	800b424 <_fwalk_sglue+0xc>
 800b434:	4630      	mov	r0, r6
 800b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d907      	bls.n	800b450 <_fwalk_sglue+0x38>
 800b440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b444:	3301      	adds	r3, #1
 800b446:	d003      	beq.n	800b450 <_fwalk_sglue+0x38>
 800b448:	4629      	mov	r1, r5
 800b44a:	4638      	mov	r0, r7
 800b44c:	47c0      	blx	r8
 800b44e:	4306      	orrs	r6, r0
 800b450:	3568      	adds	r5, #104	@ 0x68
 800b452:	e7e9      	b.n	800b428 <_fwalk_sglue+0x10>

0800b454 <iprintf>:
 800b454:	b40f      	push	{r0, r1, r2, r3}
 800b456:	b507      	push	{r0, r1, r2, lr}
 800b458:	4906      	ldr	r1, [pc, #24]	@ (800b474 <iprintf+0x20>)
 800b45a:	ab04      	add	r3, sp, #16
 800b45c:	6808      	ldr	r0, [r1, #0]
 800b45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b462:	6881      	ldr	r1, [r0, #8]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	f002 fd4b 	bl	800df00 <_vfiprintf_r>
 800b46a:	b003      	add	sp, #12
 800b46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b470:	b004      	add	sp, #16
 800b472:	4770      	bx	lr
 800b474:	20000204 	.word	0x20000204

0800b478 <_puts_r>:
 800b478:	6a03      	ldr	r3, [r0, #32]
 800b47a:	b570      	push	{r4, r5, r6, lr}
 800b47c:	6884      	ldr	r4, [r0, #8]
 800b47e:	4605      	mov	r5, r0
 800b480:	460e      	mov	r6, r1
 800b482:	b90b      	cbnz	r3, 800b488 <_puts_r+0x10>
 800b484:	f7ff ffb0 	bl	800b3e8 <__sinit>
 800b488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b48a:	07db      	lsls	r3, r3, #31
 800b48c:	d405      	bmi.n	800b49a <_puts_r+0x22>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	0598      	lsls	r0, r3, #22
 800b492:	d402      	bmi.n	800b49a <_puts_r+0x22>
 800b494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b496:	f000 f9d4 	bl	800b842 <__retarget_lock_acquire_recursive>
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	0719      	lsls	r1, r3, #28
 800b49e:	d502      	bpl.n	800b4a6 <_puts_r+0x2e>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d135      	bne.n	800b512 <_puts_r+0x9a>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f000 f8e7 	bl	800b67c <__swsetup_r>
 800b4ae:	b380      	cbz	r0, 800b512 <_puts_r+0x9a>
 800b4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4b6:	07da      	lsls	r2, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_puts_r+0x4e>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	059b      	lsls	r3, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_puts_r+0x4e>
 800b4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4c2:	f000 f9bf 	bl	800b844 <__retarget_lock_release_recursive>
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	da04      	bge.n	800b4d8 <_puts_r+0x60>
 800b4ce:	69a2      	ldr	r2, [r4, #24]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	dc17      	bgt.n	800b504 <_puts_r+0x8c>
 800b4d4:	290a      	cmp	r1, #10
 800b4d6:	d015      	beq.n	800b504 <_puts_r+0x8c>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	6022      	str	r2, [r4, #0]
 800b4de:	7019      	strb	r1, [r3, #0]
 800b4e0:	68a3      	ldr	r3, [r4, #8]
 800b4e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	60a3      	str	r3, [r4, #8]
 800b4ea:	2900      	cmp	r1, #0
 800b4ec:	d1ed      	bne.n	800b4ca <_puts_r+0x52>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	da11      	bge.n	800b516 <_puts_r+0x9e>
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	210a      	movs	r1, #10
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 f881 	bl	800b5fe <__swbuf_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d0d7      	beq.n	800b4b0 <_puts_r+0x38>
 800b500:	250a      	movs	r5, #10
 800b502:	e7d7      	b.n	800b4b4 <_puts_r+0x3c>
 800b504:	4622      	mov	r2, r4
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f879 	bl	800b5fe <__swbuf_r>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d1e7      	bne.n	800b4e0 <_puts_r+0x68>
 800b510:	e7ce      	b.n	800b4b0 <_puts_r+0x38>
 800b512:	3e01      	subs	r6, #1
 800b514:	e7e4      	b.n	800b4e0 <_puts_r+0x68>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	6022      	str	r2, [r4, #0]
 800b51c:	220a      	movs	r2, #10
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	e7ee      	b.n	800b500 <_puts_r+0x88>
	...

0800b524 <puts>:
 800b524:	4b02      	ldr	r3, [pc, #8]	@ (800b530 <puts+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f7ff bfa5 	b.w	800b478 <_puts_r>
 800b52e:	bf00      	nop
 800b530:	20000204 	.word	0x20000204

0800b534 <siprintf>:
 800b534:	b40e      	push	{r1, r2, r3}
 800b536:	b510      	push	{r4, lr}
 800b538:	b09d      	sub	sp, #116	@ 0x74
 800b53a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b53c:	9002      	str	r0, [sp, #8]
 800b53e:	9006      	str	r0, [sp, #24]
 800b540:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b544:	480a      	ldr	r0, [pc, #40]	@ (800b570 <siprintf+0x3c>)
 800b546:	9107      	str	r1, [sp, #28]
 800b548:	9104      	str	r1, [sp, #16]
 800b54a:	490a      	ldr	r1, [pc, #40]	@ (800b574 <siprintf+0x40>)
 800b54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b550:	9105      	str	r1, [sp, #20]
 800b552:	2400      	movs	r4, #0
 800b554:	a902      	add	r1, sp, #8
 800b556:	6800      	ldr	r0, [r0, #0]
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b55c:	f002 fbaa 	bl	800dcb4 <_svfiprintf_r>
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	701c      	strb	r4, [r3, #0]
 800b564:	b01d      	add	sp, #116	@ 0x74
 800b566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b56a:	b003      	add	sp, #12
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20000204 	.word	0x20000204
 800b574:	ffff0208 	.word	0xffff0208

0800b578 <__sread>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	460c      	mov	r4, r1
 800b57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b580:	f000 f900 	bl	800b784 <_read_r>
 800b584:	2800      	cmp	r0, #0
 800b586:	bfab      	itete	ge
 800b588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b58a:	89a3      	ldrhlt	r3, [r4, #12]
 800b58c:	181b      	addge	r3, r3, r0
 800b58e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b592:	bfac      	ite	ge
 800b594:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b596:	81a3      	strhlt	r3, [r4, #12]
 800b598:	bd10      	pop	{r4, pc}

0800b59a <__swrite>:
 800b59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59e:	461f      	mov	r7, r3
 800b5a0:	898b      	ldrh	r3, [r1, #12]
 800b5a2:	05db      	lsls	r3, r3, #23
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	4616      	mov	r6, r2
 800b5aa:	d505      	bpl.n	800b5b8 <__swrite+0x1e>
 800b5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f000 f8d4 	bl	800b760 <_lseek_r>
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	463b      	mov	r3, r7
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ce:	f000 b8fb 	b.w	800b7c8 <_write_r>

0800b5d2 <__sseek>:
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5da:	f000 f8c1 	bl	800b760 <_lseek_r>
 800b5de:	1c43      	adds	r3, r0, #1
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	bf15      	itete	ne
 800b5e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5ee:	81a3      	strheq	r3, [r4, #12]
 800b5f0:	bf18      	it	ne
 800b5f2:	81a3      	strhne	r3, [r4, #12]
 800b5f4:	bd10      	pop	{r4, pc}

0800b5f6 <__sclose>:
 800b5f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fa:	f000 b8a1 	b.w	800b740 <_close_r>

0800b5fe <__swbuf_r>:
 800b5fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b600:	460e      	mov	r6, r1
 800b602:	4614      	mov	r4, r2
 800b604:	4605      	mov	r5, r0
 800b606:	b118      	cbz	r0, 800b610 <__swbuf_r+0x12>
 800b608:	6a03      	ldr	r3, [r0, #32]
 800b60a:	b90b      	cbnz	r3, 800b610 <__swbuf_r+0x12>
 800b60c:	f7ff feec 	bl	800b3e8 <__sinit>
 800b610:	69a3      	ldr	r3, [r4, #24]
 800b612:	60a3      	str	r3, [r4, #8]
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	071a      	lsls	r2, r3, #28
 800b618:	d501      	bpl.n	800b61e <__swbuf_r+0x20>
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	b943      	cbnz	r3, 800b630 <__swbuf_r+0x32>
 800b61e:	4621      	mov	r1, r4
 800b620:	4628      	mov	r0, r5
 800b622:	f000 f82b 	bl	800b67c <__swsetup_r>
 800b626:	b118      	cbz	r0, 800b630 <__swbuf_r+0x32>
 800b628:	f04f 37ff 	mov.w	r7, #4294967295
 800b62c:	4638      	mov	r0, r7
 800b62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	1a98      	subs	r0, r3, r2
 800b636:	6963      	ldr	r3, [r4, #20]
 800b638:	b2f6      	uxtb	r6, r6
 800b63a:	4283      	cmp	r3, r0
 800b63c:	4637      	mov	r7, r6
 800b63e:	dc05      	bgt.n	800b64c <__swbuf_r+0x4e>
 800b640:	4621      	mov	r1, r4
 800b642:	4628      	mov	r0, r5
 800b644:	f002 fdf8 	bl	800e238 <_fflush_r>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d1ed      	bne.n	800b628 <__swbuf_r+0x2a>
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	3b01      	subs	r3, #1
 800b650:	60a3      	str	r3, [r4, #8]
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	1c5a      	adds	r2, r3, #1
 800b656:	6022      	str	r2, [r4, #0]
 800b658:	701e      	strb	r6, [r3, #0]
 800b65a:	6962      	ldr	r2, [r4, #20]
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	429a      	cmp	r2, r3
 800b660:	d004      	beq.n	800b66c <__swbuf_r+0x6e>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	07db      	lsls	r3, r3, #31
 800b666:	d5e1      	bpl.n	800b62c <__swbuf_r+0x2e>
 800b668:	2e0a      	cmp	r6, #10
 800b66a:	d1df      	bne.n	800b62c <__swbuf_r+0x2e>
 800b66c:	4621      	mov	r1, r4
 800b66e:	4628      	mov	r0, r5
 800b670:	f002 fde2 	bl	800e238 <_fflush_r>
 800b674:	2800      	cmp	r0, #0
 800b676:	d0d9      	beq.n	800b62c <__swbuf_r+0x2e>
 800b678:	e7d6      	b.n	800b628 <__swbuf_r+0x2a>
	...

0800b67c <__swsetup_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4b29      	ldr	r3, [pc, #164]	@ (800b724 <__swsetup_r+0xa8>)
 800b680:	4605      	mov	r5, r0
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	460c      	mov	r4, r1
 800b686:	b118      	cbz	r0, 800b690 <__swsetup_r+0x14>
 800b688:	6a03      	ldr	r3, [r0, #32]
 800b68a:	b90b      	cbnz	r3, 800b690 <__swsetup_r+0x14>
 800b68c:	f7ff feac 	bl	800b3e8 <__sinit>
 800b690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b694:	0719      	lsls	r1, r3, #28
 800b696:	d422      	bmi.n	800b6de <__swsetup_r+0x62>
 800b698:	06da      	lsls	r2, r3, #27
 800b69a:	d407      	bmi.n	800b6ac <__swsetup_r+0x30>
 800b69c:	2209      	movs	r2, #9
 800b69e:	602a      	str	r2, [r5, #0]
 800b6a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6a4:	81a3      	strh	r3, [r4, #12]
 800b6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6aa:	e033      	b.n	800b714 <__swsetup_r+0x98>
 800b6ac:	0758      	lsls	r0, r3, #29
 800b6ae:	d512      	bpl.n	800b6d6 <__swsetup_r+0x5a>
 800b6b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6b2:	b141      	cbz	r1, 800b6c6 <__swsetup_r+0x4a>
 800b6b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	d002      	beq.n	800b6c2 <__swsetup_r+0x46>
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f000 ff23 	bl	800c508 <_free_r>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	6063      	str	r3, [r4, #4]
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f043 0308 	orr.w	r3, r3, #8
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	b94b      	cbnz	r3, 800b6f6 <__swsetup_r+0x7a>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ec:	d003      	beq.n	800b6f6 <__swsetup_r+0x7a>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f002 fdef 	bl	800e2d4 <__smakebuf_r>
 800b6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6fa:	f013 0201 	ands.w	r2, r3, #1
 800b6fe:	d00a      	beq.n	800b716 <__swsetup_r+0x9a>
 800b700:	2200      	movs	r2, #0
 800b702:	60a2      	str	r2, [r4, #8]
 800b704:	6962      	ldr	r2, [r4, #20]
 800b706:	4252      	negs	r2, r2
 800b708:	61a2      	str	r2, [r4, #24]
 800b70a:	6922      	ldr	r2, [r4, #16]
 800b70c:	b942      	cbnz	r2, 800b720 <__swsetup_r+0xa4>
 800b70e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b712:	d1c5      	bne.n	800b6a0 <__swsetup_r+0x24>
 800b714:	bd38      	pop	{r3, r4, r5, pc}
 800b716:	0799      	lsls	r1, r3, #30
 800b718:	bf58      	it	pl
 800b71a:	6962      	ldrpl	r2, [r4, #20]
 800b71c:	60a2      	str	r2, [r4, #8]
 800b71e:	e7f4      	b.n	800b70a <__swsetup_r+0x8e>
 800b720:	2000      	movs	r0, #0
 800b722:	e7f7      	b.n	800b714 <__swsetup_r+0x98>
 800b724:	20000204 	.word	0x20000204

0800b728 <memset>:
 800b728:	4402      	add	r2, r0
 800b72a:	4603      	mov	r3, r0
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d100      	bne.n	800b732 <memset+0xa>
 800b730:	4770      	bx	lr
 800b732:	f803 1b01 	strb.w	r1, [r3], #1
 800b736:	e7f9      	b.n	800b72c <memset+0x4>

0800b738 <_localeconv_r>:
 800b738:	4800      	ldr	r0, [pc, #0]	@ (800b73c <_localeconv_r+0x4>)
 800b73a:	4770      	bx	lr
 800b73c:	20000344 	.word	0x20000344

0800b740 <_close_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	@ (800b75c <_close_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f6 f9c8 	bl	8001ae0 <_close>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_close_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_close_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	2000200c 	.word	0x2000200c

0800b760 <_lseek_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	@ (800b780 <_lseek_r+0x20>)
 800b764:	4604      	mov	r4, r0
 800b766:	4608      	mov	r0, r1
 800b768:	4611      	mov	r1, r2
 800b76a:	2200      	movs	r2, #0
 800b76c:	602a      	str	r2, [r5, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	f7f6 f9dd 	bl	8001b2e <_lseek>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	d102      	bne.n	800b77e <_lseek_r+0x1e>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	b103      	cbz	r3, 800b77e <_lseek_r+0x1e>
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	2000200c 	.word	0x2000200c

0800b784 <_read_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d07      	ldr	r5, [pc, #28]	@ (800b7a4 <_read_r+0x20>)
 800b788:	4604      	mov	r4, r0
 800b78a:	4608      	mov	r0, r1
 800b78c:	4611      	mov	r1, r2
 800b78e:	2200      	movs	r2, #0
 800b790:	602a      	str	r2, [r5, #0]
 800b792:	461a      	mov	r2, r3
 800b794:	f7f6 f987 	bl	8001aa6 <_read>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d102      	bne.n	800b7a2 <_read_r+0x1e>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	b103      	cbz	r3, 800b7a2 <_read_r+0x1e>
 800b7a0:	6023      	str	r3, [r4, #0]
 800b7a2:	bd38      	pop	{r3, r4, r5, pc}
 800b7a4:	2000200c 	.word	0x2000200c

0800b7a8 <_sbrk_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d06      	ldr	r5, [pc, #24]	@ (800b7c4 <_sbrk_r+0x1c>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	602b      	str	r3, [r5, #0]
 800b7b4:	f7f6 f9c8 	bl	8001b48 <_sbrk>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <_sbrk_r+0x1a>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	b103      	cbz	r3, 800b7c2 <_sbrk_r+0x1a>
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	bd38      	pop	{r3, r4, r5, pc}
 800b7c4:	2000200c 	.word	0x2000200c

0800b7c8 <_write_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	@ (800b7e8 <_write_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7f5 ffbd 	bl	8001756 <_write>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_write_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_write_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	2000200c 	.word	0x2000200c

0800b7ec <__errno>:
 800b7ec:	4b01      	ldr	r3, [pc, #4]	@ (800b7f4 <__errno+0x8>)
 800b7ee:	6818      	ldr	r0, [r3, #0]
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000204 	.word	0x20000204

0800b7f8 <__libc_init_array>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	4d0d      	ldr	r5, [pc, #52]	@ (800b830 <__libc_init_array+0x38>)
 800b7fc:	4c0d      	ldr	r4, [pc, #52]	@ (800b834 <__libc_init_array+0x3c>)
 800b7fe:	1b64      	subs	r4, r4, r5
 800b800:	10a4      	asrs	r4, r4, #2
 800b802:	2600      	movs	r6, #0
 800b804:	42a6      	cmp	r6, r4
 800b806:	d109      	bne.n	800b81c <__libc_init_array+0x24>
 800b808:	4d0b      	ldr	r5, [pc, #44]	@ (800b838 <__libc_init_array+0x40>)
 800b80a:	4c0c      	ldr	r4, [pc, #48]	@ (800b83c <__libc_init_array+0x44>)
 800b80c:	f003 fa22 	bl	800ec54 <_init>
 800b810:	1b64      	subs	r4, r4, r5
 800b812:	10a4      	asrs	r4, r4, #2
 800b814:	2600      	movs	r6, #0
 800b816:	42a6      	cmp	r6, r4
 800b818:	d105      	bne.n	800b826 <__libc_init_array+0x2e>
 800b81a:	bd70      	pop	{r4, r5, r6, pc}
 800b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b820:	4798      	blx	r3
 800b822:	3601      	adds	r6, #1
 800b824:	e7ee      	b.n	800b804 <__libc_init_array+0xc>
 800b826:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82a:	4798      	blx	r3
 800b82c:	3601      	adds	r6, #1
 800b82e:	e7f2      	b.n	800b816 <__libc_init_array+0x1e>
 800b830:	0800f18c 	.word	0x0800f18c
 800b834:	0800f18c 	.word	0x0800f18c
 800b838:	0800f18c 	.word	0x0800f18c
 800b83c:	0800f190 	.word	0x0800f190

0800b840 <__retarget_lock_init_recursive>:
 800b840:	4770      	bx	lr

0800b842 <__retarget_lock_acquire_recursive>:
 800b842:	4770      	bx	lr

0800b844 <__retarget_lock_release_recursive>:
 800b844:	4770      	bx	lr
	...

0800b848 <nanf>:
 800b848:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b850 <nanf+0x8>
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	7fc00000 	.word	0x7fc00000

0800b854 <quorem>:
 800b854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	6903      	ldr	r3, [r0, #16]
 800b85a:	690c      	ldr	r4, [r1, #16]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	4607      	mov	r7, r0
 800b860:	db7e      	blt.n	800b960 <quorem+0x10c>
 800b862:	3c01      	subs	r4, #1
 800b864:	f101 0814 	add.w	r8, r1, #20
 800b868:	00a3      	lsls	r3, r4, #2
 800b86a:	f100 0514 	add.w	r5, r0, #20
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b87a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b87e:	3301      	adds	r3, #1
 800b880:	429a      	cmp	r2, r3
 800b882:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b886:	fbb2 f6f3 	udiv	r6, r2, r3
 800b88a:	d32e      	bcc.n	800b8ea <quorem+0x96>
 800b88c:	f04f 0a00 	mov.w	sl, #0
 800b890:	46c4      	mov	ip, r8
 800b892:	46ae      	mov	lr, r5
 800b894:	46d3      	mov	fp, sl
 800b896:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b89a:	b298      	uxth	r0, r3
 800b89c:	fb06 a000 	mla	r0, r6, r0, sl
 800b8a0:	0c02      	lsrs	r2, r0, #16
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	fb06 2303 	mla	r3, r6, r3, r2
 800b8a8:	f8de 2000 	ldr.w	r2, [lr]
 800b8ac:	b280      	uxth	r0, r0
 800b8ae:	b292      	uxth	r2, r2
 800b8b0:	1a12      	subs	r2, r2, r0
 800b8b2:	445a      	add	r2, fp
 800b8b4:	f8de 0000 	ldr.w	r0, [lr]
 800b8b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8c6:	b292      	uxth	r2, r2
 800b8c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8cc:	45e1      	cmp	r9, ip
 800b8ce:	f84e 2b04 	str.w	r2, [lr], #4
 800b8d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b8d6:	d2de      	bcs.n	800b896 <quorem+0x42>
 800b8d8:	9b00      	ldr	r3, [sp, #0]
 800b8da:	58eb      	ldr	r3, [r5, r3]
 800b8dc:	b92b      	cbnz	r3, 800b8ea <quorem+0x96>
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	3b04      	subs	r3, #4
 800b8e2:	429d      	cmp	r5, r3
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	d32f      	bcc.n	800b948 <quorem+0xf4>
 800b8e8:	613c      	str	r4, [r7, #16]
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	f001 f912 	bl	800cb14 <__mcmp>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	db25      	blt.n	800b940 <quorem+0xec>
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8fc:	f8d1 c000 	ldr.w	ip, [r1]
 800b900:	fa1f fe82 	uxth.w	lr, r2
 800b904:	fa1f f38c 	uxth.w	r3, ip
 800b908:	eba3 030e 	sub.w	r3, r3, lr
 800b90c:	4403      	add	r3, r0
 800b90e:	0c12      	lsrs	r2, r2, #16
 800b910:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b914:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b918:	b29b      	uxth	r3, r3
 800b91a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b91e:	45c1      	cmp	r9, r8
 800b920:	f841 3b04 	str.w	r3, [r1], #4
 800b924:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b928:	d2e6      	bcs.n	800b8f8 <quorem+0xa4>
 800b92a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b92e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b932:	b922      	cbnz	r2, 800b93e <quorem+0xea>
 800b934:	3b04      	subs	r3, #4
 800b936:	429d      	cmp	r5, r3
 800b938:	461a      	mov	r2, r3
 800b93a:	d30b      	bcc.n	800b954 <quorem+0x100>
 800b93c:	613c      	str	r4, [r7, #16]
 800b93e:	3601      	adds	r6, #1
 800b940:	4630      	mov	r0, r6
 800b942:	b003      	add	sp, #12
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b948:	6812      	ldr	r2, [r2, #0]
 800b94a:	3b04      	subs	r3, #4
 800b94c:	2a00      	cmp	r2, #0
 800b94e:	d1cb      	bne.n	800b8e8 <quorem+0x94>
 800b950:	3c01      	subs	r4, #1
 800b952:	e7c6      	b.n	800b8e2 <quorem+0x8e>
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	3b04      	subs	r3, #4
 800b958:	2a00      	cmp	r2, #0
 800b95a:	d1ef      	bne.n	800b93c <quorem+0xe8>
 800b95c:	3c01      	subs	r4, #1
 800b95e:	e7ea      	b.n	800b936 <quorem+0xe2>
 800b960:	2000      	movs	r0, #0
 800b962:	e7ee      	b.n	800b942 <quorem+0xee>
 800b964:	0000      	movs	r0, r0
	...

0800b968 <_dtoa_r>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	69c7      	ldr	r7, [r0, #28]
 800b96e:	b097      	sub	sp, #92	@ 0x5c
 800b970:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b974:	ec55 4b10 	vmov	r4, r5, d0
 800b978:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b97a:	9107      	str	r1, [sp, #28]
 800b97c:	4681      	mov	r9, r0
 800b97e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b980:	9311      	str	r3, [sp, #68]	@ 0x44
 800b982:	b97f      	cbnz	r7, 800b9a4 <_dtoa_r+0x3c>
 800b984:	2010      	movs	r0, #16
 800b986:	f7fe fd81 	bl	800a48c <malloc>
 800b98a:	4602      	mov	r2, r0
 800b98c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b990:	b920      	cbnz	r0, 800b99c <_dtoa_r+0x34>
 800b992:	4ba9      	ldr	r3, [pc, #676]	@ (800bc38 <_dtoa_r+0x2d0>)
 800b994:	21ef      	movs	r1, #239	@ 0xef
 800b996:	48a9      	ldr	r0, [pc, #676]	@ (800bc3c <_dtoa_r+0x2d4>)
 800b998:	f002 fd3e 	bl	800e418 <__assert_func>
 800b99c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b9a0:	6007      	str	r7, [r0, #0]
 800b9a2:	60c7      	str	r7, [r0, #12]
 800b9a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9a8:	6819      	ldr	r1, [r3, #0]
 800b9aa:	b159      	cbz	r1, 800b9c4 <_dtoa_r+0x5c>
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	604a      	str	r2, [r1, #4]
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4093      	lsls	r3, r2
 800b9b4:	608b      	str	r3, [r1, #8]
 800b9b6:	4648      	mov	r0, r9
 800b9b8:	f000 fe30 	bl	800c61c <_Bfree>
 800b9bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	1e2b      	subs	r3, r5, #0
 800b9c6:	bfb9      	ittee	lt
 800b9c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b9cc:	9305      	strlt	r3, [sp, #20]
 800b9ce:	2300      	movge	r3, #0
 800b9d0:	6033      	strge	r3, [r6, #0]
 800b9d2:	9f05      	ldr	r7, [sp, #20]
 800b9d4:	4b9a      	ldr	r3, [pc, #616]	@ (800bc40 <_dtoa_r+0x2d8>)
 800b9d6:	bfbc      	itt	lt
 800b9d8:	2201      	movlt	r2, #1
 800b9da:	6032      	strlt	r2, [r6, #0]
 800b9dc:	43bb      	bics	r3, r7
 800b9de:	d112      	bne.n	800ba06 <_dtoa_r+0x9e>
 800b9e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b9e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b9e6:	6013      	str	r3, [r2, #0]
 800b9e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9ec:	4323      	orrs	r3, r4
 800b9ee:	f000 855a 	beq.w	800c4a6 <_dtoa_r+0xb3e>
 800b9f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bc54 <_dtoa_r+0x2ec>
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 855c 	beq.w	800c4b6 <_dtoa_r+0xb4e>
 800b9fe:	f10a 0303 	add.w	r3, sl, #3
 800ba02:	f000 bd56 	b.w	800c4b2 <_dtoa_r+0xb4a>
 800ba06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	ec51 0b17 	vmov	r0, r1, d7
 800ba10:	2300      	movs	r3, #0
 800ba12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ba16:	f7f5 f857 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	b158      	cbz	r0, 800ba36 <_dtoa_r+0xce>
 800ba1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ba20:	2301      	movs	r3, #1
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ba26:	b113      	cbz	r3, 800ba2e <_dtoa_r+0xc6>
 800ba28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ba2a:	4b86      	ldr	r3, [pc, #536]	@ (800bc44 <_dtoa_r+0x2dc>)
 800ba2c:	6013      	str	r3, [r2, #0]
 800ba2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bc58 <_dtoa_r+0x2f0>
 800ba32:	f000 bd40 	b.w	800c4b6 <_dtoa_r+0xb4e>
 800ba36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ba3a:	aa14      	add	r2, sp, #80	@ 0x50
 800ba3c:	a915      	add	r1, sp, #84	@ 0x54
 800ba3e:	4648      	mov	r0, r9
 800ba40:	f001 f988 	bl	800cd54 <__d2b>
 800ba44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ba48:	9002      	str	r0, [sp, #8]
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	d078      	beq.n	800bb40 <_dtoa_r+0x1d8>
 800ba4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ba54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ba5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ba60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ba64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ba68:	4619      	mov	r1, r3
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4b76      	ldr	r3, [pc, #472]	@ (800bc48 <_dtoa_r+0x2e0>)
 800ba6e:	f7f4 fc0b 	bl	8000288 <__aeabi_dsub>
 800ba72:	a36b      	add	r3, pc, #428	@ (adr r3, 800bc20 <_dtoa_r+0x2b8>)
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	f7f4 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ba7c:	a36a      	add	r3, pc, #424	@ (adr r3, 800bc28 <_dtoa_r+0x2c0>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fc03 	bl	800028c <__adddf3>
 800ba86:	4604      	mov	r4, r0
 800ba88:	4630      	mov	r0, r6
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	f7f4 fd4a 	bl	8000524 <__aeabi_i2d>
 800ba90:	a367      	add	r3, pc, #412	@ (adr r3, 800bc30 <_dtoa_r+0x2c8>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4620      	mov	r0, r4
 800baa0:	4629      	mov	r1, r5
 800baa2:	f7f4 fbf3 	bl	800028c <__adddf3>
 800baa6:	4604      	mov	r4, r0
 800baa8:	460d      	mov	r5, r1
 800baaa:	f7f5 f855 	bl	8000b58 <__aeabi_d2iz>
 800baae:	2200      	movs	r2, #0
 800bab0:	4607      	mov	r7, r0
 800bab2:	2300      	movs	r3, #0
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f5 f810 	bl	8000adc <__aeabi_dcmplt>
 800babc:	b140      	cbz	r0, 800bad0 <_dtoa_r+0x168>
 800babe:	4638      	mov	r0, r7
 800bac0:	f7f4 fd30 	bl	8000524 <__aeabi_i2d>
 800bac4:	4622      	mov	r2, r4
 800bac6:	462b      	mov	r3, r5
 800bac8:	f7f4 fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 800bacc:	b900      	cbnz	r0, 800bad0 <_dtoa_r+0x168>
 800bace:	3f01      	subs	r7, #1
 800bad0:	2f16      	cmp	r7, #22
 800bad2:	d852      	bhi.n	800bb7a <_dtoa_r+0x212>
 800bad4:	4b5d      	ldr	r3, [pc, #372]	@ (800bc4c <_dtoa_r+0x2e4>)
 800bad6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bae2:	f7f4 fffb 	bl	8000adc <__aeabi_dcmplt>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d049      	beq.n	800bb7e <_dtoa_r+0x216>
 800baea:	3f01      	subs	r7, #1
 800baec:	2300      	movs	r3, #0
 800baee:	9310      	str	r3, [sp, #64]	@ 0x40
 800baf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800baf2:	1b9b      	subs	r3, r3, r6
 800baf4:	1e5a      	subs	r2, r3, #1
 800baf6:	bf45      	ittet	mi
 800baf8:	f1c3 0301 	rsbmi	r3, r3, #1
 800bafc:	9300      	strmi	r3, [sp, #0]
 800bafe:	2300      	movpl	r3, #0
 800bb00:	2300      	movmi	r3, #0
 800bb02:	9206      	str	r2, [sp, #24]
 800bb04:	bf54      	ite	pl
 800bb06:	9300      	strpl	r3, [sp, #0]
 800bb08:	9306      	strmi	r3, [sp, #24]
 800bb0a:	2f00      	cmp	r7, #0
 800bb0c:	db39      	blt.n	800bb82 <_dtoa_r+0x21a>
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	970d      	str	r7, [sp, #52]	@ 0x34
 800bb12:	443b      	add	r3, r7
 800bb14:	9306      	str	r3, [sp, #24]
 800bb16:	2300      	movs	r3, #0
 800bb18:	9308      	str	r3, [sp, #32]
 800bb1a:	9b07      	ldr	r3, [sp, #28]
 800bb1c:	2b09      	cmp	r3, #9
 800bb1e:	d863      	bhi.n	800bbe8 <_dtoa_r+0x280>
 800bb20:	2b05      	cmp	r3, #5
 800bb22:	bfc4      	itt	gt
 800bb24:	3b04      	subgt	r3, #4
 800bb26:	9307      	strgt	r3, [sp, #28]
 800bb28:	9b07      	ldr	r3, [sp, #28]
 800bb2a:	f1a3 0302 	sub.w	r3, r3, #2
 800bb2e:	bfcc      	ite	gt
 800bb30:	2400      	movgt	r4, #0
 800bb32:	2401      	movle	r4, #1
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d863      	bhi.n	800bc00 <_dtoa_r+0x298>
 800bb38:	e8df f003 	tbb	[pc, r3]
 800bb3c:	2b375452 	.word	0x2b375452
 800bb40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bb44:	441e      	add	r6, r3
 800bb46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bb4a:	2b20      	cmp	r3, #32
 800bb4c:	bfc1      	itttt	gt
 800bb4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bb52:	409f      	lslgt	r7, r3
 800bb54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bb58:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bb5c:	bfd6      	itet	le
 800bb5e:	f1c3 0320 	rsble	r3, r3, #32
 800bb62:	ea47 0003 	orrgt.w	r0, r7, r3
 800bb66:	fa04 f003 	lslle.w	r0, r4, r3
 800bb6a:	f7f4 fccb 	bl	8000504 <__aeabi_ui2d>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bb74:	3e01      	subs	r6, #1
 800bb76:	9212      	str	r2, [sp, #72]	@ 0x48
 800bb78:	e776      	b.n	800ba68 <_dtoa_r+0x100>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e7b7      	b.n	800baee <_dtoa_r+0x186>
 800bb7e:	9010      	str	r0, [sp, #64]	@ 0x40
 800bb80:	e7b6      	b.n	800baf0 <_dtoa_r+0x188>
 800bb82:	9b00      	ldr	r3, [sp, #0]
 800bb84:	1bdb      	subs	r3, r3, r7
 800bb86:	9300      	str	r3, [sp, #0]
 800bb88:	427b      	negs	r3, r7
 800bb8a:	9308      	str	r3, [sp, #32]
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb90:	e7c3      	b.n	800bb1a <_dtoa_r+0x1b2>
 800bb92:	2301      	movs	r3, #1
 800bb94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb98:	eb07 0b03 	add.w	fp, r7, r3
 800bb9c:	f10b 0301 	add.w	r3, fp, #1
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	9303      	str	r3, [sp, #12]
 800bba4:	bfb8      	it	lt
 800bba6:	2301      	movlt	r3, #1
 800bba8:	e006      	b.n	800bbb8 <_dtoa_r+0x250>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	dd28      	ble.n	800bc06 <_dtoa_r+0x29e>
 800bbb4:	469b      	mov	fp, r3
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	2204      	movs	r2, #4
 800bbc0:	f102 0514 	add.w	r5, r2, #20
 800bbc4:	429d      	cmp	r5, r3
 800bbc6:	d926      	bls.n	800bc16 <_dtoa_r+0x2ae>
 800bbc8:	6041      	str	r1, [r0, #4]
 800bbca:	4648      	mov	r0, r9
 800bbcc:	f000 fce6 	bl	800c59c <_Balloc>
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d142      	bne.n	800bc5c <_dtoa_r+0x2f4>
 800bbd6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc50 <_dtoa_r+0x2e8>)
 800bbd8:	4602      	mov	r2, r0
 800bbda:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbde:	e6da      	b.n	800b996 <_dtoa_r+0x2e>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e7e3      	b.n	800bbac <_dtoa_r+0x244>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	e7d5      	b.n	800bb94 <_dtoa_r+0x22c>
 800bbe8:	2401      	movs	r4, #1
 800bbea:	2300      	movs	r3, #0
 800bbec:	9307      	str	r3, [sp, #28]
 800bbee:	9409      	str	r4, [sp, #36]	@ 0x24
 800bbf0:	f04f 3bff 	mov.w	fp, #4294967295
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f8cd b00c 	str.w	fp, [sp, #12]
 800bbfa:	2312      	movs	r3, #18
 800bbfc:	920c      	str	r2, [sp, #48]	@ 0x30
 800bbfe:	e7db      	b.n	800bbb8 <_dtoa_r+0x250>
 800bc00:	2301      	movs	r3, #1
 800bc02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc04:	e7f4      	b.n	800bbf0 <_dtoa_r+0x288>
 800bc06:	f04f 0b01 	mov.w	fp, #1
 800bc0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800bc0e:	465b      	mov	r3, fp
 800bc10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bc14:	e7d0      	b.n	800bbb8 <_dtoa_r+0x250>
 800bc16:	3101      	adds	r1, #1
 800bc18:	0052      	lsls	r2, r2, #1
 800bc1a:	e7d1      	b.n	800bbc0 <_dtoa_r+0x258>
 800bc1c:	f3af 8000 	nop.w
 800bc20:	636f4361 	.word	0x636f4361
 800bc24:	3fd287a7 	.word	0x3fd287a7
 800bc28:	8b60c8b3 	.word	0x8b60c8b3
 800bc2c:	3fc68a28 	.word	0x3fc68a28
 800bc30:	509f79fb 	.word	0x509f79fb
 800bc34:	3fd34413 	.word	0x3fd34413
 800bc38:	0800ed9e 	.word	0x0800ed9e
 800bc3c:	0800edb5 	.word	0x0800edb5
 800bc40:	7ff00000 	.word	0x7ff00000
 800bc44:	0800ed69 	.word	0x0800ed69
 800bc48:	3ff80000 	.word	0x3ff80000
 800bc4c:	0800ef68 	.word	0x0800ef68
 800bc50:	0800ee0d 	.word	0x0800ee0d
 800bc54:	0800ed9a 	.word	0x0800ed9a
 800bc58:	0800ed68 	.word	0x0800ed68
 800bc5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc60:	6018      	str	r0, [r3, #0]
 800bc62:	9b03      	ldr	r3, [sp, #12]
 800bc64:	2b0e      	cmp	r3, #14
 800bc66:	f200 80a1 	bhi.w	800bdac <_dtoa_r+0x444>
 800bc6a:	2c00      	cmp	r4, #0
 800bc6c:	f000 809e 	beq.w	800bdac <_dtoa_r+0x444>
 800bc70:	2f00      	cmp	r7, #0
 800bc72:	dd33      	ble.n	800bcdc <_dtoa_r+0x374>
 800bc74:	4b9c      	ldr	r3, [pc, #624]	@ (800bee8 <_dtoa_r+0x580>)
 800bc76:	f007 020f 	and.w	r2, r7, #15
 800bc7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc7e:	ed93 7b00 	vldr	d7, [r3]
 800bc82:	05f8      	lsls	r0, r7, #23
 800bc84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bc88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bc8c:	d516      	bpl.n	800bcbc <_dtoa_r+0x354>
 800bc8e:	4b97      	ldr	r3, [pc, #604]	@ (800beec <_dtoa_r+0x584>)
 800bc90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bc94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc98:	f7f4 fdd8 	bl	800084c <__aeabi_ddiv>
 800bc9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bca0:	f004 040f 	and.w	r4, r4, #15
 800bca4:	2603      	movs	r6, #3
 800bca6:	4d91      	ldr	r5, [pc, #580]	@ (800beec <_dtoa_r+0x584>)
 800bca8:	b954      	cbnz	r4, 800bcc0 <_dtoa_r+0x358>
 800bcaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bcae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcb2:	f7f4 fdcb 	bl	800084c <__aeabi_ddiv>
 800bcb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcba:	e028      	b.n	800bd0e <_dtoa_r+0x3a6>
 800bcbc:	2602      	movs	r6, #2
 800bcbe:	e7f2      	b.n	800bca6 <_dtoa_r+0x33e>
 800bcc0:	07e1      	lsls	r1, r4, #31
 800bcc2:	d508      	bpl.n	800bcd6 <_dtoa_r+0x36e>
 800bcc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bcc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bccc:	f7f4 fc94 	bl	80005f8 <__aeabi_dmul>
 800bcd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bcd4:	3601      	adds	r6, #1
 800bcd6:	1064      	asrs	r4, r4, #1
 800bcd8:	3508      	adds	r5, #8
 800bcda:	e7e5      	b.n	800bca8 <_dtoa_r+0x340>
 800bcdc:	f000 80af 	beq.w	800be3e <_dtoa_r+0x4d6>
 800bce0:	427c      	negs	r4, r7
 800bce2:	4b81      	ldr	r3, [pc, #516]	@ (800bee8 <_dtoa_r+0x580>)
 800bce4:	4d81      	ldr	r5, [pc, #516]	@ (800beec <_dtoa_r+0x584>)
 800bce6:	f004 020f 	and.w	r2, r4, #15
 800bcea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bcf6:	f7f4 fc7f 	bl	80005f8 <__aeabi_dmul>
 800bcfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcfe:	1124      	asrs	r4, r4, #4
 800bd00:	2300      	movs	r3, #0
 800bd02:	2602      	movs	r6, #2
 800bd04:	2c00      	cmp	r4, #0
 800bd06:	f040 808f 	bne.w	800be28 <_dtoa_r+0x4c0>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1d3      	bne.n	800bcb6 <_dtoa_r+0x34e>
 800bd0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 8094 	beq.w	800be42 <_dtoa_r+0x4da>
 800bd1a:	4b75      	ldr	r3, [pc, #468]	@ (800bef0 <_dtoa_r+0x588>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 fedb 	bl	8000adc <__aeabi_dcmplt>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f000 808b 	beq.w	800be42 <_dtoa_r+0x4da>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 8087 	beq.w	800be42 <_dtoa_r+0x4da>
 800bd34:	f1bb 0f00 	cmp.w	fp, #0
 800bd38:	dd34      	ble.n	800bda4 <_dtoa_r+0x43c>
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4b6d      	ldr	r3, [pc, #436]	@ (800bef4 <_dtoa_r+0x58c>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4629      	mov	r1, r5
 800bd42:	f7f4 fc59 	bl	80005f8 <__aeabi_dmul>
 800bd46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd4a:	f107 38ff 	add.w	r8, r7, #4294967295
 800bd4e:	3601      	adds	r6, #1
 800bd50:	465c      	mov	r4, fp
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7f4 fbe6 	bl	8000524 <__aeabi_i2d>
 800bd58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd5c:	f7f4 fc4c 	bl	80005f8 <__aeabi_dmul>
 800bd60:	4b65      	ldr	r3, [pc, #404]	@ (800bef8 <_dtoa_r+0x590>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	f7f4 fa92 	bl	800028c <__adddf3>
 800bd68:	4605      	mov	r5, r0
 800bd6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bd6e:	2c00      	cmp	r4, #0
 800bd70:	d16a      	bne.n	800be48 <_dtoa_r+0x4e0>
 800bd72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd76:	4b61      	ldr	r3, [pc, #388]	@ (800befc <_dtoa_r+0x594>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	f7f4 fa85 	bl	8000288 <__aeabi_dsub>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd86:	462a      	mov	r2, r5
 800bd88:	4633      	mov	r3, r6
 800bd8a:	f7f4 fec5 	bl	8000b18 <__aeabi_dcmpgt>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	f040 8298 	bne.w	800c2c4 <_dtoa_r+0x95c>
 800bd94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd98:	462a      	mov	r2, r5
 800bd9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bd9e:	f7f4 fe9d 	bl	8000adc <__aeabi_dcmplt>
 800bda2:	bb38      	cbnz	r0, 800bdf4 <_dtoa_r+0x48c>
 800bda4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bda8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bdac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f2c0 8157 	blt.w	800c062 <_dtoa_r+0x6fa>
 800bdb4:	2f0e      	cmp	r7, #14
 800bdb6:	f300 8154 	bgt.w	800c062 <_dtoa_r+0x6fa>
 800bdba:	4b4b      	ldr	r3, [pc, #300]	@ (800bee8 <_dtoa_r+0x580>)
 800bdbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bdc0:	ed93 7b00 	vldr	d7, [r3]
 800bdc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	ed8d 7b00 	vstr	d7, [sp]
 800bdcc:	f280 80e5 	bge.w	800bf9a <_dtoa_r+0x632>
 800bdd0:	9b03      	ldr	r3, [sp, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	f300 80e1 	bgt.w	800bf9a <_dtoa_r+0x632>
 800bdd8:	d10c      	bne.n	800bdf4 <_dtoa_r+0x48c>
 800bdda:	4b48      	ldr	r3, [pc, #288]	@ (800befc <_dtoa_r+0x594>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	ec51 0b17 	vmov	r0, r1, d7
 800bde2:	f7f4 fc09 	bl	80005f8 <__aeabi_dmul>
 800bde6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdea:	f7f4 fe8b 	bl	8000b04 <__aeabi_dcmpge>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f000 8266 	beq.w	800c2c0 <_dtoa_r+0x958>
 800bdf4:	2400      	movs	r4, #0
 800bdf6:	4625      	mov	r5, r4
 800bdf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdfa:	4656      	mov	r6, sl
 800bdfc:	ea6f 0803 	mvn.w	r8, r3
 800be00:	2700      	movs	r7, #0
 800be02:	4621      	mov	r1, r4
 800be04:	4648      	mov	r0, r9
 800be06:	f000 fc09 	bl	800c61c <_Bfree>
 800be0a:	2d00      	cmp	r5, #0
 800be0c:	f000 80bd 	beq.w	800bf8a <_dtoa_r+0x622>
 800be10:	b12f      	cbz	r7, 800be1e <_dtoa_r+0x4b6>
 800be12:	42af      	cmp	r7, r5
 800be14:	d003      	beq.n	800be1e <_dtoa_r+0x4b6>
 800be16:	4639      	mov	r1, r7
 800be18:	4648      	mov	r0, r9
 800be1a:	f000 fbff 	bl	800c61c <_Bfree>
 800be1e:	4629      	mov	r1, r5
 800be20:	4648      	mov	r0, r9
 800be22:	f000 fbfb 	bl	800c61c <_Bfree>
 800be26:	e0b0      	b.n	800bf8a <_dtoa_r+0x622>
 800be28:	07e2      	lsls	r2, r4, #31
 800be2a:	d505      	bpl.n	800be38 <_dtoa_r+0x4d0>
 800be2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be30:	f7f4 fbe2 	bl	80005f8 <__aeabi_dmul>
 800be34:	3601      	adds	r6, #1
 800be36:	2301      	movs	r3, #1
 800be38:	1064      	asrs	r4, r4, #1
 800be3a:	3508      	adds	r5, #8
 800be3c:	e762      	b.n	800bd04 <_dtoa_r+0x39c>
 800be3e:	2602      	movs	r6, #2
 800be40:	e765      	b.n	800bd0e <_dtoa_r+0x3a6>
 800be42:	9c03      	ldr	r4, [sp, #12]
 800be44:	46b8      	mov	r8, r7
 800be46:	e784      	b.n	800bd52 <_dtoa_r+0x3ea>
 800be48:	4b27      	ldr	r3, [pc, #156]	@ (800bee8 <_dtoa_r+0x580>)
 800be4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be54:	4454      	add	r4, sl
 800be56:	2900      	cmp	r1, #0
 800be58:	d054      	beq.n	800bf04 <_dtoa_r+0x59c>
 800be5a:	4929      	ldr	r1, [pc, #164]	@ (800bf00 <_dtoa_r+0x598>)
 800be5c:	2000      	movs	r0, #0
 800be5e:	f7f4 fcf5 	bl	800084c <__aeabi_ddiv>
 800be62:	4633      	mov	r3, r6
 800be64:	462a      	mov	r2, r5
 800be66:	f7f4 fa0f 	bl	8000288 <__aeabi_dsub>
 800be6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800be6e:	4656      	mov	r6, sl
 800be70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be74:	f7f4 fe70 	bl	8000b58 <__aeabi_d2iz>
 800be78:	4605      	mov	r5, r0
 800be7a:	f7f4 fb53 	bl	8000524 <__aeabi_i2d>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be86:	f7f4 f9ff 	bl	8000288 <__aeabi_dsub>
 800be8a:	3530      	adds	r5, #48	@ 0x30
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be94:	f806 5b01 	strb.w	r5, [r6], #1
 800be98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800be9c:	f7f4 fe1e 	bl	8000adc <__aeabi_dcmplt>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d172      	bne.n	800bf8a <_dtoa_r+0x622>
 800bea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bea8:	4911      	ldr	r1, [pc, #68]	@ (800bef0 <_dtoa_r+0x588>)
 800beaa:	2000      	movs	r0, #0
 800beac:	f7f4 f9ec 	bl	8000288 <__aeabi_dsub>
 800beb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800beb4:	f7f4 fe12 	bl	8000adc <__aeabi_dcmplt>
 800beb8:	2800      	cmp	r0, #0
 800beba:	f040 80b4 	bne.w	800c026 <_dtoa_r+0x6be>
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	f43f af70 	beq.w	800bda4 <_dtoa_r+0x43c>
 800bec4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bec8:	4b0a      	ldr	r3, [pc, #40]	@ (800bef4 <_dtoa_r+0x58c>)
 800beca:	2200      	movs	r2, #0
 800becc:	f7f4 fb94 	bl	80005f8 <__aeabi_dmul>
 800bed0:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <_dtoa_r+0x58c>)
 800bed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bed6:	2200      	movs	r2, #0
 800bed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bedc:	f7f4 fb8c 	bl	80005f8 <__aeabi_dmul>
 800bee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bee4:	e7c4      	b.n	800be70 <_dtoa_r+0x508>
 800bee6:	bf00      	nop
 800bee8:	0800ef68 	.word	0x0800ef68
 800beec:	0800ef40 	.word	0x0800ef40
 800bef0:	3ff00000 	.word	0x3ff00000
 800bef4:	40240000 	.word	0x40240000
 800bef8:	401c0000 	.word	0x401c0000
 800befc:	40140000 	.word	0x40140000
 800bf00:	3fe00000 	.word	0x3fe00000
 800bf04:	4631      	mov	r1, r6
 800bf06:	4628      	mov	r0, r5
 800bf08:	f7f4 fb76 	bl	80005f8 <__aeabi_dmul>
 800bf0c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf10:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bf12:	4656      	mov	r6, sl
 800bf14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf18:	f7f4 fe1e 	bl	8000b58 <__aeabi_d2iz>
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	f7f4 fb01 	bl	8000524 <__aeabi_i2d>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
 800bf26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf2a:	f7f4 f9ad 	bl	8000288 <__aeabi_dsub>
 800bf2e:	3530      	adds	r5, #48	@ 0x30
 800bf30:	f806 5b01 	strb.w	r5, [r6], #1
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	42a6      	cmp	r6, r4
 800bf3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	d124      	bne.n	800bf8e <_dtoa_r+0x626>
 800bf44:	4baf      	ldr	r3, [pc, #700]	@ (800c204 <_dtoa_r+0x89c>)
 800bf46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf4a:	f7f4 f99f 	bl	800028c <__adddf3>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf56:	f7f4 fddf 	bl	8000b18 <__aeabi_dcmpgt>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d163      	bne.n	800c026 <_dtoa_r+0x6be>
 800bf5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf62:	49a8      	ldr	r1, [pc, #672]	@ (800c204 <_dtoa_r+0x89c>)
 800bf64:	2000      	movs	r0, #0
 800bf66:	f7f4 f98f 	bl	8000288 <__aeabi_dsub>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf72:	f7f4 fdb3 	bl	8000adc <__aeabi_dcmplt>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f43f af14 	beq.w	800bda4 <_dtoa_r+0x43c>
 800bf7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bf7e:	1e73      	subs	r3, r6, #1
 800bf80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bf82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf86:	2b30      	cmp	r3, #48	@ 0x30
 800bf88:	d0f8      	beq.n	800bf7c <_dtoa_r+0x614>
 800bf8a:	4647      	mov	r7, r8
 800bf8c:	e03b      	b.n	800c006 <_dtoa_r+0x69e>
 800bf8e:	4b9e      	ldr	r3, [pc, #632]	@ (800c208 <_dtoa_r+0x8a0>)
 800bf90:	f7f4 fb32 	bl	80005f8 <__aeabi_dmul>
 800bf94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf98:	e7bc      	b.n	800bf14 <_dtoa_r+0x5ac>
 800bf9a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bf9e:	4656      	mov	r6, sl
 800bfa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 fc50 	bl	800084c <__aeabi_ddiv>
 800bfac:	f7f4 fdd4 	bl	8000b58 <__aeabi_d2iz>
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	f7f4 fab7 	bl	8000524 <__aeabi_i2d>
 800bfb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfba:	f7f4 fb1d 	bl	80005f8 <__aeabi_dmul>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfca:	f7f4 f95d 	bl	8000288 <__aeabi_dsub>
 800bfce:	f806 4b01 	strb.w	r4, [r6], #1
 800bfd2:	9d03      	ldr	r5, [sp, #12]
 800bfd4:	eba6 040a 	sub.w	r4, r6, sl
 800bfd8:	42a5      	cmp	r5, r4
 800bfda:	4602      	mov	r2, r0
 800bfdc:	460b      	mov	r3, r1
 800bfde:	d133      	bne.n	800c048 <_dtoa_r+0x6e0>
 800bfe0:	f7f4 f954 	bl	800028c <__adddf3>
 800bfe4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfe8:	4604      	mov	r4, r0
 800bfea:	460d      	mov	r5, r1
 800bfec:	f7f4 fd94 	bl	8000b18 <__aeabi_dcmpgt>
 800bff0:	b9c0      	cbnz	r0, 800c024 <_dtoa_r+0x6bc>
 800bff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bff6:	4620      	mov	r0, r4
 800bff8:	4629      	mov	r1, r5
 800bffa:	f7f4 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 800bffe:	b110      	cbz	r0, 800c006 <_dtoa_r+0x69e>
 800c000:	f018 0f01 	tst.w	r8, #1
 800c004:	d10e      	bne.n	800c024 <_dtoa_r+0x6bc>
 800c006:	9902      	ldr	r1, [sp, #8]
 800c008:	4648      	mov	r0, r9
 800c00a:	f000 fb07 	bl	800c61c <_Bfree>
 800c00e:	2300      	movs	r3, #0
 800c010:	7033      	strb	r3, [r6, #0]
 800c012:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c014:	3701      	adds	r7, #1
 800c016:	601f      	str	r7, [r3, #0]
 800c018:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 824b 	beq.w	800c4b6 <_dtoa_r+0xb4e>
 800c020:	601e      	str	r6, [r3, #0]
 800c022:	e248      	b.n	800c4b6 <_dtoa_r+0xb4e>
 800c024:	46b8      	mov	r8, r7
 800c026:	4633      	mov	r3, r6
 800c028:	461e      	mov	r6, r3
 800c02a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c02e:	2a39      	cmp	r2, #57	@ 0x39
 800c030:	d106      	bne.n	800c040 <_dtoa_r+0x6d8>
 800c032:	459a      	cmp	sl, r3
 800c034:	d1f8      	bne.n	800c028 <_dtoa_r+0x6c0>
 800c036:	2230      	movs	r2, #48	@ 0x30
 800c038:	f108 0801 	add.w	r8, r8, #1
 800c03c:	f88a 2000 	strb.w	r2, [sl]
 800c040:	781a      	ldrb	r2, [r3, #0]
 800c042:	3201      	adds	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
 800c046:	e7a0      	b.n	800bf8a <_dtoa_r+0x622>
 800c048:	4b6f      	ldr	r3, [pc, #444]	@ (800c208 <_dtoa_r+0x8a0>)
 800c04a:	2200      	movs	r2, #0
 800c04c:	f7f4 fad4 	bl	80005f8 <__aeabi_dmul>
 800c050:	2200      	movs	r2, #0
 800c052:	2300      	movs	r3, #0
 800c054:	4604      	mov	r4, r0
 800c056:	460d      	mov	r5, r1
 800c058:	f7f4 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d09f      	beq.n	800bfa0 <_dtoa_r+0x638>
 800c060:	e7d1      	b.n	800c006 <_dtoa_r+0x69e>
 800c062:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c064:	2a00      	cmp	r2, #0
 800c066:	f000 80ea 	beq.w	800c23e <_dtoa_r+0x8d6>
 800c06a:	9a07      	ldr	r2, [sp, #28]
 800c06c:	2a01      	cmp	r2, #1
 800c06e:	f300 80cd 	bgt.w	800c20c <_dtoa_r+0x8a4>
 800c072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c074:	2a00      	cmp	r2, #0
 800c076:	f000 80c1 	beq.w	800c1fc <_dtoa_r+0x894>
 800c07a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c07e:	9c08      	ldr	r4, [sp, #32]
 800c080:	9e00      	ldr	r6, [sp, #0]
 800c082:	9a00      	ldr	r2, [sp, #0]
 800c084:	441a      	add	r2, r3
 800c086:	9200      	str	r2, [sp, #0]
 800c088:	9a06      	ldr	r2, [sp, #24]
 800c08a:	2101      	movs	r1, #1
 800c08c:	441a      	add	r2, r3
 800c08e:	4648      	mov	r0, r9
 800c090:	9206      	str	r2, [sp, #24]
 800c092:	f000 fbc1 	bl	800c818 <__i2b>
 800c096:	4605      	mov	r5, r0
 800c098:	b166      	cbz	r6, 800c0b4 <_dtoa_r+0x74c>
 800c09a:	9b06      	ldr	r3, [sp, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dd09      	ble.n	800c0b4 <_dtoa_r+0x74c>
 800c0a0:	42b3      	cmp	r3, r6
 800c0a2:	9a00      	ldr	r2, [sp, #0]
 800c0a4:	bfa8      	it	ge
 800c0a6:	4633      	movge	r3, r6
 800c0a8:	1ad2      	subs	r2, r2, r3
 800c0aa:	9200      	str	r2, [sp, #0]
 800c0ac:	9a06      	ldr	r2, [sp, #24]
 800c0ae:	1af6      	subs	r6, r6, r3
 800c0b0:	1ad3      	subs	r3, r2, r3
 800c0b2:	9306      	str	r3, [sp, #24]
 800c0b4:	9b08      	ldr	r3, [sp, #32]
 800c0b6:	b30b      	cbz	r3, 800c0fc <_dtoa_r+0x794>
 800c0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 80c6 	beq.w	800c24c <_dtoa_r+0x8e4>
 800c0c0:	2c00      	cmp	r4, #0
 800c0c2:	f000 80c0 	beq.w	800c246 <_dtoa_r+0x8de>
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	4648      	mov	r0, r9
 800c0cc:	f000 fc5c 	bl	800c988 <__pow5mult>
 800c0d0:	9a02      	ldr	r2, [sp, #8]
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	4605      	mov	r5, r0
 800c0d6:	4648      	mov	r0, r9
 800c0d8:	f000 fbb4 	bl	800c844 <__multiply>
 800c0dc:	9902      	ldr	r1, [sp, #8]
 800c0de:	4680      	mov	r8, r0
 800c0e0:	4648      	mov	r0, r9
 800c0e2:	f000 fa9b 	bl	800c61c <_Bfree>
 800c0e6:	9b08      	ldr	r3, [sp, #32]
 800c0e8:	1b1b      	subs	r3, r3, r4
 800c0ea:	9308      	str	r3, [sp, #32]
 800c0ec:	f000 80b1 	beq.w	800c252 <_dtoa_r+0x8ea>
 800c0f0:	9a08      	ldr	r2, [sp, #32]
 800c0f2:	4641      	mov	r1, r8
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f000 fc47 	bl	800c988 <__pow5mult>
 800c0fa:	9002      	str	r0, [sp, #8]
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	4648      	mov	r0, r9
 800c100:	f000 fb8a 	bl	800c818 <__i2b>
 800c104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c106:	4604      	mov	r4, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 81d8 	beq.w	800c4be <_dtoa_r+0xb56>
 800c10e:	461a      	mov	r2, r3
 800c110:	4601      	mov	r1, r0
 800c112:	4648      	mov	r0, r9
 800c114:	f000 fc38 	bl	800c988 <__pow5mult>
 800c118:	9b07      	ldr	r3, [sp, #28]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	4604      	mov	r4, r0
 800c11e:	f300 809f 	bgt.w	800c260 <_dtoa_r+0x8f8>
 800c122:	9b04      	ldr	r3, [sp, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	f040 8097 	bne.w	800c258 <_dtoa_r+0x8f0>
 800c12a:	9b05      	ldr	r3, [sp, #20]
 800c12c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c130:	2b00      	cmp	r3, #0
 800c132:	f040 8093 	bne.w	800c25c <_dtoa_r+0x8f4>
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c13c:	0d1b      	lsrs	r3, r3, #20
 800c13e:	051b      	lsls	r3, r3, #20
 800c140:	b133      	cbz	r3, 800c150 <_dtoa_r+0x7e8>
 800c142:	9b00      	ldr	r3, [sp, #0]
 800c144:	3301      	adds	r3, #1
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	9b06      	ldr	r3, [sp, #24]
 800c14a:	3301      	adds	r3, #1
 800c14c:	9306      	str	r3, [sp, #24]
 800c14e:	2301      	movs	r3, #1
 800c150:	9308      	str	r3, [sp, #32]
 800c152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c154:	2b00      	cmp	r3, #0
 800c156:	f000 81b8 	beq.w	800c4ca <_dtoa_r+0xb62>
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c160:	6918      	ldr	r0, [r3, #16]
 800c162:	f000 fb0d 	bl	800c780 <__hi0bits>
 800c166:	f1c0 0020 	rsb	r0, r0, #32
 800c16a:	9b06      	ldr	r3, [sp, #24]
 800c16c:	4418      	add	r0, r3
 800c16e:	f010 001f 	ands.w	r0, r0, #31
 800c172:	f000 8082 	beq.w	800c27a <_dtoa_r+0x912>
 800c176:	f1c0 0320 	rsb	r3, r0, #32
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	dd73      	ble.n	800c266 <_dtoa_r+0x8fe>
 800c17e:	9b00      	ldr	r3, [sp, #0]
 800c180:	f1c0 001c 	rsb	r0, r0, #28
 800c184:	4403      	add	r3, r0
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	9b06      	ldr	r3, [sp, #24]
 800c18a:	4403      	add	r3, r0
 800c18c:	4406      	add	r6, r0
 800c18e:	9306      	str	r3, [sp, #24]
 800c190:	9b00      	ldr	r3, [sp, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	dd05      	ble.n	800c1a2 <_dtoa_r+0x83a>
 800c196:	9902      	ldr	r1, [sp, #8]
 800c198:	461a      	mov	r2, r3
 800c19a:	4648      	mov	r0, r9
 800c19c:	f000 fc4e 	bl	800ca3c <__lshift>
 800c1a0:	9002      	str	r0, [sp, #8]
 800c1a2:	9b06      	ldr	r3, [sp, #24]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	dd05      	ble.n	800c1b4 <_dtoa_r+0x84c>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	4648      	mov	r0, r9
 800c1ae:	f000 fc45 	bl	800ca3c <__lshift>
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d061      	beq.n	800c27e <_dtoa_r+0x916>
 800c1ba:	9802      	ldr	r0, [sp, #8]
 800c1bc:	4621      	mov	r1, r4
 800c1be:	f000 fca9 	bl	800cb14 <__mcmp>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	da5b      	bge.n	800c27e <_dtoa_r+0x916>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9902      	ldr	r1, [sp, #8]
 800c1ca:	220a      	movs	r2, #10
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f000 fa47 	bl	800c660 <__multadd>
 800c1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d4:	9002      	str	r0, [sp, #8]
 800c1d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	f000 8177 	beq.w	800c4ce <_dtoa_r+0xb66>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	4648      	mov	r0, r9
 800c1e8:	f000 fa3a 	bl	800c660 <__multadd>
 800c1ec:	f1bb 0f00 	cmp.w	fp, #0
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	dc6f      	bgt.n	800c2d4 <_dtoa_r+0x96c>
 800c1f4:	9b07      	ldr	r3, [sp, #28]
 800c1f6:	2b02      	cmp	r3, #2
 800c1f8:	dc49      	bgt.n	800c28e <_dtoa_r+0x926>
 800c1fa:	e06b      	b.n	800c2d4 <_dtoa_r+0x96c>
 800c1fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c1fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c202:	e73c      	b.n	800c07e <_dtoa_r+0x716>
 800c204:	3fe00000 	.word	0x3fe00000
 800c208:	40240000 	.word	0x40240000
 800c20c:	9b03      	ldr	r3, [sp, #12]
 800c20e:	1e5c      	subs	r4, r3, #1
 800c210:	9b08      	ldr	r3, [sp, #32]
 800c212:	42a3      	cmp	r3, r4
 800c214:	db09      	blt.n	800c22a <_dtoa_r+0x8c2>
 800c216:	1b1c      	subs	r4, r3, r4
 800c218:	9b03      	ldr	r3, [sp, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f6bf af30 	bge.w	800c080 <_dtoa_r+0x718>
 800c220:	9b00      	ldr	r3, [sp, #0]
 800c222:	9a03      	ldr	r2, [sp, #12]
 800c224:	1a9e      	subs	r6, r3, r2
 800c226:	2300      	movs	r3, #0
 800c228:	e72b      	b.n	800c082 <_dtoa_r+0x71a>
 800c22a:	9b08      	ldr	r3, [sp, #32]
 800c22c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c22e:	9408      	str	r4, [sp, #32]
 800c230:	1ae3      	subs	r3, r4, r3
 800c232:	441a      	add	r2, r3
 800c234:	9e00      	ldr	r6, [sp, #0]
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	920d      	str	r2, [sp, #52]	@ 0x34
 800c23a:	2400      	movs	r4, #0
 800c23c:	e721      	b.n	800c082 <_dtoa_r+0x71a>
 800c23e:	9c08      	ldr	r4, [sp, #32]
 800c240:	9e00      	ldr	r6, [sp, #0]
 800c242:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c244:	e728      	b.n	800c098 <_dtoa_r+0x730>
 800c246:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c24a:	e751      	b.n	800c0f0 <_dtoa_r+0x788>
 800c24c:	9a08      	ldr	r2, [sp, #32]
 800c24e:	9902      	ldr	r1, [sp, #8]
 800c250:	e750      	b.n	800c0f4 <_dtoa_r+0x78c>
 800c252:	f8cd 8008 	str.w	r8, [sp, #8]
 800c256:	e751      	b.n	800c0fc <_dtoa_r+0x794>
 800c258:	2300      	movs	r3, #0
 800c25a:	e779      	b.n	800c150 <_dtoa_r+0x7e8>
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	e777      	b.n	800c150 <_dtoa_r+0x7e8>
 800c260:	2300      	movs	r3, #0
 800c262:	9308      	str	r3, [sp, #32]
 800c264:	e779      	b.n	800c15a <_dtoa_r+0x7f2>
 800c266:	d093      	beq.n	800c190 <_dtoa_r+0x828>
 800c268:	9a00      	ldr	r2, [sp, #0]
 800c26a:	331c      	adds	r3, #28
 800c26c:	441a      	add	r2, r3
 800c26e:	9200      	str	r2, [sp, #0]
 800c270:	9a06      	ldr	r2, [sp, #24]
 800c272:	441a      	add	r2, r3
 800c274:	441e      	add	r6, r3
 800c276:	9206      	str	r2, [sp, #24]
 800c278:	e78a      	b.n	800c190 <_dtoa_r+0x828>
 800c27a:	4603      	mov	r3, r0
 800c27c:	e7f4      	b.n	800c268 <_dtoa_r+0x900>
 800c27e:	9b03      	ldr	r3, [sp, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	46b8      	mov	r8, r7
 800c284:	dc20      	bgt.n	800c2c8 <_dtoa_r+0x960>
 800c286:	469b      	mov	fp, r3
 800c288:	9b07      	ldr	r3, [sp, #28]
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	dd1e      	ble.n	800c2cc <_dtoa_r+0x964>
 800c28e:	f1bb 0f00 	cmp.w	fp, #0
 800c292:	f47f adb1 	bne.w	800bdf8 <_dtoa_r+0x490>
 800c296:	4621      	mov	r1, r4
 800c298:	465b      	mov	r3, fp
 800c29a:	2205      	movs	r2, #5
 800c29c:	4648      	mov	r0, r9
 800c29e:	f000 f9df 	bl	800c660 <__multadd>
 800c2a2:	4601      	mov	r1, r0
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	9802      	ldr	r0, [sp, #8]
 800c2a8:	f000 fc34 	bl	800cb14 <__mcmp>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	f77f ada3 	ble.w	800bdf8 <_dtoa_r+0x490>
 800c2b2:	4656      	mov	r6, sl
 800c2b4:	2331      	movs	r3, #49	@ 0x31
 800c2b6:	f806 3b01 	strb.w	r3, [r6], #1
 800c2ba:	f108 0801 	add.w	r8, r8, #1
 800c2be:	e59f      	b.n	800be00 <_dtoa_r+0x498>
 800c2c0:	9c03      	ldr	r4, [sp, #12]
 800c2c2:	46b8      	mov	r8, r7
 800c2c4:	4625      	mov	r5, r4
 800c2c6:	e7f4      	b.n	800c2b2 <_dtoa_r+0x94a>
 800c2c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 8101 	beq.w	800c4d6 <_dtoa_r+0xb6e>
 800c2d4:	2e00      	cmp	r6, #0
 800c2d6:	dd05      	ble.n	800c2e4 <_dtoa_r+0x97c>
 800c2d8:	4629      	mov	r1, r5
 800c2da:	4632      	mov	r2, r6
 800c2dc:	4648      	mov	r0, r9
 800c2de:	f000 fbad 	bl	800ca3c <__lshift>
 800c2e2:	4605      	mov	r5, r0
 800c2e4:	9b08      	ldr	r3, [sp, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d05c      	beq.n	800c3a4 <_dtoa_r+0xa3c>
 800c2ea:	6869      	ldr	r1, [r5, #4]
 800c2ec:	4648      	mov	r0, r9
 800c2ee:	f000 f955 	bl	800c59c <_Balloc>
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	b928      	cbnz	r0, 800c302 <_dtoa_r+0x99a>
 800c2f6:	4b82      	ldr	r3, [pc, #520]	@ (800c500 <_dtoa_r+0xb98>)
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2fe:	f7ff bb4a 	b.w	800b996 <_dtoa_r+0x2e>
 800c302:	692a      	ldr	r2, [r5, #16]
 800c304:	3202      	adds	r2, #2
 800c306:	0092      	lsls	r2, r2, #2
 800c308:	f105 010c 	add.w	r1, r5, #12
 800c30c:	300c      	adds	r0, #12
 800c30e:	f002 f86b 	bl	800e3e8 <memcpy>
 800c312:	2201      	movs	r2, #1
 800c314:	4631      	mov	r1, r6
 800c316:	4648      	mov	r0, r9
 800c318:	f000 fb90 	bl	800ca3c <__lshift>
 800c31c:	f10a 0301 	add.w	r3, sl, #1
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	eb0a 030b 	add.w	r3, sl, fp
 800c326:	9308      	str	r3, [sp, #32]
 800c328:	9b04      	ldr	r3, [sp, #16]
 800c32a:	f003 0301 	and.w	r3, r3, #1
 800c32e:	462f      	mov	r7, r5
 800c330:	9306      	str	r3, [sp, #24]
 800c332:	4605      	mov	r5, r0
 800c334:	9b00      	ldr	r3, [sp, #0]
 800c336:	9802      	ldr	r0, [sp, #8]
 800c338:	4621      	mov	r1, r4
 800c33a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c33e:	f7ff fa89 	bl	800b854 <quorem>
 800c342:	4603      	mov	r3, r0
 800c344:	3330      	adds	r3, #48	@ 0x30
 800c346:	9003      	str	r0, [sp, #12]
 800c348:	4639      	mov	r1, r7
 800c34a:	9802      	ldr	r0, [sp, #8]
 800c34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34e:	f000 fbe1 	bl	800cb14 <__mcmp>
 800c352:	462a      	mov	r2, r5
 800c354:	9004      	str	r0, [sp, #16]
 800c356:	4621      	mov	r1, r4
 800c358:	4648      	mov	r0, r9
 800c35a:	f000 fbf7 	bl	800cb4c <__mdiff>
 800c35e:	68c2      	ldr	r2, [r0, #12]
 800c360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c362:	4606      	mov	r6, r0
 800c364:	bb02      	cbnz	r2, 800c3a8 <_dtoa_r+0xa40>
 800c366:	4601      	mov	r1, r0
 800c368:	9802      	ldr	r0, [sp, #8]
 800c36a:	f000 fbd3 	bl	800cb14 <__mcmp>
 800c36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c370:	4602      	mov	r2, r0
 800c372:	4631      	mov	r1, r6
 800c374:	4648      	mov	r0, r9
 800c376:	920c      	str	r2, [sp, #48]	@ 0x30
 800c378:	9309      	str	r3, [sp, #36]	@ 0x24
 800c37a:	f000 f94f 	bl	800c61c <_Bfree>
 800c37e:	9b07      	ldr	r3, [sp, #28]
 800c380:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c382:	9e00      	ldr	r6, [sp, #0]
 800c384:	ea42 0103 	orr.w	r1, r2, r3
 800c388:	9b06      	ldr	r3, [sp, #24]
 800c38a:	4319      	orrs	r1, r3
 800c38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38e:	d10d      	bne.n	800c3ac <_dtoa_r+0xa44>
 800c390:	2b39      	cmp	r3, #57	@ 0x39
 800c392:	d027      	beq.n	800c3e4 <_dtoa_r+0xa7c>
 800c394:	9a04      	ldr	r2, [sp, #16]
 800c396:	2a00      	cmp	r2, #0
 800c398:	dd01      	ble.n	800c39e <_dtoa_r+0xa36>
 800c39a:	9b03      	ldr	r3, [sp, #12]
 800c39c:	3331      	adds	r3, #49	@ 0x31
 800c39e:	f88b 3000 	strb.w	r3, [fp]
 800c3a2:	e52e      	b.n	800be02 <_dtoa_r+0x49a>
 800c3a4:	4628      	mov	r0, r5
 800c3a6:	e7b9      	b.n	800c31c <_dtoa_r+0x9b4>
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	e7e2      	b.n	800c372 <_dtoa_r+0xa0a>
 800c3ac:	9904      	ldr	r1, [sp, #16]
 800c3ae:	2900      	cmp	r1, #0
 800c3b0:	db04      	blt.n	800c3bc <_dtoa_r+0xa54>
 800c3b2:	9807      	ldr	r0, [sp, #28]
 800c3b4:	4301      	orrs	r1, r0
 800c3b6:	9806      	ldr	r0, [sp, #24]
 800c3b8:	4301      	orrs	r1, r0
 800c3ba:	d120      	bne.n	800c3fe <_dtoa_r+0xa96>
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	ddee      	ble.n	800c39e <_dtoa_r+0xa36>
 800c3c0:	9902      	ldr	r1, [sp, #8]
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	4648      	mov	r0, r9
 800c3c8:	f000 fb38 	bl	800ca3c <__lshift>
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	9002      	str	r0, [sp, #8]
 800c3d0:	f000 fba0 	bl	800cb14 <__mcmp>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	9b00      	ldr	r3, [sp, #0]
 800c3d8:	dc02      	bgt.n	800c3e0 <_dtoa_r+0xa78>
 800c3da:	d1e0      	bne.n	800c39e <_dtoa_r+0xa36>
 800c3dc:	07da      	lsls	r2, r3, #31
 800c3de:	d5de      	bpl.n	800c39e <_dtoa_r+0xa36>
 800c3e0:	2b39      	cmp	r3, #57	@ 0x39
 800c3e2:	d1da      	bne.n	800c39a <_dtoa_r+0xa32>
 800c3e4:	2339      	movs	r3, #57	@ 0x39
 800c3e6:	f88b 3000 	strb.w	r3, [fp]
 800c3ea:	4633      	mov	r3, r6
 800c3ec:	461e      	mov	r6, r3
 800c3ee:	3b01      	subs	r3, #1
 800c3f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3f4:	2a39      	cmp	r2, #57	@ 0x39
 800c3f6:	d04e      	beq.n	800c496 <_dtoa_r+0xb2e>
 800c3f8:	3201      	adds	r2, #1
 800c3fa:	701a      	strb	r2, [r3, #0]
 800c3fc:	e501      	b.n	800be02 <_dtoa_r+0x49a>
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	dd03      	ble.n	800c40a <_dtoa_r+0xaa2>
 800c402:	2b39      	cmp	r3, #57	@ 0x39
 800c404:	d0ee      	beq.n	800c3e4 <_dtoa_r+0xa7c>
 800c406:	3301      	adds	r3, #1
 800c408:	e7c9      	b.n	800c39e <_dtoa_r+0xa36>
 800c40a:	9a00      	ldr	r2, [sp, #0]
 800c40c:	9908      	ldr	r1, [sp, #32]
 800c40e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c412:	428a      	cmp	r2, r1
 800c414:	d028      	beq.n	800c468 <_dtoa_r+0xb00>
 800c416:	9902      	ldr	r1, [sp, #8]
 800c418:	2300      	movs	r3, #0
 800c41a:	220a      	movs	r2, #10
 800c41c:	4648      	mov	r0, r9
 800c41e:	f000 f91f 	bl	800c660 <__multadd>
 800c422:	42af      	cmp	r7, r5
 800c424:	9002      	str	r0, [sp, #8]
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	f04f 020a 	mov.w	r2, #10
 800c42e:	4639      	mov	r1, r7
 800c430:	4648      	mov	r0, r9
 800c432:	d107      	bne.n	800c444 <_dtoa_r+0xadc>
 800c434:	f000 f914 	bl	800c660 <__multadd>
 800c438:	4607      	mov	r7, r0
 800c43a:	4605      	mov	r5, r0
 800c43c:	9b00      	ldr	r3, [sp, #0]
 800c43e:	3301      	adds	r3, #1
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	e777      	b.n	800c334 <_dtoa_r+0x9cc>
 800c444:	f000 f90c 	bl	800c660 <__multadd>
 800c448:	4629      	mov	r1, r5
 800c44a:	4607      	mov	r7, r0
 800c44c:	2300      	movs	r3, #0
 800c44e:	220a      	movs	r2, #10
 800c450:	4648      	mov	r0, r9
 800c452:	f000 f905 	bl	800c660 <__multadd>
 800c456:	4605      	mov	r5, r0
 800c458:	e7f0      	b.n	800c43c <_dtoa_r+0xad4>
 800c45a:	f1bb 0f00 	cmp.w	fp, #0
 800c45e:	bfcc      	ite	gt
 800c460:	465e      	movgt	r6, fp
 800c462:	2601      	movle	r6, #1
 800c464:	4456      	add	r6, sl
 800c466:	2700      	movs	r7, #0
 800c468:	9902      	ldr	r1, [sp, #8]
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	2201      	movs	r2, #1
 800c46e:	4648      	mov	r0, r9
 800c470:	f000 fae4 	bl	800ca3c <__lshift>
 800c474:	4621      	mov	r1, r4
 800c476:	9002      	str	r0, [sp, #8]
 800c478:	f000 fb4c 	bl	800cb14 <__mcmp>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	dcb4      	bgt.n	800c3ea <_dtoa_r+0xa82>
 800c480:	d102      	bne.n	800c488 <_dtoa_r+0xb20>
 800c482:	9b00      	ldr	r3, [sp, #0]
 800c484:	07db      	lsls	r3, r3, #31
 800c486:	d4b0      	bmi.n	800c3ea <_dtoa_r+0xa82>
 800c488:	4633      	mov	r3, r6
 800c48a:	461e      	mov	r6, r3
 800c48c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c490:	2a30      	cmp	r2, #48	@ 0x30
 800c492:	d0fa      	beq.n	800c48a <_dtoa_r+0xb22>
 800c494:	e4b5      	b.n	800be02 <_dtoa_r+0x49a>
 800c496:	459a      	cmp	sl, r3
 800c498:	d1a8      	bne.n	800c3ec <_dtoa_r+0xa84>
 800c49a:	2331      	movs	r3, #49	@ 0x31
 800c49c:	f108 0801 	add.w	r8, r8, #1
 800c4a0:	f88a 3000 	strb.w	r3, [sl]
 800c4a4:	e4ad      	b.n	800be02 <_dtoa_r+0x49a>
 800c4a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c4a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c504 <_dtoa_r+0xb9c>
 800c4ac:	b11b      	cbz	r3, 800c4b6 <_dtoa_r+0xb4e>
 800c4ae:	f10a 0308 	add.w	r3, sl, #8
 800c4b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	b017      	add	sp, #92	@ 0x5c
 800c4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4be:	9b07      	ldr	r3, [sp, #28]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	f77f ae2e 	ble.w	800c122 <_dtoa_r+0x7ba>
 800c4c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4c8:	9308      	str	r3, [sp, #32]
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	e64d      	b.n	800c16a <_dtoa_r+0x802>
 800c4ce:	f1bb 0f00 	cmp.w	fp, #0
 800c4d2:	f77f aed9 	ble.w	800c288 <_dtoa_r+0x920>
 800c4d6:	4656      	mov	r6, sl
 800c4d8:	9802      	ldr	r0, [sp, #8]
 800c4da:	4621      	mov	r1, r4
 800c4dc:	f7ff f9ba 	bl	800b854 <quorem>
 800c4e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c4e4:	f806 3b01 	strb.w	r3, [r6], #1
 800c4e8:	eba6 020a 	sub.w	r2, r6, sl
 800c4ec:	4593      	cmp	fp, r2
 800c4ee:	ddb4      	ble.n	800c45a <_dtoa_r+0xaf2>
 800c4f0:	9902      	ldr	r1, [sp, #8]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	220a      	movs	r2, #10
 800c4f6:	4648      	mov	r0, r9
 800c4f8:	f000 f8b2 	bl	800c660 <__multadd>
 800c4fc:	9002      	str	r0, [sp, #8]
 800c4fe:	e7eb      	b.n	800c4d8 <_dtoa_r+0xb70>
 800c500:	0800ee0d 	.word	0x0800ee0d
 800c504:	0800ed91 	.word	0x0800ed91

0800c508 <_free_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4605      	mov	r5, r0
 800c50c:	2900      	cmp	r1, #0
 800c50e:	d041      	beq.n	800c594 <_free_r+0x8c>
 800c510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c514:	1f0c      	subs	r4, r1, #4
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfb8      	it	lt
 800c51a:	18e4      	addlt	r4, r4, r3
 800c51c:	f7fe f868 	bl	800a5f0 <__malloc_lock>
 800c520:	4a1d      	ldr	r2, [pc, #116]	@ (800c598 <_free_r+0x90>)
 800c522:	6813      	ldr	r3, [r2, #0]
 800c524:	b933      	cbnz	r3, 800c534 <_free_r+0x2c>
 800c526:	6063      	str	r3, [r4, #4]
 800c528:	6014      	str	r4, [r2, #0]
 800c52a:	4628      	mov	r0, r5
 800c52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c530:	f7fe b864 	b.w	800a5fc <__malloc_unlock>
 800c534:	42a3      	cmp	r3, r4
 800c536:	d908      	bls.n	800c54a <_free_r+0x42>
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	1821      	adds	r1, r4, r0
 800c53c:	428b      	cmp	r3, r1
 800c53e:	bf01      	itttt	eq
 800c540:	6819      	ldreq	r1, [r3, #0]
 800c542:	685b      	ldreq	r3, [r3, #4]
 800c544:	1809      	addeq	r1, r1, r0
 800c546:	6021      	streq	r1, [r4, #0]
 800c548:	e7ed      	b.n	800c526 <_free_r+0x1e>
 800c54a:	461a      	mov	r2, r3
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	b10b      	cbz	r3, 800c554 <_free_r+0x4c>
 800c550:	42a3      	cmp	r3, r4
 800c552:	d9fa      	bls.n	800c54a <_free_r+0x42>
 800c554:	6811      	ldr	r1, [r2, #0]
 800c556:	1850      	adds	r0, r2, r1
 800c558:	42a0      	cmp	r0, r4
 800c55a:	d10b      	bne.n	800c574 <_free_r+0x6c>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	4401      	add	r1, r0
 800c560:	1850      	adds	r0, r2, r1
 800c562:	4283      	cmp	r3, r0
 800c564:	6011      	str	r1, [r2, #0]
 800c566:	d1e0      	bne.n	800c52a <_free_r+0x22>
 800c568:	6818      	ldr	r0, [r3, #0]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	6053      	str	r3, [r2, #4]
 800c56e:	4408      	add	r0, r1
 800c570:	6010      	str	r0, [r2, #0]
 800c572:	e7da      	b.n	800c52a <_free_r+0x22>
 800c574:	d902      	bls.n	800c57c <_free_r+0x74>
 800c576:	230c      	movs	r3, #12
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	e7d6      	b.n	800c52a <_free_r+0x22>
 800c57c:	6820      	ldr	r0, [r4, #0]
 800c57e:	1821      	adds	r1, r4, r0
 800c580:	428b      	cmp	r3, r1
 800c582:	bf04      	itt	eq
 800c584:	6819      	ldreq	r1, [r3, #0]
 800c586:	685b      	ldreq	r3, [r3, #4]
 800c588:	6063      	str	r3, [r4, #4]
 800c58a:	bf04      	itt	eq
 800c58c:	1809      	addeq	r1, r1, r0
 800c58e:	6021      	streq	r1, [r4, #0]
 800c590:	6054      	str	r4, [r2, #4]
 800c592:	e7ca      	b.n	800c52a <_free_r+0x22>
 800c594:	bd38      	pop	{r3, r4, r5, pc}
 800c596:	bf00      	nop
 800c598:	20001ecc 	.word	0x20001ecc

0800c59c <_Balloc>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	69c6      	ldr	r6, [r0, #28]
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	460d      	mov	r5, r1
 800c5a4:	b976      	cbnz	r6, 800c5c4 <_Balloc+0x28>
 800c5a6:	2010      	movs	r0, #16
 800c5a8:	f7fd ff70 	bl	800a48c <malloc>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	61e0      	str	r0, [r4, #28]
 800c5b0:	b920      	cbnz	r0, 800c5bc <_Balloc+0x20>
 800c5b2:	4b18      	ldr	r3, [pc, #96]	@ (800c614 <_Balloc+0x78>)
 800c5b4:	4818      	ldr	r0, [pc, #96]	@ (800c618 <_Balloc+0x7c>)
 800c5b6:	216b      	movs	r1, #107	@ 0x6b
 800c5b8:	f001 ff2e 	bl	800e418 <__assert_func>
 800c5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5c0:	6006      	str	r6, [r0, #0]
 800c5c2:	60c6      	str	r6, [r0, #12]
 800c5c4:	69e6      	ldr	r6, [r4, #28]
 800c5c6:	68f3      	ldr	r3, [r6, #12]
 800c5c8:	b183      	cbz	r3, 800c5ec <_Balloc+0x50>
 800c5ca:	69e3      	ldr	r3, [r4, #28]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5d2:	b9b8      	cbnz	r0, 800c604 <_Balloc+0x68>
 800c5d4:	2101      	movs	r1, #1
 800c5d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c5da:	1d72      	adds	r2, r6, #5
 800c5dc:	0092      	lsls	r2, r2, #2
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f001 ff38 	bl	800e454 <_calloc_r>
 800c5e4:	b160      	cbz	r0, 800c600 <_Balloc+0x64>
 800c5e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5ea:	e00e      	b.n	800c60a <_Balloc+0x6e>
 800c5ec:	2221      	movs	r2, #33	@ 0x21
 800c5ee:	2104      	movs	r1, #4
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f001 ff2f 	bl	800e454 <_calloc_r>
 800c5f6:	69e3      	ldr	r3, [r4, #28]
 800c5f8:	60f0      	str	r0, [r6, #12]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1e4      	bne.n	800c5ca <_Balloc+0x2e>
 800c600:	2000      	movs	r0, #0
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	6802      	ldr	r2, [r0, #0]
 800c606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c60a:	2300      	movs	r3, #0
 800c60c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c610:	e7f7      	b.n	800c602 <_Balloc+0x66>
 800c612:	bf00      	nop
 800c614:	0800ed9e 	.word	0x0800ed9e
 800c618:	0800ee1e 	.word	0x0800ee1e

0800c61c <_Bfree>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	69c6      	ldr	r6, [r0, #28]
 800c620:	4605      	mov	r5, r0
 800c622:	460c      	mov	r4, r1
 800c624:	b976      	cbnz	r6, 800c644 <_Bfree+0x28>
 800c626:	2010      	movs	r0, #16
 800c628:	f7fd ff30 	bl	800a48c <malloc>
 800c62c:	4602      	mov	r2, r0
 800c62e:	61e8      	str	r0, [r5, #28]
 800c630:	b920      	cbnz	r0, 800c63c <_Bfree+0x20>
 800c632:	4b09      	ldr	r3, [pc, #36]	@ (800c658 <_Bfree+0x3c>)
 800c634:	4809      	ldr	r0, [pc, #36]	@ (800c65c <_Bfree+0x40>)
 800c636:	218f      	movs	r1, #143	@ 0x8f
 800c638:	f001 feee 	bl	800e418 <__assert_func>
 800c63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c640:	6006      	str	r6, [r0, #0]
 800c642:	60c6      	str	r6, [r0, #12]
 800c644:	b13c      	cbz	r4, 800c656 <_Bfree+0x3a>
 800c646:	69eb      	ldr	r3, [r5, #28]
 800c648:	6862      	ldr	r2, [r4, #4]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c650:	6021      	str	r1, [r4, #0]
 800c652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c656:	bd70      	pop	{r4, r5, r6, pc}
 800c658:	0800ed9e 	.word	0x0800ed9e
 800c65c:	0800ee1e 	.word	0x0800ee1e

0800c660 <__multadd>:
 800c660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c664:	690d      	ldr	r5, [r1, #16]
 800c666:	4607      	mov	r7, r0
 800c668:	460c      	mov	r4, r1
 800c66a:	461e      	mov	r6, r3
 800c66c:	f101 0c14 	add.w	ip, r1, #20
 800c670:	2000      	movs	r0, #0
 800c672:	f8dc 3000 	ldr.w	r3, [ip]
 800c676:	b299      	uxth	r1, r3
 800c678:	fb02 6101 	mla	r1, r2, r1, r6
 800c67c:	0c1e      	lsrs	r6, r3, #16
 800c67e:	0c0b      	lsrs	r3, r1, #16
 800c680:	fb02 3306 	mla	r3, r2, r6, r3
 800c684:	b289      	uxth	r1, r1
 800c686:	3001      	adds	r0, #1
 800c688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c68c:	4285      	cmp	r5, r0
 800c68e:	f84c 1b04 	str.w	r1, [ip], #4
 800c692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c696:	dcec      	bgt.n	800c672 <__multadd+0x12>
 800c698:	b30e      	cbz	r6, 800c6de <__multadd+0x7e>
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	42ab      	cmp	r3, r5
 800c69e:	dc19      	bgt.n	800c6d4 <__multadd+0x74>
 800c6a0:	6861      	ldr	r1, [r4, #4]
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	3101      	adds	r1, #1
 800c6a6:	f7ff ff79 	bl	800c59c <_Balloc>
 800c6aa:	4680      	mov	r8, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <__multadd+0x5a>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c6e4 <__multadd+0x84>)
 800c6b2:	480d      	ldr	r0, [pc, #52]	@ (800c6e8 <__multadd+0x88>)
 800c6b4:	21ba      	movs	r1, #186	@ 0xba
 800c6b6:	f001 feaf 	bl	800e418 <__assert_func>
 800c6ba:	6922      	ldr	r2, [r4, #16]
 800c6bc:	3202      	adds	r2, #2
 800c6be:	f104 010c 	add.w	r1, r4, #12
 800c6c2:	0092      	lsls	r2, r2, #2
 800c6c4:	300c      	adds	r0, #12
 800c6c6:	f001 fe8f 	bl	800e3e8 <memcpy>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f7ff ffa5 	bl	800c61c <_Bfree>
 800c6d2:	4644      	mov	r4, r8
 800c6d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6d8:	3501      	adds	r5, #1
 800c6da:	615e      	str	r6, [r3, #20]
 800c6dc:	6125      	str	r5, [r4, #16]
 800c6de:	4620      	mov	r0, r4
 800c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e4:	0800ee0d 	.word	0x0800ee0d
 800c6e8:	0800ee1e 	.word	0x0800ee1e

0800c6ec <__s2b>:
 800c6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	4615      	mov	r5, r2
 800c6f4:	461f      	mov	r7, r3
 800c6f6:	2209      	movs	r2, #9
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c700:	2100      	movs	r1, #0
 800c702:	2201      	movs	r2, #1
 800c704:	429a      	cmp	r2, r3
 800c706:	db09      	blt.n	800c71c <__s2b+0x30>
 800c708:	4630      	mov	r0, r6
 800c70a:	f7ff ff47 	bl	800c59c <_Balloc>
 800c70e:	b940      	cbnz	r0, 800c722 <__s2b+0x36>
 800c710:	4602      	mov	r2, r0
 800c712:	4b19      	ldr	r3, [pc, #100]	@ (800c778 <__s2b+0x8c>)
 800c714:	4819      	ldr	r0, [pc, #100]	@ (800c77c <__s2b+0x90>)
 800c716:	21d3      	movs	r1, #211	@ 0xd3
 800c718:	f001 fe7e 	bl	800e418 <__assert_func>
 800c71c:	0052      	lsls	r2, r2, #1
 800c71e:	3101      	adds	r1, #1
 800c720:	e7f0      	b.n	800c704 <__s2b+0x18>
 800c722:	9b08      	ldr	r3, [sp, #32]
 800c724:	6143      	str	r3, [r0, #20]
 800c726:	2d09      	cmp	r5, #9
 800c728:	f04f 0301 	mov.w	r3, #1
 800c72c:	6103      	str	r3, [r0, #16]
 800c72e:	dd16      	ble.n	800c75e <__s2b+0x72>
 800c730:	f104 0909 	add.w	r9, r4, #9
 800c734:	46c8      	mov	r8, r9
 800c736:	442c      	add	r4, r5
 800c738:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c73c:	4601      	mov	r1, r0
 800c73e:	3b30      	subs	r3, #48	@ 0x30
 800c740:	220a      	movs	r2, #10
 800c742:	4630      	mov	r0, r6
 800c744:	f7ff ff8c 	bl	800c660 <__multadd>
 800c748:	45a0      	cmp	r8, r4
 800c74a:	d1f5      	bne.n	800c738 <__s2b+0x4c>
 800c74c:	f1a5 0408 	sub.w	r4, r5, #8
 800c750:	444c      	add	r4, r9
 800c752:	1b2d      	subs	r5, r5, r4
 800c754:	1963      	adds	r3, r4, r5
 800c756:	42bb      	cmp	r3, r7
 800c758:	db04      	blt.n	800c764 <__s2b+0x78>
 800c75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75e:	340a      	adds	r4, #10
 800c760:	2509      	movs	r5, #9
 800c762:	e7f6      	b.n	800c752 <__s2b+0x66>
 800c764:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c768:	4601      	mov	r1, r0
 800c76a:	3b30      	subs	r3, #48	@ 0x30
 800c76c:	220a      	movs	r2, #10
 800c76e:	4630      	mov	r0, r6
 800c770:	f7ff ff76 	bl	800c660 <__multadd>
 800c774:	e7ee      	b.n	800c754 <__s2b+0x68>
 800c776:	bf00      	nop
 800c778:	0800ee0d 	.word	0x0800ee0d
 800c77c:	0800ee1e 	.word	0x0800ee1e

0800c780 <__hi0bits>:
 800c780:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c784:	4603      	mov	r3, r0
 800c786:	bf36      	itet	cc
 800c788:	0403      	lslcc	r3, r0, #16
 800c78a:	2000      	movcs	r0, #0
 800c78c:	2010      	movcc	r0, #16
 800c78e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c792:	bf3c      	itt	cc
 800c794:	021b      	lslcc	r3, r3, #8
 800c796:	3008      	addcc	r0, #8
 800c798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c79c:	bf3c      	itt	cc
 800c79e:	011b      	lslcc	r3, r3, #4
 800c7a0:	3004      	addcc	r0, #4
 800c7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a6:	bf3c      	itt	cc
 800c7a8:	009b      	lslcc	r3, r3, #2
 800c7aa:	3002      	addcc	r0, #2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	db05      	blt.n	800c7bc <__hi0bits+0x3c>
 800c7b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7b4:	f100 0001 	add.w	r0, r0, #1
 800c7b8:	bf08      	it	eq
 800c7ba:	2020      	moveq	r0, #32
 800c7bc:	4770      	bx	lr

0800c7be <__lo0bits>:
 800c7be:	6803      	ldr	r3, [r0, #0]
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	f013 0007 	ands.w	r0, r3, #7
 800c7c6:	d00b      	beq.n	800c7e0 <__lo0bits+0x22>
 800c7c8:	07d9      	lsls	r1, r3, #31
 800c7ca:	d421      	bmi.n	800c810 <__lo0bits+0x52>
 800c7cc:	0798      	lsls	r0, r3, #30
 800c7ce:	bf49      	itett	mi
 800c7d0:	085b      	lsrmi	r3, r3, #1
 800c7d2:	089b      	lsrpl	r3, r3, #2
 800c7d4:	2001      	movmi	r0, #1
 800c7d6:	6013      	strmi	r3, [r2, #0]
 800c7d8:	bf5c      	itt	pl
 800c7da:	6013      	strpl	r3, [r2, #0]
 800c7dc:	2002      	movpl	r0, #2
 800c7de:	4770      	bx	lr
 800c7e0:	b299      	uxth	r1, r3
 800c7e2:	b909      	cbnz	r1, 800c7e8 <__lo0bits+0x2a>
 800c7e4:	0c1b      	lsrs	r3, r3, #16
 800c7e6:	2010      	movs	r0, #16
 800c7e8:	b2d9      	uxtb	r1, r3
 800c7ea:	b909      	cbnz	r1, 800c7f0 <__lo0bits+0x32>
 800c7ec:	3008      	adds	r0, #8
 800c7ee:	0a1b      	lsrs	r3, r3, #8
 800c7f0:	0719      	lsls	r1, r3, #28
 800c7f2:	bf04      	itt	eq
 800c7f4:	091b      	lsreq	r3, r3, #4
 800c7f6:	3004      	addeq	r0, #4
 800c7f8:	0799      	lsls	r1, r3, #30
 800c7fa:	bf04      	itt	eq
 800c7fc:	089b      	lsreq	r3, r3, #2
 800c7fe:	3002      	addeq	r0, #2
 800c800:	07d9      	lsls	r1, r3, #31
 800c802:	d403      	bmi.n	800c80c <__lo0bits+0x4e>
 800c804:	085b      	lsrs	r3, r3, #1
 800c806:	f100 0001 	add.w	r0, r0, #1
 800c80a:	d003      	beq.n	800c814 <__lo0bits+0x56>
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	4770      	bx	lr
 800c810:	2000      	movs	r0, #0
 800c812:	4770      	bx	lr
 800c814:	2020      	movs	r0, #32
 800c816:	4770      	bx	lr

0800c818 <__i2b>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	460c      	mov	r4, r1
 800c81c:	2101      	movs	r1, #1
 800c81e:	f7ff febd 	bl	800c59c <_Balloc>
 800c822:	4602      	mov	r2, r0
 800c824:	b928      	cbnz	r0, 800c832 <__i2b+0x1a>
 800c826:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <__i2b+0x24>)
 800c828:	4805      	ldr	r0, [pc, #20]	@ (800c840 <__i2b+0x28>)
 800c82a:	f240 1145 	movw	r1, #325	@ 0x145
 800c82e:	f001 fdf3 	bl	800e418 <__assert_func>
 800c832:	2301      	movs	r3, #1
 800c834:	6144      	str	r4, [r0, #20]
 800c836:	6103      	str	r3, [r0, #16]
 800c838:	bd10      	pop	{r4, pc}
 800c83a:	bf00      	nop
 800c83c:	0800ee0d 	.word	0x0800ee0d
 800c840:	0800ee1e 	.word	0x0800ee1e

0800c844 <__multiply>:
 800c844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c848:	4617      	mov	r7, r2
 800c84a:	690a      	ldr	r2, [r1, #16]
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	429a      	cmp	r2, r3
 800c850:	bfa8      	it	ge
 800c852:	463b      	movge	r3, r7
 800c854:	4689      	mov	r9, r1
 800c856:	bfa4      	itt	ge
 800c858:	460f      	movge	r7, r1
 800c85a:	4699      	movge	r9, r3
 800c85c:	693d      	ldr	r5, [r7, #16]
 800c85e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	eb05 060a 	add.w	r6, r5, sl
 800c86a:	42b3      	cmp	r3, r6
 800c86c:	b085      	sub	sp, #20
 800c86e:	bfb8      	it	lt
 800c870:	3101      	addlt	r1, #1
 800c872:	f7ff fe93 	bl	800c59c <_Balloc>
 800c876:	b930      	cbnz	r0, 800c886 <__multiply+0x42>
 800c878:	4602      	mov	r2, r0
 800c87a:	4b41      	ldr	r3, [pc, #260]	@ (800c980 <__multiply+0x13c>)
 800c87c:	4841      	ldr	r0, [pc, #260]	@ (800c984 <__multiply+0x140>)
 800c87e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c882:	f001 fdc9 	bl	800e418 <__assert_func>
 800c886:	f100 0414 	add.w	r4, r0, #20
 800c88a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c88e:	4623      	mov	r3, r4
 800c890:	2200      	movs	r2, #0
 800c892:	4573      	cmp	r3, lr
 800c894:	d320      	bcc.n	800c8d8 <__multiply+0x94>
 800c896:	f107 0814 	add.w	r8, r7, #20
 800c89a:	f109 0114 	add.w	r1, r9, #20
 800c89e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c8a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c8a6:	9302      	str	r3, [sp, #8]
 800c8a8:	1beb      	subs	r3, r5, r7
 800c8aa:	3b15      	subs	r3, #21
 800c8ac:	f023 0303 	bic.w	r3, r3, #3
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	3715      	adds	r7, #21
 800c8b4:	42bd      	cmp	r5, r7
 800c8b6:	bf38      	it	cc
 800c8b8:	2304      	movcc	r3, #4
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	9b02      	ldr	r3, [sp, #8]
 800c8be:	9103      	str	r1, [sp, #12]
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	d80c      	bhi.n	800c8de <__multiply+0x9a>
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	dd03      	ble.n	800c8d0 <__multiply+0x8c>
 800c8c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d055      	beq.n	800c97c <__multiply+0x138>
 800c8d0:	6106      	str	r6, [r0, #16]
 800c8d2:	b005      	add	sp, #20
 800c8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d8:	f843 2b04 	str.w	r2, [r3], #4
 800c8dc:	e7d9      	b.n	800c892 <__multiply+0x4e>
 800c8de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c8e2:	f1ba 0f00 	cmp.w	sl, #0
 800c8e6:	d01f      	beq.n	800c928 <__multiply+0xe4>
 800c8e8:	46c4      	mov	ip, r8
 800c8ea:	46a1      	mov	r9, r4
 800c8ec:	2700      	movs	r7, #0
 800c8ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c8f2:	f8d9 3000 	ldr.w	r3, [r9]
 800c8f6:	fa1f fb82 	uxth.w	fp, r2
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c900:	443b      	add	r3, r7
 800c902:	f8d9 7000 	ldr.w	r7, [r9]
 800c906:	0c12      	lsrs	r2, r2, #16
 800c908:	0c3f      	lsrs	r7, r7, #16
 800c90a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c90e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c912:	b29b      	uxth	r3, r3
 800c914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c918:	4565      	cmp	r5, ip
 800c91a:	f849 3b04 	str.w	r3, [r9], #4
 800c91e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c922:	d8e4      	bhi.n	800c8ee <__multiply+0xaa>
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	50e7      	str	r7, [r4, r3]
 800c928:	9b03      	ldr	r3, [sp, #12]
 800c92a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c92e:	3104      	adds	r1, #4
 800c930:	f1b9 0f00 	cmp.w	r9, #0
 800c934:	d020      	beq.n	800c978 <__multiply+0x134>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	4647      	mov	r7, r8
 800c93a:	46a4      	mov	ip, r4
 800c93c:	f04f 0a00 	mov.w	sl, #0
 800c940:	f8b7 b000 	ldrh.w	fp, [r7]
 800c944:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c948:	fb09 220b 	mla	r2, r9, fp, r2
 800c94c:	4452      	add	r2, sl
 800c94e:	b29b      	uxth	r3, r3
 800c950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c954:	f84c 3b04 	str.w	r3, [ip], #4
 800c958:	f857 3b04 	ldr.w	r3, [r7], #4
 800c95c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c960:	f8bc 3000 	ldrh.w	r3, [ip]
 800c964:	fb09 330a 	mla	r3, r9, sl, r3
 800c968:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c96c:	42bd      	cmp	r5, r7
 800c96e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c972:	d8e5      	bhi.n	800c940 <__multiply+0xfc>
 800c974:	9a01      	ldr	r2, [sp, #4]
 800c976:	50a3      	str	r3, [r4, r2]
 800c978:	3404      	adds	r4, #4
 800c97a:	e79f      	b.n	800c8bc <__multiply+0x78>
 800c97c:	3e01      	subs	r6, #1
 800c97e:	e7a1      	b.n	800c8c4 <__multiply+0x80>
 800c980:	0800ee0d 	.word	0x0800ee0d
 800c984:	0800ee1e 	.word	0x0800ee1e

0800c988 <__pow5mult>:
 800c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c98c:	4615      	mov	r5, r2
 800c98e:	f012 0203 	ands.w	r2, r2, #3
 800c992:	4607      	mov	r7, r0
 800c994:	460e      	mov	r6, r1
 800c996:	d007      	beq.n	800c9a8 <__pow5mult+0x20>
 800c998:	4c25      	ldr	r4, [pc, #148]	@ (800ca30 <__pow5mult+0xa8>)
 800c99a:	3a01      	subs	r2, #1
 800c99c:	2300      	movs	r3, #0
 800c99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9a2:	f7ff fe5d 	bl	800c660 <__multadd>
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	10ad      	asrs	r5, r5, #2
 800c9aa:	d03d      	beq.n	800ca28 <__pow5mult+0xa0>
 800c9ac:	69fc      	ldr	r4, [r7, #28]
 800c9ae:	b97c      	cbnz	r4, 800c9d0 <__pow5mult+0x48>
 800c9b0:	2010      	movs	r0, #16
 800c9b2:	f7fd fd6b 	bl	800a48c <malloc>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	61f8      	str	r0, [r7, #28]
 800c9ba:	b928      	cbnz	r0, 800c9c8 <__pow5mult+0x40>
 800c9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800ca34 <__pow5mult+0xac>)
 800c9be:	481e      	ldr	r0, [pc, #120]	@ (800ca38 <__pow5mult+0xb0>)
 800c9c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9c4:	f001 fd28 	bl	800e418 <__assert_func>
 800c9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9cc:	6004      	str	r4, [r0, #0]
 800c9ce:	60c4      	str	r4, [r0, #12]
 800c9d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9d8:	b94c      	cbnz	r4, 800c9ee <__pow5mult+0x66>
 800c9da:	f240 2171 	movw	r1, #625	@ 0x271
 800c9de:	4638      	mov	r0, r7
 800c9e0:	f7ff ff1a 	bl	800c818 <__i2b>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	6003      	str	r3, [r0, #0]
 800c9ee:	f04f 0900 	mov.w	r9, #0
 800c9f2:	07eb      	lsls	r3, r5, #31
 800c9f4:	d50a      	bpl.n	800ca0c <__pow5mult+0x84>
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4622      	mov	r2, r4
 800c9fa:	4638      	mov	r0, r7
 800c9fc:	f7ff ff22 	bl	800c844 <__multiply>
 800ca00:	4631      	mov	r1, r6
 800ca02:	4680      	mov	r8, r0
 800ca04:	4638      	mov	r0, r7
 800ca06:	f7ff fe09 	bl	800c61c <_Bfree>
 800ca0a:	4646      	mov	r6, r8
 800ca0c:	106d      	asrs	r5, r5, #1
 800ca0e:	d00b      	beq.n	800ca28 <__pow5mult+0xa0>
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	b938      	cbnz	r0, 800ca24 <__pow5mult+0x9c>
 800ca14:	4622      	mov	r2, r4
 800ca16:	4621      	mov	r1, r4
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f7ff ff13 	bl	800c844 <__multiply>
 800ca1e:	6020      	str	r0, [r4, #0]
 800ca20:	f8c0 9000 	str.w	r9, [r0]
 800ca24:	4604      	mov	r4, r0
 800ca26:	e7e4      	b.n	800c9f2 <__pow5mult+0x6a>
 800ca28:	4630      	mov	r0, r6
 800ca2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2e:	bf00      	nop
 800ca30:	0800ef30 	.word	0x0800ef30
 800ca34:	0800ed9e 	.word	0x0800ed9e
 800ca38:	0800ee1e 	.word	0x0800ee1e

0800ca3c <__lshift>:
 800ca3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	460c      	mov	r4, r1
 800ca42:	6849      	ldr	r1, [r1, #4]
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	4607      	mov	r7, r0
 800ca4e:	4691      	mov	r9, r2
 800ca50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca54:	f108 0601 	add.w	r6, r8, #1
 800ca58:	42b3      	cmp	r3, r6
 800ca5a:	db0b      	blt.n	800ca74 <__lshift+0x38>
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	f7ff fd9d 	bl	800c59c <_Balloc>
 800ca62:	4605      	mov	r5, r0
 800ca64:	b948      	cbnz	r0, 800ca7a <__lshift+0x3e>
 800ca66:	4602      	mov	r2, r0
 800ca68:	4b28      	ldr	r3, [pc, #160]	@ (800cb0c <__lshift+0xd0>)
 800ca6a:	4829      	ldr	r0, [pc, #164]	@ (800cb10 <__lshift+0xd4>)
 800ca6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca70:	f001 fcd2 	bl	800e418 <__assert_func>
 800ca74:	3101      	adds	r1, #1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	e7ee      	b.n	800ca58 <__lshift+0x1c>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	f100 0114 	add.w	r1, r0, #20
 800ca80:	f100 0210 	add.w	r2, r0, #16
 800ca84:	4618      	mov	r0, r3
 800ca86:	4553      	cmp	r3, sl
 800ca88:	db33      	blt.n	800caf2 <__lshift+0xb6>
 800ca8a:	6920      	ldr	r0, [r4, #16]
 800ca8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca90:	f104 0314 	add.w	r3, r4, #20
 800ca94:	f019 091f 	ands.w	r9, r9, #31
 800ca98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caa0:	d02b      	beq.n	800cafa <__lshift+0xbe>
 800caa2:	f1c9 0e20 	rsb	lr, r9, #32
 800caa6:	468a      	mov	sl, r1
 800caa8:	2200      	movs	r2, #0
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	fa00 f009 	lsl.w	r0, r0, r9
 800cab0:	4310      	orrs	r0, r2
 800cab2:	f84a 0b04 	str.w	r0, [sl], #4
 800cab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caba:	459c      	cmp	ip, r3
 800cabc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cac0:	d8f3      	bhi.n	800caaa <__lshift+0x6e>
 800cac2:	ebac 0304 	sub.w	r3, ip, r4
 800cac6:	3b15      	subs	r3, #21
 800cac8:	f023 0303 	bic.w	r3, r3, #3
 800cacc:	3304      	adds	r3, #4
 800cace:	f104 0015 	add.w	r0, r4, #21
 800cad2:	4560      	cmp	r0, ip
 800cad4:	bf88      	it	hi
 800cad6:	2304      	movhi	r3, #4
 800cad8:	50ca      	str	r2, [r1, r3]
 800cada:	b10a      	cbz	r2, 800cae0 <__lshift+0xa4>
 800cadc:	f108 0602 	add.w	r6, r8, #2
 800cae0:	3e01      	subs	r6, #1
 800cae2:	4638      	mov	r0, r7
 800cae4:	612e      	str	r6, [r5, #16]
 800cae6:	4621      	mov	r1, r4
 800cae8:	f7ff fd98 	bl	800c61c <_Bfree>
 800caec:	4628      	mov	r0, r5
 800caee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800caf6:	3301      	adds	r3, #1
 800caf8:	e7c5      	b.n	800ca86 <__lshift+0x4a>
 800cafa:	3904      	subs	r1, #4
 800cafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb00:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb04:	459c      	cmp	ip, r3
 800cb06:	d8f9      	bhi.n	800cafc <__lshift+0xc0>
 800cb08:	e7ea      	b.n	800cae0 <__lshift+0xa4>
 800cb0a:	bf00      	nop
 800cb0c:	0800ee0d 	.word	0x0800ee0d
 800cb10:	0800ee1e 	.word	0x0800ee1e

0800cb14 <__mcmp>:
 800cb14:	690a      	ldr	r2, [r1, #16]
 800cb16:	4603      	mov	r3, r0
 800cb18:	6900      	ldr	r0, [r0, #16]
 800cb1a:	1a80      	subs	r0, r0, r2
 800cb1c:	b530      	push	{r4, r5, lr}
 800cb1e:	d10e      	bne.n	800cb3e <__mcmp+0x2a>
 800cb20:	3314      	adds	r3, #20
 800cb22:	3114      	adds	r1, #20
 800cb24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb34:	4295      	cmp	r5, r2
 800cb36:	d003      	beq.n	800cb40 <__mcmp+0x2c>
 800cb38:	d205      	bcs.n	800cb46 <__mcmp+0x32>
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	bd30      	pop	{r4, r5, pc}
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d3f3      	bcc.n	800cb2c <__mcmp+0x18>
 800cb44:	e7fb      	b.n	800cb3e <__mcmp+0x2a>
 800cb46:	2001      	movs	r0, #1
 800cb48:	e7f9      	b.n	800cb3e <__mcmp+0x2a>
	...

0800cb4c <__mdiff>:
 800cb4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	4689      	mov	r9, r1
 800cb52:	4606      	mov	r6, r0
 800cb54:	4611      	mov	r1, r2
 800cb56:	4648      	mov	r0, r9
 800cb58:	4614      	mov	r4, r2
 800cb5a:	f7ff ffdb 	bl	800cb14 <__mcmp>
 800cb5e:	1e05      	subs	r5, r0, #0
 800cb60:	d112      	bne.n	800cb88 <__mdiff+0x3c>
 800cb62:	4629      	mov	r1, r5
 800cb64:	4630      	mov	r0, r6
 800cb66:	f7ff fd19 	bl	800c59c <_Balloc>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	b928      	cbnz	r0, 800cb7a <__mdiff+0x2e>
 800cb6e:	4b3f      	ldr	r3, [pc, #252]	@ (800cc6c <__mdiff+0x120>)
 800cb70:	f240 2137 	movw	r1, #567	@ 0x237
 800cb74:	483e      	ldr	r0, [pc, #248]	@ (800cc70 <__mdiff+0x124>)
 800cb76:	f001 fc4f 	bl	800e418 <__assert_func>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb80:	4610      	mov	r0, r2
 800cb82:	b003      	add	sp, #12
 800cb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb88:	bfbc      	itt	lt
 800cb8a:	464b      	movlt	r3, r9
 800cb8c:	46a1      	movlt	r9, r4
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cb94:	bfba      	itte	lt
 800cb96:	461c      	movlt	r4, r3
 800cb98:	2501      	movlt	r5, #1
 800cb9a:	2500      	movge	r5, #0
 800cb9c:	f7ff fcfe 	bl	800c59c <_Balloc>
 800cba0:	4602      	mov	r2, r0
 800cba2:	b918      	cbnz	r0, 800cbac <__mdiff+0x60>
 800cba4:	4b31      	ldr	r3, [pc, #196]	@ (800cc6c <__mdiff+0x120>)
 800cba6:	f240 2145 	movw	r1, #581	@ 0x245
 800cbaa:	e7e3      	b.n	800cb74 <__mdiff+0x28>
 800cbac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbb0:	6926      	ldr	r6, [r4, #16]
 800cbb2:	60c5      	str	r5, [r0, #12]
 800cbb4:	f109 0310 	add.w	r3, r9, #16
 800cbb8:	f109 0514 	add.w	r5, r9, #20
 800cbbc:	f104 0e14 	add.w	lr, r4, #20
 800cbc0:	f100 0b14 	add.w	fp, r0, #20
 800cbc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	46d9      	mov	r9, fp
 800cbd0:	f04f 0c00 	mov.w	ip, #0
 800cbd4:	9b01      	ldr	r3, [sp, #4]
 800cbd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbda:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	fa1f f38a 	uxth.w	r3, sl
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	b283      	uxth	r3, r0
 800cbe8:	1acb      	subs	r3, r1, r3
 800cbea:	0c00      	lsrs	r0, r0, #16
 800cbec:	4463      	add	r3, ip
 800cbee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cbf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cbfc:	4576      	cmp	r6, lr
 800cbfe:	f849 3b04 	str.w	r3, [r9], #4
 800cc02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc06:	d8e5      	bhi.n	800cbd4 <__mdiff+0x88>
 800cc08:	1b33      	subs	r3, r6, r4
 800cc0a:	3b15      	subs	r3, #21
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
 800cc10:	3415      	adds	r4, #21
 800cc12:	3304      	adds	r3, #4
 800cc14:	42a6      	cmp	r6, r4
 800cc16:	bf38      	it	cc
 800cc18:	2304      	movcc	r3, #4
 800cc1a:	441d      	add	r5, r3
 800cc1c:	445b      	add	r3, fp
 800cc1e:	461e      	mov	r6, r3
 800cc20:	462c      	mov	r4, r5
 800cc22:	4544      	cmp	r4, r8
 800cc24:	d30e      	bcc.n	800cc44 <__mdiff+0xf8>
 800cc26:	f108 0103 	add.w	r1, r8, #3
 800cc2a:	1b49      	subs	r1, r1, r5
 800cc2c:	f021 0103 	bic.w	r1, r1, #3
 800cc30:	3d03      	subs	r5, #3
 800cc32:	45a8      	cmp	r8, r5
 800cc34:	bf38      	it	cc
 800cc36:	2100      	movcc	r1, #0
 800cc38:	440b      	add	r3, r1
 800cc3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc3e:	b191      	cbz	r1, 800cc66 <__mdiff+0x11a>
 800cc40:	6117      	str	r7, [r2, #16]
 800cc42:	e79d      	b.n	800cb80 <__mdiff+0x34>
 800cc44:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc48:	46e6      	mov	lr, ip
 800cc4a:	0c08      	lsrs	r0, r1, #16
 800cc4c:	fa1c fc81 	uxtah	ip, ip, r1
 800cc50:	4471      	add	r1, lr
 800cc52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc56:	b289      	uxth	r1, r1
 800cc58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc5c:	f846 1b04 	str.w	r1, [r6], #4
 800cc60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc64:	e7dd      	b.n	800cc22 <__mdiff+0xd6>
 800cc66:	3f01      	subs	r7, #1
 800cc68:	e7e7      	b.n	800cc3a <__mdiff+0xee>
 800cc6a:	bf00      	nop
 800cc6c:	0800ee0d 	.word	0x0800ee0d
 800cc70:	0800ee1e 	.word	0x0800ee1e

0800cc74 <__ulp>:
 800cc74:	b082      	sub	sp, #8
 800cc76:	ed8d 0b00 	vstr	d0, [sp]
 800cc7a:	9a01      	ldr	r2, [sp, #4]
 800cc7c:	4b0f      	ldr	r3, [pc, #60]	@ (800ccbc <__ulp+0x48>)
 800cc7e:	4013      	ands	r3, r2
 800cc80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dc08      	bgt.n	800cc9a <__ulp+0x26>
 800cc88:	425b      	negs	r3, r3
 800cc8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800cc8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cc92:	da04      	bge.n	800cc9e <__ulp+0x2a>
 800cc94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cc98:	4113      	asrs	r3, r2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	e008      	b.n	800ccb0 <__ulp+0x3c>
 800cc9e:	f1a2 0314 	sub.w	r3, r2, #20
 800cca2:	2b1e      	cmp	r3, #30
 800cca4:	bfda      	itte	le
 800cca6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ccaa:	40da      	lsrle	r2, r3
 800ccac:	2201      	movgt	r2, #1
 800ccae:	2300      	movs	r3, #0
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	4610      	mov	r0, r2
 800ccb4:	ec41 0b10 	vmov	d0, r0, r1
 800ccb8:	b002      	add	sp, #8
 800ccba:	4770      	bx	lr
 800ccbc:	7ff00000 	.word	0x7ff00000

0800ccc0 <__b2d>:
 800ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc4:	6906      	ldr	r6, [r0, #16]
 800ccc6:	f100 0814 	add.w	r8, r0, #20
 800ccca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ccce:	1f37      	subs	r7, r6, #4
 800ccd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f7ff fd53 	bl	800c780 <__hi0bits>
 800ccda:	f1c0 0320 	rsb	r3, r0, #32
 800ccde:	280a      	cmp	r0, #10
 800cce0:	600b      	str	r3, [r1, #0]
 800cce2:	491b      	ldr	r1, [pc, #108]	@ (800cd50 <__b2d+0x90>)
 800cce4:	dc15      	bgt.n	800cd12 <__b2d+0x52>
 800cce6:	f1c0 0c0b 	rsb	ip, r0, #11
 800ccea:	fa22 f30c 	lsr.w	r3, r2, ip
 800ccee:	45b8      	cmp	r8, r7
 800ccf0:	ea43 0501 	orr.w	r5, r3, r1
 800ccf4:	bf34      	ite	cc
 800ccf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ccfa:	2300      	movcs	r3, #0
 800ccfc:	3015      	adds	r0, #21
 800ccfe:	fa02 f000 	lsl.w	r0, r2, r0
 800cd02:	fa23 f30c 	lsr.w	r3, r3, ip
 800cd06:	4303      	orrs	r3, r0
 800cd08:	461c      	mov	r4, r3
 800cd0a:	ec45 4b10 	vmov	d0, r4, r5
 800cd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd12:	45b8      	cmp	r8, r7
 800cd14:	bf3a      	itte	cc
 800cd16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cd1a:	f1a6 0708 	subcc.w	r7, r6, #8
 800cd1e:	2300      	movcs	r3, #0
 800cd20:	380b      	subs	r0, #11
 800cd22:	d012      	beq.n	800cd4a <__b2d+0x8a>
 800cd24:	f1c0 0120 	rsb	r1, r0, #32
 800cd28:	fa23 f401 	lsr.w	r4, r3, r1
 800cd2c:	4082      	lsls	r2, r0
 800cd2e:	4322      	orrs	r2, r4
 800cd30:	4547      	cmp	r7, r8
 800cd32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cd36:	bf8c      	ite	hi
 800cd38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cd3c:	2200      	movls	r2, #0
 800cd3e:	4083      	lsls	r3, r0
 800cd40:	40ca      	lsrs	r2, r1
 800cd42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cd46:	4313      	orrs	r3, r2
 800cd48:	e7de      	b.n	800cd08 <__b2d+0x48>
 800cd4a:	ea42 0501 	orr.w	r5, r2, r1
 800cd4e:	e7db      	b.n	800cd08 <__b2d+0x48>
 800cd50:	3ff00000 	.word	0x3ff00000

0800cd54 <__d2b>:
 800cd54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd58:	460f      	mov	r7, r1
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	ec59 8b10 	vmov	r8, r9, d0
 800cd60:	4616      	mov	r6, r2
 800cd62:	f7ff fc1b 	bl	800c59c <_Balloc>
 800cd66:	4604      	mov	r4, r0
 800cd68:	b930      	cbnz	r0, 800cd78 <__d2b+0x24>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	4b23      	ldr	r3, [pc, #140]	@ (800cdfc <__d2b+0xa8>)
 800cd6e:	4824      	ldr	r0, [pc, #144]	@ (800ce00 <__d2b+0xac>)
 800cd70:	f240 310f 	movw	r1, #783	@ 0x30f
 800cd74:	f001 fb50 	bl	800e418 <__assert_func>
 800cd78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd80:	b10d      	cbz	r5, 800cd86 <__d2b+0x32>
 800cd82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cd86:	9301      	str	r3, [sp, #4]
 800cd88:	f1b8 0300 	subs.w	r3, r8, #0
 800cd8c:	d023      	beq.n	800cdd6 <__d2b+0x82>
 800cd8e:	4668      	mov	r0, sp
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	f7ff fd14 	bl	800c7be <__lo0bits>
 800cd96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd9a:	b1d0      	cbz	r0, 800cdd2 <__d2b+0x7e>
 800cd9c:	f1c0 0320 	rsb	r3, r0, #32
 800cda0:	fa02 f303 	lsl.w	r3, r2, r3
 800cda4:	430b      	orrs	r3, r1
 800cda6:	40c2      	lsrs	r2, r0
 800cda8:	6163      	str	r3, [r4, #20]
 800cdaa:	9201      	str	r2, [sp, #4]
 800cdac:	9b01      	ldr	r3, [sp, #4]
 800cdae:	61a3      	str	r3, [r4, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	bf0c      	ite	eq
 800cdb4:	2201      	moveq	r2, #1
 800cdb6:	2202      	movne	r2, #2
 800cdb8:	6122      	str	r2, [r4, #16]
 800cdba:	b1a5      	cbz	r5, 800cde6 <__d2b+0x92>
 800cdbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdc0:	4405      	add	r5, r0
 800cdc2:	603d      	str	r5, [r7, #0]
 800cdc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cdc8:	6030      	str	r0, [r6, #0]
 800cdca:	4620      	mov	r0, r4
 800cdcc:	b003      	add	sp, #12
 800cdce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdd2:	6161      	str	r1, [r4, #20]
 800cdd4:	e7ea      	b.n	800cdac <__d2b+0x58>
 800cdd6:	a801      	add	r0, sp, #4
 800cdd8:	f7ff fcf1 	bl	800c7be <__lo0bits>
 800cddc:	9b01      	ldr	r3, [sp, #4]
 800cdde:	6163      	str	r3, [r4, #20]
 800cde0:	3020      	adds	r0, #32
 800cde2:	2201      	movs	r2, #1
 800cde4:	e7e8      	b.n	800cdb8 <__d2b+0x64>
 800cde6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cdea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cdee:	6038      	str	r0, [r7, #0]
 800cdf0:	6918      	ldr	r0, [r3, #16]
 800cdf2:	f7ff fcc5 	bl	800c780 <__hi0bits>
 800cdf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cdfa:	e7e5      	b.n	800cdc8 <__d2b+0x74>
 800cdfc:	0800ee0d 	.word	0x0800ee0d
 800ce00:	0800ee1e 	.word	0x0800ee1e

0800ce04 <__ratio>:
 800ce04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce08:	b085      	sub	sp, #20
 800ce0a:	e9cd 1000 	strd	r1, r0, [sp]
 800ce0e:	a902      	add	r1, sp, #8
 800ce10:	f7ff ff56 	bl	800ccc0 <__b2d>
 800ce14:	9800      	ldr	r0, [sp, #0]
 800ce16:	a903      	add	r1, sp, #12
 800ce18:	ec55 4b10 	vmov	r4, r5, d0
 800ce1c:	f7ff ff50 	bl	800ccc0 <__b2d>
 800ce20:	9b01      	ldr	r3, [sp, #4]
 800ce22:	6919      	ldr	r1, [r3, #16]
 800ce24:	9b00      	ldr	r3, [sp, #0]
 800ce26:	691b      	ldr	r3, [r3, #16]
 800ce28:	1ac9      	subs	r1, r1, r3
 800ce2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce2e:	1a9b      	subs	r3, r3, r2
 800ce30:	ec5b ab10 	vmov	sl, fp, d0
 800ce34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bfce      	itee	gt
 800ce3c:	462a      	movgt	r2, r5
 800ce3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce42:	465a      	movle	r2, fp
 800ce44:	462f      	mov	r7, r5
 800ce46:	46d9      	mov	r9, fp
 800ce48:	bfcc      	ite	gt
 800ce4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce4e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ce52:	464b      	mov	r3, r9
 800ce54:	4652      	mov	r2, sl
 800ce56:	4620      	mov	r0, r4
 800ce58:	4639      	mov	r1, r7
 800ce5a:	f7f3 fcf7 	bl	800084c <__aeabi_ddiv>
 800ce5e:	ec41 0b10 	vmov	d0, r0, r1
 800ce62:	b005      	add	sp, #20
 800ce64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce68 <__copybits>:
 800ce68:	3901      	subs	r1, #1
 800ce6a:	b570      	push	{r4, r5, r6, lr}
 800ce6c:	1149      	asrs	r1, r1, #5
 800ce6e:	6914      	ldr	r4, [r2, #16]
 800ce70:	3101      	adds	r1, #1
 800ce72:	f102 0314 	add.w	r3, r2, #20
 800ce76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ce7e:	1f05      	subs	r5, r0, #4
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	d30c      	bcc.n	800ce9e <__copybits+0x36>
 800ce84:	1aa3      	subs	r3, r4, r2
 800ce86:	3b11      	subs	r3, #17
 800ce88:	f023 0303 	bic.w	r3, r3, #3
 800ce8c:	3211      	adds	r2, #17
 800ce8e:	42a2      	cmp	r2, r4
 800ce90:	bf88      	it	hi
 800ce92:	2300      	movhi	r3, #0
 800ce94:	4418      	add	r0, r3
 800ce96:	2300      	movs	r3, #0
 800ce98:	4288      	cmp	r0, r1
 800ce9a:	d305      	bcc.n	800cea8 <__copybits+0x40>
 800ce9c:	bd70      	pop	{r4, r5, r6, pc}
 800ce9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800cea2:	f845 6f04 	str.w	r6, [r5, #4]!
 800cea6:	e7eb      	b.n	800ce80 <__copybits+0x18>
 800cea8:	f840 3b04 	str.w	r3, [r0], #4
 800ceac:	e7f4      	b.n	800ce98 <__copybits+0x30>

0800ceae <__any_on>:
 800ceae:	f100 0214 	add.w	r2, r0, #20
 800ceb2:	6900      	ldr	r0, [r0, #16]
 800ceb4:	114b      	asrs	r3, r1, #5
 800ceb6:	4298      	cmp	r0, r3
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	db11      	blt.n	800cee0 <__any_on+0x32>
 800cebc:	dd0a      	ble.n	800ced4 <__any_on+0x26>
 800cebe:	f011 011f 	ands.w	r1, r1, #31
 800cec2:	d007      	beq.n	800ced4 <__any_on+0x26>
 800cec4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cec8:	fa24 f001 	lsr.w	r0, r4, r1
 800cecc:	fa00 f101 	lsl.w	r1, r0, r1
 800ced0:	428c      	cmp	r4, r1
 800ced2:	d10b      	bne.n	800ceec <__any_on+0x3e>
 800ced4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d803      	bhi.n	800cee4 <__any_on+0x36>
 800cedc:	2000      	movs	r0, #0
 800cede:	bd10      	pop	{r4, pc}
 800cee0:	4603      	mov	r3, r0
 800cee2:	e7f7      	b.n	800ced4 <__any_on+0x26>
 800cee4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cee8:	2900      	cmp	r1, #0
 800ceea:	d0f5      	beq.n	800ced8 <__any_on+0x2a>
 800ceec:	2001      	movs	r0, #1
 800ceee:	e7f6      	b.n	800cede <__any_on+0x30>

0800cef0 <sulp>:
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	4604      	mov	r4, r0
 800cef4:	460d      	mov	r5, r1
 800cef6:	ec45 4b10 	vmov	d0, r4, r5
 800cefa:	4616      	mov	r6, r2
 800cefc:	f7ff feba 	bl	800cc74 <__ulp>
 800cf00:	ec51 0b10 	vmov	r0, r1, d0
 800cf04:	b17e      	cbz	r6, 800cf26 <sulp+0x36>
 800cf06:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf0a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	dd09      	ble.n	800cf26 <sulp+0x36>
 800cf12:	051b      	lsls	r3, r3, #20
 800cf14:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cf18:	2400      	movs	r4, #0
 800cf1a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cf1e:	4622      	mov	r2, r4
 800cf20:	462b      	mov	r3, r5
 800cf22:	f7f3 fb69 	bl	80005f8 <__aeabi_dmul>
 800cf26:	ec41 0b10 	vmov	d0, r0, r1
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	0000      	movs	r0, r0
	...

0800cf30 <_strtod_l>:
 800cf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf34:	b09f      	sub	sp, #124	@ 0x7c
 800cf36:	460c      	mov	r4, r1
 800cf38:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800cf3e:	9005      	str	r0, [sp, #20]
 800cf40:	f04f 0a00 	mov.w	sl, #0
 800cf44:	f04f 0b00 	mov.w	fp, #0
 800cf48:	460a      	mov	r2, r1
 800cf4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf4c:	7811      	ldrb	r1, [r2, #0]
 800cf4e:	292b      	cmp	r1, #43	@ 0x2b
 800cf50:	d04a      	beq.n	800cfe8 <_strtod_l+0xb8>
 800cf52:	d838      	bhi.n	800cfc6 <_strtod_l+0x96>
 800cf54:	290d      	cmp	r1, #13
 800cf56:	d832      	bhi.n	800cfbe <_strtod_l+0x8e>
 800cf58:	2908      	cmp	r1, #8
 800cf5a:	d832      	bhi.n	800cfc2 <_strtod_l+0x92>
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	d03b      	beq.n	800cfd8 <_strtod_l+0xa8>
 800cf60:	2200      	movs	r2, #0
 800cf62:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cf66:	782a      	ldrb	r2, [r5, #0]
 800cf68:	2a30      	cmp	r2, #48	@ 0x30
 800cf6a:	f040 80b2 	bne.w	800d0d2 <_strtod_l+0x1a2>
 800cf6e:	786a      	ldrb	r2, [r5, #1]
 800cf70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cf74:	2a58      	cmp	r2, #88	@ 0x58
 800cf76:	d16e      	bne.n	800d056 <_strtod_l+0x126>
 800cf78:	9302      	str	r3, [sp, #8]
 800cf7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf7c:	9301      	str	r3, [sp, #4]
 800cf7e:	ab1a      	add	r3, sp, #104	@ 0x68
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	4a8f      	ldr	r2, [pc, #572]	@ (800d1c0 <_strtod_l+0x290>)
 800cf84:	9805      	ldr	r0, [sp, #20]
 800cf86:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cf88:	a919      	add	r1, sp, #100	@ 0x64
 800cf8a:	f001 fadf 	bl	800e54c <__gethex>
 800cf8e:	f010 060f 	ands.w	r6, r0, #15
 800cf92:	4604      	mov	r4, r0
 800cf94:	d005      	beq.n	800cfa2 <_strtod_l+0x72>
 800cf96:	2e06      	cmp	r6, #6
 800cf98:	d128      	bne.n	800cfec <_strtod_l+0xbc>
 800cf9a:	3501      	adds	r5, #1
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cfa0:	930e      	str	r3, [sp, #56]	@ 0x38
 800cfa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f040 858e 	bne.w	800dac6 <_strtod_l+0xb96>
 800cfaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfac:	b1cb      	cbz	r3, 800cfe2 <_strtod_l+0xb2>
 800cfae:	4652      	mov	r2, sl
 800cfb0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cfb4:	ec43 2b10 	vmov	d0, r2, r3
 800cfb8:	b01f      	add	sp, #124	@ 0x7c
 800cfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbe:	2920      	cmp	r1, #32
 800cfc0:	d1ce      	bne.n	800cf60 <_strtod_l+0x30>
 800cfc2:	3201      	adds	r2, #1
 800cfc4:	e7c1      	b.n	800cf4a <_strtod_l+0x1a>
 800cfc6:	292d      	cmp	r1, #45	@ 0x2d
 800cfc8:	d1ca      	bne.n	800cf60 <_strtod_l+0x30>
 800cfca:	2101      	movs	r1, #1
 800cfcc:	910e      	str	r1, [sp, #56]	@ 0x38
 800cfce:	1c51      	adds	r1, r2, #1
 800cfd0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cfd2:	7852      	ldrb	r2, [r2, #1]
 800cfd4:	2a00      	cmp	r2, #0
 800cfd6:	d1c5      	bne.n	800cf64 <_strtod_l+0x34>
 800cfd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfda:	9419      	str	r4, [sp, #100]	@ 0x64
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f040 8570 	bne.w	800dac2 <_strtod_l+0xb92>
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	465b      	mov	r3, fp
 800cfe6:	e7e5      	b.n	800cfb4 <_strtod_l+0x84>
 800cfe8:	2100      	movs	r1, #0
 800cfea:	e7ef      	b.n	800cfcc <_strtod_l+0x9c>
 800cfec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cfee:	b13a      	cbz	r2, 800d000 <_strtod_l+0xd0>
 800cff0:	2135      	movs	r1, #53	@ 0x35
 800cff2:	a81c      	add	r0, sp, #112	@ 0x70
 800cff4:	f7ff ff38 	bl	800ce68 <__copybits>
 800cff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cffa:	9805      	ldr	r0, [sp, #20]
 800cffc:	f7ff fb0e 	bl	800c61c <_Bfree>
 800d000:	3e01      	subs	r6, #1
 800d002:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d004:	2e04      	cmp	r6, #4
 800d006:	d806      	bhi.n	800d016 <_strtod_l+0xe6>
 800d008:	e8df f006 	tbb	[pc, r6]
 800d00c:	201d0314 	.word	0x201d0314
 800d010:	14          	.byte	0x14
 800d011:	00          	.byte	0x00
 800d012:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d016:	05e1      	lsls	r1, r4, #23
 800d018:	bf48      	it	mi
 800d01a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d01e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d022:	0d1b      	lsrs	r3, r3, #20
 800d024:	051b      	lsls	r3, r3, #20
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1bb      	bne.n	800cfa2 <_strtod_l+0x72>
 800d02a:	f7fe fbdf 	bl	800b7ec <__errno>
 800d02e:	2322      	movs	r3, #34	@ 0x22
 800d030:	6003      	str	r3, [r0, #0]
 800d032:	e7b6      	b.n	800cfa2 <_strtod_l+0x72>
 800d034:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d038:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d03c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d040:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d044:	e7e7      	b.n	800d016 <_strtod_l+0xe6>
 800d046:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d1c8 <_strtod_l+0x298>
 800d04a:	e7e4      	b.n	800d016 <_strtod_l+0xe6>
 800d04c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d050:	f04f 3aff 	mov.w	sl, #4294967295
 800d054:	e7df      	b.n	800d016 <_strtod_l+0xe6>
 800d056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d05c:	785b      	ldrb	r3, [r3, #1]
 800d05e:	2b30      	cmp	r3, #48	@ 0x30
 800d060:	d0f9      	beq.n	800d056 <_strtod_l+0x126>
 800d062:	2b00      	cmp	r3, #0
 800d064:	d09d      	beq.n	800cfa2 <_strtod_l+0x72>
 800d066:	2301      	movs	r3, #1
 800d068:	2700      	movs	r7, #0
 800d06a:	9308      	str	r3, [sp, #32]
 800d06c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d06e:	930c      	str	r3, [sp, #48]	@ 0x30
 800d070:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d072:	46b9      	mov	r9, r7
 800d074:	220a      	movs	r2, #10
 800d076:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d078:	7805      	ldrb	r5, [r0, #0]
 800d07a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d07e:	b2d9      	uxtb	r1, r3
 800d080:	2909      	cmp	r1, #9
 800d082:	d928      	bls.n	800d0d6 <_strtod_l+0x1a6>
 800d084:	494f      	ldr	r1, [pc, #316]	@ (800d1c4 <_strtod_l+0x294>)
 800d086:	2201      	movs	r2, #1
 800d088:	f001 f97a 	bl	800e380 <strncmp>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	d032      	beq.n	800d0f6 <_strtod_l+0x1c6>
 800d090:	2000      	movs	r0, #0
 800d092:	462a      	mov	r2, r5
 800d094:	900a      	str	r0, [sp, #40]	@ 0x28
 800d096:	464d      	mov	r5, r9
 800d098:	4603      	mov	r3, r0
 800d09a:	2a65      	cmp	r2, #101	@ 0x65
 800d09c:	d001      	beq.n	800d0a2 <_strtod_l+0x172>
 800d09e:	2a45      	cmp	r2, #69	@ 0x45
 800d0a0:	d114      	bne.n	800d0cc <_strtod_l+0x19c>
 800d0a2:	b91d      	cbnz	r5, 800d0ac <_strtod_l+0x17c>
 800d0a4:	9a08      	ldr	r2, [sp, #32]
 800d0a6:	4302      	orrs	r2, r0
 800d0a8:	d096      	beq.n	800cfd8 <_strtod_l+0xa8>
 800d0aa:	2500      	movs	r5, #0
 800d0ac:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d0ae:	1c62      	adds	r2, r4, #1
 800d0b0:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0b2:	7862      	ldrb	r2, [r4, #1]
 800d0b4:	2a2b      	cmp	r2, #43	@ 0x2b
 800d0b6:	d07a      	beq.n	800d1ae <_strtod_l+0x27e>
 800d0b8:	2a2d      	cmp	r2, #45	@ 0x2d
 800d0ba:	d07e      	beq.n	800d1ba <_strtod_l+0x28a>
 800d0bc:	f04f 0c00 	mov.w	ip, #0
 800d0c0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d0c4:	2909      	cmp	r1, #9
 800d0c6:	f240 8085 	bls.w	800d1d4 <_strtod_l+0x2a4>
 800d0ca:	9419      	str	r4, [sp, #100]	@ 0x64
 800d0cc:	f04f 0800 	mov.w	r8, #0
 800d0d0:	e0a5      	b.n	800d21e <_strtod_l+0x2ee>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	e7c8      	b.n	800d068 <_strtod_l+0x138>
 800d0d6:	f1b9 0f08 	cmp.w	r9, #8
 800d0da:	bfd8      	it	le
 800d0dc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d0de:	f100 0001 	add.w	r0, r0, #1
 800d0e2:	bfda      	itte	le
 800d0e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d0e8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d0ea:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d0ee:	f109 0901 	add.w	r9, r9, #1
 800d0f2:	9019      	str	r0, [sp, #100]	@ 0x64
 800d0f4:	e7bf      	b.n	800d076 <_strtod_l+0x146>
 800d0f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0f8:	1c5a      	adds	r2, r3, #1
 800d0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d0fc:	785a      	ldrb	r2, [r3, #1]
 800d0fe:	f1b9 0f00 	cmp.w	r9, #0
 800d102:	d03b      	beq.n	800d17c <_strtod_l+0x24c>
 800d104:	900a      	str	r0, [sp, #40]	@ 0x28
 800d106:	464d      	mov	r5, r9
 800d108:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d10c:	2b09      	cmp	r3, #9
 800d10e:	d912      	bls.n	800d136 <_strtod_l+0x206>
 800d110:	2301      	movs	r3, #1
 800d112:	e7c2      	b.n	800d09a <_strtod_l+0x16a>
 800d114:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	9219      	str	r2, [sp, #100]	@ 0x64
 800d11a:	785a      	ldrb	r2, [r3, #1]
 800d11c:	3001      	adds	r0, #1
 800d11e:	2a30      	cmp	r2, #48	@ 0x30
 800d120:	d0f8      	beq.n	800d114 <_strtod_l+0x1e4>
 800d122:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d126:	2b08      	cmp	r3, #8
 800d128:	f200 84d2 	bhi.w	800dad0 <_strtod_l+0xba0>
 800d12c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d12e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d130:	2000      	movs	r0, #0
 800d132:	930c      	str	r3, [sp, #48]	@ 0x30
 800d134:	4605      	mov	r5, r0
 800d136:	3a30      	subs	r2, #48	@ 0x30
 800d138:	f100 0301 	add.w	r3, r0, #1
 800d13c:	d018      	beq.n	800d170 <_strtod_l+0x240>
 800d13e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d140:	4419      	add	r1, r3
 800d142:	910a      	str	r1, [sp, #40]	@ 0x28
 800d144:	462e      	mov	r6, r5
 800d146:	f04f 0e0a 	mov.w	lr, #10
 800d14a:	1c71      	adds	r1, r6, #1
 800d14c:	eba1 0c05 	sub.w	ip, r1, r5
 800d150:	4563      	cmp	r3, ip
 800d152:	dc15      	bgt.n	800d180 <_strtod_l+0x250>
 800d154:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d158:	182b      	adds	r3, r5, r0
 800d15a:	2b08      	cmp	r3, #8
 800d15c:	f105 0501 	add.w	r5, r5, #1
 800d160:	4405      	add	r5, r0
 800d162:	dc1a      	bgt.n	800d19a <_strtod_l+0x26a>
 800d164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d166:	230a      	movs	r3, #10
 800d168:	fb03 2301 	mla	r3, r3, r1, r2
 800d16c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d16e:	2300      	movs	r3, #0
 800d170:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d172:	1c51      	adds	r1, r2, #1
 800d174:	9119      	str	r1, [sp, #100]	@ 0x64
 800d176:	7852      	ldrb	r2, [r2, #1]
 800d178:	4618      	mov	r0, r3
 800d17a:	e7c5      	b.n	800d108 <_strtod_l+0x1d8>
 800d17c:	4648      	mov	r0, r9
 800d17e:	e7ce      	b.n	800d11e <_strtod_l+0x1ee>
 800d180:	2e08      	cmp	r6, #8
 800d182:	dc05      	bgt.n	800d190 <_strtod_l+0x260>
 800d184:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d186:	fb0e f606 	mul.w	r6, lr, r6
 800d18a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d18c:	460e      	mov	r6, r1
 800d18e:	e7dc      	b.n	800d14a <_strtod_l+0x21a>
 800d190:	2910      	cmp	r1, #16
 800d192:	bfd8      	it	le
 800d194:	fb0e f707 	mulle.w	r7, lr, r7
 800d198:	e7f8      	b.n	800d18c <_strtod_l+0x25c>
 800d19a:	2b0f      	cmp	r3, #15
 800d19c:	bfdc      	itt	le
 800d19e:	230a      	movle	r3, #10
 800d1a0:	fb03 2707 	mlale	r7, r3, r7, r2
 800d1a4:	e7e3      	b.n	800d16e <_strtod_l+0x23e>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e77a      	b.n	800d0a4 <_strtod_l+0x174>
 800d1ae:	f04f 0c00 	mov.w	ip, #0
 800d1b2:	1ca2      	adds	r2, r4, #2
 800d1b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1b6:	78a2      	ldrb	r2, [r4, #2]
 800d1b8:	e782      	b.n	800d0c0 <_strtod_l+0x190>
 800d1ba:	f04f 0c01 	mov.w	ip, #1
 800d1be:	e7f8      	b.n	800d1b2 <_strtod_l+0x282>
 800d1c0:	0800f044 	.word	0x0800f044
 800d1c4:	0800ee77 	.word	0x0800ee77
 800d1c8:	7ff00000 	.word	0x7ff00000
 800d1cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1ce:	1c51      	adds	r1, r2, #1
 800d1d0:	9119      	str	r1, [sp, #100]	@ 0x64
 800d1d2:	7852      	ldrb	r2, [r2, #1]
 800d1d4:	2a30      	cmp	r2, #48	@ 0x30
 800d1d6:	d0f9      	beq.n	800d1cc <_strtod_l+0x29c>
 800d1d8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d1dc:	2908      	cmp	r1, #8
 800d1de:	f63f af75 	bhi.w	800d0cc <_strtod_l+0x19c>
 800d1e2:	3a30      	subs	r2, #48	@ 0x30
 800d1e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d1ea:	f04f 080a 	mov.w	r8, #10
 800d1ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d1f0:	1c56      	adds	r6, r2, #1
 800d1f2:	9619      	str	r6, [sp, #100]	@ 0x64
 800d1f4:	7852      	ldrb	r2, [r2, #1]
 800d1f6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d1fa:	f1be 0f09 	cmp.w	lr, #9
 800d1fe:	d939      	bls.n	800d274 <_strtod_l+0x344>
 800d200:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d202:	1a76      	subs	r6, r6, r1
 800d204:	2e08      	cmp	r6, #8
 800d206:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d20a:	dc03      	bgt.n	800d214 <_strtod_l+0x2e4>
 800d20c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d20e:	4588      	cmp	r8, r1
 800d210:	bfa8      	it	ge
 800d212:	4688      	movge	r8, r1
 800d214:	f1bc 0f00 	cmp.w	ip, #0
 800d218:	d001      	beq.n	800d21e <_strtod_l+0x2ee>
 800d21a:	f1c8 0800 	rsb	r8, r8, #0
 800d21e:	2d00      	cmp	r5, #0
 800d220:	d14e      	bne.n	800d2c0 <_strtod_l+0x390>
 800d222:	9908      	ldr	r1, [sp, #32]
 800d224:	4308      	orrs	r0, r1
 800d226:	f47f aebc 	bne.w	800cfa2 <_strtod_l+0x72>
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f47f aed4 	bne.w	800cfd8 <_strtod_l+0xa8>
 800d230:	2a69      	cmp	r2, #105	@ 0x69
 800d232:	d028      	beq.n	800d286 <_strtod_l+0x356>
 800d234:	dc25      	bgt.n	800d282 <_strtod_l+0x352>
 800d236:	2a49      	cmp	r2, #73	@ 0x49
 800d238:	d025      	beq.n	800d286 <_strtod_l+0x356>
 800d23a:	2a4e      	cmp	r2, #78	@ 0x4e
 800d23c:	f47f aecc 	bne.w	800cfd8 <_strtod_l+0xa8>
 800d240:	499a      	ldr	r1, [pc, #616]	@ (800d4ac <_strtod_l+0x57c>)
 800d242:	a819      	add	r0, sp, #100	@ 0x64
 800d244:	f001 fba4 	bl	800e990 <__match>
 800d248:	2800      	cmp	r0, #0
 800d24a:	f43f aec5 	beq.w	800cfd8 <_strtod_l+0xa8>
 800d24e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	2b28      	cmp	r3, #40	@ 0x28
 800d254:	d12e      	bne.n	800d2b4 <_strtod_l+0x384>
 800d256:	4996      	ldr	r1, [pc, #600]	@ (800d4b0 <_strtod_l+0x580>)
 800d258:	aa1c      	add	r2, sp, #112	@ 0x70
 800d25a:	a819      	add	r0, sp, #100	@ 0x64
 800d25c:	f001 fbac 	bl	800e9b8 <__hexnan>
 800d260:	2805      	cmp	r0, #5
 800d262:	d127      	bne.n	800d2b4 <_strtod_l+0x384>
 800d264:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d266:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d26a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d26e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d272:	e696      	b.n	800cfa2 <_strtod_l+0x72>
 800d274:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d276:	fb08 2101 	mla	r1, r8, r1, r2
 800d27a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d27e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d280:	e7b5      	b.n	800d1ee <_strtod_l+0x2be>
 800d282:	2a6e      	cmp	r2, #110	@ 0x6e
 800d284:	e7da      	b.n	800d23c <_strtod_l+0x30c>
 800d286:	498b      	ldr	r1, [pc, #556]	@ (800d4b4 <_strtod_l+0x584>)
 800d288:	a819      	add	r0, sp, #100	@ 0x64
 800d28a:	f001 fb81 	bl	800e990 <__match>
 800d28e:	2800      	cmp	r0, #0
 800d290:	f43f aea2 	beq.w	800cfd8 <_strtod_l+0xa8>
 800d294:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d296:	4988      	ldr	r1, [pc, #544]	@ (800d4b8 <_strtod_l+0x588>)
 800d298:	3b01      	subs	r3, #1
 800d29a:	a819      	add	r0, sp, #100	@ 0x64
 800d29c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d29e:	f001 fb77 	bl	800e990 <__match>
 800d2a2:	b910      	cbnz	r0, 800d2aa <_strtod_l+0x37a>
 800d2a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d2aa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d4c8 <_strtod_l+0x598>
 800d2ae:	f04f 0a00 	mov.w	sl, #0
 800d2b2:	e676      	b.n	800cfa2 <_strtod_l+0x72>
 800d2b4:	4881      	ldr	r0, [pc, #516]	@ (800d4bc <_strtod_l+0x58c>)
 800d2b6:	f001 f8a7 	bl	800e408 <nan>
 800d2ba:	ec5b ab10 	vmov	sl, fp, d0
 800d2be:	e670      	b.n	800cfa2 <_strtod_l+0x72>
 800d2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d2c4:	eba8 0303 	sub.w	r3, r8, r3
 800d2c8:	f1b9 0f00 	cmp.w	r9, #0
 800d2cc:	bf08      	it	eq
 800d2ce:	46a9      	moveq	r9, r5
 800d2d0:	2d10      	cmp	r5, #16
 800d2d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2d4:	462c      	mov	r4, r5
 800d2d6:	bfa8      	it	ge
 800d2d8:	2410      	movge	r4, #16
 800d2da:	f7f3 f913 	bl	8000504 <__aeabi_ui2d>
 800d2de:	2d09      	cmp	r5, #9
 800d2e0:	4682      	mov	sl, r0
 800d2e2:	468b      	mov	fp, r1
 800d2e4:	dc13      	bgt.n	800d30e <_strtod_l+0x3de>
 800d2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f43f ae5a 	beq.w	800cfa2 <_strtod_l+0x72>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	dd78      	ble.n	800d3e4 <_strtod_l+0x4b4>
 800d2f2:	2b16      	cmp	r3, #22
 800d2f4:	dc5f      	bgt.n	800d3b6 <_strtod_l+0x486>
 800d2f6:	4972      	ldr	r1, [pc, #456]	@ (800d4c0 <_strtod_l+0x590>)
 800d2f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d300:	4652      	mov	r2, sl
 800d302:	465b      	mov	r3, fp
 800d304:	f7f3 f978 	bl	80005f8 <__aeabi_dmul>
 800d308:	4682      	mov	sl, r0
 800d30a:	468b      	mov	fp, r1
 800d30c:	e649      	b.n	800cfa2 <_strtod_l+0x72>
 800d30e:	4b6c      	ldr	r3, [pc, #432]	@ (800d4c0 <_strtod_l+0x590>)
 800d310:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d314:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d318:	f7f3 f96e 	bl	80005f8 <__aeabi_dmul>
 800d31c:	4682      	mov	sl, r0
 800d31e:	4638      	mov	r0, r7
 800d320:	468b      	mov	fp, r1
 800d322:	f7f3 f8ef 	bl	8000504 <__aeabi_ui2d>
 800d326:	4602      	mov	r2, r0
 800d328:	460b      	mov	r3, r1
 800d32a:	4650      	mov	r0, sl
 800d32c:	4659      	mov	r1, fp
 800d32e:	f7f2 ffad 	bl	800028c <__adddf3>
 800d332:	2d0f      	cmp	r5, #15
 800d334:	4682      	mov	sl, r0
 800d336:	468b      	mov	fp, r1
 800d338:	ddd5      	ble.n	800d2e6 <_strtod_l+0x3b6>
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	1b2c      	subs	r4, r5, r4
 800d33e:	441c      	add	r4, r3
 800d340:	2c00      	cmp	r4, #0
 800d342:	f340 8093 	ble.w	800d46c <_strtod_l+0x53c>
 800d346:	f014 030f 	ands.w	r3, r4, #15
 800d34a:	d00a      	beq.n	800d362 <_strtod_l+0x432>
 800d34c:	495c      	ldr	r1, [pc, #368]	@ (800d4c0 <_strtod_l+0x590>)
 800d34e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d352:	4652      	mov	r2, sl
 800d354:	465b      	mov	r3, fp
 800d356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d35a:	f7f3 f94d 	bl	80005f8 <__aeabi_dmul>
 800d35e:	4682      	mov	sl, r0
 800d360:	468b      	mov	fp, r1
 800d362:	f034 040f 	bics.w	r4, r4, #15
 800d366:	d073      	beq.n	800d450 <_strtod_l+0x520>
 800d368:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d36c:	dd49      	ble.n	800d402 <_strtod_l+0x4d2>
 800d36e:	2400      	movs	r4, #0
 800d370:	46a0      	mov	r8, r4
 800d372:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d374:	46a1      	mov	r9, r4
 800d376:	9a05      	ldr	r2, [sp, #20]
 800d378:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d4c8 <_strtod_l+0x598>
 800d37c:	2322      	movs	r3, #34	@ 0x22
 800d37e:	6013      	str	r3, [r2, #0]
 800d380:	f04f 0a00 	mov.w	sl, #0
 800d384:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d386:	2b00      	cmp	r3, #0
 800d388:	f43f ae0b 	beq.w	800cfa2 <_strtod_l+0x72>
 800d38c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d38e:	9805      	ldr	r0, [sp, #20]
 800d390:	f7ff f944 	bl	800c61c <_Bfree>
 800d394:	9805      	ldr	r0, [sp, #20]
 800d396:	4649      	mov	r1, r9
 800d398:	f7ff f940 	bl	800c61c <_Bfree>
 800d39c:	9805      	ldr	r0, [sp, #20]
 800d39e:	4641      	mov	r1, r8
 800d3a0:	f7ff f93c 	bl	800c61c <_Bfree>
 800d3a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d3a6:	9805      	ldr	r0, [sp, #20]
 800d3a8:	f7ff f938 	bl	800c61c <_Bfree>
 800d3ac:	9805      	ldr	r0, [sp, #20]
 800d3ae:	4621      	mov	r1, r4
 800d3b0:	f7ff f934 	bl	800c61c <_Bfree>
 800d3b4:	e5f5      	b.n	800cfa2 <_strtod_l+0x72>
 800d3b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	dbbc      	blt.n	800d33a <_strtod_l+0x40a>
 800d3c0:	4c3f      	ldr	r4, [pc, #252]	@ (800d4c0 <_strtod_l+0x590>)
 800d3c2:	f1c5 050f 	rsb	r5, r5, #15
 800d3c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d3ca:	4652      	mov	r2, sl
 800d3cc:	465b      	mov	r3, fp
 800d3ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3d2:	f7f3 f911 	bl	80005f8 <__aeabi_dmul>
 800d3d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d8:	1b5d      	subs	r5, r3, r5
 800d3da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d3de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d3e2:	e78f      	b.n	800d304 <_strtod_l+0x3d4>
 800d3e4:	3316      	adds	r3, #22
 800d3e6:	dba8      	blt.n	800d33a <_strtod_l+0x40a>
 800d3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ea:	eba3 0808 	sub.w	r8, r3, r8
 800d3ee:	4b34      	ldr	r3, [pc, #208]	@ (800d4c0 <_strtod_l+0x590>)
 800d3f0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d3f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	4659      	mov	r1, fp
 800d3fc:	f7f3 fa26 	bl	800084c <__aeabi_ddiv>
 800d400:	e782      	b.n	800d308 <_strtod_l+0x3d8>
 800d402:	2300      	movs	r3, #0
 800d404:	4f2f      	ldr	r7, [pc, #188]	@ (800d4c4 <_strtod_l+0x594>)
 800d406:	1124      	asrs	r4, r4, #4
 800d408:	4650      	mov	r0, sl
 800d40a:	4659      	mov	r1, fp
 800d40c:	461e      	mov	r6, r3
 800d40e:	2c01      	cmp	r4, #1
 800d410:	dc21      	bgt.n	800d456 <_strtod_l+0x526>
 800d412:	b10b      	cbz	r3, 800d418 <_strtod_l+0x4e8>
 800d414:	4682      	mov	sl, r0
 800d416:	468b      	mov	fp, r1
 800d418:	492a      	ldr	r1, [pc, #168]	@ (800d4c4 <_strtod_l+0x594>)
 800d41a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d41e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d42a:	f7f3 f8e5 	bl	80005f8 <__aeabi_dmul>
 800d42e:	4b26      	ldr	r3, [pc, #152]	@ (800d4c8 <_strtod_l+0x598>)
 800d430:	460a      	mov	r2, r1
 800d432:	400b      	ands	r3, r1
 800d434:	4925      	ldr	r1, [pc, #148]	@ (800d4cc <_strtod_l+0x59c>)
 800d436:	428b      	cmp	r3, r1
 800d438:	4682      	mov	sl, r0
 800d43a:	d898      	bhi.n	800d36e <_strtod_l+0x43e>
 800d43c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d440:	428b      	cmp	r3, r1
 800d442:	bf86      	itte	hi
 800d444:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d4d0 <_strtod_l+0x5a0>
 800d448:	f04f 3aff 	movhi.w	sl, #4294967295
 800d44c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d450:	2300      	movs	r3, #0
 800d452:	9308      	str	r3, [sp, #32]
 800d454:	e076      	b.n	800d544 <_strtod_l+0x614>
 800d456:	07e2      	lsls	r2, r4, #31
 800d458:	d504      	bpl.n	800d464 <_strtod_l+0x534>
 800d45a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d45e:	f7f3 f8cb 	bl	80005f8 <__aeabi_dmul>
 800d462:	2301      	movs	r3, #1
 800d464:	3601      	adds	r6, #1
 800d466:	1064      	asrs	r4, r4, #1
 800d468:	3708      	adds	r7, #8
 800d46a:	e7d0      	b.n	800d40e <_strtod_l+0x4de>
 800d46c:	d0f0      	beq.n	800d450 <_strtod_l+0x520>
 800d46e:	4264      	negs	r4, r4
 800d470:	f014 020f 	ands.w	r2, r4, #15
 800d474:	d00a      	beq.n	800d48c <_strtod_l+0x55c>
 800d476:	4b12      	ldr	r3, [pc, #72]	@ (800d4c0 <_strtod_l+0x590>)
 800d478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d47c:	4650      	mov	r0, sl
 800d47e:	4659      	mov	r1, fp
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f3 f9e2 	bl	800084c <__aeabi_ddiv>
 800d488:	4682      	mov	sl, r0
 800d48a:	468b      	mov	fp, r1
 800d48c:	1124      	asrs	r4, r4, #4
 800d48e:	d0df      	beq.n	800d450 <_strtod_l+0x520>
 800d490:	2c1f      	cmp	r4, #31
 800d492:	dd1f      	ble.n	800d4d4 <_strtod_l+0x5a4>
 800d494:	2400      	movs	r4, #0
 800d496:	46a0      	mov	r8, r4
 800d498:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d49a:	46a1      	mov	r9, r4
 800d49c:	9a05      	ldr	r2, [sp, #20]
 800d49e:	2322      	movs	r3, #34	@ 0x22
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	f04f 0b00 	mov.w	fp, #0
 800d4a8:	6013      	str	r3, [r2, #0]
 800d4aa:	e76b      	b.n	800d384 <_strtod_l+0x454>
 800d4ac:	0800ed65 	.word	0x0800ed65
 800d4b0:	0800f030 	.word	0x0800f030
 800d4b4:	0800ed5d 	.word	0x0800ed5d
 800d4b8:	0800ed94 	.word	0x0800ed94
 800d4bc:	0800eecd 	.word	0x0800eecd
 800d4c0:	0800ef68 	.word	0x0800ef68
 800d4c4:	0800ef40 	.word	0x0800ef40
 800d4c8:	7ff00000 	.word	0x7ff00000
 800d4cc:	7ca00000 	.word	0x7ca00000
 800d4d0:	7fefffff 	.word	0x7fefffff
 800d4d4:	f014 0310 	ands.w	r3, r4, #16
 800d4d8:	bf18      	it	ne
 800d4da:	236a      	movne	r3, #106	@ 0x6a
 800d4dc:	4ea9      	ldr	r6, [pc, #676]	@ (800d784 <_strtod_l+0x854>)
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	4650      	mov	r0, sl
 800d4e2:	4659      	mov	r1, fp
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	07e7      	lsls	r7, r4, #31
 800d4e8:	d504      	bpl.n	800d4f4 <_strtod_l+0x5c4>
 800d4ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4ee:	f7f3 f883 	bl	80005f8 <__aeabi_dmul>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	1064      	asrs	r4, r4, #1
 800d4f6:	f106 0608 	add.w	r6, r6, #8
 800d4fa:	d1f4      	bne.n	800d4e6 <_strtod_l+0x5b6>
 800d4fc:	b10b      	cbz	r3, 800d502 <_strtod_l+0x5d2>
 800d4fe:	4682      	mov	sl, r0
 800d500:	468b      	mov	fp, r1
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	b1b3      	cbz	r3, 800d534 <_strtod_l+0x604>
 800d506:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d50a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d50e:	2b00      	cmp	r3, #0
 800d510:	4659      	mov	r1, fp
 800d512:	dd0f      	ble.n	800d534 <_strtod_l+0x604>
 800d514:	2b1f      	cmp	r3, #31
 800d516:	dd56      	ble.n	800d5c6 <_strtod_l+0x696>
 800d518:	2b34      	cmp	r3, #52	@ 0x34
 800d51a:	bfde      	ittt	le
 800d51c:	f04f 33ff 	movle.w	r3, #4294967295
 800d520:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d524:	4093      	lslle	r3, r2
 800d526:	f04f 0a00 	mov.w	sl, #0
 800d52a:	bfcc      	ite	gt
 800d52c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d530:	ea03 0b01 	andle.w	fp, r3, r1
 800d534:	2200      	movs	r2, #0
 800d536:	2300      	movs	r3, #0
 800d538:	4650      	mov	r0, sl
 800d53a:	4659      	mov	r1, fp
 800d53c:	f7f3 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d540:	2800      	cmp	r0, #0
 800d542:	d1a7      	bne.n	800d494 <_strtod_l+0x564>
 800d544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d54a:	9805      	ldr	r0, [sp, #20]
 800d54c:	462b      	mov	r3, r5
 800d54e:	464a      	mov	r2, r9
 800d550:	f7ff f8cc 	bl	800c6ec <__s2b>
 800d554:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d556:	2800      	cmp	r0, #0
 800d558:	f43f af09 	beq.w	800d36e <_strtod_l+0x43e>
 800d55c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d55e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d560:	2a00      	cmp	r2, #0
 800d562:	eba3 0308 	sub.w	r3, r3, r8
 800d566:	bfa8      	it	ge
 800d568:	2300      	movge	r3, #0
 800d56a:	9312      	str	r3, [sp, #72]	@ 0x48
 800d56c:	2400      	movs	r4, #0
 800d56e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d572:	9316      	str	r3, [sp, #88]	@ 0x58
 800d574:	46a0      	mov	r8, r4
 800d576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d578:	9805      	ldr	r0, [sp, #20]
 800d57a:	6859      	ldr	r1, [r3, #4]
 800d57c:	f7ff f80e 	bl	800c59c <_Balloc>
 800d580:	4681      	mov	r9, r0
 800d582:	2800      	cmp	r0, #0
 800d584:	f43f aef7 	beq.w	800d376 <_strtod_l+0x446>
 800d588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d58a:	691a      	ldr	r2, [r3, #16]
 800d58c:	3202      	adds	r2, #2
 800d58e:	f103 010c 	add.w	r1, r3, #12
 800d592:	0092      	lsls	r2, r2, #2
 800d594:	300c      	adds	r0, #12
 800d596:	f000 ff27 	bl	800e3e8 <memcpy>
 800d59a:	ec4b ab10 	vmov	d0, sl, fp
 800d59e:	9805      	ldr	r0, [sp, #20]
 800d5a0:	aa1c      	add	r2, sp, #112	@ 0x70
 800d5a2:	a91b      	add	r1, sp, #108	@ 0x6c
 800d5a4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d5a8:	f7ff fbd4 	bl	800cd54 <__d2b>
 800d5ac:	901a      	str	r0, [sp, #104]	@ 0x68
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	f43f aee1 	beq.w	800d376 <_strtod_l+0x446>
 800d5b4:	9805      	ldr	r0, [sp, #20]
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	f7ff f92e 	bl	800c818 <__i2b>
 800d5bc:	4680      	mov	r8, r0
 800d5be:	b948      	cbnz	r0, 800d5d4 <_strtod_l+0x6a4>
 800d5c0:	f04f 0800 	mov.w	r8, #0
 800d5c4:	e6d7      	b.n	800d376 <_strtod_l+0x446>
 800d5c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ce:	ea03 0a0a 	and.w	sl, r3, sl
 800d5d2:	e7af      	b.n	800d534 <_strtod_l+0x604>
 800d5d4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d5d6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d5d8:	2d00      	cmp	r5, #0
 800d5da:	bfab      	itete	ge
 800d5dc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d5de:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d5e0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d5e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d5e4:	bfac      	ite	ge
 800d5e6:	18ef      	addge	r7, r5, r3
 800d5e8:	1b5e      	sublt	r6, r3, r5
 800d5ea:	9b08      	ldr	r3, [sp, #32]
 800d5ec:	1aed      	subs	r5, r5, r3
 800d5ee:	4415      	add	r5, r2
 800d5f0:	4b65      	ldr	r3, [pc, #404]	@ (800d788 <_strtod_l+0x858>)
 800d5f2:	3d01      	subs	r5, #1
 800d5f4:	429d      	cmp	r5, r3
 800d5f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d5fa:	da50      	bge.n	800d69e <_strtod_l+0x76e>
 800d5fc:	1b5b      	subs	r3, r3, r5
 800d5fe:	2b1f      	cmp	r3, #31
 800d600:	eba2 0203 	sub.w	r2, r2, r3
 800d604:	f04f 0101 	mov.w	r1, #1
 800d608:	dc3d      	bgt.n	800d686 <_strtod_l+0x756>
 800d60a:	fa01 f303 	lsl.w	r3, r1, r3
 800d60e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d610:	2300      	movs	r3, #0
 800d612:	9310      	str	r3, [sp, #64]	@ 0x40
 800d614:	18bd      	adds	r5, r7, r2
 800d616:	9b08      	ldr	r3, [sp, #32]
 800d618:	42af      	cmp	r7, r5
 800d61a:	4416      	add	r6, r2
 800d61c:	441e      	add	r6, r3
 800d61e:	463b      	mov	r3, r7
 800d620:	bfa8      	it	ge
 800d622:	462b      	movge	r3, r5
 800d624:	42b3      	cmp	r3, r6
 800d626:	bfa8      	it	ge
 800d628:	4633      	movge	r3, r6
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	bfc2      	ittt	gt
 800d62e:	1aed      	subgt	r5, r5, r3
 800d630:	1af6      	subgt	r6, r6, r3
 800d632:	1aff      	subgt	r7, r7, r3
 800d634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d636:	2b00      	cmp	r3, #0
 800d638:	dd16      	ble.n	800d668 <_strtod_l+0x738>
 800d63a:	4641      	mov	r1, r8
 800d63c:	9805      	ldr	r0, [sp, #20]
 800d63e:	461a      	mov	r2, r3
 800d640:	f7ff f9a2 	bl	800c988 <__pow5mult>
 800d644:	4680      	mov	r8, r0
 800d646:	2800      	cmp	r0, #0
 800d648:	d0ba      	beq.n	800d5c0 <_strtod_l+0x690>
 800d64a:	4601      	mov	r1, r0
 800d64c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d64e:	9805      	ldr	r0, [sp, #20]
 800d650:	f7ff f8f8 	bl	800c844 <__multiply>
 800d654:	900a      	str	r0, [sp, #40]	@ 0x28
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f ae8d 	beq.w	800d376 <_strtod_l+0x446>
 800d65c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d65e:	9805      	ldr	r0, [sp, #20]
 800d660:	f7fe ffdc 	bl	800c61c <_Bfree>
 800d664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d666:	931a      	str	r3, [sp, #104]	@ 0x68
 800d668:	2d00      	cmp	r5, #0
 800d66a:	dc1d      	bgt.n	800d6a8 <_strtod_l+0x778>
 800d66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dd23      	ble.n	800d6ba <_strtod_l+0x78a>
 800d672:	4649      	mov	r1, r9
 800d674:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d676:	9805      	ldr	r0, [sp, #20]
 800d678:	f7ff f986 	bl	800c988 <__pow5mult>
 800d67c:	4681      	mov	r9, r0
 800d67e:	b9e0      	cbnz	r0, 800d6ba <_strtod_l+0x78a>
 800d680:	f04f 0900 	mov.w	r9, #0
 800d684:	e677      	b.n	800d376 <_strtod_l+0x446>
 800d686:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d68a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d68e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d692:	35e2      	adds	r5, #226	@ 0xe2
 800d694:	fa01 f305 	lsl.w	r3, r1, r5
 800d698:	9310      	str	r3, [sp, #64]	@ 0x40
 800d69a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d69c:	e7ba      	b.n	800d614 <_strtod_l+0x6e4>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d6a6:	e7b5      	b.n	800d614 <_strtod_l+0x6e4>
 800d6a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6aa:	9805      	ldr	r0, [sp, #20]
 800d6ac:	462a      	mov	r2, r5
 800d6ae:	f7ff f9c5 	bl	800ca3c <__lshift>
 800d6b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d1d9      	bne.n	800d66c <_strtod_l+0x73c>
 800d6b8:	e65d      	b.n	800d376 <_strtod_l+0x446>
 800d6ba:	2e00      	cmp	r6, #0
 800d6bc:	dd07      	ble.n	800d6ce <_strtod_l+0x79e>
 800d6be:	4649      	mov	r1, r9
 800d6c0:	9805      	ldr	r0, [sp, #20]
 800d6c2:	4632      	mov	r2, r6
 800d6c4:	f7ff f9ba 	bl	800ca3c <__lshift>
 800d6c8:	4681      	mov	r9, r0
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d0d8      	beq.n	800d680 <_strtod_l+0x750>
 800d6ce:	2f00      	cmp	r7, #0
 800d6d0:	dd08      	ble.n	800d6e4 <_strtod_l+0x7b4>
 800d6d2:	4641      	mov	r1, r8
 800d6d4:	9805      	ldr	r0, [sp, #20]
 800d6d6:	463a      	mov	r2, r7
 800d6d8:	f7ff f9b0 	bl	800ca3c <__lshift>
 800d6dc:	4680      	mov	r8, r0
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f ae49 	beq.w	800d376 <_strtod_l+0x446>
 800d6e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6e6:	9805      	ldr	r0, [sp, #20]
 800d6e8:	464a      	mov	r2, r9
 800d6ea:	f7ff fa2f 	bl	800cb4c <__mdiff>
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	f43f ae40 	beq.w	800d376 <_strtod_l+0x446>
 800d6f6:	68c3      	ldr	r3, [r0, #12]
 800d6f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60c3      	str	r3, [r0, #12]
 800d6fe:	4641      	mov	r1, r8
 800d700:	f7ff fa08 	bl	800cb14 <__mcmp>
 800d704:	2800      	cmp	r0, #0
 800d706:	da45      	bge.n	800d794 <_strtod_l+0x864>
 800d708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d70a:	ea53 030a 	orrs.w	r3, r3, sl
 800d70e:	d16b      	bne.n	800d7e8 <_strtod_l+0x8b8>
 800d710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d714:	2b00      	cmp	r3, #0
 800d716:	d167      	bne.n	800d7e8 <_strtod_l+0x8b8>
 800d718:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d71c:	0d1b      	lsrs	r3, r3, #20
 800d71e:	051b      	lsls	r3, r3, #20
 800d720:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d724:	d960      	bls.n	800d7e8 <_strtod_l+0x8b8>
 800d726:	6963      	ldr	r3, [r4, #20]
 800d728:	b913      	cbnz	r3, 800d730 <_strtod_l+0x800>
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	dd5b      	ble.n	800d7e8 <_strtod_l+0x8b8>
 800d730:	4621      	mov	r1, r4
 800d732:	2201      	movs	r2, #1
 800d734:	9805      	ldr	r0, [sp, #20]
 800d736:	f7ff f981 	bl	800ca3c <__lshift>
 800d73a:	4641      	mov	r1, r8
 800d73c:	4604      	mov	r4, r0
 800d73e:	f7ff f9e9 	bl	800cb14 <__mcmp>
 800d742:	2800      	cmp	r0, #0
 800d744:	dd50      	ble.n	800d7e8 <_strtod_l+0x8b8>
 800d746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d74a:	9a08      	ldr	r2, [sp, #32]
 800d74c:	0d1b      	lsrs	r3, r3, #20
 800d74e:	051b      	lsls	r3, r3, #20
 800d750:	2a00      	cmp	r2, #0
 800d752:	d06a      	beq.n	800d82a <_strtod_l+0x8fa>
 800d754:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d758:	d867      	bhi.n	800d82a <_strtod_l+0x8fa>
 800d75a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d75e:	f67f ae9d 	bls.w	800d49c <_strtod_l+0x56c>
 800d762:	4b0a      	ldr	r3, [pc, #40]	@ (800d78c <_strtod_l+0x85c>)
 800d764:	4650      	mov	r0, sl
 800d766:	4659      	mov	r1, fp
 800d768:	2200      	movs	r2, #0
 800d76a:	f7f2 ff45 	bl	80005f8 <__aeabi_dmul>
 800d76e:	4b08      	ldr	r3, [pc, #32]	@ (800d790 <_strtod_l+0x860>)
 800d770:	400b      	ands	r3, r1
 800d772:	4682      	mov	sl, r0
 800d774:	468b      	mov	fp, r1
 800d776:	2b00      	cmp	r3, #0
 800d778:	f47f ae08 	bne.w	800d38c <_strtod_l+0x45c>
 800d77c:	9a05      	ldr	r2, [sp, #20]
 800d77e:	2322      	movs	r3, #34	@ 0x22
 800d780:	6013      	str	r3, [r2, #0]
 800d782:	e603      	b.n	800d38c <_strtod_l+0x45c>
 800d784:	0800f058 	.word	0x0800f058
 800d788:	fffffc02 	.word	0xfffffc02
 800d78c:	39500000 	.word	0x39500000
 800d790:	7ff00000 	.word	0x7ff00000
 800d794:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d798:	d165      	bne.n	800d866 <_strtod_l+0x936>
 800d79a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a0:	b35a      	cbz	r2, 800d7fa <_strtod_l+0x8ca>
 800d7a2:	4a9f      	ldr	r2, [pc, #636]	@ (800da20 <_strtod_l+0xaf0>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d12b      	bne.n	800d800 <_strtod_l+0x8d0>
 800d7a8:	9b08      	ldr	r3, [sp, #32]
 800d7aa:	4651      	mov	r1, sl
 800d7ac:	b303      	cbz	r3, 800d7f0 <_strtod_l+0x8c0>
 800d7ae:	4b9d      	ldr	r3, [pc, #628]	@ (800da24 <_strtod_l+0xaf4>)
 800d7b0:	465a      	mov	r2, fp
 800d7b2:	4013      	ands	r3, r2
 800d7b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7bc:	d81b      	bhi.n	800d7f6 <_strtod_l+0x8c6>
 800d7be:	0d1b      	lsrs	r3, r3, #20
 800d7c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	4299      	cmp	r1, r3
 800d7ca:	d119      	bne.n	800d800 <_strtod_l+0x8d0>
 800d7cc:	4b96      	ldr	r3, [pc, #600]	@ (800da28 <_strtod_l+0xaf8>)
 800d7ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d102      	bne.n	800d7da <_strtod_l+0x8aa>
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	f43f adce 	beq.w	800d376 <_strtod_l+0x446>
 800d7da:	4b92      	ldr	r3, [pc, #584]	@ (800da24 <_strtod_l+0xaf4>)
 800d7dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7de:	401a      	ands	r2, r3
 800d7e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d7e4:	f04f 0a00 	mov.w	sl, #0
 800d7e8:	9b08      	ldr	r3, [sp, #32]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1b9      	bne.n	800d762 <_strtod_l+0x832>
 800d7ee:	e5cd      	b.n	800d38c <_strtod_l+0x45c>
 800d7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f4:	e7e8      	b.n	800d7c8 <_strtod_l+0x898>
 800d7f6:	4613      	mov	r3, r2
 800d7f8:	e7e6      	b.n	800d7c8 <_strtod_l+0x898>
 800d7fa:	ea53 030a 	orrs.w	r3, r3, sl
 800d7fe:	d0a2      	beq.n	800d746 <_strtod_l+0x816>
 800d800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d802:	b1db      	cbz	r3, 800d83c <_strtod_l+0x90c>
 800d804:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d806:	4213      	tst	r3, r2
 800d808:	d0ee      	beq.n	800d7e8 <_strtod_l+0x8b8>
 800d80a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d80c:	9a08      	ldr	r2, [sp, #32]
 800d80e:	4650      	mov	r0, sl
 800d810:	4659      	mov	r1, fp
 800d812:	b1bb      	cbz	r3, 800d844 <_strtod_l+0x914>
 800d814:	f7ff fb6c 	bl	800cef0 <sulp>
 800d818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d81c:	ec53 2b10 	vmov	r2, r3, d0
 800d820:	f7f2 fd34 	bl	800028c <__adddf3>
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	e7de      	b.n	800d7e8 <_strtod_l+0x8b8>
 800d82a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d82e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d832:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d836:	f04f 3aff 	mov.w	sl, #4294967295
 800d83a:	e7d5      	b.n	800d7e8 <_strtod_l+0x8b8>
 800d83c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d83e:	ea13 0f0a 	tst.w	r3, sl
 800d842:	e7e1      	b.n	800d808 <_strtod_l+0x8d8>
 800d844:	f7ff fb54 	bl	800cef0 <sulp>
 800d848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d84c:	ec53 2b10 	vmov	r2, r3, d0
 800d850:	f7f2 fd1a 	bl	8000288 <__aeabi_dsub>
 800d854:	2200      	movs	r2, #0
 800d856:	2300      	movs	r3, #0
 800d858:	4682      	mov	sl, r0
 800d85a:	468b      	mov	fp, r1
 800d85c:	f7f3 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 800d860:	2800      	cmp	r0, #0
 800d862:	d0c1      	beq.n	800d7e8 <_strtod_l+0x8b8>
 800d864:	e61a      	b.n	800d49c <_strtod_l+0x56c>
 800d866:	4641      	mov	r1, r8
 800d868:	4620      	mov	r0, r4
 800d86a:	f7ff facb 	bl	800ce04 <__ratio>
 800d86e:	ec57 6b10 	vmov	r6, r7, d0
 800d872:	2200      	movs	r2, #0
 800d874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d878:	4630      	mov	r0, r6
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f3 f938 	bl	8000af0 <__aeabi_dcmple>
 800d880:	2800      	cmp	r0, #0
 800d882:	d06f      	beq.n	800d964 <_strtod_l+0xa34>
 800d884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d886:	2b00      	cmp	r3, #0
 800d888:	d17a      	bne.n	800d980 <_strtod_l+0xa50>
 800d88a:	f1ba 0f00 	cmp.w	sl, #0
 800d88e:	d158      	bne.n	800d942 <_strtod_l+0xa12>
 800d890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d896:	2b00      	cmp	r3, #0
 800d898:	d15a      	bne.n	800d950 <_strtod_l+0xa20>
 800d89a:	4b64      	ldr	r3, [pc, #400]	@ (800da2c <_strtod_l+0xafc>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	4630      	mov	r0, r6
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	f7f3 f91b 	bl	8000adc <__aeabi_dcmplt>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d159      	bne.n	800d95e <_strtod_l+0xa2e>
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	4639      	mov	r1, r7
 800d8ae:	4b60      	ldr	r3, [pc, #384]	@ (800da30 <_strtod_l+0xb00>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f7f2 fea1 	bl	80005f8 <__aeabi_dmul>
 800d8b6:	4606      	mov	r6, r0
 800d8b8:	460f      	mov	r7, r1
 800d8ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d8be:	9606      	str	r6, [sp, #24]
 800d8c0:	9307      	str	r3, [sp, #28]
 800d8c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8c6:	4d57      	ldr	r5, [pc, #348]	@ (800da24 <_strtod_l+0xaf4>)
 800d8c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ce:	401d      	ands	r5, r3
 800d8d0:	4b58      	ldr	r3, [pc, #352]	@ (800da34 <_strtod_l+0xb04>)
 800d8d2:	429d      	cmp	r5, r3
 800d8d4:	f040 80b2 	bne.w	800da3c <_strtod_l+0xb0c>
 800d8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d8de:	ec4b ab10 	vmov	d0, sl, fp
 800d8e2:	f7ff f9c7 	bl	800cc74 <__ulp>
 800d8e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d8ea:	ec51 0b10 	vmov	r0, r1, d0
 800d8ee:	f7f2 fe83 	bl	80005f8 <__aeabi_dmul>
 800d8f2:	4652      	mov	r2, sl
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	f7f2 fcc9 	bl	800028c <__adddf3>
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	4949      	ldr	r1, [pc, #292]	@ (800da24 <_strtod_l+0xaf4>)
 800d8fe:	4a4e      	ldr	r2, [pc, #312]	@ (800da38 <_strtod_l+0xb08>)
 800d900:	4019      	ands	r1, r3
 800d902:	4291      	cmp	r1, r2
 800d904:	4682      	mov	sl, r0
 800d906:	d942      	bls.n	800d98e <_strtod_l+0xa5e>
 800d908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d90a:	4b47      	ldr	r3, [pc, #284]	@ (800da28 <_strtod_l+0xaf8>)
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d103      	bne.n	800d918 <_strtod_l+0x9e8>
 800d910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d912:	3301      	adds	r3, #1
 800d914:	f43f ad2f 	beq.w	800d376 <_strtod_l+0x446>
 800d918:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800da28 <_strtod_l+0xaf8>
 800d91c:	f04f 3aff 	mov.w	sl, #4294967295
 800d920:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d922:	9805      	ldr	r0, [sp, #20]
 800d924:	f7fe fe7a 	bl	800c61c <_Bfree>
 800d928:	9805      	ldr	r0, [sp, #20]
 800d92a:	4649      	mov	r1, r9
 800d92c:	f7fe fe76 	bl	800c61c <_Bfree>
 800d930:	9805      	ldr	r0, [sp, #20]
 800d932:	4641      	mov	r1, r8
 800d934:	f7fe fe72 	bl	800c61c <_Bfree>
 800d938:	9805      	ldr	r0, [sp, #20]
 800d93a:	4621      	mov	r1, r4
 800d93c:	f7fe fe6e 	bl	800c61c <_Bfree>
 800d940:	e619      	b.n	800d576 <_strtod_l+0x646>
 800d942:	f1ba 0f01 	cmp.w	sl, #1
 800d946:	d103      	bne.n	800d950 <_strtod_l+0xa20>
 800d948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	f43f ada6 	beq.w	800d49c <_strtod_l+0x56c>
 800d950:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800da00 <_strtod_l+0xad0>
 800d954:	4f35      	ldr	r7, [pc, #212]	@ (800da2c <_strtod_l+0xafc>)
 800d956:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d95a:	2600      	movs	r6, #0
 800d95c:	e7b1      	b.n	800d8c2 <_strtod_l+0x992>
 800d95e:	4f34      	ldr	r7, [pc, #208]	@ (800da30 <_strtod_l+0xb00>)
 800d960:	2600      	movs	r6, #0
 800d962:	e7aa      	b.n	800d8ba <_strtod_l+0x98a>
 800d964:	4b32      	ldr	r3, [pc, #200]	@ (800da30 <_strtod_l+0xb00>)
 800d966:	4630      	mov	r0, r6
 800d968:	4639      	mov	r1, r7
 800d96a:	2200      	movs	r2, #0
 800d96c:	f7f2 fe44 	bl	80005f8 <__aeabi_dmul>
 800d970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d972:	4606      	mov	r6, r0
 800d974:	460f      	mov	r7, r1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d09f      	beq.n	800d8ba <_strtod_l+0x98a>
 800d97a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d97e:	e7a0      	b.n	800d8c2 <_strtod_l+0x992>
 800d980:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800da08 <_strtod_l+0xad8>
 800d984:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d988:	ec57 6b17 	vmov	r6, r7, d7
 800d98c:	e799      	b.n	800d8c2 <_strtod_l+0x992>
 800d98e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d992:	9b08      	ldr	r3, [sp, #32]
 800d994:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1c1      	bne.n	800d920 <_strtod_l+0x9f0>
 800d99c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d9a0:	0d1b      	lsrs	r3, r3, #20
 800d9a2:	051b      	lsls	r3, r3, #20
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	d1bb      	bne.n	800d920 <_strtod_l+0x9f0>
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f3 f984 	bl	8000cb8 <__aeabi_d2lz>
 800d9b0:	f7f2 fdf4 	bl	800059c <__aeabi_l2d>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	4639      	mov	r1, r7
 800d9bc:	f7f2 fc64 	bl	8000288 <__aeabi_dsub>
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d9c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ce:	ea46 060a 	orr.w	r6, r6, sl
 800d9d2:	431e      	orrs	r6, r3
 800d9d4:	d06f      	beq.n	800dab6 <_strtod_l+0xb86>
 800d9d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800da10 <_strtod_l+0xae0>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f3 f87e 	bl	8000adc <__aeabi_dcmplt>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	f47f acd3 	bne.w	800d38c <_strtod_l+0x45c>
 800d9e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800da18 <_strtod_l+0xae8>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d9f0:	f7f3 f892 	bl	8000b18 <__aeabi_dcmpgt>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d093      	beq.n	800d920 <_strtod_l+0x9f0>
 800d9f8:	e4c8      	b.n	800d38c <_strtod_l+0x45c>
 800d9fa:	bf00      	nop
 800d9fc:	f3af 8000 	nop.w
 800da00:	00000000 	.word	0x00000000
 800da04:	bff00000 	.word	0xbff00000
 800da08:	00000000 	.word	0x00000000
 800da0c:	3ff00000 	.word	0x3ff00000
 800da10:	94a03595 	.word	0x94a03595
 800da14:	3fdfffff 	.word	0x3fdfffff
 800da18:	35afe535 	.word	0x35afe535
 800da1c:	3fe00000 	.word	0x3fe00000
 800da20:	000fffff 	.word	0x000fffff
 800da24:	7ff00000 	.word	0x7ff00000
 800da28:	7fefffff 	.word	0x7fefffff
 800da2c:	3ff00000 	.word	0x3ff00000
 800da30:	3fe00000 	.word	0x3fe00000
 800da34:	7fe00000 	.word	0x7fe00000
 800da38:	7c9fffff 	.word	0x7c9fffff
 800da3c:	9b08      	ldr	r3, [sp, #32]
 800da3e:	b323      	cbz	r3, 800da8a <_strtod_l+0xb5a>
 800da40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800da44:	d821      	bhi.n	800da8a <_strtod_l+0xb5a>
 800da46:	a328      	add	r3, pc, #160	@ (adr r3, 800dae8 <_strtod_l+0xbb8>)
 800da48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4c:	4630      	mov	r0, r6
 800da4e:	4639      	mov	r1, r7
 800da50:	f7f3 f84e 	bl	8000af0 <__aeabi_dcmple>
 800da54:	b1a0      	cbz	r0, 800da80 <_strtod_l+0xb50>
 800da56:	4639      	mov	r1, r7
 800da58:	4630      	mov	r0, r6
 800da5a:	f7f3 f8a5 	bl	8000ba8 <__aeabi_d2uiz>
 800da5e:	2801      	cmp	r0, #1
 800da60:	bf38      	it	cc
 800da62:	2001      	movcc	r0, #1
 800da64:	f7f2 fd4e 	bl	8000504 <__aeabi_ui2d>
 800da68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da6a:	4606      	mov	r6, r0
 800da6c:	460f      	mov	r7, r1
 800da6e:	b9fb      	cbnz	r3, 800dab0 <_strtod_l+0xb80>
 800da70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da74:	9014      	str	r0, [sp, #80]	@ 0x50
 800da76:	9315      	str	r3, [sp, #84]	@ 0x54
 800da78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800da7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800da80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800da82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800da86:	1b5b      	subs	r3, r3, r5
 800da88:	9311      	str	r3, [sp, #68]	@ 0x44
 800da8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800da92:	f7ff f8ef 	bl	800cc74 <__ulp>
 800da96:	4650      	mov	r0, sl
 800da98:	ec53 2b10 	vmov	r2, r3, d0
 800da9c:	4659      	mov	r1, fp
 800da9e:	f7f2 fdab 	bl	80005f8 <__aeabi_dmul>
 800daa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800daa6:	f7f2 fbf1 	bl	800028c <__adddf3>
 800daaa:	4682      	mov	sl, r0
 800daac:	468b      	mov	fp, r1
 800daae:	e770      	b.n	800d992 <_strtod_l+0xa62>
 800dab0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dab4:	e7e0      	b.n	800da78 <_strtod_l+0xb48>
 800dab6:	a30e      	add	r3, pc, #56	@ (adr r3, 800daf0 <_strtod_l+0xbc0>)
 800dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabc:	f7f3 f80e 	bl	8000adc <__aeabi_dcmplt>
 800dac0:	e798      	b.n	800d9f4 <_strtod_l+0xac4>
 800dac2:	2300      	movs	r3, #0
 800dac4:	930e      	str	r3, [sp, #56]	@ 0x38
 800dac6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	f7ff ba6d 	b.w	800cfaa <_strtod_l+0x7a>
 800dad0:	2a65      	cmp	r2, #101	@ 0x65
 800dad2:	f43f ab68 	beq.w	800d1a6 <_strtod_l+0x276>
 800dad6:	2a45      	cmp	r2, #69	@ 0x45
 800dad8:	f43f ab65 	beq.w	800d1a6 <_strtod_l+0x276>
 800dadc:	2301      	movs	r3, #1
 800dade:	f7ff bba0 	b.w	800d222 <_strtod_l+0x2f2>
 800dae2:	bf00      	nop
 800dae4:	f3af 8000 	nop.w
 800dae8:	ffc00000 	.word	0xffc00000
 800daec:	41dfffff 	.word	0x41dfffff
 800daf0:	94a03595 	.word	0x94a03595
 800daf4:	3fcfffff 	.word	0x3fcfffff

0800daf8 <_strtod_r>:
 800daf8:	4b01      	ldr	r3, [pc, #4]	@ (800db00 <_strtod_r+0x8>)
 800dafa:	f7ff ba19 	b.w	800cf30 <_strtod_l>
 800dafe:	bf00      	nop
 800db00:	20000254 	.word	0x20000254

0800db04 <_strtol_l.isra.0>:
 800db04:	2b24      	cmp	r3, #36	@ 0x24
 800db06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db0a:	4686      	mov	lr, r0
 800db0c:	4690      	mov	r8, r2
 800db0e:	d801      	bhi.n	800db14 <_strtol_l.isra.0+0x10>
 800db10:	2b01      	cmp	r3, #1
 800db12:	d106      	bne.n	800db22 <_strtol_l.isra.0+0x1e>
 800db14:	f7fd fe6a 	bl	800b7ec <__errno>
 800db18:	2316      	movs	r3, #22
 800db1a:	6003      	str	r3, [r0, #0]
 800db1c:	2000      	movs	r0, #0
 800db1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db22:	4834      	ldr	r0, [pc, #208]	@ (800dbf4 <_strtol_l.isra.0+0xf0>)
 800db24:	460d      	mov	r5, r1
 800db26:	462a      	mov	r2, r5
 800db28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db2c:	5d06      	ldrb	r6, [r0, r4]
 800db2e:	f016 0608 	ands.w	r6, r6, #8
 800db32:	d1f8      	bne.n	800db26 <_strtol_l.isra.0+0x22>
 800db34:	2c2d      	cmp	r4, #45	@ 0x2d
 800db36:	d110      	bne.n	800db5a <_strtol_l.isra.0+0x56>
 800db38:	782c      	ldrb	r4, [r5, #0]
 800db3a:	2601      	movs	r6, #1
 800db3c:	1c95      	adds	r5, r2, #2
 800db3e:	f033 0210 	bics.w	r2, r3, #16
 800db42:	d115      	bne.n	800db70 <_strtol_l.isra.0+0x6c>
 800db44:	2c30      	cmp	r4, #48	@ 0x30
 800db46:	d10d      	bne.n	800db64 <_strtol_l.isra.0+0x60>
 800db48:	782a      	ldrb	r2, [r5, #0]
 800db4a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db4e:	2a58      	cmp	r2, #88	@ 0x58
 800db50:	d108      	bne.n	800db64 <_strtol_l.isra.0+0x60>
 800db52:	786c      	ldrb	r4, [r5, #1]
 800db54:	3502      	adds	r5, #2
 800db56:	2310      	movs	r3, #16
 800db58:	e00a      	b.n	800db70 <_strtol_l.isra.0+0x6c>
 800db5a:	2c2b      	cmp	r4, #43	@ 0x2b
 800db5c:	bf04      	itt	eq
 800db5e:	782c      	ldrbeq	r4, [r5, #0]
 800db60:	1c95      	addeq	r5, r2, #2
 800db62:	e7ec      	b.n	800db3e <_strtol_l.isra.0+0x3a>
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1f6      	bne.n	800db56 <_strtol_l.isra.0+0x52>
 800db68:	2c30      	cmp	r4, #48	@ 0x30
 800db6a:	bf14      	ite	ne
 800db6c:	230a      	movne	r3, #10
 800db6e:	2308      	moveq	r3, #8
 800db70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800db74:	f10c 3cff 	add.w	ip, ip, #4294967295
 800db78:	2200      	movs	r2, #0
 800db7a:	fbbc f9f3 	udiv	r9, ip, r3
 800db7e:	4610      	mov	r0, r2
 800db80:	fb03 ca19 	mls	sl, r3, r9, ip
 800db84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800db88:	2f09      	cmp	r7, #9
 800db8a:	d80f      	bhi.n	800dbac <_strtol_l.isra.0+0xa8>
 800db8c:	463c      	mov	r4, r7
 800db8e:	42a3      	cmp	r3, r4
 800db90:	dd1b      	ble.n	800dbca <_strtol_l.isra.0+0xc6>
 800db92:	1c57      	adds	r7, r2, #1
 800db94:	d007      	beq.n	800dba6 <_strtol_l.isra.0+0xa2>
 800db96:	4581      	cmp	r9, r0
 800db98:	d314      	bcc.n	800dbc4 <_strtol_l.isra.0+0xc0>
 800db9a:	d101      	bne.n	800dba0 <_strtol_l.isra.0+0x9c>
 800db9c:	45a2      	cmp	sl, r4
 800db9e:	db11      	blt.n	800dbc4 <_strtol_l.isra.0+0xc0>
 800dba0:	fb00 4003 	mla	r0, r0, r3, r4
 800dba4:	2201      	movs	r2, #1
 800dba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbaa:	e7eb      	b.n	800db84 <_strtol_l.isra.0+0x80>
 800dbac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dbb0:	2f19      	cmp	r7, #25
 800dbb2:	d801      	bhi.n	800dbb8 <_strtol_l.isra.0+0xb4>
 800dbb4:	3c37      	subs	r4, #55	@ 0x37
 800dbb6:	e7ea      	b.n	800db8e <_strtol_l.isra.0+0x8a>
 800dbb8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dbbc:	2f19      	cmp	r7, #25
 800dbbe:	d804      	bhi.n	800dbca <_strtol_l.isra.0+0xc6>
 800dbc0:	3c57      	subs	r4, #87	@ 0x57
 800dbc2:	e7e4      	b.n	800db8e <_strtol_l.isra.0+0x8a>
 800dbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc8:	e7ed      	b.n	800dba6 <_strtol_l.isra.0+0xa2>
 800dbca:	1c53      	adds	r3, r2, #1
 800dbcc:	d108      	bne.n	800dbe0 <_strtol_l.isra.0+0xdc>
 800dbce:	2322      	movs	r3, #34	@ 0x22
 800dbd0:	f8ce 3000 	str.w	r3, [lr]
 800dbd4:	4660      	mov	r0, ip
 800dbd6:	f1b8 0f00 	cmp.w	r8, #0
 800dbda:	d0a0      	beq.n	800db1e <_strtol_l.isra.0+0x1a>
 800dbdc:	1e69      	subs	r1, r5, #1
 800dbde:	e006      	b.n	800dbee <_strtol_l.isra.0+0xea>
 800dbe0:	b106      	cbz	r6, 800dbe4 <_strtol_l.isra.0+0xe0>
 800dbe2:	4240      	negs	r0, r0
 800dbe4:	f1b8 0f00 	cmp.w	r8, #0
 800dbe8:	d099      	beq.n	800db1e <_strtol_l.isra.0+0x1a>
 800dbea:	2a00      	cmp	r2, #0
 800dbec:	d1f6      	bne.n	800dbdc <_strtol_l.isra.0+0xd8>
 800dbee:	f8c8 1000 	str.w	r1, [r8]
 800dbf2:	e794      	b.n	800db1e <_strtol_l.isra.0+0x1a>
 800dbf4:	0800f081 	.word	0x0800f081

0800dbf8 <_strtol_r>:
 800dbf8:	f7ff bf84 	b.w	800db04 <_strtol_l.isra.0>

0800dbfc <__ssputs_r>:
 800dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	688e      	ldr	r6, [r1, #8]
 800dc02:	461f      	mov	r7, r3
 800dc04:	42be      	cmp	r6, r7
 800dc06:	680b      	ldr	r3, [r1, #0]
 800dc08:	4682      	mov	sl, r0
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	4690      	mov	r8, r2
 800dc0e:	d82d      	bhi.n	800dc6c <__ssputs_r+0x70>
 800dc10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc18:	d026      	beq.n	800dc68 <__ssputs_r+0x6c>
 800dc1a:	6965      	ldr	r5, [r4, #20]
 800dc1c:	6909      	ldr	r1, [r1, #16]
 800dc1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc22:	eba3 0901 	sub.w	r9, r3, r1
 800dc26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc2a:	1c7b      	adds	r3, r7, #1
 800dc2c:	444b      	add	r3, r9
 800dc2e:	106d      	asrs	r5, r5, #1
 800dc30:	429d      	cmp	r5, r3
 800dc32:	bf38      	it	cc
 800dc34:	461d      	movcc	r5, r3
 800dc36:	0553      	lsls	r3, r2, #21
 800dc38:	d527      	bpl.n	800dc8a <__ssputs_r+0x8e>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f7fc fc58 	bl	800a4f0 <_malloc_r>
 800dc40:	4606      	mov	r6, r0
 800dc42:	b360      	cbz	r0, 800dc9e <__ssputs_r+0xa2>
 800dc44:	6921      	ldr	r1, [r4, #16]
 800dc46:	464a      	mov	r2, r9
 800dc48:	f000 fbce 	bl	800e3e8 <memcpy>
 800dc4c:	89a3      	ldrh	r3, [r4, #12]
 800dc4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc56:	81a3      	strh	r3, [r4, #12]
 800dc58:	6126      	str	r6, [r4, #16]
 800dc5a:	6165      	str	r5, [r4, #20]
 800dc5c:	444e      	add	r6, r9
 800dc5e:	eba5 0509 	sub.w	r5, r5, r9
 800dc62:	6026      	str	r6, [r4, #0]
 800dc64:	60a5      	str	r5, [r4, #8]
 800dc66:	463e      	mov	r6, r7
 800dc68:	42be      	cmp	r6, r7
 800dc6a:	d900      	bls.n	800dc6e <__ssputs_r+0x72>
 800dc6c:	463e      	mov	r6, r7
 800dc6e:	6820      	ldr	r0, [r4, #0]
 800dc70:	4632      	mov	r2, r6
 800dc72:	4641      	mov	r1, r8
 800dc74:	f000 fb6a 	bl	800e34c <memmove>
 800dc78:	68a3      	ldr	r3, [r4, #8]
 800dc7a:	1b9b      	subs	r3, r3, r6
 800dc7c:	60a3      	str	r3, [r4, #8]
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	4433      	add	r3, r6
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	2000      	movs	r0, #0
 800dc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8a:	462a      	mov	r2, r5
 800dc8c:	f000 ff41 	bl	800eb12 <_realloc_r>
 800dc90:	4606      	mov	r6, r0
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d1e0      	bne.n	800dc58 <__ssputs_r+0x5c>
 800dc96:	6921      	ldr	r1, [r4, #16]
 800dc98:	4650      	mov	r0, sl
 800dc9a:	f7fe fc35 	bl	800c508 <_free_r>
 800dc9e:	230c      	movs	r3, #12
 800dca0:	f8ca 3000 	str.w	r3, [sl]
 800dca4:	89a3      	ldrh	r3, [r4, #12]
 800dca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb0:	e7e9      	b.n	800dc86 <__ssputs_r+0x8a>
	...

0800dcb4 <_svfiprintf_r>:
 800dcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb8:	4698      	mov	r8, r3
 800dcba:	898b      	ldrh	r3, [r1, #12]
 800dcbc:	061b      	lsls	r3, r3, #24
 800dcbe:	b09d      	sub	sp, #116	@ 0x74
 800dcc0:	4607      	mov	r7, r0
 800dcc2:	460d      	mov	r5, r1
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	d510      	bpl.n	800dcea <_svfiprintf_r+0x36>
 800dcc8:	690b      	ldr	r3, [r1, #16]
 800dcca:	b973      	cbnz	r3, 800dcea <_svfiprintf_r+0x36>
 800dccc:	2140      	movs	r1, #64	@ 0x40
 800dcce:	f7fc fc0f 	bl	800a4f0 <_malloc_r>
 800dcd2:	6028      	str	r0, [r5, #0]
 800dcd4:	6128      	str	r0, [r5, #16]
 800dcd6:	b930      	cbnz	r0, 800dce6 <_svfiprintf_r+0x32>
 800dcd8:	230c      	movs	r3, #12
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	b01d      	add	sp, #116	@ 0x74
 800dce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce6:	2340      	movs	r3, #64	@ 0x40
 800dce8:	616b      	str	r3, [r5, #20]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcee:	2320      	movs	r3, #32
 800dcf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dcf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcf8:	2330      	movs	r3, #48	@ 0x30
 800dcfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800de98 <_svfiprintf_r+0x1e4>
 800dcfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd02:	f04f 0901 	mov.w	r9, #1
 800dd06:	4623      	mov	r3, r4
 800dd08:	469a      	mov	sl, r3
 800dd0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd0e:	b10a      	cbz	r2, 800dd14 <_svfiprintf_r+0x60>
 800dd10:	2a25      	cmp	r2, #37	@ 0x25
 800dd12:	d1f9      	bne.n	800dd08 <_svfiprintf_r+0x54>
 800dd14:	ebba 0b04 	subs.w	fp, sl, r4
 800dd18:	d00b      	beq.n	800dd32 <_svfiprintf_r+0x7e>
 800dd1a:	465b      	mov	r3, fp
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4638      	mov	r0, r7
 800dd22:	f7ff ff6b 	bl	800dbfc <__ssputs_r>
 800dd26:	3001      	adds	r0, #1
 800dd28:	f000 80a7 	beq.w	800de7a <_svfiprintf_r+0x1c6>
 800dd2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd2e:	445a      	add	r2, fp
 800dd30:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd32:	f89a 3000 	ldrb.w	r3, [sl]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 809f 	beq.w	800de7a <_svfiprintf_r+0x1c6>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd46:	f10a 0a01 	add.w	sl, sl, #1
 800dd4a:	9304      	str	r3, [sp, #16]
 800dd4c:	9307      	str	r3, [sp, #28]
 800dd4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd52:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd54:	4654      	mov	r4, sl
 800dd56:	2205      	movs	r2, #5
 800dd58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd5c:	484e      	ldr	r0, [pc, #312]	@ (800de98 <_svfiprintf_r+0x1e4>)
 800dd5e:	f7f2 fa37 	bl	80001d0 <memchr>
 800dd62:	9a04      	ldr	r2, [sp, #16]
 800dd64:	b9d8      	cbnz	r0, 800dd9e <_svfiprintf_r+0xea>
 800dd66:	06d0      	lsls	r0, r2, #27
 800dd68:	bf44      	itt	mi
 800dd6a:	2320      	movmi	r3, #32
 800dd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd70:	0711      	lsls	r1, r2, #28
 800dd72:	bf44      	itt	mi
 800dd74:	232b      	movmi	r3, #43	@ 0x2b
 800dd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd80:	d015      	beq.n	800ddae <_svfiprintf_r+0xfa>
 800dd82:	9a07      	ldr	r2, [sp, #28]
 800dd84:	4654      	mov	r4, sl
 800dd86:	2000      	movs	r0, #0
 800dd88:	f04f 0c0a 	mov.w	ip, #10
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd92:	3b30      	subs	r3, #48	@ 0x30
 800dd94:	2b09      	cmp	r3, #9
 800dd96:	d94b      	bls.n	800de30 <_svfiprintf_r+0x17c>
 800dd98:	b1b0      	cbz	r0, 800ddc8 <_svfiprintf_r+0x114>
 800dd9a:	9207      	str	r2, [sp, #28]
 800dd9c:	e014      	b.n	800ddc8 <_svfiprintf_r+0x114>
 800dd9e:	eba0 0308 	sub.w	r3, r0, r8
 800dda2:	fa09 f303 	lsl.w	r3, r9, r3
 800dda6:	4313      	orrs	r3, r2
 800dda8:	9304      	str	r3, [sp, #16]
 800ddaa:	46a2      	mov	sl, r4
 800ddac:	e7d2      	b.n	800dd54 <_svfiprintf_r+0xa0>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	1d19      	adds	r1, r3, #4
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	bfbb      	ittet	lt
 800ddba:	425b      	neglt	r3, r3
 800ddbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ddc0:	9307      	strge	r3, [sp, #28]
 800ddc2:	9307      	strlt	r3, [sp, #28]
 800ddc4:	bfb8      	it	lt
 800ddc6:	9204      	strlt	r2, [sp, #16]
 800ddc8:	7823      	ldrb	r3, [r4, #0]
 800ddca:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddcc:	d10a      	bne.n	800dde4 <_svfiprintf_r+0x130>
 800ddce:	7863      	ldrb	r3, [r4, #1]
 800ddd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddd2:	d132      	bne.n	800de3a <_svfiprintf_r+0x186>
 800ddd4:	9b03      	ldr	r3, [sp, #12]
 800ddd6:	1d1a      	adds	r2, r3, #4
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	9203      	str	r2, [sp, #12]
 800dddc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dde0:	3402      	adds	r4, #2
 800dde2:	9305      	str	r3, [sp, #20]
 800dde4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dea8 <_svfiprintf_r+0x1f4>
 800dde8:	7821      	ldrb	r1, [r4, #0]
 800ddea:	2203      	movs	r2, #3
 800ddec:	4650      	mov	r0, sl
 800ddee:	f7f2 f9ef 	bl	80001d0 <memchr>
 800ddf2:	b138      	cbz	r0, 800de04 <_svfiprintf_r+0x150>
 800ddf4:	9b04      	ldr	r3, [sp, #16]
 800ddf6:	eba0 000a 	sub.w	r0, r0, sl
 800ddfa:	2240      	movs	r2, #64	@ 0x40
 800ddfc:	4082      	lsls	r2, r0
 800ddfe:	4313      	orrs	r3, r2
 800de00:	3401      	adds	r4, #1
 800de02:	9304      	str	r3, [sp, #16]
 800de04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de08:	4824      	ldr	r0, [pc, #144]	@ (800de9c <_svfiprintf_r+0x1e8>)
 800de0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de0e:	2206      	movs	r2, #6
 800de10:	f7f2 f9de 	bl	80001d0 <memchr>
 800de14:	2800      	cmp	r0, #0
 800de16:	d036      	beq.n	800de86 <_svfiprintf_r+0x1d2>
 800de18:	4b21      	ldr	r3, [pc, #132]	@ (800dea0 <_svfiprintf_r+0x1ec>)
 800de1a:	bb1b      	cbnz	r3, 800de64 <_svfiprintf_r+0x1b0>
 800de1c:	9b03      	ldr	r3, [sp, #12]
 800de1e:	3307      	adds	r3, #7
 800de20:	f023 0307 	bic.w	r3, r3, #7
 800de24:	3308      	adds	r3, #8
 800de26:	9303      	str	r3, [sp, #12]
 800de28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de2a:	4433      	add	r3, r6
 800de2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de2e:	e76a      	b.n	800dd06 <_svfiprintf_r+0x52>
 800de30:	fb0c 3202 	mla	r2, ip, r2, r3
 800de34:	460c      	mov	r4, r1
 800de36:	2001      	movs	r0, #1
 800de38:	e7a8      	b.n	800dd8c <_svfiprintf_r+0xd8>
 800de3a:	2300      	movs	r3, #0
 800de3c:	3401      	adds	r4, #1
 800de3e:	9305      	str	r3, [sp, #20]
 800de40:	4619      	mov	r1, r3
 800de42:	f04f 0c0a 	mov.w	ip, #10
 800de46:	4620      	mov	r0, r4
 800de48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de4c:	3a30      	subs	r2, #48	@ 0x30
 800de4e:	2a09      	cmp	r2, #9
 800de50:	d903      	bls.n	800de5a <_svfiprintf_r+0x1a6>
 800de52:	2b00      	cmp	r3, #0
 800de54:	d0c6      	beq.n	800dde4 <_svfiprintf_r+0x130>
 800de56:	9105      	str	r1, [sp, #20]
 800de58:	e7c4      	b.n	800dde4 <_svfiprintf_r+0x130>
 800de5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800de5e:	4604      	mov	r4, r0
 800de60:	2301      	movs	r3, #1
 800de62:	e7f0      	b.n	800de46 <_svfiprintf_r+0x192>
 800de64:	ab03      	add	r3, sp, #12
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	462a      	mov	r2, r5
 800de6a:	4b0e      	ldr	r3, [pc, #56]	@ (800dea4 <_svfiprintf_r+0x1f0>)
 800de6c:	a904      	add	r1, sp, #16
 800de6e:	4638      	mov	r0, r7
 800de70:	f7fc fc6a 	bl	800a748 <_printf_float>
 800de74:	1c42      	adds	r2, r0, #1
 800de76:	4606      	mov	r6, r0
 800de78:	d1d6      	bne.n	800de28 <_svfiprintf_r+0x174>
 800de7a:	89ab      	ldrh	r3, [r5, #12]
 800de7c:	065b      	lsls	r3, r3, #25
 800de7e:	f53f af2d 	bmi.w	800dcdc <_svfiprintf_r+0x28>
 800de82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de84:	e72c      	b.n	800dce0 <_svfiprintf_r+0x2c>
 800de86:	ab03      	add	r3, sp, #12
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	462a      	mov	r2, r5
 800de8c:	4b05      	ldr	r3, [pc, #20]	@ (800dea4 <_svfiprintf_r+0x1f0>)
 800de8e:	a904      	add	r1, sp, #16
 800de90:	4638      	mov	r0, r7
 800de92:	f7fc fef1 	bl	800ac78 <_printf_i>
 800de96:	e7ed      	b.n	800de74 <_svfiprintf_r+0x1c0>
 800de98:	0800ee79 	.word	0x0800ee79
 800de9c:	0800ee83 	.word	0x0800ee83
 800dea0:	0800a749 	.word	0x0800a749
 800dea4:	0800dbfd 	.word	0x0800dbfd
 800dea8:	0800ee7f 	.word	0x0800ee7f

0800deac <__sfputc_r>:
 800deac:	6893      	ldr	r3, [r2, #8]
 800deae:	3b01      	subs	r3, #1
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	b410      	push	{r4}
 800deb4:	6093      	str	r3, [r2, #8]
 800deb6:	da08      	bge.n	800deca <__sfputc_r+0x1e>
 800deb8:	6994      	ldr	r4, [r2, #24]
 800deba:	42a3      	cmp	r3, r4
 800debc:	db01      	blt.n	800dec2 <__sfputc_r+0x16>
 800debe:	290a      	cmp	r1, #10
 800dec0:	d103      	bne.n	800deca <__sfputc_r+0x1e>
 800dec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dec6:	f7fd bb9a 	b.w	800b5fe <__swbuf_r>
 800deca:	6813      	ldr	r3, [r2, #0]
 800decc:	1c58      	adds	r0, r3, #1
 800dece:	6010      	str	r0, [r2, #0]
 800ded0:	7019      	strb	r1, [r3, #0]
 800ded2:	4608      	mov	r0, r1
 800ded4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <__sfputs_r>:
 800deda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dedc:	4606      	mov	r6, r0
 800dede:	460f      	mov	r7, r1
 800dee0:	4614      	mov	r4, r2
 800dee2:	18d5      	adds	r5, r2, r3
 800dee4:	42ac      	cmp	r4, r5
 800dee6:	d101      	bne.n	800deec <__sfputs_r+0x12>
 800dee8:	2000      	movs	r0, #0
 800deea:	e007      	b.n	800defc <__sfputs_r+0x22>
 800deec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800def0:	463a      	mov	r2, r7
 800def2:	4630      	mov	r0, r6
 800def4:	f7ff ffda 	bl	800deac <__sfputc_r>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d1f3      	bne.n	800dee4 <__sfputs_r+0xa>
 800defc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df00 <_vfiprintf_r>:
 800df00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df04:	460d      	mov	r5, r1
 800df06:	b09d      	sub	sp, #116	@ 0x74
 800df08:	4614      	mov	r4, r2
 800df0a:	4698      	mov	r8, r3
 800df0c:	4606      	mov	r6, r0
 800df0e:	b118      	cbz	r0, 800df18 <_vfiprintf_r+0x18>
 800df10:	6a03      	ldr	r3, [r0, #32]
 800df12:	b90b      	cbnz	r3, 800df18 <_vfiprintf_r+0x18>
 800df14:	f7fd fa68 	bl	800b3e8 <__sinit>
 800df18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df1a:	07d9      	lsls	r1, r3, #31
 800df1c:	d405      	bmi.n	800df2a <_vfiprintf_r+0x2a>
 800df1e:	89ab      	ldrh	r3, [r5, #12]
 800df20:	059a      	lsls	r2, r3, #22
 800df22:	d402      	bmi.n	800df2a <_vfiprintf_r+0x2a>
 800df24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df26:	f7fd fc8c 	bl	800b842 <__retarget_lock_acquire_recursive>
 800df2a:	89ab      	ldrh	r3, [r5, #12]
 800df2c:	071b      	lsls	r3, r3, #28
 800df2e:	d501      	bpl.n	800df34 <_vfiprintf_r+0x34>
 800df30:	692b      	ldr	r3, [r5, #16]
 800df32:	b99b      	cbnz	r3, 800df5c <_vfiprintf_r+0x5c>
 800df34:	4629      	mov	r1, r5
 800df36:	4630      	mov	r0, r6
 800df38:	f7fd fba0 	bl	800b67c <__swsetup_r>
 800df3c:	b170      	cbz	r0, 800df5c <_vfiprintf_r+0x5c>
 800df3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df40:	07dc      	lsls	r4, r3, #31
 800df42:	d504      	bpl.n	800df4e <_vfiprintf_r+0x4e>
 800df44:	f04f 30ff 	mov.w	r0, #4294967295
 800df48:	b01d      	add	sp, #116	@ 0x74
 800df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4e:	89ab      	ldrh	r3, [r5, #12]
 800df50:	0598      	lsls	r0, r3, #22
 800df52:	d4f7      	bmi.n	800df44 <_vfiprintf_r+0x44>
 800df54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df56:	f7fd fc75 	bl	800b844 <__retarget_lock_release_recursive>
 800df5a:	e7f3      	b.n	800df44 <_vfiprintf_r+0x44>
 800df5c:	2300      	movs	r3, #0
 800df5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800df60:	2320      	movs	r3, #32
 800df62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df66:	f8cd 800c 	str.w	r8, [sp, #12]
 800df6a:	2330      	movs	r3, #48	@ 0x30
 800df6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e11c <_vfiprintf_r+0x21c>
 800df70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df74:	f04f 0901 	mov.w	r9, #1
 800df78:	4623      	mov	r3, r4
 800df7a:	469a      	mov	sl, r3
 800df7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df80:	b10a      	cbz	r2, 800df86 <_vfiprintf_r+0x86>
 800df82:	2a25      	cmp	r2, #37	@ 0x25
 800df84:	d1f9      	bne.n	800df7a <_vfiprintf_r+0x7a>
 800df86:	ebba 0b04 	subs.w	fp, sl, r4
 800df8a:	d00b      	beq.n	800dfa4 <_vfiprintf_r+0xa4>
 800df8c:	465b      	mov	r3, fp
 800df8e:	4622      	mov	r2, r4
 800df90:	4629      	mov	r1, r5
 800df92:	4630      	mov	r0, r6
 800df94:	f7ff ffa1 	bl	800deda <__sfputs_r>
 800df98:	3001      	adds	r0, #1
 800df9a:	f000 80a7 	beq.w	800e0ec <_vfiprintf_r+0x1ec>
 800df9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfa0:	445a      	add	r2, fp
 800dfa2:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfa4:	f89a 3000 	ldrb.w	r3, [sl]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f000 809f 	beq.w	800e0ec <_vfiprintf_r+0x1ec>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfb8:	f10a 0a01 	add.w	sl, sl, #1
 800dfbc:	9304      	str	r3, [sp, #16]
 800dfbe:	9307      	str	r3, [sp, #28]
 800dfc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfc6:	4654      	mov	r4, sl
 800dfc8:	2205      	movs	r2, #5
 800dfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfce:	4853      	ldr	r0, [pc, #332]	@ (800e11c <_vfiprintf_r+0x21c>)
 800dfd0:	f7f2 f8fe 	bl	80001d0 <memchr>
 800dfd4:	9a04      	ldr	r2, [sp, #16]
 800dfd6:	b9d8      	cbnz	r0, 800e010 <_vfiprintf_r+0x110>
 800dfd8:	06d1      	lsls	r1, r2, #27
 800dfda:	bf44      	itt	mi
 800dfdc:	2320      	movmi	r3, #32
 800dfde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfe2:	0713      	lsls	r3, r2, #28
 800dfe4:	bf44      	itt	mi
 800dfe6:	232b      	movmi	r3, #43	@ 0x2b
 800dfe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfec:	f89a 3000 	ldrb.w	r3, [sl]
 800dff0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dff2:	d015      	beq.n	800e020 <_vfiprintf_r+0x120>
 800dff4:	9a07      	ldr	r2, [sp, #28]
 800dff6:	4654      	mov	r4, sl
 800dff8:	2000      	movs	r0, #0
 800dffa:	f04f 0c0a 	mov.w	ip, #10
 800dffe:	4621      	mov	r1, r4
 800e000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e004:	3b30      	subs	r3, #48	@ 0x30
 800e006:	2b09      	cmp	r3, #9
 800e008:	d94b      	bls.n	800e0a2 <_vfiprintf_r+0x1a2>
 800e00a:	b1b0      	cbz	r0, 800e03a <_vfiprintf_r+0x13a>
 800e00c:	9207      	str	r2, [sp, #28]
 800e00e:	e014      	b.n	800e03a <_vfiprintf_r+0x13a>
 800e010:	eba0 0308 	sub.w	r3, r0, r8
 800e014:	fa09 f303 	lsl.w	r3, r9, r3
 800e018:	4313      	orrs	r3, r2
 800e01a:	9304      	str	r3, [sp, #16]
 800e01c:	46a2      	mov	sl, r4
 800e01e:	e7d2      	b.n	800dfc6 <_vfiprintf_r+0xc6>
 800e020:	9b03      	ldr	r3, [sp, #12]
 800e022:	1d19      	adds	r1, r3, #4
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	9103      	str	r1, [sp, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	bfbb      	ittet	lt
 800e02c:	425b      	neglt	r3, r3
 800e02e:	f042 0202 	orrlt.w	r2, r2, #2
 800e032:	9307      	strge	r3, [sp, #28]
 800e034:	9307      	strlt	r3, [sp, #28]
 800e036:	bfb8      	it	lt
 800e038:	9204      	strlt	r2, [sp, #16]
 800e03a:	7823      	ldrb	r3, [r4, #0]
 800e03c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e03e:	d10a      	bne.n	800e056 <_vfiprintf_r+0x156>
 800e040:	7863      	ldrb	r3, [r4, #1]
 800e042:	2b2a      	cmp	r3, #42	@ 0x2a
 800e044:	d132      	bne.n	800e0ac <_vfiprintf_r+0x1ac>
 800e046:	9b03      	ldr	r3, [sp, #12]
 800e048:	1d1a      	adds	r2, r3, #4
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	9203      	str	r2, [sp, #12]
 800e04e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e052:	3402      	adds	r4, #2
 800e054:	9305      	str	r3, [sp, #20]
 800e056:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e12c <_vfiprintf_r+0x22c>
 800e05a:	7821      	ldrb	r1, [r4, #0]
 800e05c:	2203      	movs	r2, #3
 800e05e:	4650      	mov	r0, sl
 800e060:	f7f2 f8b6 	bl	80001d0 <memchr>
 800e064:	b138      	cbz	r0, 800e076 <_vfiprintf_r+0x176>
 800e066:	9b04      	ldr	r3, [sp, #16]
 800e068:	eba0 000a 	sub.w	r0, r0, sl
 800e06c:	2240      	movs	r2, #64	@ 0x40
 800e06e:	4082      	lsls	r2, r0
 800e070:	4313      	orrs	r3, r2
 800e072:	3401      	adds	r4, #1
 800e074:	9304      	str	r3, [sp, #16]
 800e076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07a:	4829      	ldr	r0, [pc, #164]	@ (800e120 <_vfiprintf_r+0x220>)
 800e07c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e080:	2206      	movs	r2, #6
 800e082:	f7f2 f8a5 	bl	80001d0 <memchr>
 800e086:	2800      	cmp	r0, #0
 800e088:	d03f      	beq.n	800e10a <_vfiprintf_r+0x20a>
 800e08a:	4b26      	ldr	r3, [pc, #152]	@ (800e124 <_vfiprintf_r+0x224>)
 800e08c:	bb1b      	cbnz	r3, 800e0d6 <_vfiprintf_r+0x1d6>
 800e08e:	9b03      	ldr	r3, [sp, #12]
 800e090:	3307      	adds	r3, #7
 800e092:	f023 0307 	bic.w	r3, r3, #7
 800e096:	3308      	adds	r3, #8
 800e098:	9303      	str	r3, [sp, #12]
 800e09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e09c:	443b      	add	r3, r7
 800e09e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0a0:	e76a      	b.n	800df78 <_vfiprintf_r+0x78>
 800e0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	e7a8      	b.n	800dffe <_vfiprintf_r+0xfe>
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	3401      	adds	r4, #1
 800e0b0:	9305      	str	r3, [sp, #20]
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	f04f 0c0a 	mov.w	ip, #10
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0be:	3a30      	subs	r2, #48	@ 0x30
 800e0c0:	2a09      	cmp	r2, #9
 800e0c2:	d903      	bls.n	800e0cc <_vfiprintf_r+0x1cc>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d0c6      	beq.n	800e056 <_vfiprintf_r+0x156>
 800e0c8:	9105      	str	r1, [sp, #20]
 800e0ca:	e7c4      	b.n	800e056 <_vfiprintf_r+0x156>
 800e0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0d0:	4604      	mov	r4, r0
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e7f0      	b.n	800e0b8 <_vfiprintf_r+0x1b8>
 800e0d6:	ab03      	add	r3, sp, #12
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	462a      	mov	r2, r5
 800e0dc:	4b12      	ldr	r3, [pc, #72]	@ (800e128 <_vfiprintf_r+0x228>)
 800e0de:	a904      	add	r1, sp, #16
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f7fc fb31 	bl	800a748 <_printf_float>
 800e0e6:	4607      	mov	r7, r0
 800e0e8:	1c78      	adds	r0, r7, #1
 800e0ea:	d1d6      	bne.n	800e09a <_vfiprintf_r+0x19a>
 800e0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0ee:	07d9      	lsls	r1, r3, #31
 800e0f0:	d405      	bmi.n	800e0fe <_vfiprintf_r+0x1fe>
 800e0f2:	89ab      	ldrh	r3, [r5, #12]
 800e0f4:	059a      	lsls	r2, r3, #22
 800e0f6:	d402      	bmi.n	800e0fe <_vfiprintf_r+0x1fe>
 800e0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0fa:	f7fd fba3 	bl	800b844 <__retarget_lock_release_recursive>
 800e0fe:	89ab      	ldrh	r3, [r5, #12]
 800e100:	065b      	lsls	r3, r3, #25
 800e102:	f53f af1f 	bmi.w	800df44 <_vfiprintf_r+0x44>
 800e106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e108:	e71e      	b.n	800df48 <_vfiprintf_r+0x48>
 800e10a:	ab03      	add	r3, sp, #12
 800e10c:	9300      	str	r3, [sp, #0]
 800e10e:	462a      	mov	r2, r5
 800e110:	4b05      	ldr	r3, [pc, #20]	@ (800e128 <_vfiprintf_r+0x228>)
 800e112:	a904      	add	r1, sp, #16
 800e114:	4630      	mov	r0, r6
 800e116:	f7fc fdaf 	bl	800ac78 <_printf_i>
 800e11a:	e7e4      	b.n	800e0e6 <_vfiprintf_r+0x1e6>
 800e11c:	0800ee79 	.word	0x0800ee79
 800e120:	0800ee83 	.word	0x0800ee83
 800e124:	0800a749 	.word	0x0800a749
 800e128:	0800dedb 	.word	0x0800dedb
 800e12c:	0800ee7f 	.word	0x0800ee7f

0800e130 <__sflush_r>:
 800e130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e138:	0716      	lsls	r6, r2, #28
 800e13a:	4605      	mov	r5, r0
 800e13c:	460c      	mov	r4, r1
 800e13e:	d454      	bmi.n	800e1ea <__sflush_r+0xba>
 800e140:	684b      	ldr	r3, [r1, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	dc02      	bgt.n	800e14c <__sflush_r+0x1c>
 800e146:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e148:	2b00      	cmp	r3, #0
 800e14a:	dd48      	ble.n	800e1de <__sflush_r+0xae>
 800e14c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e14e:	2e00      	cmp	r6, #0
 800e150:	d045      	beq.n	800e1de <__sflush_r+0xae>
 800e152:	2300      	movs	r3, #0
 800e154:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e158:	682f      	ldr	r7, [r5, #0]
 800e15a:	6a21      	ldr	r1, [r4, #32]
 800e15c:	602b      	str	r3, [r5, #0]
 800e15e:	d030      	beq.n	800e1c2 <__sflush_r+0x92>
 800e160:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	0759      	lsls	r1, r3, #29
 800e166:	d505      	bpl.n	800e174 <__sflush_r+0x44>
 800e168:	6863      	ldr	r3, [r4, #4]
 800e16a:	1ad2      	subs	r2, r2, r3
 800e16c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e16e:	b10b      	cbz	r3, 800e174 <__sflush_r+0x44>
 800e170:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e172:	1ad2      	subs	r2, r2, r3
 800e174:	2300      	movs	r3, #0
 800e176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e178:	6a21      	ldr	r1, [r4, #32]
 800e17a:	4628      	mov	r0, r5
 800e17c:	47b0      	blx	r6
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	89a3      	ldrh	r3, [r4, #12]
 800e182:	d106      	bne.n	800e192 <__sflush_r+0x62>
 800e184:	6829      	ldr	r1, [r5, #0]
 800e186:	291d      	cmp	r1, #29
 800e188:	d82b      	bhi.n	800e1e2 <__sflush_r+0xb2>
 800e18a:	4a2a      	ldr	r2, [pc, #168]	@ (800e234 <__sflush_r+0x104>)
 800e18c:	40ca      	lsrs	r2, r1
 800e18e:	07d6      	lsls	r6, r2, #31
 800e190:	d527      	bpl.n	800e1e2 <__sflush_r+0xb2>
 800e192:	2200      	movs	r2, #0
 800e194:	6062      	str	r2, [r4, #4]
 800e196:	04d9      	lsls	r1, r3, #19
 800e198:	6922      	ldr	r2, [r4, #16]
 800e19a:	6022      	str	r2, [r4, #0]
 800e19c:	d504      	bpl.n	800e1a8 <__sflush_r+0x78>
 800e19e:	1c42      	adds	r2, r0, #1
 800e1a0:	d101      	bne.n	800e1a6 <__sflush_r+0x76>
 800e1a2:	682b      	ldr	r3, [r5, #0]
 800e1a4:	b903      	cbnz	r3, 800e1a8 <__sflush_r+0x78>
 800e1a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e1a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e1aa:	602f      	str	r7, [r5, #0]
 800e1ac:	b1b9      	cbz	r1, 800e1de <__sflush_r+0xae>
 800e1ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1b2:	4299      	cmp	r1, r3
 800e1b4:	d002      	beq.n	800e1bc <__sflush_r+0x8c>
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	f7fe f9a6 	bl	800c508 <_free_r>
 800e1bc:	2300      	movs	r3, #0
 800e1be:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1c0:	e00d      	b.n	800e1de <__sflush_r+0xae>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	47b0      	blx	r6
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	1c50      	adds	r0, r2, #1
 800e1cc:	d1c9      	bne.n	800e162 <__sflush_r+0x32>
 800e1ce:	682b      	ldr	r3, [r5, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0c6      	beq.n	800e162 <__sflush_r+0x32>
 800e1d4:	2b1d      	cmp	r3, #29
 800e1d6:	d001      	beq.n	800e1dc <__sflush_r+0xac>
 800e1d8:	2b16      	cmp	r3, #22
 800e1da:	d11e      	bne.n	800e21a <__sflush_r+0xea>
 800e1dc:	602f      	str	r7, [r5, #0]
 800e1de:	2000      	movs	r0, #0
 800e1e0:	e022      	b.n	800e228 <__sflush_r+0xf8>
 800e1e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1e6:	b21b      	sxth	r3, r3
 800e1e8:	e01b      	b.n	800e222 <__sflush_r+0xf2>
 800e1ea:	690f      	ldr	r7, [r1, #16]
 800e1ec:	2f00      	cmp	r7, #0
 800e1ee:	d0f6      	beq.n	800e1de <__sflush_r+0xae>
 800e1f0:	0793      	lsls	r3, r2, #30
 800e1f2:	680e      	ldr	r6, [r1, #0]
 800e1f4:	bf08      	it	eq
 800e1f6:	694b      	ldreq	r3, [r1, #20]
 800e1f8:	600f      	str	r7, [r1, #0]
 800e1fa:	bf18      	it	ne
 800e1fc:	2300      	movne	r3, #0
 800e1fe:	eba6 0807 	sub.w	r8, r6, r7
 800e202:	608b      	str	r3, [r1, #8]
 800e204:	f1b8 0f00 	cmp.w	r8, #0
 800e208:	dde9      	ble.n	800e1de <__sflush_r+0xae>
 800e20a:	6a21      	ldr	r1, [r4, #32]
 800e20c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e20e:	4643      	mov	r3, r8
 800e210:	463a      	mov	r2, r7
 800e212:	4628      	mov	r0, r5
 800e214:	47b0      	blx	r6
 800e216:	2800      	cmp	r0, #0
 800e218:	dc08      	bgt.n	800e22c <__sflush_r+0xfc>
 800e21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e21e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e222:	81a3      	strh	r3, [r4, #12]
 800e224:	f04f 30ff 	mov.w	r0, #4294967295
 800e228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e22c:	4407      	add	r7, r0
 800e22e:	eba8 0800 	sub.w	r8, r8, r0
 800e232:	e7e7      	b.n	800e204 <__sflush_r+0xd4>
 800e234:	20400001 	.word	0x20400001

0800e238 <_fflush_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	690b      	ldr	r3, [r1, #16]
 800e23c:	4605      	mov	r5, r0
 800e23e:	460c      	mov	r4, r1
 800e240:	b913      	cbnz	r3, 800e248 <_fflush_r+0x10>
 800e242:	2500      	movs	r5, #0
 800e244:	4628      	mov	r0, r5
 800e246:	bd38      	pop	{r3, r4, r5, pc}
 800e248:	b118      	cbz	r0, 800e252 <_fflush_r+0x1a>
 800e24a:	6a03      	ldr	r3, [r0, #32]
 800e24c:	b90b      	cbnz	r3, 800e252 <_fflush_r+0x1a>
 800e24e:	f7fd f8cb 	bl	800b3e8 <__sinit>
 800e252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0f3      	beq.n	800e242 <_fflush_r+0xa>
 800e25a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e25c:	07d0      	lsls	r0, r2, #31
 800e25e:	d404      	bmi.n	800e26a <_fflush_r+0x32>
 800e260:	0599      	lsls	r1, r3, #22
 800e262:	d402      	bmi.n	800e26a <_fflush_r+0x32>
 800e264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e266:	f7fd faec 	bl	800b842 <__retarget_lock_acquire_recursive>
 800e26a:	4628      	mov	r0, r5
 800e26c:	4621      	mov	r1, r4
 800e26e:	f7ff ff5f 	bl	800e130 <__sflush_r>
 800e272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e274:	07da      	lsls	r2, r3, #31
 800e276:	4605      	mov	r5, r0
 800e278:	d4e4      	bmi.n	800e244 <_fflush_r+0xc>
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	059b      	lsls	r3, r3, #22
 800e27e:	d4e1      	bmi.n	800e244 <_fflush_r+0xc>
 800e280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e282:	f7fd fadf 	bl	800b844 <__retarget_lock_release_recursive>
 800e286:	e7dd      	b.n	800e244 <_fflush_r+0xc>

0800e288 <__swhatbuf_r>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e290:	2900      	cmp	r1, #0
 800e292:	b096      	sub	sp, #88	@ 0x58
 800e294:	4615      	mov	r5, r2
 800e296:	461e      	mov	r6, r3
 800e298:	da0d      	bge.n	800e2b6 <__swhatbuf_r+0x2e>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e2a0:	f04f 0100 	mov.w	r1, #0
 800e2a4:	bf14      	ite	ne
 800e2a6:	2340      	movne	r3, #64	@ 0x40
 800e2a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	6031      	str	r1, [r6, #0]
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	b016      	add	sp, #88	@ 0x58
 800e2b4:	bd70      	pop	{r4, r5, r6, pc}
 800e2b6:	466a      	mov	r2, sp
 800e2b8:	f000 f874 	bl	800e3a4 <_fstat_r>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	dbec      	blt.n	800e29a <__swhatbuf_r+0x12>
 800e2c0:	9901      	ldr	r1, [sp, #4]
 800e2c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2ca:	4259      	negs	r1, r3
 800e2cc:	4159      	adcs	r1, r3
 800e2ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2d2:	e7eb      	b.n	800e2ac <__swhatbuf_r+0x24>

0800e2d4 <__smakebuf_r>:
 800e2d4:	898b      	ldrh	r3, [r1, #12]
 800e2d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2d8:	079d      	lsls	r5, r3, #30
 800e2da:	4606      	mov	r6, r0
 800e2dc:	460c      	mov	r4, r1
 800e2de:	d507      	bpl.n	800e2f0 <__smakebuf_r+0x1c>
 800e2e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	6123      	str	r3, [r4, #16]
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	6163      	str	r3, [r4, #20]
 800e2ec:	b003      	add	sp, #12
 800e2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2f0:	ab01      	add	r3, sp, #4
 800e2f2:	466a      	mov	r2, sp
 800e2f4:	f7ff ffc8 	bl	800e288 <__swhatbuf_r>
 800e2f8:	9f00      	ldr	r7, [sp, #0]
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7fc f8f6 	bl	800a4f0 <_malloc_r>
 800e304:	b948      	cbnz	r0, 800e31a <__smakebuf_r+0x46>
 800e306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e30a:	059a      	lsls	r2, r3, #22
 800e30c:	d4ee      	bmi.n	800e2ec <__smakebuf_r+0x18>
 800e30e:	f023 0303 	bic.w	r3, r3, #3
 800e312:	f043 0302 	orr.w	r3, r3, #2
 800e316:	81a3      	strh	r3, [r4, #12]
 800e318:	e7e2      	b.n	800e2e0 <__smakebuf_r+0xc>
 800e31a:	89a3      	ldrh	r3, [r4, #12]
 800e31c:	6020      	str	r0, [r4, #0]
 800e31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	9b01      	ldr	r3, [sp, #4]
 800e326:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e32a:	b15b      	cbz	r3, 800e344 <__smakebuf_r+0x70>
 800e32c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e330:	4630      	mov	r0, r6
 800e332:	f000 f849 	bl	800e3c8 <_isatty_r>
 800e336:	b128      	cbz	r0, 800e344 <__smakebuf_r+0x70>
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	f023 0303 	bic.w	r3, r3, #3
 800e33e:	f043 0301 	orr.w	r3, r3, #1
 800e342:	81a3      	strh	r3, [r4, #12]
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	431d      	orrs	r5, r3
 800e348:	81a5      	strh	r5, [r4, #12]
 800e34a:	e7cf      	b.n	800e2ec <__smakebuf_r+0x18>

0800e34c <memmove>:
 800e34c:	4288      	cmp	r0, r1
 800e34e:	b510      	push	{r4, lr}
 800e350:	eb01 0402 	add.w	r4, r1, r2
 800e354:	d902      	bls.n	800e35c <memmove+0x10>
 800e356:	4284      	cmp	r4, r0
 800e358:	4623      	mov	r3, r4
 800e35a:	d807      	bhi.n	800e36c <memmove+0x20>
 800e35c:	1e43      	subs	r3, r0, #1
 800e35e:	42a1      	cmp	r1, r4
 800e360:	d008      	beq.n	800e374 <memmove+0x28>
 800e362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e36a:	e7f8      	b.n	800e35e <memmove+0x12>
 800e36c:	4402      	add	r2, r0
 800e36e:	4601      	mov	r1, r0
 800e370:	428a      	cmp	r2, r1
 800e372:	d100      	bne.n	800e376 <memmove+0x2a>
 800e374:	bd10      	pop	{r4, pc}
 800e376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e37a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e37e:	e7f7      	b.n	800e370 <memmove+0x24>

0800e380 <strncmp>:
 800e380:	b510      	push	{r4, lr}
 800e382:	b16a      	cbz	r2, 800e3a0 <strncmp+0x20>
 800e384:	3901      	subs	r1, #1
 800e386:	1884      	adds	r4, r0, r2
 800e388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e38c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e390:	429a      	cmp	r2, r3
 800e392:	d103      	bne.n	800e39c <strncmp+0x1c>
 800e394:	42a0      	cmp	r0, r4
 800e396:	d001      	beq.n	800e39c <strncmp+0x1c>
 800e398:	2a00      	cmp	r2, #0
 800e39a:	d1f5      	bne.n	800e388 <strncmp+0x8>
 800e39c:	1ad0      	subs	r0, r2, r3
 800e39e:	bd10      	pop	{r4, pc}
 800e3a0:	4610      	mov	r0, r2
 800e3a2:	e7fc      	b.n	800e39e <strncmp+0x1e>

0800e3a4 <_fstat_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4d07      	ldr	r5, [pc, #28]	@ (800e3c4 <_fstat_r+0x20>)
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	602b      	str	r3, [r5, #0]
 800e3b2:	f7f3 fba1 	bl	8001af8 <_fstat>
 800e3b6:	1c43      	adds	r3, r0, #1
 800e3b8:	d102      	bne.n	800e3c0 <_fstat_r+0x1c>
 800e3ba:	682b      	ldr	r3, [r5, #0]
 800e3bc:	b103      	cbz	r3, 800e3c0 <_fstat_r+0x1c>
 800e3be:	6023      	str	r3, [r4, #0]
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	bf00      	nop
 800e3c4:	2000200c 	.word	0x2000200c

0800e3c8 <_isatty_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d06      	ldr	r5, [pc, #24]	@ (800e3e4 <_isatty_r+0x1c>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	f7f3 fba0 	bl	8001b18 <_isatty>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_isatty_r+0x1a>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_isatty_r+0x1a>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	2000200c 	.word	0x2000200c

0800e3e8 <memcpy>:
 800e3e8:	440a      	add	r2, r1
 800e3ea:	4291      	cmp	r1, r2
 800e3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3f0:	d100      	bne.n	800e3f4 <memcpy+0xc>
 800e3f2:	4770      	bx	lr
 800e3f4:	b510      	push	{r4, lr}
 800e3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3fe:	4291      	cmp	r1, r2
 800e400:	d1f9      	bne.n	800e3f6 <memcpy+0xe>
 800e402:	bd10      	pop	{r4, pc}
 800e404:	0000      	movs	r0, r0
	...

0800e408 <nan>:
 800e408:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e410 <nan+0x8>
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	00000000 	.word	0x00000000
 800e414:	7ff80000 	.word	0x7ff80000

0800e418 <__assert_func>:
 800e418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e41a:	4614      	mov	r4, r2
 800e41c:	461a      	mov	r2, r3
 800e41e:	4b09      	ldr	r3, [pc, #36]	@ (800e444 <__assert_func+0x2c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4605      	mov	r5, r0
 800e424:	68d8      	ldr	r0, [r3, #12]
 800e426:	b14c      	cbz	r4, 800e43c <__assert_func+0x24>
 800e428:	4b07      	ldr	r3, [pc, #28]	@ (800e448 <__assert_func+0x30>)
 800e42a:	9100      	str	r1, [sp, #0]
 800e42c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e430:	4906      	ldr	r1, [pc, #24]	@ (800e44c <__assert_func+0x34>)
 800e432:	462b      	mov	r3, r5
 800e434:	f000 fba8 	bl	800eb88 <fiprintf>
 800e438:	f000 fbb8 	bl	800ebac <abort>
 800e43c:	4b04      	ldr	r3, [pc, #16]	@ (800e450 <__assert_func+0x38>)
 800e43e:	461c      	mov	r4, r3
 800e440:	e7f3      	b.n	800e42a <__assert_func+0x12>
 800e442:	bf00      	nop
 800e444:	20000204 	.word	0x20000204
 800e448:	0800ee92 	.word	0x0800ee92
 800e44c:	0800ee9f 	.word	0x0800ee9f
 800e450:	0800eecd 	.word	0x0800eecd

0800e454 <_calloc_r>:
 800e454:	b570      	push	{r4, r5, r6, lr}
 800e456:	fba1 5402 	umull	r5, r4, r1, r2
 800e45a:	b934      	cbnz	r4, 800e46a <_calloc_r+0x16>
 800e45c:	4629      	mov	r1, r5
 800e45e:	f7fc f847 	bl	800a4f0 <_malloc_r>
 800e462:	4606      	mov	r6, r0
 800e464:	b928      	cbnz	r0, 800e472 <_calloc_r+0x1e>
 800e466:	4630      	mov	r0, r6
 800e468:	bd70      	pop	{r4, r5, r6, pc}
 800e46a:	220c      	movs	r2, #12
 800e46c:	6002      	str	r2, [r0, #0]
 800e46e:	2600      	movs	r6, #0
 800e470:	e7f9      	b.n	800e466 <_calloc_r+0x12>
 800e472:	462a      	mov	r2, r5
 800e474:	4621      	mov	r1, r4
 800e476:	f7fd f957 	bl	800b728 <memset>
 800e47a:	e7f4      	b.n	800e466 <_calloc_r+0x12>

0800e47c <rshift>:
 800e47c:	6903      	ldr	r3, [r0, #16]
 800e47e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e486:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e48a:	f100 0414 	add.w	r4, r0, #20
 800e48e:	dd45      	ble.n	800e51c <rshift+0xa0>
 800e490:	f011 011f 	ands.w	r1, r1, #31
 800e494:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e498:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e49c:	d10c      	bne.n	800e4b8 <rshift+0x3c>
 800e49e:	f100 0710 	add.w	r7, r0, #16
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	42b1      	cmp	r1, r6
 800e4a6:	d334      	bcc.n	800e512 <rshift+0x96>
 800e4a8:	1a9b      	subs	r3, r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	1eea      	subs	r2, r5, #3
 800e4ae:	4296      	cmp	r6, r2
 800e4b0:	bf38      	it	cc
 800e4b2:	2300      	movcc	r3, #0
 800e4b4:	4423      	add	r3, r4
 800e4b6:	e015      	b.n	800e4e4 <rshift+0x68>
 800e4b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e4bc:	f1c1 0820 	rsb	r8, r1, #32
 800e4c0:	40cf      	lsrs	r7, r1
 800e4c2:	f105 0e04 	add.w	lr, r5, #4
 800e4c6:	46a1      	mov	r9, r4
 800e4c8:	4576      	cmp	r6, lr
 800e4ca:	46f4      	mov	ip, lr
 800e4cc:	d815      	bhi.n	800e4fa <rshift+0x7e>
 800e4ce:	1a9a      	subs	r2, r3, r2
 800e4d0:	0092      	lsls	r2, r2, #2
 800e4d2:	3a04      	subs	r2, #4
 800e4d4:	3501      	adds	r5, #1
 800e4d6:	42ae      	cmp	r6, r5
 800e4d8:	bf38      	it	cc
 800e4da:	2200      	movcc	r2, #0
 800e4dc:	18a3      	adds	r3, r4, r2
 800e4de:	50a7      	str	r7, [r4, r2]
 800e4e0:	b107      	cbz	r7, 800e4e4 <rshift+0x68>
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	1b1a      	subs	r2, r3, r4
 800e4e6:	42a3      	cmp	r3, r4
 800e4e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e4ec:	bf08      	it	eq
 800e4ee:	2300      	moveq	r3, #0
 800e4f0:	6102      	str	r2, [r0, #16]
 800e4f2:	bf08      	it	eq
 800e4f4:	6143      	streq	r3, [r0, #20]
 800e4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4fa:	f8dc c000 	ldr.w	ip, [ip]
 800e4fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800e502:	ea4c 0707 	orr.w	r7, ip, r7
 800e506:	f849 7b04 	str.w	r7, [r9], #4
 800e50a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e50e:	40cf      	lsrs	r7, r1
 800e510:	e7da      	b.n	800e4c8 <rshift+0x4c>
 800e512:	f851 cb04 	ldr.w	ip, [r1], #4
 800e516:	f847 cf04 	str.w	ip, [r7, #4]!
 800e51a:	e7c3      	b.n	800e4a4 <rshift+0x28>
 800e51c:	4623      	mov	r3, r4
 800e51e:	e7e1      	b.n	800e4e4 <rshift+0x68>

0800e520 <__hexdig_fun>:
 800e520:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e524:	2b09      	cmp	r3, #9
 800e526:	d802      	bhi.n	800e52e <__hexdig_fun+0xe>
 800e528:	3820      	subs	r0, #32
 800e52a:	b2c0      	uxtb	r0, r0
 800e52c:	4770      	bx	lr
 800e52e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e532:	2b05      	cmp	r3, #5
 800e534:	d801      	bhi.n	800e53a <__hexdig_fun+0x1a>
 800e536:	3847      	subs	r0, #71	@ 0x47
 800e538:	e7f7      	b.n	800e52a <__hexdig_fun+0xa>
 800e53a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e53e:	2b05      	cmp	r3, #5
 800e540:	d801      	bhi.n	800e546 <__hexdig_fun+0x26>
 800e542:	3827      	subs	r0, #39	@ 0x27
 800e544:	e7f1      	b.n	800e52a <__hexdig_fun+0xa>
 800e546:	2000      	movs	r0, #0
 800e548:	4770      	bx	lr
	...

0800e54c <__gethex>:
 800e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e550:	b085      	sub	sp, #20
 800e552:	468a      	mov	sl, r1
 800e554:	9302      	str	r3, [sp, #8]
 800e556:	680b      	ldr	r3, [r1, #0]
 800e558:	9001      	str	r0, [sp, #4]
 800e55a:	4690      	mov	r8, r2
 800e55c:	1c9c      	adds	r4, r3, #2
 800e55e:	46a1      	mov	r9, r4
 800e560:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e564:	2830      	cmp	r0, #48	@ 0x30
 800e566:	d0fa      	beq.n	800e55e <__gethex+0x12>
 800e568:	eba9 0303 	sub.w	r3, r9, r3
 800e56c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e570:	f7ff ffd6 	bl	800e520 <__hexdig_fun>
 800e574:	4605      	mov	r5, r0
 800e576:	2800      	cmp	r0, #0
 800e578:	d168      	bne.n	800e64c <__gethex+0x100>
 800e57a:	49a0      	ldr	r1, [pc, #640]	@ (800e7fc <__gethex+0x2b0>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	4648      	mov	r0, r9
 800e580:	f7ff fefe 	bl	800e380 <strncmp>
 800e584:	4607      	mov	r7, r0
 800e586:	2800      	cmp	r0, #0
 800e588:	d167      	bne.n	800e65a <__gethex+0x10e>
 800e58a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e58e:	4626      	mov	r6, r4
 800e590:	f7ff ffc6 	bl	800e520 <__hexdig_fun>
 800e594:	2800      	cmp	r0, #0
 800e596:	d062      	beq.n	800e65e <__gethex+0x112>
 800e598:	4623      	mov	r3, r4
 800e59a:	7818      	ldrb	r0, [r3, #0]
 800e59c:	2830      	cmp	r0, #48	@ 0x30
 800e59e:	4699      	mov	r9, r3
 800e5a0:	f103 0301 	add.w	r3, r3, #1
 800e5a4:	d0f9      	beq.n	800e59a <__gethex+0x4e>
 800e5a6:	f7ff ffbb 	bl	800e520 <__hexdig_fun>
 800e5aa:	fab0 f580 	clz	r5, r0
 800e5ae:	096d      	lsrs	r5, r5, #5
 800e5b0:	f04f 0b01 	mov.w	fp, #1
 800e5b4:	464a      	mov	r2, r9
 800e5b6:	4616      	mov	r6, r2
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	7830      	ldrb	r0, [r6, #0]
 800e5bc:	f7ff ffb0 	bl	800e520 <__hexdig_fun>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	d1f8      	bne.n	800e5b6 <__gethex+0x6a>
 800e5c4:	498d      	ldr	r1, [pc, #564]	@ (800e7fc <__gethex+0x2b0>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f7ff fed9 	bl	800e380 <strncmp>
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d13f      	bne.n	800e652 <__gethex+0x106>
 800e5d2:	b944      	cbnz	r4, 800e5e6 <__gethex+0x9a>
 800e5d4:	1c74      	adds	r4, r6, #1
 800e5d6:	4622      	mov	r2, r4
 800e5d8:	4616      	mov	r6, r2
 800e5da:	3201      	adds	r2, #1
 800e5dc:	7830      	ldrb	r0, [r6, #0]
 800e5de:	f7ff ff9f 	bl	800e520 <__hexdig_fun>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	d1f8      	bne.n	800e5d8 <__gethex+0x8c>
 800e5e6:	1ba4      	subs	r4, r4, r6
 800e5e8:	00a7      	lsls	r7, r4, #2
 800e5ea:	7833      	ldrb	r3, [r6, #0]
 800e5ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e5f0:	2b50      	cmp	r3, #80	@ 0x50
 800e5f2:	d13e      	bne.n	800e672 <__gethex+0x126>
 800e5f4:	7873      	ldrb	r3, [r6, #1]
 800e5f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e5f8:	d033      	beq.n	800e662 <__gethex+0x116>
 800e5fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800e5fc:	d034      	beq.n	800e668 <__gethex+0x11c>
 800e5fe:	1c71      	adds	r1, r6, #1
 800e600:	2400      	movs	r4, #0
 800e602:	7808      	ldrb	r0, [r1, #0]
 800e604:	f7ff ff8c 	bl	800e520 <__hexdig_fun>
 800e608:	1e43      	subs	r3, r0, #1
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b18      	cmp	r3, #24
 800e60e:	d830      	bhi.n	800e672 <__gethex+0x126>
 800e610:	f1a0 0210 	sub.w	r2, r0, #16
 800e614:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e618:	f7ff ff82 	bl	800e520 <__hexdig_fun>
 800e61c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e620:	fa5f fc8c 	uxtb.w	ip, ip
 800e624:	f1bc 0f18 	cmp.w	ip, #24
 800e628:	f04f 030a 	mov.w	r3, #10
 800e62c:	d91e      	bls.n	800e66c <__gethex+0x120>
 800e62e:	b104      	cbz	r4, 800e632 <__gethex+0xe6>
 800e630:	4252      	negs	r2, r2
 800e632:	4417      	add	r7, r2
 800e634:	f8ca 1000 	str.w	r1, [sl]
 800e638:	b1ed      	cbz	r5, 800e676 <__gethex+0x12a>
 800e63a:	f1bb 0f00 	cmp.w	fp, #0
 800e63e:	bf0c      	ite	eq
 800e640:	2506      	moveq	r5, #6
 800e642:	2500      	movne	r5, #0
 800e644:	4628      	mov	r0, r5
 800e646:	b005      	add	sp, #20
 800e648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64c:	2500      	movs	r5, #0
 800e64e:	462c      	mov	r4, r5
 800e650:	e7b0      	b.n	800e5b4 <__gethex+0x68>
 800e652:	2c00      	cmp	r4, #0
 800e654:	d1c7      	bne.n	800e5e6 <__gethex+0x9a>
 800e656:	4627      	mov	r7, r4
 800e658:	e7c7      	b.n	800e5ea <__gethex+0x9e>
 800e65a:	464e      	mov	r6, r9
 800e65c:	462f      	mov	r7, r5
 800e65e:	2501      	movs	r5, #1
 800e660:	e7c3      	b.n	800e5ea <__gethex+0x9e>
 800e662:	2400      	movs	r4, #0
 800e664:	1cb1      	adds	r1, r6, #2
 800e666:	e7cc      	b.n	800e602 <__gethex+0xb6>
 800e668:	2401      	movs	r4, #1
 800e66a:	e7fb      	b.n	800e664 <__gethex+0x118>
 800e66c:	fb03 0002 	mla	r0, r3, r2, r0
 800e670:	e7ce      	b.n	800e610 <__gethex+0xc4>
 800e672:	4631      	mov	r1, r6
 800e674:	e7de      	b.n	800e634 <__gethex+0xe8>
 800e676:	eba6 0309 	sub.w	r3, r6, r9
 800e67a:	3b01      	subs	r3, #1
 800e67c:	4629      	mov	r1, r5
 800e67e:	2b07      	cmp	r3, #7
 800e680:	dc0a      	bgt.n	800e698 <__gethex+0x14c>
 800e682:	9801      	ldr	r0, [sp, #4]
 800e684:	f7fd ff8a 	bl	800c59c <_Balloc>
 800e688:	4604      	mov	r4, r0
 800e68a:	b940      	cbnz	r0, 800e69e <__gethex+0x152>
 800e68c:	4b5c      	ldr	r3, [pc, #368]	@ (800e800 <__gethex+0x2b4>)
 800e68e:	4602      	mov	r2, r0
 800e690:	21e4      	movs	r1, #228	@ 0xe4
 800e692:	485c      	ldr	r0, [pc, #368]	@ (800e804 <__gethex+0x2b8>)
 800e694:	f7ff fec0 	bl	800e418 <__assert_func>
 800e698:	3101      	adds	r1, #1
 800e69a:	105b      	asrs	r3, r3, #1
 800e69c:	e7ef      	b.n	800e67e <__gethex+0x132>
 800e69e:	f100 0a14 	add.w	sl, r0, #20
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	4655      	mov	r5, sl
 800e6a6:	469b      	mov	fp, r3
 800e6a8:	45b1      	cmp	r9, r6
 800e6aa:	d337      	bcc.n	800e71c <__gethex+0x1d0>
 800e6ac:	f845 bb04 	str.w	fp, [r5], #4
 800e6b0:	eba5 050a 	sub.w	r5, r5, sl
 800e6b4:	10ad      	asrs	r5, r5, #2
 800e6b6:	6125      	str	r5, [r4, #16]
 800e6b8:	4658      	mov	r0, fp
 800e6ba:	f7fe f861 	bl	800c780 <__hi0bits>
 800e6be:	016d      	lsls	r5, r5, #5
 800e6c0:	f8d8 6000 	ldr.w	r6, [r8]
 800e6c4:	1a2d      	subs	r5, r5, r0
 800e6c6:	42b5      	cmp	r5, r6
 800e6c8:	dd54      	ble.n	800e774 <__gethex+0x228>
 800e6ca:	1bad      	subs	r5, r5, r6
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f7fe fbed 	bl	800ceae <__any_on>
 800e6d4:	4681      	mov	r9, r0
 800e6d6:	b178      	cbz	r0, 800e6f8 <__gethex+0x1ac>
 800e6d8:	1e6b      	subs	r3, r5, #1
 800e6da:	1159      	asrs	r1, r3, #5
 800e6dc:	f003 021f 	and.w	r2, r3, #31
 800e6e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e6e4:	f04f 0901 	mov.w	r9, #1
 800e6e8:	fa09 f202 	lsl.w	r2, r9, r2
 800e6ec:	420a      	tst	r2, r1
 800e6ee:	d003      	beq.n	800e6f8 <__gethex+0x1ac>
 800e6f0:	454b      	cmp	r3, r9
 800e6f2:	dc36      	bgt.n	800e762 <__gethex+0x216>
 800e6f4:	f04f 0902 	mov.w	r9, #2
 800e6f8:	4629      	mov	r1, r5
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff febe 	bl	800e47c <rshift>
 800e700:	442f      	add	r7, r5
 800e702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e706:	42bb      	cmp	r3, r7
 800e708:	da42      	bge.n	800e790 <__gethex+0x244>
 800e70a:	9801      	ldr	r0, [sp, #4]
 800e70c:	4621      	mov	r1, r4
 800e70e:	f7fd ff85 	bl	800c61c <_Bfree>
 800e712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e714:	2300      	movs	r3, #0
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	25a3      	movs	r5, #163	@ 0xa3
 800e71a:	e793      	b.n	800e644 <__gethex+0xf8>
 800e71c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e720:	2a2e      	cmp	r2, #46	@ 0x2e
 800e722:	d012      	beq.n	800e74a <__gethex+0x1fe>
 800e724:	2b20      	cmp	r3, #32
 800e726:	d104      	bne.n	800e732 <__gethex+0x1e6>
 800e728:	f845 bb04 	str.w	fp, [r5], #4
 800e72c:	f04f 0b00 	mov.w	fp, #0
 800e730:	465b      	mov	r3, fp
 800e732:	7830      	ldrb	r0, [r6, #0]
 800e734:	9303      	str	r3, [sp, #12]
 800e736:	f7ff fef3 	bl	800e520 <__hexdig_fun>
 800e73a:	9b03      	ldr	r3, [sp, #12]
 800e73c:	f000 000f 	and.w	r0, r0, #15
 800e740:	4098      	lsls	r0, r3
 800e742:	ea4b 0b00 	orr.w	fp, fp, r0
 800e746:	3304      	adds	r3, #4
 800e748:	e7ae      	b.n	800e6a8 <__gethex+0x15c>
 800e74a:	45b1      	cmp	r9, r6
 800e74c:	d8ea      	bhi.n	800e724 <__gethex+0x1d8>
 800e74e:	492b      	ldr	r1, [pc, #172]	@ (800e7fc <__gethex+0x2b0>)
 800e750:	9303      	str	r3, [sp, #12]
 800e752:	2201      	movs	r2, #1
 800e754:	4630      	mov	r0, r6
 800e756:	f7ff fe13 	bl	800e380 <strncmp>
 800e75a:	9b03      	ldr	r3, [sp, #12]
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d1e1      	bne.n	800e724 <__gethex+0x1d8>
 800e760:	e7a2      	b.n	800e6a8 <__gethex+0x15c>
 800e762:	1ea9      	subs	r1, r5, #2
 800e764:	4620      	mov	r0, r4
 800e766:	f7fe fba2 	bl	800ceae <__any_on>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d0c2      	beq.n	800e6f4 <__gethex+0x1a8>
 800e76e:	f04f 0903 	mov.w	r9, #3
 800e772:	e7c1      	b.n	800e6f8 <__gethex+0x1ac>
 800e774:	da09      	bge.n	800e78a <__gethex+0x23e>
 800e776:	1b75      	subs	r5, r6, r5
 800e778:	4621      	mov	r1, r4
 800e77a:	9801      	ldr	r0, [sp, #4]
 800e77c:	462a      	mov	r2, r5
 800e77e:	f7fe f95d 	bl	800ca3c <__lshift>
 800e782:	1b7f      	subs	r7, r7, r5
 800e784:	4604      	mov	r4, r0
 800e786:	f100 0a14 	add.w	sl, r0, #20
 800e78a:	f04f 0900 	mov.w	r9, #0
 800e78e:	e7b8      	b.n	800e702 <__gethex+0x1b6>
 800e790:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e794:	42bd      	cmp	r5, r7
 800e796:	dd6f      	ble.n	800e878 <__gethex+0x32c>
 800e798:	1bed      	subs	r5, r5, r7
 800e79a:	42ae      	cmp	r6, r5
 800e79c:	dc34      	bgt.n	800e808 <__gethex+0x2bc>
 800e79e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d022      	beq.n	800e7ec <__gethex+0x2a0>
 800e7a6:	2b03      	cmp	r3, #3
 800e7a8:	d024      	beq.n	800e7f4 <__gethex+0x2a8>
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d115      	bne.n	800e7da <__gethex+0x28e>
 800e7ae:	42ae      	cmp	r6, r5
 800e7b0:	d113      	bne.n	800e7da <__gethex+0x28e>
 800e7b2:	2e01      	cmp	r6, #1
 800e7b4:	d10b      	bne.n	800e7ce <__gethex+0x282>
 800e7b6:	9a02      	ldr	r2, [sp, #8]
 800e7b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	2301      	movs	r3, #1
 800e7c0:	6123      	str	r3, [r4, #16]
 800e7c2:	f8ca 3000 	str.w	r3, [sl]
 800e7c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7c8:	2562      	movs	r5, #98	@ 0x62
 800e7ca:	601c      	str	r4, [r3, #0]
 800e7cc:	e73a      	b.n	800e644 <__gethex+0xf8>
 800e7ce:	1e71      	subs	r1, r6, #1
 800e7d0:	4620      	mov	r0, r4
 800e7d2:	f7fe fb6c 	bl	800ceae <__any_on>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d1ed      	bne.n	800e7b6 <__gethex+0x26a>
 800e7da:	9801      	ldr	r0, [sp, #4]
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f7fd ff1d 	bl	800c61c <_Bfree>
 800e7e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	2550      	movs	r5, #80	@ 0x50
 800e7ea:	e72b      	b.n	800e644 <__gethex+0xf8>
 800e7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1f3      	bne.n	800e7da <__gethex+0x28e>
 800e7f2:	e7e0      	b.n	800e7b6 <__gethex+0x26a>
 800e7f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1dd      	bne.n	800e7b6 <__gethex+0x26a>
 800e7fa:	e7ee      	b.n	800e7da <__gethex+0x28e>
 800e7fc:	0800ee77 	.word	0x0800ee77
 800e800:	0800ee0d 	.word	0x0800ee0d
 800e804:	0800eece 	.word	0x0800eece
 800e808:	1e6f      	subs	r7, r5, #1
 800e80a:	f1b9 0f00 	cmp.w	r9, #0
 800e80e:	d130      	bne.n	800e872 <__gethex+0x326>
 800e810:	b127      	cbz	r7, 800e81c <__gethex+0x2d0>
 800e812:	4639      	mov	r1, r7
 800e814:	4620      	mov	r0, r4
 800e816:	f7fe fb4a 	bl	800ceae <__any_on>
 800e81a:	4681      	mov	r9, r0
 800e81c:	117a      	asrs	r2, r7, #5
 800e81e:	2301      	movs	r3, #1
 800e820:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e824:	f007 071f 	and.w	r7, r7, #31
 800e828:	40bb      	lsls	r3, r7
 800e82a:	4213      	tst	r3, r2
 800e82c:	4629      	mov	r1, r5
 800e82e:	4620      	mov	r0, r4
 800e830:	bf18      	it	ne
 800e832:	f049 0902 	orrne.w	r9, r9, #2
 800e836:	f7ff fe21 	bl	800e47c <rshift>
 800e83a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e83e:	1b76      	subs	r6, r6, r5
 800e840:	2502      	movs	r5, #2
 800e842:	f1b9 0f00 	cmp.w	r9, #0
 800e846:	d047      	beq.n	800e8d8 <__gethex+0x38c>
 800e848:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	d015      	beq.n	800e87c <__gethex+0x330>
 800e850:	2b03      	cmp	r3, #3
 800e852:	d017      	beq.n	800e884 <__gethex+0x338>
 800e854:	2b01      	cmp	r3, #1
 800e856:	d109      	bne.n	800e86c <__gethex+0x320>
 800e858:	f019 0f02 	tst.w	r9, #2
 800e85c:	d006      	beq.n	800e86c <__gethex+0x320>
 800e85e:	f8da 3000 	ldr.w	r3, [sl]
 800e862:	ea49 0903 	orr.w	r9, r9, r3
 800e866:	f019 0f01 	tst.w	r9, #1
 800e86a:	d10e      	bne.n	800e88a <__gethex+0x33e>
 800e86c:	f045 0510 	orr.w	r5, r5, #16
 800e870:	e032      	b.n	800e8d8 <__gethex+0x38c>
 800e872:	f04f 0901 	mov.w	r9, #1
 800e876:	e7d1      	b.n	800e81c <__gethex+0x2d0>
 800e878:	2501      	movs	r5, #1
 800e87a:	e7e2      	b.n	800e842 <__gethex+0x2f6>
 800e87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e87e:	f1c3 0301 	rsb	r3, r3, #1
 800e882:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0f0      	beq.n	800e86c <__gethex+0x320>
 800e88a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e88e:	f104 0314 	add.w	r3, r4, #20
 800e892:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e896:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e89a:	f04f 0c00 	mov.w	ip, #0
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e8a8:	d01b      	beq.n	800e8e2 <__gethex+0x396>
 800e8aa:	3201      	adds	r2, #1
 800e8ac:	6002      	str	r2, [r0, #0]
 800e8ae:	2d02      	cmp	r5, #2
 800e8b0:	f104 0314 	add.w	r3, r4, #20
 800e8b4:	d13c      	bne.n	800e930 <__gethex+0x3e4>
 800e8b6:	f8d8 2000 	ldr.w	r2, [r8]
 800e8ba:	3a01      	subs	r2, #1
 800e8bc:	42b2      	cmp	r2, r6
 800e8be:	d109      	bne.n	800e8d4 <__gethex+0x388>
 800e8c0:	1171      	asrs	r1, r6, #5
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8c8:	f006 061f 	and.w	r6, r6, #31
 800e8cc:	fa02 f606 	lsl.w	r6, r2, r6
 800e8d0:	421e      	tst	r6, r3
 800e8d2:	d13a      	bne.n	800e94a <__gethex+0x3fe>
 800e8d4:	f045 0520 	orr.w	r5, r5, #32
 800e8d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8da:	601c      	str	r4, [r3, #0]
 800e8dc:	9b02      	ldr	r3, [sp, #8]
 800e8de:	601f      	str	r7, [r3, #0]
 800e8e0:	e6b0      	b.n	800e644 <__gethex+0xf8>
 800e8e2:	4299      	cmp	r1, r3
 800e8e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e8e8:	d8d9      	bhi.n	800e89e <__gethex+0x352>
 800e8ea:	68a3      	ldr	r3, [r4, #8]
 800e8ec:	459b      	cmp	fp, r3
 800e8ee:	db17      	blt.n	800e920 <__gethex+0x3d4>
 800e8f0:	6861      	ldr	r1, [r4, #4]
 800e8f2:	9801      	ldr	r0, [sp, #4]
 800e8f4:	3101      	adds	r1, #1
 800e8f6:	f7fd fe51 	bl	800c59c <_Balloc>
 800e8fa:	4681      	mov	r9, r0
 800e8fc:	b918      	cbnz	r0, 800e906 <__gethex+0x3ba>
 800e8fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e968 <__gethex+0x41c>)
 800e900:	4602      	mov	r2, r0
 800e902:	2184      	movs	r1, #132	@ 0x84
 800e904:	e6c5      	b.n	800e692 <__gethex+0x146>
 800e906:	6922      	ldr	r2, [r4, #16]
 800e908:	3202      	adds	r2, #2
 800e90a:	f104 010c 	add.w	r1, r4, #12
 800e90e:	0092      	lsls	r2, r2, #2
 800e910:	300c      	adds	r0, #12
 800e912:	f7ff fd69 	bl	800e3e8 <memcpy>
 800e916:	4621      	mov	r1, r4
 800e918:	9801      	ldr	r0, [sp, #4]
 800e91a:	f7fd fe7f 	bl	800c61c <_Bfree>
 800e91e:	464c      	mov	r4, r9
 800e920:	6923      	ldr	r3, [r4, #16]
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e928:	6122      	str	r2, [r4, #16]
 800e92a:	2201      	movs	r2, #1
 800e92c:	615a      	str	r2, [r3, #20]
 800e92e:	e7be      	b.n	800e8ae <__gethex+0x362>
 800e930:	6922      	ldr	r2, [r4, #16]
 800e932:	455a      	cmp	r2, fp
 800e934:	dd0b      	ble.n	800e94e <__gethex+0x402>
 800e936:	2101      	movs	r1, #1
 800e938:	4620      	mov	r0, r4
 800e93a:	f7ff fd9f 	bl	800e47c <rshift>
 800e93e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e942:	3701      	adds	r7, #1
 800e944:	42bb      	cmp	r3, r7
 800e946:	f6ff aee0 	blt.w	800e70a <__gethex+0x1be>
 800e94a:	2501      	movs	r5, #1
 800e94c:	e7c2      	b.n	800e8d4 <__gethex+0x388>
 800e94e:	f016 061f 	ands.w	r6, r6, #31
 800e952:	d0fa      	beq.n	800e94a <__gethex+0x3fe>
 800e954:	4453      	add	r3, sl
 800e956:	f1c6 0620 	rsb	r6, r6, #32
 800e95a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e95e:	f7fd ff0f 	bl	800c780 <__hi0bits>
 800e962:	42b0      	cmp	r0, r6
 800e964:	dbe7      	blt.n	800e936 <__gethex+0x3ea>
 800e966:	e7f0      	b.n	800e94a <__gethex+0x3fe>
 800e968:	0800ee0d 	.word	0x0800ee0d

0800e96c <L_shift>:
 800e96c:	f1c2 0208 	rsb	r2, r2, #8
 800e970:	0092      	lsls	r2, r2, #2
 800e972:	b570      	push	{r4, r5, r6, lr}
 800e974:	f1c2 0620 	rsb	r6, r2, #32
 800e978:	6843      	ldr	r3, [r0, #4]
 800e97a:	6804      	ldr	r4, [r0, #0]
 800e97c:	fa03 f506 	lsl.w	r5, r3, r6
 800e980:	432c      	orrs	r4, r5
 800e982:	40d3      	lsrs	r3, r2
 800e984:	6004      	str	r4, [r0, #0]
 800e986:	f840 3f04 	str.w	r3, [r0, #4]!
 800e98a:	4288      	cmp	r0, r1
 800e98c:	d3f4      	bcc.n	800e978 <L_shift+0xc>
 800e98e:	bd70      	pop	{r4, r5, r6, pc}

0800e990 <__match>:
 800e990:	b530      	push	{r4, r5, lr}
 800e992:	6803      	ldr	r3, [r0, #0]
 800e994:	3301      	adds	r3, #1
 800e996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e99a:	b914      	cbnz	r4, 800e9a2 <__match+0x12>
 800e99c:	6003      	str	r3, [r0, #0]
 800e99e:	2001      	movs	r0, #1
 800e9a0:	bd30      	pop	{r4, r5, pc}
 800e9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e9aa:	2d19      	cmp	r5, #25
 800e9ac:	bf98      	it	ls
 800e9ae:	3220      	addls	r2, #32
 800e9b0:	42a2      	cmp	r2, r4
 800e9b2:	d0f0      	beq.n	800e996 <__match+0x6>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	e7f3      	b.n	800e9a0 <__match+0x10>

0800e9b8 <__hexnan>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	680b      	ldr	r3, [r1, #0]
 800e9be:	6801      	ldr	r1, [r0, #0]
 800e9c0:	115e      	asrs	r6, r3, #5
 800e9c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e9c6:	f013 031f 	ands.w	r3, r3, #31
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	bf18      	it	ne
 800e9ce:	3604      	addne	r6, #4
 800e9d0:	2500      	movs	r5, #0
 800e9d2:	1f37      	subs	r7, r6, #4
 800e9d4:	4682      	mov	sl, r0
 800e9d6:	4690      	mov	r8, r2
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	f846 5c04 	str.w	r5, [r6, #-4]
 800e9de:	46b9      	mov	r9, r7
 800e9e0:	463c      	mov	r4, r7
 800e9e2:	9502      	str	r5, [sp, #8]
 800e9e4:	46ab      	mov	fp, r5
 800e9e6:	784a      	ldrb	r2, [r1, #1]
 800e9e8:	1c4b      	adds	r3, r1, #1
 800e9ea:	9303      	str	r3, [sp, #12]
 800e9ec:	b342      	cbz	r2, 800ea40 <__hexnan+0x88>
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	9105      	str	r1, [sp, #20]
 800e9f2:	9204      	str	r2, [sp, #16]
 800e9f4:	f7ff fd94 	bl	800e520 <__hexdig_fun>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d151      	bne.n	800eaa0 <__hexnan+0xe8>
 800e9fc:	9a04      	ldr	r2, [sp, #16]
 800e9fe:	9905      	ldr	r1, [sp, #20]
 800ea00:	2a20      	cmp	r2, #32
 800ea02:	d818      	bhi.n	800ea36 <__hexnan+0x7e>
 800ea04:	9b02      	ldr	r3, [sp, #8]
 800ea06:	459b      	cmp	fp, r3
 800ea08:	dd13      	ble.n	800ea32 <__hexnan+0x7a>
 800ea0a:	454c      	cmp	r4, r9
 800ea0c:	d206      	bcs.n	800ea1c <__hexnan+0x64>
 800ea0e:	2d07      	cmp	r5, #7
 800ea10:	dc04      	bgt.n	800ea1c <__hexnan+0x64>
 800ea12:	462a      	mov	r2, r5
 800ea14:	4649      	mov	r1, r9
 800ea16:	4620      	mov	r0, r4
 800ea18:	f7ff ffa8 	bl	800e96c <L_shift>
 800ea1c:	4544      	cmp	r4, r8
 800ea1e:	d952      	bls.n	800eac6 <__hexnan+0x10e>
 800ea20:	2300      	movs	r3, #0
 800ea22:	f1a4 0904 	sub.w	r9, r4, #4
 800ea26:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea2a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea2e:	464c      	mov	r4, r9
 800ea30:	461d      	mov	r5, r3
 800ea32:	9903      	ldr	r1, [sp, #12]
 800ea34:	e7d7      	b.n	800e9e6 <__hexnan+0x2e>
 800ea36:	2a29      	cmp	r2, #41	@ 0x29
 800ea38:	d157      	bne.n	800eaea <__hexnan+0x132>
 800ea3a:	3102      	adds	r1, #2
 800ea3c:	f8ca 1000 	str.w	r1, [sl]
 800ea40:	f1bb 0f00 	cmp.w	fp, #0
 800ea44:	d051      	beq.n	800eaea <__hexnan+0x132>
 800ea46:	454c      	cmp	r4, r9
 800ea48:	d206      	bcs.n	800ea58 <__hexnan+0xa0>
 800ea4a:	2d07      	cmp	r5, #7
 800ea4c:	dc04      	bgt.n	800ea58 <__hexnan+0xa0>
 800ea4e:	462a      	mov	r2, r5
 800ea50:	4649      	mov	r1, r9
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7ff ff8a 	bl	800e96c <L_shift>
 800ea58:	4544      	cmp	r4, r8
 800ea5a:	d936      	bls.n	800eaca <__hexnan+0x112>
 800ea5c:	f1a8 0204 	sub.w	r2, r8, #4
 800ea60:	4623      	mov	r3, r4
 800ea62:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea66:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea6a:	429f      	cmp	r7, r3
 800ea6c:	d2f9      	bcs.n	800ea62 <__hexnan+0xaa>
 800ea6e:	1b3b      	subs	r3, r7, r4
 800ea70:	f023 0303 	bic.w	r3, r3, #3
 800ea74:	3304      	adds	r3, #4
 800ea76:	3401      	adds	r4, #1
 800ea78:	3e03      	subs	r6, #3
 800ea7a:	42b4      	cmp	r4, r6
 800ea7c:	bf88      	it	hi
 800ea7e:	2304      	movhi	r3, #4
 800ea80:	4443      	add	r3, r8
 800ea82:	2200      	movs	r2, #0
 800ea84:	f843 2b04 	str.w	r2, [r3], #4
 800ea88:	429f      	cmp	r7, r3
 800ea8a:	d2fb      	bcs.n	800ea84 <__hexnan+0xcc>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	b91b      	cbnz	r3, 800ea98 <__hexnan+0xe0>
 800ea90:	4547      	cmp	r7, r8
 800ea92:	d128      	bne.n	800eae6 <__hexnan+0x12e>
 800ea94:	2301      	movs	r3, #1
 800ea96:	603b      	str	r3, [r7, #0]
 800ea98:	2005      	movs	r0, #5
 800ea9a:	b007      	add	sp, #28
 800ea9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa0:	3501      	adds	r5, #1
 800eaa2:	2d08      	cmp	r5, #8
 800eaa4:	f10b 0b01 	add.w	fp, fp, #1
 800eaa8:	dd06      	ble.n	800eab8 <__hexnan+0x100>
 800eaaa:	4544      	cmp	r4, r8
 800eaac:	d9c1      	bls.n	800ea32 <__hexnan+0x7a>
 800eaae:	2300      	movs	r3, #0
 800eab0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eab4:	2501      	movs	r5, #1
 800eab6:	3c04      	subs	r4, #4
 800eab8:	6822      	ldr	r2, [r4, #0]
 800eaba:	f000 000f 	and.w	r0, r0, #15
 800eabe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eac2:	6020      	str	r0, [r4, #0]
 800eac4:	e7b5      	b.n	800ea32 <__hexnan+0x7a>
 800eac6:	2508      	movs	r5, #8
 800eac8:	e7b3      	b.n	800ea32 <__hexnan+0x7a>
 800eaca:	9b01      	ldr	r3, [sp, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0dd      	beq.n	800ea8c <__hexnan+0xd4>
 800ead0:	f1c3 0320 	rsb	r3, r3, #32
 800ead4:	f04f 32ff 	mov.w	r2, #4294967295
 800ead8:	40da      	lsrs	r2, r3
 800eada:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eade:	4013      	ands	r3, r2
 800eae0:	f846 3c04 	str.w	r3, [r6, #-4]
 800eae4:	e7d2      	b.n	800ea8c <__hexnan+0xd4>
 800eae6:	3f04      	subs	r7, #4
 800eae8:	e7d0      	b.n	800ea8c <__hexnan+0xd4>
 800eaea:	2004      	movs	r0, #4
 800eaec:	e7d5      	b.n	800ea9a <__hexnan+0xe2>

0800eaee <__ascii_mbtowc>:
 800eaee:	b082      	sub	sp, #8
 800eaf0:	b901      	cbnz	r1, 800eaf4 <__ascii_mbtowc+0x6>
 800eaf2:	a901      	add	r1, sp, #4
 800eaf4:	b142      	cbz	r2, 800eb08 <__ascii_mbtowc+0x1a>
 800eaf6:	b14b      	cbz	r3, 800eb0c <__ascii_mbtowc+0x1e>
 800eaf8:	7813      	ldrb	r3, [r2, #0]
 800eafa:	600b      	str	r3, [r1, #0]
 800eafc:	7812      	ldrb	r2, [r2, #0]
 800eafe:	1e10      	subs	r0, r2, #0
 800eb00:	bf18      	it	ne
 800eb02:	2001      	movne	r0, #1
 800eb04:	b002      	add	sp, #8
 800eb06:	4770      	bx	lr
 800eb08:	4610      	mov	r0, r2
 800eb0a:	e7fb      	b.n	800eb04 <__ascii_mbtowc+0x16>
 800eb0c:	f06f 0001 	mvn.w	r0, #1
 800eb10:	e7f8      	b.n	800eb04 <__ascii_mbtowc+0x16>

0800eb12 <_realloc_r>:
 800eb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb16:	4607      	mov	r7, r0
 800eb18:	4614      	mov	r4, r2
 800eb1a:	460d      	mov	r5, r1
 800eb1c:	b921      	cbnz	r1, 800eb28 <_realloc_r+0x16>
 800eb1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb22:	4611      	mov	r1, r2
 800eb24:	f7fb bce4 	b.w	800a4f0 <_malloc_r>
 800eb28:	b92a      	cbnz	r2, 800eb36 <_realloc_r+0x24>
 800eb2a:	f7fd fced 	bl	800c508 <_free_r>
 800eb2e:	4625      	mov	r5, r4
 800eb30:	4628      	mov	r0, r5
 800eb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb36:	f000 f840 	bl	800ebba <_malloc_usable_size_r>
 800eb3a:	4284      	cmp	r4, r0
 800eb3c:	4606      	mov	r6, r0
 800eb3e:	d802      	bhi.n	800eb46 <_realloc_r+0x34>
 800eb40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb44:	d8f4      	bhi.n	800eb30 <_realloc_r+0x1e>
 800eb46:	4621      	mov	r1, r4
 800eb48:	4638      	mov	r0, r7
 800eb4a:	f7fb fcd1 	bl	800a4f0 <_malloc_r>
 800eb4e:	4680      	mov	r8, r0
 800eb50:	b908      	cbnz	r0, 800eb56 <_realloc_r+0x44>
 800eb52:	4645      	mov	r5, r8
 800eb54:	e7ec      	b.n	800eb30 <_realloc_r+0x1e>
 800eb56:	42b4      	cmp	r4, r6
 800eb58:	4622      	mov	r2, r4
 800eb5a:	4629      	mov	r1, r5
 800eb5c:	bf28      	it	cs
 800eb5e:	4632      	movcs	r2, r6
 800eb60:	f7ff fc42 	bl	800e3e8 <memcpy>
 800eb64:	4629      	mov	r1, r5
 800eb66:	4638      	mov	r0, r7
 800eb68:	f7fd fcce 	bl	800c508 <_free_r>
 800eb6c:	e7f1      	b.n	800eb52 <_realloc_r+0x40>

0800eb6e <__ascii_wctomb>:
 800eb6e:	4603      	mov	r3, r0
 800eb70:	4608      	mov	r0, r1
 800eb72:	b141      	cbz	r1, 800eb86 <__ascii_wctomb+0x18>
 800eb74:	2aff      	cmp	r2, #255	@ 0xff
 800eb76:	d904      	bls.n	800eb82 <__ascii_wctomb+0x14>
 800eb78:	228a      	movs	r2, #138	@ 0x8a
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	4770      	bx	lr
 800eb82:	700a      	strb	r2, [r1, #0]
 800eb84:	2001      	movs	r0, #1
 800eb86:	4770      	bx	lr

0800eb88 <fiprintf>:
 800eb88:	b40e      	push	{r1, r2, r3}
 800eb8a:	b503      	push	{r0, r1, lr}
 800eb8c:	4601      	mov	r1, r0
 800eb8e:	ab03      	add	r3, sp, #12
 800eb90:	4805      	ldr	r0, [pc, #20]	@ (800eba8 <fiprintf+0x20>)
 800eb92:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb96:	6800      	ldr	r0, [r0, #0]
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	f7ff f9b1 	bl	800df00 <_vfiprintf_r>
 800eb9e:	b002      	add	sp, #8
 800eba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eba4:	b003      	add	sp, #12
 800eba6:	4770      	bx	lr
 800eba8:	20000204 	.word	0x20000204

0800ebac <abort>:
 800ebac:	b508      	push	{r3, lr}
 800ebae:	2006      	movs	r0, #6
 800ebb0:	f000 f834 	bl	800ec1c <raise>
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	f7f2 ff6b 	bl	8001a90 <_exit>

0800ebba <_malloc_usable_size_r>:
 800ebba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebbe:	1f18      	subs	r0, r3, #4
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	bfbc      	itt	lt
 800ebc4:	580b      	ldrlt	r3, [r1, r0]
 800ebc6:	18c0      	addlt	r0, r0, r3
 800ebc8:	4770      	bx	lr

0800ebca <_raise_r>:
 800ebca:	291f      	cmp	r1, #31
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4605      	mov	r5, r0
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	d904      	bls.n	800ebde <_raise_r+0x14>
 800ebd4:	2316      	movs	r3, #22
 800ebd6:	6003      	str	r3, [r0, #0]
 800ebd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebdc:	bd38      	pop	{r3, r4, r5, pc}
 800ebde:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ebe0:	b112      	cbz	r2, 800ebe8 <_raise_r+0x1e>
 800ebe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebe6:	b94b      	cbnz	r3, 800ebfc <_raise_r+0x32>
 800ebe8:	4628      	mov	r0, r5
 800ebea:	f000 f831 	bl	800ec50 <_getpid_r>
 800ebee:	4622      	mov	r2, r4
 800ebf0:	4601      	mov	r1, r0
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebf8:	f000 b818 	b.w	800ec2c <_kill_r>
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d00a      	beq.n	800ec16 <_raise_r+0x4c>
 800ec00:	1c59      	adds	r1, r3, #1
 800ec02:	d103      	bne.n	800ec0c <_raise_r+0x42>
 800ec04:	2316      	movs	r3, #22
 800ec06:	6003      	str	r3, [r0, #0]
 800ec08:	2001      	movs	r0, #1
 800ec0a:	e7e7      	b.n	800ebdc <_raise_r+0x12>
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec12:	4620      	mov	r0, r4
 800ec14:	4798      	blx	r3
 800ec16:	2000      	movs	r0, #0
 800ec18:	e7e0      	b.n	800ebdc <_raise_r+0x12>
	...

0800ec1c <raise>:
 800ec1c:	4b02      	ldr	r3, [pc, #8]	@ (800ec28 <raise+0xc>)
 800ec1e:	4601      	mov	r1, r0
 800ec20:	6818      	ldr	r0, [r3, #0]
 800ec22:	f7ff bfd2 	b.w	800ebca <_raise_r>
 800ec26:	bf00      	nop
 800ec28:	20000204 	.word	0x20000204

0800ec2c <_kill_r>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	4d07      	ldr	r5, [pc, #28]	@ (800ec4c <_kill_r+0x20>)
 800ec30:	2300      	movs	r3, #0
 800ec32:	4604      	mov	r4, r0
 800ec34:	4608      	mov	r0, r1
 800ec36:	4611      	mov	r1, r2
 800ec38:	602b      	str	r3, [r5, #0]
 800ec3a:	f7f2 ff19 	bl	8001a70 <_kill>
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	d102      	bne.n	800ec48 <_kill_r+0x1c>
 800ec42:	682b      	ldr	r3, [r5, #0]
 800ec44:	b103      	cbz	r3, 800ec48 <_kill_r+0x1c>
 800ec46:	6023      	str	r3, [r4, #0]
 800ec48:	bd38      	pop	{r3, r4, r5, pc}
 800ec4a:	bf00      	nop
 800ec4c:	2000200c 	.word	0x2000200c

0800ec50 <_getpid_r>:
 800ec50:	f7f2 bf06 	b.w	8001a60 <_getpid>

0800ec54 <_init>:
 800ec54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec56:	bf00      	nop
 800ec58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5a:	bc08      	pop	{r3}
 800ec5c:	469e      	mov	lr, r3
 800ec5e:	4770      	bx	lr

0800ec60 <_fini>:
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	bf00      	nop
 800ec64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec66:	bc08      	pop	{r3}
 800ec68:	469e      	mov	lr, r3
 800ec6a:	4770      	bx	lr
